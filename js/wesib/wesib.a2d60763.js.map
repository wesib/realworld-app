{"version":3,"file":"wesib.a2d60763.js","sources":["../../../../wesib/src/boot/bootstrap-context.key.impl.ts","../../../../wesib/src/boot/bootstrap-context.ts","../../../../wesib/src/boot/bootstrap-default.ts","../../../../wesib/src/common/is-element.ts","../../../../wesib/src/common/meta-accessor.ts","../../../../wesib/src/feature/feature-def.ts","../../../../wesib/src/feature/feature.decorator.ts","../../../../wesib/src/feature/feature-context.ts","../../../../wesib/src/feature/loader/bootstrap-workbench.impl.ts","../../../../wesib/src/component/component-def.ts","../../../../wesib/src/component/component.decorator.ts","../../../../wesib/src/component/component-context.key.impl.ts","../../../../wesib/src/component/component-event.key.impl.ts","../../../../wesib/src/component/content-root.ts","../../../../wesib/src/component/state-updater.ts","../../../../wesib/src/component/component-context.ts","../../../../wesib/src/component/component-event.ts","../../../../wesib/src/component/component-property.decorator.ts","../../../../wesib/src/common/decorators.ts","../../../../wesib/src/boot/impl/bootstrap-context-registry.impl.ts","../../../../wesib/src/boot/impl/component-context-registry.impl.ts","../../../../wesib/src/boot/impl/definition-context-registry.impl.ts","../../../../wesib/src/boot/impl/post-def-setup.impl.ts","../../../../wesib/src/boot/globals/bootstrap-window.ts","../../../../wesib/src/boot/globals/bootstrap-root.ts","../../../../wesib/src/boot/globals/default-namespace-aliaser.ts","../../../../wesib/src/boot/globals/default-render-scheduler.ts","../../../../wesib/src/boot/globals/element-adapter.ts","../../../../wesib/src/boot/globals/element-observer.ts","../../../../wesib/src/boot/impl/definition-context.symbol.impl.ts","../../../../wesib/src/component/definition/custom-elements.ts","../../../../wesib/src/component/definition/definition.context.key.impl.ts","../../../../wesib/src/component/definition/element-def.ts","../../../../wesib/src/component/definition/definition-context.ts","../../../../wesib/src/boot/impl/component-context.impl.ts","../../../../wesib/src/boot/impl/component-mount.impl.ts","../../../../wesib/src/component/component-mount.ts","../../../../wesib/src/boot/impl/custom-element.impl.ts","../../../../wesib/src/boot/impl/when-component.impl.ts","../../../../wesib/src/boot/impl/definition-context.impl.ts","../../../../wesib/src/boot/impl/element-builder.impl.ts","../../../../wesib/src/feature/loader/component-registry.impl.ts","../../../../wesib/src/feature/loader/feature-context.impl.ts","../../../../wesib/src/feature/loader/feature-module.impl.ts","../../../../wesib/src/boot/impl/when-defined.impl.ts","../../../../wesib/src/boot/bootstrap/bootstrap-components.ts","../../../../wesib/src/feature/attributes/attribute-path.ts","../../../../wesib/src/feature/attributes/attribute-state-update.impl.ts","../../../../wesib/src/feature/attributes/property2attribute-name.ts","../../../../wesib/src/feature/attributes/attribute-descriptor.impl.ts","../../../../wesib/src/feature/attributes/attribute-registry.ts","../../../../wesib/src/feature/attributes/attribute.decorator.ts","../../../../wesib/src/feature/attributes/attribute-changed.decorator.ts","../../../../wesib/src/feature/attributes/attributes.decorator.ts","../../../../wesib/src/feature/state/component-state.ts","../../../../wesib/src/feature/state/state-property-path.ts","../../../../wesib/src/feature/state/state-property-update.impl.ts","../../../../wesib/src/feature/state/state-property.decorator.ts","../../../../wesib/src/feature/attributes/track-attribute.ts","../../../../wesib/src/feature/dom-properties/dom-property-registry.ts","../../../../wesib/src/feature/dom-properties/dom-property-path.ts","../../../../wesib/src/feature/dom-properties/dom-property-update.impl.ts","../../../../wesib/src/feature/dom-properties/dom-property.decorator.ts","../../../../wesib/src/feature/dom-properties/dom-property-descriptor.impl.ts","../../../../wesib/src/feature/render/render-def.ts","../../../../wesib/src/feature/render/element-render-ctl.impl.ts","../../../../wesib/src/feature/render/element-render-ctl.ts","../../../../wesib/src/feature/render/element-render-scheduler.ts","../../../../wesib/src/feature/render/render.decorator.ts","../../../../wesib/src/feature/shadow-dom/shadow-content-root.ts","../../../../wesib/src/feature/shadow-dom/shadow-dom-event.ts","../../../../wesib/src/feature/shadow-dom/shadow-root-builder.ts","../../../../wesib/src/feature/shadow-dom/attach-shadow.decorator.ts","../../../../wesib/src/wesib.ns.ts"],"sourcesContent":["import { SingleContextKey } from '@proc7ts/context-values';\nimport { BootstrapContext } from './bootstrap-context';\n\n/**\n * @internal\n */\nexport const BootstrapContext__key = (/*#__PURE__*/ new SingleContextKey<BootstrapContext>('bootstrap-context'));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues } from '@proc7ts/context-values';\nimport { OnEvent } from '@proc7ts/fun-events';\nimport { Class, SupplyPeer } from '@proc7ts/primitives';\nimport { ComponentClass, DefinitionContext } from '../component/definition';\nimport { FeatureRef } from '../feature';\nimport { BootstrapContext__key } from './bootstrap-context.key.impl';\n\n/**\n * Components bootstrap context.\n *\n * An instance of this class is passed to {@link FeatureDef.Options.init} method so that the feature can configure\n * itself.\n *\n * Extends `BootstrapValues` interface. The values could be {@link BootstrapSetup.provide pre-configured} in feature\n * definitions.\n *\n * @category Core\n */\nexport abstract class BootstrapContext extends ContextValues {\n\n  /**\n   * A key of bootstrap context value containing the bootstrap context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<BootstrapContext> {\n    return BootstrapContext__key;\n  }\n\n  /**\n   * An `OnEvent` sender of bootstrap readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete.\n   *\n   * If bootstrap is complete already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[BootstrapContext]>;\n\n  /**\n   * Allows to wait for component definition.\n   *\n   * This corresponds to `window.customElements.whenDefined()` method.\n   *\n   * @typeParam T - A type of component.\n   * @param componentType - Component class constructor.\n   *\n   * @return An `OnEvent` sender of definition context sent when the given `componentType` is registered.\n   */\n  abstract whenDefined<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionContext<T>]>;\n\n  /**\n   * Allows to loads the given `feature`.\n   *\n   * @param feature - The feature to load.\n   * @param user - The user of the feature. The feature reference will be dismissed once the user's supply is cut off.\n   *\n   * @returns  Loaded feature reference.\n   */\n  abstract load(feature: Class, user?: SupplyPeer): FeatureRef;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKeyDefault } from '@proc7ts/context-values';\nimport { BootstrapContext } from './bootstrap-context';\n\n/**\n * Provides a default value for bootstrap context key.\n *\n * @category Core\n * @typeParam TValue - Context value type.\n * @typeParam TKey - Context key type.\n * @param provide - A function accepting bootstrap context and target key as parameters, and returning either a default\n * value, or `null`/`undefined` if unknown.\n *\n * @returns A provider of default value for bootstrap context value key.\n */\nexport function bootstrapDefault<TValue, TKey extends ContextKey<any, any, any>>(\n    provide: (this: void, context: BootstrapContext, key: TKey) => TValue | null | undefined,\n): ContextKeyDefault<TValue, TKey> {\n  return (context, key): TValue | null | undefined => {\n\n    const bootstrapContext = context.get(BootstrapContext);\n\n    return context === bootstrapContext\n        ? provide(bootstrapContext, key)\n        : bootstrapContext.get(key) as TValue;\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Checks whether the given DOM node is element.\n *\n * @category Utility\n * @param node - A DOM node to check.\n *\n * @returns `true` is `node` is element, or `false` otherwise.\n */\nexport function isElement(node: Node): node is Element {\n  return node.nodeType === Node.ELEMENT_NODE;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class, superClassOf } from '@proc7ts/primitives';\n\n/**\n * @category Utility\n */\nexport abstract class MetaAccessor<TMeta, TSrc = TMeta> {\n\n  readonly symbol: symbol;\n\n  protected constructor(symbol: symbol) {\n    this.symbol = symbol;\n  }\n\n  own(type: Class): TMeta | undefined {\n    // eslint-disable-next-line no-prototype-builtins,@typescript-eslint/no-unsafe-member-access\n    return type.hasOwnProperty(this.symbol) ? (type as any)[this.symbol] as TMeta : undefined;\n  }\n\n  of(type: Class): TMeta | undefined {\n\n    const ownDef: TMeta | undefined = this.own(type);\n    const superType = superClassOf(type);\n    const superDef = superType && this.of(superType);\n\n    return ownDef ? (superDef ? this.merge([superDef, ownDef]) : ownDef) : superDef;\n  }\n\n  define<T extends Class>(type: T, sources: readonly TSrc[]): T {\n\n    const prevMeta = this.own(type);\n    const updates = sources.map(source => this.meta(source, type));\n    const newMeta: TMeta = this.merge(prevMeta ? [prevMeta, ...updates] : updates);\n\n    Object.defineProperty(\n        type,\n        this.symbol,\n        {\n          configurable: true,\n          value: newMeta,\n        },\n    );\n\n    return type;\n  }\n\n  abstract merge(metas: readonly TMeta[]): TMeta;\n\n  protected abstract meta(source: TSrc, type: Class): TMeta;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class, elementOrArray, extendSetOfElements, mergeFunctions, setOfElements } from '@proc7ts/primitives';\nimport { BootstrapSetup } from '../boot';\nimport { MetaAccessor } from '../common';\nimport { FeatureContext } from './feature-context';\n\n/**\n * A key of a property holding a feature definition within its class constructor.\n *\n * @category Core\n */\nexport const FeatureDef__symbol = (/*#__PURE__*/ Symbol('feature-def'));\n\n/**\n * Feature definition.\n *\n * This can be one of:\n * - feature definition options object,\n * - feature definition holder, or\n * - feature definition factory.\n *\n * @category Core\n */\nexport type FeatureDef =\n    | FeatureDef.Options\n    | FeatureDef.Holder\n    | FeatureDef.Factory;\n\n/**\n * @category Core\n */\nexport namespace FeatureDef {\n\n  /**\n   * Feature definition options.\n   */\n  export interface Options {\n\n    readonly [FeatureDef__symbol]?: undefined;\n\n    /**\n     * Features this one requires.\n     */\n    readonly needs?: Class | readonly Class[];\n\n    /**\n     * Features this one provides.\n     *\n     * The feature always provides itself.\n     */\n    readonly has?: Class | readonly Class[];\n\n    /**\n     * Sets up bootstrap.\n     *\n     * This method is called before bootstrap context created.\n     *\n     * @param setup - Bootstrap setup.\n     */\n    setup?(setup: BootstrapSetup): void;\n\n    /**\n     * Bootstraps this feature by calling the given bootstrap context constructed.\n     *\n     * @param context - Feature initialization context.\n     */\n    init?(context: FeatureContext): void;\n\n  }\n\n  /**\n   * Feature definition holder.\n   */\n  export interface Holder {\n\n    /**\n     * The feature definition this holder contains.\n     */\n    readonly [FeatureDef__symbol]: FeatureDef;\n\n  }\n\n  /**\n   * Feature definition factory.\n   */\n  export interface Factory {\n\n    /**\n     * Builds feature definition.\n     *\n     * @param featureType - A feature class constructor to build definition for.\n     *\n     * @returns Built feature definition.\n     */\n    [FeatureDef__symbol](featureType: Class): FeatureDef;\n\n  }\n\n}\n\n/**\n * @internal\n */\nclass FeatureMeta extends MetaAccessor<FeatureDef.Options, FeatureDef> {\n\n  constructor() {\n    super(FeatureDef__symbol);\n  }\n\n  merge(defs: readonly FeatureDef.Options[]): FeatureDef.Options {\n    return defs.reduce<FeatureDef.Options>(\n        (prev, def) => ({\n          needs: elementOrArray(extendSetOfElements(setOfElements(prev.needs), def.needs)),\n          has: elementOrArray(extendSetOfElements(setOfElements(prev.has), def.has)),\n          setup: mergeFunctions<[BootstrapSetup], void, Class>(prev.setup, def.setup),\n          init: mergeFunctions<[FeatureContext], void, Class>(prev.init, def.init),\n        }),\n        {},\n    );\n  }\n\n  meta(source: FeatureDef, type: Class): FeatureDef.Options {\n\n    const def = source[FeatureDef__symbol];\n\n    return def == null\n        ? source as FeatureDef.Options\n        : this.meta(\n            typeof def === 'function' ? (source as FeatureDef.Factory)[FeatureDef__symbol](type) : def,\n            type,\n        );\n  }\n\n}\n\n/**\n * @internal\n */\nconst featureMeta = (/*#__PURE__*/ new FeatureMeta());\n\n/**\n * @internal\n */\nconst noFeatureDef: FeatureDef.Factory = {\n  [FeatureDef__symbol]() {\n    return {};\n  },\n};\n\n/**\n * @category Core\n */\nexport const FeatureDef = {\n\n  /**\n   * Extracts feature definition options from its type.\n   *\n   * @param featureType - Target feature class constructor.\n   *\n   * @returns Feature definition options. May be empty when there is no feature definition found in the given\n   * `featureType`.\n   */\n  of(this: void, featureType: Class): FeatureDef.Options {\n    return featureMeta.of(featureType) || {};\n  },\n\n  /**\n   * Builds feature definition options for the given feature class.\n   *\n   * @param featureType - Target feature class constructor.\n   * @param def - A feature definition.\n   *\n   * @returns Feature definition options.\n   */\n  for(this: void, featureType: Class, def: FeatureDef): FeatureDef.Options {\n    return featureMeta.meta(def, featureType);\n  },\n\n  /**\n   * Merges multiple feature definition options.\n   *\n   * @param defs - Feature definition options to merge.\n   *\n   * @returns Merged feature definition options.\n   */\n  merge(this: void, ...defs: readonly FeatureDef.Options[]): FeatureDef.Options {\n    return featureMeta.merge(defs);\n  },\n\n  /**\n   * Merges multiple feature definitions.\n   *\n   * @param defs - Feature definitions to merge.\n   *\n   * @returns Merged feature definition.\n   */\n  all(this: void, ...defs: readonly FeatureDef[]): FeatureDef {\n    return defs.reduce(\n        (prev, def) => ({\n          [FeatureDef__symbol](featureType: Class) {\n            return FeatureDef.merge(\n                FeatureDef.for(featureType, prev),\n                FeatureDef.for(featureType, def),\n            );\n          },\n        }),\n        noFeatureDef,\n    );\n  },\n\n  /**\n   * Defines a feature.\n   *\n   * Either creates new or extends an existing feature definition and stores it under `[FeatureDef__symbol]` key.\n   *\n   * @typeParam T - Feature type.\n   * @param featureType - Feature class constructor.\n   * @param defs - Feature definitions.\n   *\n   * @returns The `type` instance.\n   */\n  define<T extends Class>(this: void, featureType: T, ...defs: readonly FeatureDef[]): T {\n    return featureMeta.define(featureType, defs);\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '@proc7ts/primitives';\nimport { TypedClassDecorator } from '../common';\nimport { FeatureDef } from './feature-def';\n\n/**\n * Feature class decorator.\n *\n * Decorate a class with this decorator to define it as a feature like this:\n * ```TypeScript\n * @Feature({ needs: [OtherFeature, MyComponent] })\n * class MyFeature {\n *   // ...\n * }\n * ```\n *\n * Such feature can be passed to {@link bootstrapComponents} function or referenced by other features.\n *\n * This is an alternative to direct call to {@link FeatureDef.define} method.\n *\n * @category Core\n * @typeParam T - A type of decorated feature class.\n * @param defs - Feature definitions.\n *\n * @returns A feature class decorator.\n */\nexport function Feature<T extends Class = any>(...defs: FeatureDef[]): TypedClassDecorator<T> {\n  return (type: T) => FeatureDef.define(type, ...defs);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValueSpec, SingleContextKey } from '@proc7ts/context-values';\nimport { OnEvent } from '@proc7ts/fun-events';\nimport { Class, Supply, SupplyPeer } from '@proc7ts/primitives';\nimport { BootstrapContext, BootstrapSetup } from '../boot';\nimport { ComponentContext } from '../component';\nimport { ComponentClass, DefinitionContext, DefinitionSetup } from '../component/definition';\nimport { FeatureRef } from './feature-ref';\n\n/**\n * @internal\n */\nconst FeatureContext__key = (/*#__PURE__*/ new SingleContextKey<FeatureContext>('feature-context'));\n\n/**\n * Feature initialization context.\n *\n * @category Core\n */\nexport abstract class FeatureContext\n    extends BootstrapContext\n    implements BootstrapSetup, SupplyPeer {\n\n  /**\n   * A key of feature context value containing the feature context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<FeatureContext> {\n    return FeatureContext__key;\n  }\n\n  /**\n   * Feature class this context is created for.\n   */\n  abstract readonly feature: Class;\n\n  /**\n   * An `OnEvent` sender of feature readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete and the feature is loaded.\n   *\n   * If the above conditions satisfied already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[FeatureContext]>;\n\n  /**\n   * An `OnEvent` sender of component definition events.\n   *\n   * The registered receiver will be notified when new component class is defined, but before its custom element class\n   * constructed.\n   */\n  abstract readonly onDefinition: OnEvent<[DefinitionContext]>;\n\n  /**\n   * An `OnEvent` sender of component construction events.\n   *\n   * The registered receiver will be notified right before component is constructed.\n   */\n  abstract readonly onComponent: OnEvent<[ComponentContext]>;\n\n  /**\n   * Feature supply.\n   *\n   * Cut off once feature unloaded.\n   */\n  abstract readonly supply: Supply;\n\n  /**\n   * Provides bootstrap context value.\n   *\n   * Note that this happens when bootstrap context already exists. To provide a value before bootstrap context created\n   * a {@link BootstrapSetup.provide} method can be used.\n   *\n   * @typeParam TDeps - Dependencies tuple type.\n   * @typeParam TSrc - Source value type.\n   * @typeParam TSeed - Value seed type.\n   * @param spec - Context value specifier.\n   *\n   * @returns A value supply that removes the given context value specifier once cut off.\n   */\n  abstract provide<TDeps extends any[], TSrc, TSeed>(\n      spec: ContextValueSpec<BootstrapContext, any, TDeps, TSrc, TSeed>,\n  ): Supply;\n\n  abstract perDefinition<TDeps extends any[], TSrc, TSeed>(\n      spec: ContextValueSpec<DefinitionContext, any, TDeps, TSrc, TSeed>,\n  ): Supply;\n\n  abstract perComponent<TDeps extends any[], TSrc, TSeed>(\n      spec: ContextValueSpec<ComponentContext, any, TDeps, TSrc, TSeed>,\n  ): Supply;\n\n  abstract setupDefinition<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionSetup]>;\n\n  /**\n   * Defines a component.\n   *\n   * Creates a custom element according to component definition, and registers it with custom elements registry.\n   *\n   * Note that custom element definition will happen only when all features configuration complete.\n   *\n   * @typeParam T - A type of component.\n   * @param componentType - Component class constructor.\n   *\n   * @return Custom element class constructor registered as custom element.\n   *\n   * @throws TypeError  If `componentType` does not contain a component definition.\n   */\n  abstract define<T extends object>(componentType: ComponentClass<T>): void;\n\n  whenDefined<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionContext<T>]> {\n    return this.get(BootstrapContext).whenDefined(componentType);\n  }\n\n  load(feature: Class, user?: SupplyPeer): FeatureRef {\n    return this.get(BootstrapContext).load(\n        feature,\n        user ? new Supply().needs(this).needs(user) : this,\n    );\n  }\n\n}\n","import { ContextRef, SingleContextKey } from '@proc7ts/context-values';\nimport { Workbench, WorkStage } from '@proc7ts/workbench';\nimport { bootstrapDefault } from '../../boot';\n\n/**\n * @internal\n */\nexport type BootstrapWorkbench = Workbench;\n\n/**\n * @internal\n */\nexport const BootstrapWorkbench: ContextRef<BootstrapWorkbench> = (/*#__PURE__*/ new SingleContextKey(\n    'bootstrap-workbench',\n    {\n      byDefault: bootstrapDefault(() => new Workbench()),\n    },\n));\n\n/**\n * @internal\n */\nexport const featureSetupStage = (/*#__PURE__*/ new WorkStage('feature setup'));\n\n/**\n * @internal\n */\nexport const featureInitStage = (/*#__PURE__*/ new WorkStage('feature init', { after: featureSetupStage }));\n\n/**\n * @internal\n */\nexport const componentDefStage = (/*#__PURE__*/ new WorkStage('component definition', { after: featureInitStage }));\n\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { isQualifiedName, QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { mergeFunctions } from '@proc7ts/primitives';\nimport { MetaAccessor } from '../common';\nimport { FeatureDef, FeatureDef__symbol } from '../feature';\nimport { ComponentClass, DefinitionContext, DefinitionSetup, ElementDef } from './definition';\n\n/**\n * A key of a property holding a component definition within its class constructor.\n *\n * @category Core\n */\nexport const ComponentDef__symbol = (/*#__PURE__*/ Symbol('component-def'));\n\n/**\n * Component definition.\n *\n * A custom element class will be created for each registered component in accordance to this definition.\n *\n * This can be one of:\n * - custom element name (possibly qualified),\n * - component definition options,\n * - component definition holder,\n * - component definition factory,\n * - feature definition holder, or\n * - feature definition factory.\n *\n * @category Core\n * @typeParam T - A type of component.\n */\nexport type ComponentDef<T extends object = any> =\n    | QualifiedName\n    | ComponentDef.Options<T>\n    | ComponentDef.Holder<T>\n    | ComponentDef.Factory<T>\n    | FeatureDef.Holder\n    | FeatureDef.Factory;\n\n/**\n * @category Core\n */\nexport namespace ComponentDef {\n\n  /**\n   * Component definition options.\n   */\n  export interface Options<T extends object = any> {\n\n    readonly [ComponentDef__symbol]?: undefined;\n\n    /**\n     * Custom element name.\n     *\n     * The name may belong to some namespace to avoid naming conflicts. I.e. it can be either a string, or\n     * name/namespace tuple.\n     *\n     * When omitted an anonymous component will be registered. Such component is not bound to custom element, but it\n     * still can be mounted.\n     */\n    readonly name?: QualifiedName;\n\n    /**\n     * Existing element to extend by custom one.\n     */\n    readonly extend?: ElementDef.Extend;\n\n    /**\n     * Additional feature definition options.\n     */\n    readonly feature?: FeatureDef.Options;\n\n    /**\n     * Sets up component definition.\n     *\n     * This method is called before component definition context constructed.\n     *\n     * @param setup - Component definition setup.\n     */\n    setup?(setup: DefinitionSetup<T>): void;\n\n    /**\n     * Defines this component by calling the given component definition context methods.\n     *\n     * This function is called before the custom element is defined.\n     *\n     * @param defContext - Component definition context.\n     */\n    define?(defContext: DefinitionContext<T>): void;\n\n  }\n\n  /**\n   * Component definition holder.\n   *\n   * @typeParam T - A type of component.\n   */\n  export interface Holder<T extends object = any> {\n\n    /**\n     * The component definition this holder contains.\n     */\n    readonly [ComponentDef__symbol]: ComponentDef<T>;\n\n  }\n\n  /**\n   * Component definition factory.\n   *\n   * @typeParam T - A type of component.\n   */\n  export interface Factory<T extends object = any> {\n\n    /**\n     * Builds component definition.\n     *\n     * @param componentType - A component class constructor to build definition for.\n     *\n     * @returns Built component definition.\n     */\n    [ComponentDef__symbol](componentType: ComponentClass<T>): ComponentDef<T>;\n\n  }\n\n}\n\n/**\n * @internal\n */\ntype ComponentDefHolder<T extends object> =\n    | ComponentDef.Options<T>\n    | ComponentDef.Holder<T>\n    | ComponentDef.Factory<T>\n    | { [ComponentDef__symbol]?: undefined };\n\n/**\n * @internal\n */\ntype FeatureDefHolder =\n    | FeatureDef.Holder\n    | FeatureDef.Factory\n    | { [FeatureDef__symbol]?: undefined };\n\n/**\n * @internal\n */\nclass ComponentMeta extends MetaAccessor<ComponentDef.Options, ComponentDef> {\n\n  constructor() {\n    super(ComponentDef__symbol);\n  }\n\n  merge<T extends object>(defs: readonly ComponentDef.Options<T>[]): ComponentDef.Options<T> {\n    return defs.reduce(\n        (prev, def) => ({\n          ...prev,\n          ...def,\n          setup: mergeFunctions(prev.setup, def.setup),\n          define: mergeFunctions(prev.define, def.define),\n          feature: prev.feature\n              ? def.feature ? FeatureDef.merge(prev.feature, def.feature) : prev.feature\n              : def.feature,\n        }),\n        {},\n    );\n  }\n\n  meta<T extends object>(source: ComponentDef<T>, componentType: ComponentClass<T>): ComponentDef.Options<T> {\n\n    const def = (source as ComponentDefHolder<T>)[ComponentDef__symbol];\n\n    if (def != null) {\n      return this.meta(\n          typeof def === 'function' ? (source as ComponentDef.Factory<T>)[ComponentDef__symbol](componentType) : def,\n          componentType,\n      );\n    }\n    if ((source as FeatureDefHolder)[FeatureDef__symbol] != null) {\n      return {\n        feature: FeatureDef.for(componentType, source as FeatureDef),\n      };\n    }\n    if (isQualifiedName(source)) {\n      return { name: source };\n    }\n\n    return source as ComponentDef.Options<T>;\n  }\n\n}\n\n/**\n * @internal\n */\nconst componentMeta = (/*#__PURE__*/ new ComponentMeta());\n\n/**\n * @internal\n */\nconst noComponentDef: ComponentDef.Factory = {\n  [ComponentDef__symbol]() {\n    return {};\n  },\n};\n\n/**\n * @category Core\n */\nexport const ComponentDef = {\n\n  /**\n   * Extracts component definition options from its type.\n   *\n   * @typeParam T - A type of component.\n   * @param componentType - Target component class constructor.\n   *\n   * @returns Component definition options. May be empty if there is not definition attached to component type.\n   */\n  of<T extends object>(this: void, componentType: ComponentClass<T>): ComponentDef.Options<T> {\n    return componentMeta.of(componentType) as ComponentDef.Options<T> || {};\n  },\n\n  /**\n   * Builds component definition options for the given component class.\n   *\n   * @param componentType - Target component class constructor.\n   * @param source - A source of component definition.\n   *\n   * @returns Component definition.\n   */\n  for<T extends object>(\n      this: void,\n      componentType: ComponentClass<T>,\n      source: ComponentDef<T>,\n  ): ComponentDef.Options<T> {\n    return componentMeta.meta(source, componentType);\n  },\n\n  /**\n   * Merges multiple component definition options.\n   *\n   * @typeParam T - A type of component.\n   * @param defs - Component definition options to merge.\n   *\n   * @returns Merged component definition options.\n   */\n  merge<T extends object>(this: void, ...defs: ComponentDef.Options<T>[]): ComponentDef.Options<T> {\n    return componentMeta.merge(defs);\n  },\n\n  /**\n   * Merges multiple component definitions.\n   *\n   * @typeParam T - A type of component.\n   * @param defs - Component definitions to merge.\n   *\n   * @returns Merged component definition.\n   */\n  all<T extends object>(this: void, ...defs: ComponentDef<T>[]): ComponentDef<T> {\n    return defs.reduce<ComponentDef.Factory<T>>(\n        (prev, def) => ({\n          [ComponentDef__symbol](componentType: ComponentClass<T>) {\n            return ComponentDef.merge(\n                ComponentDef.for(componentType, prev),\n                ComponentDef.for(componentType, def),\n            );\n          },\n        }),\n        noComponentDef,\n    );\n  },\n\n  /**\n   * Defines a component.\n   *\n   * Either assigns new or extends existing component definition and stores it under {@link ComponentDef__symbol} key.\n   *\n   * Each component can be passed directly to {@link bootstrapComponents} function or added as a requirement\n   * of another feature.\n   *\n   * @typeParam T - A type of component.\n   * @param componentType - Component class constructor.\n   * @param defs - Component definitions.\n   *\n   * @returns The `type` instance.\n   */\n  define<T extends ComponentClass>(\n      this: void,\n      componentType: T,\n      ...defs: ComponentDef<InstanceType<T>>[]\n  ): T {\n    return componentMeta.define(componentType, defs);\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '@proc7ts/primitives';\nimport { ComponentDef, ComponentDef__symbol } from './component-def';\nimport { ComponentClass } from './definition';\n\n/**\n * Component decorator interface.\n *\n * In addition to being a decorator for component class, it may also serve as {@link ComponentDef component definition}.\n * Thus it can be added as parameter to {@link Component @Component} decorator, or used as class decorator by itself.\n *\n * Constructed by {@link Component} function.\n *\n * @category Core\n * @typeParam T - A type of decorated component class.\n */\nexport type ComponentDecorator<T extends ComponentClass = Class> =\n    & ((this: void, type: T) => T | void)\n    & ComponentDef<InstanceType<T>>;\n\n/**\n * Decorator of component class.\n *\n * Decorated class becomes component:\n * ```TypeScript\n * @Component({ name: 'my-element' })\n * class MyComponent {\n *   // ...\n * }\n * ```\n *\n * Such component can be registered with {@link FeatureContext.define} method or used as a feature, e.g. passed to\n * {@link bootstrapComponents} function, or added to {@link FeatureDef.Options.needs} property of another feature.\n *\n * This is an alternative to direct call to {@link ComponentDef.Options.define} method.\n *\n * @category Core\n * @typeParam T - A type of decorated component class.\n * @param defs - Component definitions.\n *\n * @returns A component class decorator.\n */\nexport function Component<T extends ComponentClass = Class>(\n    ...defs: ComponentDef<InstanceType<T>>[]\n): ComponentDecorator<T> {\n\n  const decorator = ((type: T) => ComponentDef.define(type, ...defs)) as ComponentDecorator<T>;\n  const def = decorator as ComponentDef.Factory<InstanceType<T>>;\n\n  def[ComponentDef__symbol] = () => ComponentDef.all(...defs);\n\n  return decorator;\n}\n","import { SingleContextKey } from '@proc7ts/context-values';\nimport { ComponentContext } from './component-context';\n\n/**\n * @internal\n */\nexport const ComponentContext__key = (/*#__PURE__*/ new SingleContextKey<ComponentContext>('component-context'));\n","import { DomEventDispatcher, OnDomEvent } from '@frontmeans/dom-events';\nimport { SingleContextKey } from '@proc7ts/context-values';\nimport { ComponentContext__key } from './component-context.key.impl';\nimport { ComponentEventDispatcher } from './component-event';\n\n/**\n * @internal\n */\nexport const ComponentEventDispatcher__key = (/*#__PURE__*/ new SingleContextKey<ComponentEventDispatcher>(\n    'component-event-dispatcher',\n    {\n      byDefault(values) {\n\n        const context = values.get(ComponentContext__key);\n        const dispatcher = new DomEventDispatcher(context.element);\n\n        dispatcher.supply.needs(context);\n\n        return {\n          dispatch(event: Event): boolean {\n            return dispatcher.dispatch(event);\n          },\n          on<TEvent extends Event>(type: string): OnDomEvent<TEvent> {\n            return dispatcher.on(type);\n          },\n        };\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { ComponentContext__key } from './component-context.key.impl';\n\n/**\n * Component content root node.\n *\n * Either element itself, or its shadow root.\n *\n * @category Core\n */\nexport type ContentRoot = Element | ShadowRoot;\n\n/**\n * A key of component context value containing a component root element.\n *\n * This is an element itself by default. But can be overridden e.g. by {@link AttachShadow @AttachShadow} decorator.\n *\n * @category Core\n */\nexport const ContentRoot: SingleContextRef<ContentRoot> = (/*#__PURE__*/ new SingleContextKey<ContentRoot>(\n    'content-root',\n    {\n      byDefault(ctx): ContentRoot {\n        return ctx.get(ComponentContext__key).element as ContentRoot;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextValueSlot } from '@proc7ts/context-values';\nimport { ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, digAfter, EventKeeper, statePath, StatePath } from '@proc7ts/fun-events';\nimport { mergeFunctions, noop } from '@proc7ts/primitives';\n\n/**\n * Component state updater signature.\n *\n * @category Core\n */\nexport type StateUpdater =\n/**\n * @typeParam TValue - Updated value type\n * @param path - Updated state node path.\n * @param newValue - New value.\n * @param oldValue - Replaced value.\n */\n    <TValue>(this: void, path: StatePath, newValue: TValue, oldValue: TValue) => void;\n\n/**\n * @category Core\n */\nexport namespace StateUpdater {\n\n  /**\n   * Normalized component state updater signature.\n   *\n   * Accepts normalized state path.\n   */\n  export type Normalized =\n  /**\n   * @typeParam TValue - Updated value type\n   * @param path - Normalized path of updated state node.\n   * @param newValue - New value.\n   * @param oldValue - Replaced value.\n   */\n      <TValue>(this: void, path: StatePath.Normalized, newValue: TValue, oldValue: TValue) => void;\n\n}\n\n/**\n * @internal\n */\nclass StateUpdaterKey extends ContextUpKey<StateUpdater, StateUpdater.Normalized> {\n\n  readonly upKey: ContextUpKey.UpKey<StateUpdater, StateUpdater.Normalized>;\n\n  constructor() {\n    super('state-updater');\n    this.upKey = this.createUpKey(\n        slot => slot.insert(slot.seed.do(digAfter(\n            (...fns) => {\n              if (fns.length) {\n\n                const combined: StateUpdater.Normalized = fns.reduce(\n                    (prev, fn) => mergeFunctions(fn, prev),\n                    noop,\n                );\n\n                return afterThe((path, newValue, oldValue) => combined(statePath(path), newValue, oldValue));\n              }\n\n              if (slot.hasFallback && slot.or) {\n                return slot.or;\n              }\n\n              return afterThe(noop);\n            },\n        ))),\n    );\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          StateUpdater,\n          EventKeeper<StateUpdater.Normalized[]> | StateUpdater.Normalized,\n          AfterEvent<StateUpdater.Normalized[]>>,\n  ): void {\n\n    let delegated: StateUpdater;\n\n    slot.context.get(\n        this.upKey,\n        slot.hasFallback ? { or: slot.or != null ? afterThe(slot.or) : slot.or } : undefined,\n    )!(\n        fn => delegated = fn,\n    ).whenOff(\n        () => delegated = noop,\n    );\n\n    slot.insert((path, newValue, oldValue) => delegated(path, newValue, oldValue));\n  }\n\n}\n\n/**\n * A key of component context value containing a component {@link StateUpdater state updater} function.\n *\n * Features are calling this function by default when component state changes, e.g. attribute value or DOM property\n * modified.\n *\n * Does nothing by default and after component destruction.\n *\n * When multiple state updaters provided, they all will be called on each state update, in reverse order.\n *\n * @category Core\n */\nexport const StateUpdater: ContextUpRef<StateUpdater, StateUpdater.Normalized> = (/*#__PURE__*/ new StateUpdaterKey());\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { OnDomEvent } from '@frontmeans/dom-events';\nimport { ContextKey, ContextKey__symbol, ContextValues } from '@proc7ts/context-values';\nimport { OnEvent, StatePath } from '@proc7ts/fun-events';\nimport { Supply, SupplyPeer } from '@proc7ts/primitives';\nimport { ComponentContext__key } from './component-context.key.impl';\nimport { ComponentEventDispatcher__key } from './component-event.key.impl';\nimport { ComponentMount } from './component-mount';\nimport { ContentRoot } from './content-root';\nimport { ComponentClass } from './definition';\nimport { StateUpdater } from './state-updater';\n\n/**\n * A key of a custom element and component properties containing a reference to component context.\n *\n * @category Core\n */\nexport const ComponentContext__symbol = (/*#__PURE__*/ Symbol('component-context'));\n\n/**\n * Component context.\n *\n * Passed to component constructor as its only parameter.\n *\n * Extends `ContextValues` interface. The values are provided by corresponding providers registered with\n * {@link BootstrapSetup.perComponent}} and {@link DefinitionSetup.perComponent} methods.\n *\n * @category Core\n * @typeParam T - A type of component.\n */\nexport abstract class ComponentContext<T extends object = any> extends ContextValues implements SupplyPeer {\n\n  /**\n   * A key of component context value containing the component context instance itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<ComponentContext> {\n    return ComponentContext__key;\n  }\n\n  /**\n   * Extracts component context from its custom element or from component itself.\n   *\n   * @param element - Custom element instance created for the component or the component itself.\n   *\n   * @return Component context reference stored under {@link ComponentContext__symbol} key.\n   *\n   * @throws TypeError  When the given `element` does not contain component context reference.\n   */\n  static of<T extends object>(element: any): ComponentContext<T> {\n\n    const context = (element as ComponentContextHolder<T>)[ComponentContext__symbol];\n\n    if (!context) {\n      throw TypeError(`No component context found in ${String(element)}`);\n    }\n\n    return context;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element constructed for the component according to its type.\n   *\n   * E.g. `HTMLElement` instance.\n   */\n  abstract readonly element: any;\n\n  /**\n   * A component instance.\n   *\n   * It is an error accessing this property before the component is created, e.g. from inside of component constructor\n   * or {@link DefinitionContext.whenComponent component instantiation event} receiver. A {@link whenReady} callback\n   * could be utilized to work this around.\n   */\n  abstract readonly component: T;\n\n  /**\n   * Component mount.\n   *\n   * This is set when component is mounted to arbitrary element by {@link DefinitionContext.mountTo}. It is `undefined`\n   * for components created in standard way.\n   */\n  abstract readonly mount: ComponentMount<T> | undefined;\n\n  /**\n   * Whether the component is settled.\n   *\n   * Component settlement happens:\n   * - when {@link settle} method is called,\n   * - when component is {@link DefinitionContext.mountTo mounted} to element, or\n   * - when component's element is {@link connected}.\n   *\n   * It is guaranteed that component settlement won't happen inside custom element's constructor. So the settlement\n   * event may be used e.g. to start DOM manipulations, as the latter is prohibited inside custom element constructor.\n   *\n   * This becomes `true` right before {@link whenSettled} event is sent.\n   */\n  abstract readonly settled: boolean;\n\n  /**\n   * Whether the component's element is connected.\n   *\n   * This becomes `true` right before {@link whenConnected} event is sent.\n   */\n  abstract readonly connected: boolean;\n\n  /**\n   * An `OnEvent` sender of component readiness event.\n   *\n   * The component is constructed shortly after custom element. So the component may not exist when requested\n   * e.g. inside component constructor or {@link DefinitionContext.whenComponent component instantiation event}\n   * receiver. The registered receiver will be notified when the component is constructed.\n   *\n   * If the component is constructed already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[this]>;\n\n  /**\n   * An `OnEvent` sender of component settlement event.\n   *\n   * The registered receiver is called when component is {@link settled}. If settled already the receiver is called\n   * immediately.\n   */\n  abstract readonly whenSettled: OnEvent<[this]>;\n\n  /**\n   * An `OnEvent` sender of component's element connection event.\n   *\n   * The registered receiver is called when component's element is connected. I.e. when custom element's\n   * `connectedCallback()` method is called, or when the element this component is {@link mount mounted to} is\n   * {@link ComponentMount.connect connected}.\n   *\n   * If connected already the receiver is called immediately.\n   */\n  abstract readonly whenConnected: OnEvent<[this]>;\n\n  /**\n   * An event supply that {@link destroy destroys} component when cut off.\n   */\n  abstract readonly supply: Supply;\n\n  /**\n   * Updates component's state.\n   *\n   * This is a shorthand for invoking a component {@link StateUpdater state updater} .\n   *\n   * @typeParam TValue - A type of changed value.\n   * @param key - Changed value key.\n   * @param newValue - New value.\n   * @param oldValue - Previous value.\n   */\n  readonly updateState: StateUpdater;\n\n  constructor() {\n    super();\n    this.updateState = <TValue>(key: StatePath, newValue: TValue, oldValue: TValue): void => {\n      this.get(StateUpdater)(key, newValue, oldValue);\n    };\n  }\n\n  /**\n   * Component content root.\n   *\n   * This is a shorthand for requesting a {@link ContentRoot content root} from component context.\n   */\n  get contentRoot(): ContentRoot {\n    return this.get(ContentRoot);\n  }\n\n  /**\n   * Settles component.\n   *\n   * Calling this method has no effect if component is {@link settled} already, when component is not\n   * {@link whenReady ready} yet, or custom element's constructor is not exited.\n   *\n   * Calling this method may trigger DOM manipulations (the latter is prohibited inside custom element's constructor).\n   * This may be desired for rendering optimizations. E.g. to render element's content _before_ adding it to document.\n   *\n   * This method is called automatically when {@link DefinitionContext.mountTo mounting} component to element.\n   */\n  abstract settle(): void;\n\n  /**\n   * Returns a DOM event producer for the given event type.\n   *\n   * This is a shorthand for invoking a component event producer function available under\n   * `[ComponentEventProducer.key]` key.\n   *\n   * @typeParam TEvent - DOM event type.\n   * @param type - An event type to listen for.\n   *\n   * @returns A producer of DOM event events of the given type.\n   */\n  on<TEvent extends Event>(type: string): OnDomEvent<TEvent> {\n    return this.get(ComponentEventDispatcher__key).on(type);\n  }\n\n  /**\n   * Dispatches an event to component element.\n   *\n   * This is a shorthand for invoking a component {@link ComponentEventDispatcher event dispatcher}.\n   *\n   * @param event - An event to dispatch.\n   */\n  dispatchEvent(event: Event): void {\n    this.get(ComponentEventDispatcher__key).dispatch(event);\n  }\n\n  /**\n   * Destroys the component.\n   *\n   * Removes element from the DOM tree. I.e. disconnects custom element first.\n   *\n   * After this method call the component should no longer be used.\n   *\n   * Note that component destruction is virtual. It is up to developer to decide when component is no longer needed.\n   * However the component is destroyed automatically once disconnected, i.e. when custom element's\n   * `disconnectedCallback()` method is called.\n   *\n   * @param reason - Optional reason of destruction.\n   */\n  abstract destroy(reason?: any): void;\n\n}\n\n/**\n * An object potentially containing component context.\n *\n * Either element or component instance.\n *\n * @category Core\n */\nexport interface ComponentContextHolder<T extends object = any> {\n  [ComponentContext__symbol]?: ComponentContext<T>;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { OnDomEvent } from '@frontmeans/dom-events';\nimport { SingleContextRef } from '@proc7ts/context-values';\nimport { ComponentContext } from './component-context';\nimport { ComponentEventDispatcher__key } from './component-event.key.impl';\n\n/**\n * Component event.\n *\n * Events of this type are thrown by various services to inform on component status changes.\n *\n * It is illegal to dispatch such events for elements not bound to components. It is reasonable to dispatch events\n * using {@link ComponentEventDispatcher} available in component context.\n *\n * The following event types supported:\n * - `wesib:component` is dispatched when component is bound to element. I.e. when HTML element is upgraded to custom\n *   one defined by component, or component is mounted to element. The event is dispatched when component is connected\n *   for the first time. I.e. when element is added to the document.\n *   This event bubbles and is not cancelable.\n *\n * @category Core\n * @event ComponentEvent#wesib:component\n */\nexport class ComponentEvent extends Event {\n\n  /**\n   * Target component context.\n   */\n  get context(): ComponentContext {\n    return ComponentContext.of(this.target);\n  }\n\n}\n\n/**\n * Component event dispatcher is used to listen for and dispatch component events.\n *\n * It is available in bootstrap context context.\n *\n * By default treats a component element as event target.\n *\n * @category Core\n */\nexport interface ComponentEventDispatcher {\n\n  /**\n   * Dispatches the DOM event for the given component.\n   *\n   * @param event - An event to dispatch.\n   *\n   * @returns `true` if either event's `cancelable` attribute value is `false` or its `preventDefault()` method was not\n   * invoked, or `false` otherwise.\n   */\n  dispatch(event: Event): boolean;\n\n  /**\n   * Returns an `OnDomEvent` sender of DOM events of the given type.\n   *\n   * @typeParam TEvent - DOM event type.\n   * @param type - An event type to listen for.\n   *\n   * @returns A producer of DOM event events of the given type.\n   */\n  on<TEvent extends Event>(type: string): OnDomEvent<TEvent>;\n\n}\n\n/**\n * A key of component context value containing component event dispatcher.\n *\n * @category Core\n */\nexport const ComponentEventDispatcher: SingleContextRef<ComponentEventDispatcher> = ComponentEventDispatcher__key;\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class, PropertyAccessorDescriptor, valueProvider } from '@proc7ts/primitives';\nimport { decoratePropertyAccessor } from '../common';\nimport { ComponentDef, ComponentDef__symbol } from './component-def';\nimport { Component, ComponentDecorator } from './component.decorator';\nimport { ComponentClass } from './definition';\n\n/**\n * Component property decorator interface.\n *\n * Allows to construct a {@link ComponentDecorator component decorator} by declaring a virtual property to use instead\n * of decorated one.\n *\n * Constructed by {@link ComponentProperty} function.\n *\n * @category Core\n * @typeParam TValue - Property value type.\n * @typeParam T - A type of decorated component class.\n */\nexport interface ComponentPropertyDecorator<TValue, T extends ComponentClass = Class> {\n\n  /**\n   * Decorates component method.\n   *\n   * @typeParam TPropValue - Property value type.\n   * @param proto - Decorated class prototype.\n   * @param propertyKey - Decorated property key.\n   * @param descriptor - Decorated property descriptor.\n   *\n   * @returns  Either updated property descriptor, or nothing.\n   */\n  // eslint-disable-next-line\n  <TPropValue extends TValue>(\n      this: void,\n      proto: InstanceType<T>,\n      propertyKey: string | symbol,\n      descriptor?: TypedPropertyDescriptor<TPropValue>,\n  ): any | void;\n\n  /**\n   * Builds component decorator assuming the virtual property has the given value.\n   *\n   * @param value - Virtual property value.\n   * @param key - Virtual property key. Defaults to {@link AnonymousComponentProperty__symbol}.\n   *\n   * @returns New component decorator.\n   */\n  As(\n      this: void,\n      value: TValue,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n  /**\n   * Builds component decorator assuming the virtual property value is provided by the given `provider`.\n   *\n   * @param provider - Virtual property read-only value provider.\n   * @param key - Virtual property key. Defaults to {@link AnonymousComponentProperty__symbol}.\n   *\n   * @returns New component decorator.\n   */\n  By(\n      this: void,\n      provider: ComponentProperty.Provider<TValue, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n  /**\n   * Builds component decorator assuming the decorated property is available via the given `accessor`.\n   *\n   * @param accessor - Virtual property accessor.\n   * @param key - Virtual property key. Defaults to {@link AnonymousComponentProperty__symbol}.\n   *\n   * @returns New component decorator.\n   */\n  With(\n      this: void,\n      accessor: ComponentProperty.Accessor<TValue, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n  /**\n   * Builds component decorator assuming the decorated property is bound to component with by the given `binder`.\n   *\n   * @param binder - A binder of virtual property accessor\n   * @param key - Virtual property key. Defaults to {@link AnonymousComponentProperty__symbol}..\n   *\n   * @returns New component decorator.\n   */\n  Bind(\n      this: void,\n      binder: ComponentProperty.Binder<TValue, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n}\n\n/**\n * @category Core\n */\nexport namespace ComponentProperty {\n\n  /**\n   * Component property value provider signature.\n   *\n   * This function will be called each time the property value is requested.\n   *\n   * @typeParam TValue - Property value type.\n   * @typeParam T - A type of component.\n   */\n  export type Provider<TValue, T extends object = any> =\n  /**\n   * @param component - Component instance.\n   * @param key - Target property key.\n   *\n   * @returns Property value.\n   */\n      (\n          this: void,\n          component: T,\n          key: string | symbol,\n      ) => TValue;\n\n  /**\n   * Component property accessor.\n   *\n   * Allows to read and write property value.\n   *\n   * @typeParam TValue - Property value type.\n   * @typeParam T - A type of component.\n   */\n  export interface Accessor<TValue, T extends object = any> {\n\n    /**\n     * Reads property value.\n     *\n     * May throw if the property is not readable.\n     *\n     * @param component - Target component instance.\n     * @param key - Property key.\n     *\n     * @returns Property value.\n     */\n    get(this: void, component: T, key: string | symbol): TValue;\n\n    /**\n     * Assigns new property value.\n     *\n     * May throw is the property is not writable.\n     *\n     * @param component - Target component instance.\n     * @param value - New property value.\n     * @param key - Property key.\n     */\n    set(this: void, component: T, value: TValue, key: string | symbol): void;\n\n  }\n\n  /**\n   * Property accessor binder signature.\n   *\n   * This is a function that binds a {@link BoundAccessor property accessor} to target component.\n   *\n   * @typeParam TValue - Property value type.\n   * @typeParam T - A type of component.\n   */\n  export type Binder<TValue, T extends object = any> =\n  /**\n   * @param component - Target component to bind property accessor to.\n   * @param key - Property key.\n   *\n   * @returns Property accessor bound to `component`.\n   */\n      (\n          this: void,\n          component: T,\n          key: string | symbol,\n      ) => BoundAccessor<TValue>;\n\n  export interface BoundAccessor<TValue> {\n\n    /**\n     * Reads bound component's property value.\n     *\n     * An attempt to read the value would throw when omitted.\n     *\n     * @returns Property value.\n     */\n    get?(): TValue;\n\n    /**\n     * Assigns bound component's new property value.\n     *\n     * An attempt to assign the value would throw when omitted.\n     *\n     * @param value - New property value.\n     */\n    set?(value: TValue): void;\n\n  }\n\n  /**\n   * Component property descriptor.\n   *\n   * Passed to {@link Definer property definer} by {@link ComponentProperty} function to construct a {@link Definition\n   * property definition}.\n   *\n   * @typeParam TValue - Property value type.\n   * @typeParam T - A type of component class.\n   */\n  export interface Descriptor<TValue, T extends ComponentClass = Class> {\n\n    /**\n     * Component class constructor.\n     */\n    readonly type: T;\n\n    /**\n     * Component property key.\n     */\n    readonly key: string | symbol;\n\n    /**\n     * Whether the property is initially writable.\n     *\n     * This can be changed by {@link Definition.get property read definition}.\n     */\n    readonly readable: boolean;\n\n    /**\n     * Whether the property is initially writable.\n     *\n     * This can be changed by {@link Definition.set property assignment definition}.\n     */\n    readonly writable: boolean;\n\n    /**\n     * Whether the property is initially enumerable.\n     *\n     * This can be changed by {@link Definition.enumerable property definition}.\n     */\n    readonly enumerable: boolean;\n\n    /**\n     * Whether the property is initially configurable.\n     *\n     * This can be changed by {@link Definition.configurable property definition}.\n     */\n    readonly configurable: boolean;\n\n    /**\n     * Reads property value.\n     *\n     * May throw if the property is not readable.\n     *\n     * @param component - Target component instance.\n     *\n     * @returns Property value.\n     */\n    get(this: void, component: InstanceType<T>): TValue;\n\n    /**\n     * Assigns new property value.\n     *\n     * May throw is the property is not writable.\n     *\n     * @param component - Target component instance.\n     * @param value - New property value.\n     */\n    set(this: void, component: InstanceType<T>, value: TValue): void;\n\n  }\n\n  /**\n   * Component property definition builder signature.\n   *\n   * This is a function called by {@link ComponentProperty} to define the property.\n   *\n   * @typeParam TValue - Property value type.\n   * @typeParam T - A type of component class.\n   */\n  export type Definer<TValue, T extends ComponentClass = Class> =\n  /**\n   * @param descriptor - Component property descriptor.\n   *\n   * @returns Component property definition. Or nothing if the property definition is not to be changed.\n   */\n      (\n          this: void,\n          descriptor: Descriptor<TValue, T>,\n      ) => Definition<TValue, T> | void;\n\n  /**\n   * Property definition to apply to existing property.\n   *\n   * When applying to decorated property, this definition updates its definition.\n   *\n   * When applying to virtual property assumed by one of {@link ComponentPropertyDecorator} methods, most of returned\n   * values ignored. Except for {@link Definition.componentDef component definition}, {@link Definition.get value\n   * reader}, and {@link Definition.set value setter}.\n   *\n   * @typeParam TValue - Property value type.\n   * @typeParam T - A type of component class.\n   */\n  export interface Definition<TValue, T extends ComponentClass = Class> {\n\n    /**\n     * Component definition to apply to component.\n     *\n     * When specified, it is used to enable certain functionality for decorated (or virtual) property.\n     */\n    readonly componentDef?: ComponentDef<InstanceType<T>>;\n\n    /**\n     * Whether to make the property enumerable.\n     *\n     * When specified, it is used as `enumerable` attribute value of decorated property descriptor.\n     */\n    readonly enumerable?: boolean;\n\n    /**\n     * Whether to make the property configurable.\n     *\n     * When specified, it is used as `configurable` attribute value of decorated property descriptor.\n     */\n    readonly configurable?: boolean;\n\n    /**\n     * Reads property value.\n     *\n     * When specified it changes how the property value is read.\n     *\n     * When neither {@link get}, nor {@link set} specified, the property access does not change.\n     *\n     * @param component - Target component instance.\n     * @param key - Property key.\n     *\n     * @returns Property value.\n     */\n    get?(this: void, component: InstanceType<T>, key: string | symbol): TValue;\n\n    /**\n     * Assigns new property value.\n     *\n     * When specified it changes how the property value is assigned.\n     *\n     * When neither {@link get}, nor {@link set} specified, the property access does not change.\n     *\n     * @param component - Target component instance.\n     * @param value - New property value.\n     * @param key - Property key.\n     */\n    set?(this: void, component: InstanceType<T>, value: TValue, key: string | symbol): void;\n\n  }\n\n}\n\n/**\n * Anonymous component property key.\n *\n * Used as a default virtual property key.\n *\n * @category Core\n */\nexport const AnonymousComponentProperty__symbol = (/*#__PURE__*/ Symbol('anonymous-component-property'));\n\n/**\n * Decorator of component property.\n *\n * Updates decorated property and component definition. Can be converted to {@link ComponentDecorator component\n * decorator} by calling appropriate method of returned decorator instance.\n *\n * @category Core\n * @typeParam TValue - Decorated property value type.\n * @typeParam T - A type of decorated component class.\n * @param define - Component property definition builder.\n *\n * @returns Component property decorator.\n */\nexport function ComponentProperty<TValue, T extends ComponentClass = Class>(\n    define: ComponentProperty.Definer<TValue, T>,\n): ComponentPropertyDecorator<TValue, T> {\n\n  const decorator = (\n      proto: InstanceType<T>,\n      propertyKey: string | symbol,\n      descriptor?: TypedPropertyDescriptor<TValue>,\n  ): any | void => decoratePropertyAccessor(\n      proto,\n      propertyKey,\n      descriptor,\n      desc => {\n\n        const { get: getValue, set: setValue } = desc;\n        const type = proto.constructor as T;\n        const { get, set, configurable, enumerable, componentDef = {} } = define({\n          type,\n          key: propertyKey,\n          readable: !!desc.get,\n          writable: !!desc.set,\n          enumerable: !!desc.enumerable,\n          configurable: !!desc.configurable,\n          get: getValue\n              ? ((component: InstanceType<T>) => getValue.call(component))\n              : notReadableAccessor(propertyKey),\n          set: setValue\n              ? ((component, value) => setValue.call(component, value))\n              : notWritableAccessor(propertyKey),\n        }) || {};\n\n        ComponentDef.define(type, componentDef);\n\n        const updated: PropertyAccessorDescriptor<TValue> = {\n          ...desc,\n          configurable: configurable ?? desc.configurable,\n          enumerable: enumerable ?? desc.enumerable,\n        };\n\n        if (get || set) {\n          updated.get = get && function (this: InstanceType<T>) {\n            return get(this, propertyKey);\n          };\n          updated.set = set && function (this: InstanceType<T>, value: TValue) {\n            set(this, value, propertyKey);\n          };\n        }\n\n        return updated;\n      },\n  );\n  const decorateWith = (\n      { get, set }: ComponentProperty.Accessor<TValue, InstanceType<T>>,\n      key: string | symbol = AnonymousComponentProperty__symbol,\n      writable: boolean,\n  ): ComponentDecorator<T> => Component({\n    [ComponentDef__symbol](type: InstanceType<T>) {\n\n      const def = define({\n        type,\n        key,\n        readable: true,\n        writable,\n        enumerable: false,\n        configurable: false,\n        get: component => get(component, key),\n        set: (component, value) => set(component, value, key),\n      });\n\n      return (def && def.componentDef) || {};\n    },\n  });\n  const By = (\n      provider: ComponentProperty.Provider<TValue, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T> => decorateWith(\n      {\n        get(component, key) {\n          return provider(component, key);\n        },\n      } as ComponentProperty.Accessor<TValue>,\n      key,\n      false,\n  );\n\n  const result = decorator as ComponentPropertyDecorator<TValue, T>;\n\n  result.With = (access, key) => decorateWith(access, key, true);\n  result.By = By;\n  result.As = (value, key?) => By(valueProvider(value), key);\n  result.Bind = (binder, key = AnonymousComponentProperty__symbol) => {\n\n    const accessor__symbol = Symbol(`${String(key)}:accessor`);\n\n    interface HostComponent {\n      [accessor__symbol]?: {\n        get(): TValue;\n        set(value: TValue): void;\n      };\n    }\n\n    const accessor = (component: HostComponent): {\n      get(): TValue;\n      set(value: TValue): void;\n    } => {\n\n      const existing = component[accessor__symbol];\n\n      if (existing) {\n        return existing;\n      }\n\n      const accessor = binder(component as InstanceType<T>, key);\n\n      return component[accessor__symbol] = {\n        get: accessor.get ? accessor.get.bind(accessor) : notReadableAccessor(key),\n        set: accessor.set ? accessor.set.bind(accessor) : notWritableAccessor(key),\n      };\n    };\n\n    return decorateWith(\n        {\n          get(component) {\n            return accessor(component).get();\n          },\n          set(component, value) {\n            return accessor(component).set(value);\n          },\n        },\n        key,\n        true,\n    );\n  };\n\n  return result;\n}\n\n/**\n * @internal\n */\nfunction notReadableAccessor(propertyKey: string | symbol): () => never {\n  return () => { throw new TypeError(`\"${String(propertyKey)}\" is not readable`); };\n}\n\n/**\n * @internal\n */\nfunction notWritableAccessor(propertyKey: string | symbol): () => never {\n  return () => { throw new TypeError(`\"${String(propertyKey)}\" is not writable`); };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport {\n  Class,\n  fieldAccessorDescriptor,\n  PropertyAccessorDescriptor,\n  toPropertyAccessorDescriptor,\n} from '@proc7ts/primitives';\n\n/**\n * Typed class decorator.\n *\n * @category Utility\n * @typeParam T - A type of class to decorate.\n */\nexport type TypedClassDecorator<T extends Class> = (type: T) => T | void;\n\n/**\n * Typed property decorator.\n *\n * @category Utility\n * @typeParam T - A type of class the decorated property belongs to.\n */\nexport type TypedPropertyDecorator<T extends Class> =\n    <TValue>(\n        target: InstanceType<T>,\n        propertyKey: string | symbol,\n        descriptor?: TypedPropertyDescriptor<TValue>,\n    ) => any | void;\n\n/**\n * Property decorator helper converting a field or property to the one with accessor (`get` and optionally `set`).\n *\n * @category Utility\n * @typeParam T - A type of target object.\n * @typeParam TValue - A property value type.\n * @param target - Target object containing the property.\n * @param propertyKey - Target property key.\n * @param desc - Target property descriptor, or `undefined` for object fields.\n * @param updateDescriptor - Descriptor updater. Accepts the accessor descriptor as the only argument. If returns\n * a descriptor, then it is applied to the property. Otherwise the target property descriptor is never updated.\n *\n * @returns Updated property descriptor to return from decorator to apply to the property, or `undefined` if there is\n * nothing to update.\n */\nexport function decoratePropertyAccessor<T, TValue>(\n    target: T,\n    propertyKey: string | symbol,\n    desc: TypedPropertyDescriptor<TValue> | undefined,\n    updateDescriptor: (desc: PropertyAccessorDescriptor<TValue>) => PropertyAccessorDescriptor<TValue>,\n): PropertyAccessorDescriptor<TValue> | undefined {\n\n  const isField = !desc;\n  const accessorDesc = desc\n      ? toPropertyAccessorDescriptor(desc)\n      : fieldAccessorDescriptor(target, propertyKey as keyof T) as unknown as PropertyAccessorDescriptor<TValue>;\n  const updatedDesc = updateDescriptor(accessorDesc);\n\n  if (isField && updatedDesc) {\n    Object.defineProperty(target, propertyKey, updatedDesc);\n    return;\n  }\n\n  return updatedDesc;\n}\n","import {\n  ContextKey,\n  ContextKey__symbol,\n  ContextRegistry,\n  ContextValues,\n  SingleContextKey,\n} from '@proc7ts/context-values';\nimport { BootstrapContext } from '../bootstrap-context';\n\nconst BootstrapContextRegistry__key = (\n    /*#__PURE__*/ new SingleContextKey<BootstrapContextRegistry>('bootstrap-context-registry')\n);\n\n/**\n * @internal\n */\nexport class BootstrapContextRegistry extends ContextRegistry<BootstrapContext> {\n\n  static get [ContextKey__symbol](): ContextKey<BootstrapContextRegistry> {\n    return BootstrapContextRegistry__key;\n  }\n\n  readonly values: ContextValues;\n\n  static create(): BootstrapContextRegistry {\n    return new BootstrapContextRegistry();\n  }\n\n  private constructor() {\n    super();\n    this.provide({ a: BootstrapContextRegistry, is: this });\n    this.values = this.newValues();\n  }\n\n}\n","import { ContextRef, ContextRegistry, SingleContextKey } from '@proc7ts/context-values';\nimport { ComponentContext } from '../../component';\nimport { bootstrapDefault } from '../bootstrap-default';\n\nexport type PerComponentRegistry = ComponentContextRegistry;\n\nexport const PerComponentRegistry: ContextRef<PerComponentRegistry> = (\n    /*#__PURE__*/ new SingleContextKey<ComponentContextRegistry>(\n    'per-component-registry',\n    {\n      byDefault: bootstrapDefault(() => new ComponentContextRegistry()),\n    },\n));\n\n/**\n * @internal\n */\nexport class ComponentContextRegistry extends ContextRegistry<ComponentContext> {\n}\n","import { ContextRef, ContextRegistry, SingleContextKey } from '@proc7ts/context-values';\nimport { DefinitionContext } from '../../component/definition';\nimport { bootstrapDefault } from '../bootstrap-default';\n\n/**\n * @internal\n */\nexport type PerDefinitionRegistry = DefinitionContextRegistry;\n\n/**\n * @internal\n */\nexport const PerDefinitionRegistry: ContextRef<PerDefinitionRegistry> = (\n    /*#__PURE__*/ new SingleContextKey<DefinitionContextRegistry>(\n    'per-definition-registry',\n    {\n      byDefault: bootstrapDefault(bsContext => new DefinitionContextRegistry(bsContext)),\n    },\n));\n\n/**\n * @internal\n */\nexport class DefinitionContextRegistry extends ContextRegistry<DefinitionContext> {\n}\n","import { EventEmitter, onAny, OnEvent, onEventBy, supplyOn, trackValue, valueOn } from '@proc7ts/fun-events';\nimport { asis, superClassOf, Supply } from '@proc7ts/primitives';\nimport { ComponentDef__symbol } from '../../component';\nimport { ComponentClass, DefinitionSetup } from '../../component/definition';\n\n/**\n * @internal\n */\nexport function onPostDefSetup(\n    componentType: ComponentClass,\n    supply: Supply,\n): OnEvent<[DefinitionSetup]> {\n\n  const { on } = postDefSetup(componentType);\n\n  return onEventBy(receiver => {\n    on({\n      supply: receiver.supply.needs(supply),\n      receive(ctx, setup) {\n\n        const whenReady = setup.whenReady.do(supplyOn(supply));\n        const whenComponent = setup.whenComponent.do(supplyOn(supply));\n\n        receiver.receive(ctx, {\n          get componentType() {\n            return setup.componentType;\n          },\n          get whenReady() {\n            return whenReady;\n          },\n          get whenComponent() {\n            return whenComponent;\n          },\n          perDefinition(spec) {\n            return setup.perDefinition(spec).needs(supply);\n          },\n          perComponent(spec) {\n            return setup.perComponent(spec).needs(supply);\n          },\n        });\n      },\n    });\n  });\n}\n\n/**\n * @internal\n */\nexport interface PostDefSetup<T extends object = any> {\n  readonly on: OnEvent<[DefinitionSetup<T>]>;\n  send(setup: DefinitionSetup): void;\n  setup(setup: DefinitionSetup<T>): void;\n}\n\nconst PostDefSetup__symbol = (/*#__PURE__*/ Symbol('post-def-setup'));\n\ninterface PostDefComponentClass<T extends object> extends ComponentClass<T> {\n  [PostDefSetup__symbol]?: PostDefSetup<T>;\n}\n\n/**\n * @internal\n */\nexport function postDefSetup<T extends object>(componentType: PostDefComponentClass<T>): PostDefSetup<T> {\n  // eslint-disable-next-line no-prototype-builtins\n  if (componentType.hasOwnProperty(PostDefSetup__symbol)) {\n    return componentType[PostDefSetup__symbol] as PostDefSetup<T>;\n  }\n\n  const tracker = trackValue<DefinitionSetup<T>>();\n  const emitter = new EventEmitter<[DefinitionSetup]>();\n  const onSetup: OnEvent<[DefinitionSetup<T>]> = tracker.read.do(valueOn(asis));\n  const on = onAny(onSetup, emitter);\n  const superType = superClassOf(componentType, type => ComponentDef__symbol in type);\n\n  if (superType) {\n\n    const superPostDefSetup = postDefSetup(superType);\n\n    on(setup => superPostDefSetup.send(setup));\n  }\n\n  const result: PostDefSetup<T> = {\n    on,\n    send(setup) {\n      emitter.send(setup);\n    },\n    setup(setup) {\n      tracker.it = setup;\n    },\n  };\n\n  Object.defineProperty(componentType, PostDefSetup__symbol, { value: result });\n\n  return result;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\n\n/**\n * A window the components bootstrap is performed against.\n *\n * @category Core\n */\nexport type BootstrapWindow = Window & typeof globalThis;\n\n/**\n * A key of bootstrap context value containing a window instance the bootstrap is performed against.\n *\n * Target value defaults to current window.\n *\n * @category Core\n */\nexport const BootstrapWindow: SingleContextRef<BootstrapWindow> = (/*#__PURE__*/ new SingleContextKey(\n    'window',\n    {\n      byDefault() {\n        return window;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { BootstrapWindow } from './bootstrap-window';\n\n/**\n * A window (e.g. DOM) element all bootstrapped components belong to.\n *\n * @category Core\n */\nexport type BootstrapRoot = Element;\n\n/**\n * A key of bootstrap context value containing a bootstrap root.\n *\n * Target value defaults to document body of {@link BootstrapWindow}.\n *\n * @category Core\n */\nexport const BootstrapRoot: SingleContextRef<BootstrapRoot> = (/*#__PURE__*/ new SingleContextKey(\n    'bootstrap-root',\n    {\n      byDefault(ctx) {\n        return ctx.get(BootstrapWindow).document.body;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { NamespaceAliaser } from '@frontmeans/namespace-aliaser';\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\n\n/**\n * Namespace aliaser used by default.\n *\n * Maps namespaces to their unique aliases.\n *\n * @category Core\n */\nexport type DefaultNamespaceAliaser = NamespaceAliaser;\n\n/**\n * A key of bootstrap context value containing the default namespace aliaser.\n *\n * @category Core\n */\nexport const DefaultNamespaceAliaser: SingleContextRef<DefaultNamespaceAliaser> = (\n    /*#__PURE__*/ new SingleContextKey<DefaultNamespaceAliaser>('default-namespace-aliaser')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { newRenderSchedule, RenderScheduler } from '@frontmeans/render-scheduler';\nimport { ContextValues, ContextValueSlot } from '@proc7ts/context-values';\nimport { contextDestroyed, ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, digAfter, EventKeeper } from '@proc7ts/fun-events';\nimport { BootstrapWindow } from './bootstrap-window';\n\n/**\n * Default rendering tasks scheduler.\n *\n * @category Core\n */\nexport type DefaultRenderScheduler = RenderScheduler;\n\n/**\n * @internal\n */\nclass DefaultRenderSchedulerKey extends ContextUpKey<DefaultRenderScheduler, RenderScheduler> {\n\n  readonly upKey: ContextUpKey.UpKey<DefaultRenderScheduler, RenderScheduler>;\n\n  constructor() {\n    super('default-render-scheduler');\n    this.upKey = this.createUpKey(\n        slot => slot.insert(slot.seed.do(digAfter(\n            (...fns) => {\n              if (fns.length) {\n                return afterThe(toDefaultRenderScheduler(slot.context, fns[fns.length - 1]));\n              }\n              if (slot.hasFallback && slot.or) {\n                return slot.or;\n              }\n              return afterThe(toDefaultRenderScheduler(slot.context, newRenderSchedule));\n            },\n        ))),\n    );\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          DefaultRenderScheduler,\n          EventKeeper<RenderScheduler[]> | RenderScheduler,\n          AfterEvent<RenderScheduler[]>>,\n  ): void {\n\n    let delegated: DefaultRenderScheduler;\n\n    slot.context.get(\n        this.upKey,\n        slot.hasFallback ? { or: slot.or != null ? afterThe(slot.or) : slot.or } : undefined,\n    )!(\n        scheduler => delegated = toDefaultRenderScheduler(slot.context, scheduler),\n    ).whenOff(\n        reason => delegated = contextDestroyed(reason),\n    );\n\n    slot.insert((...args) => delegated(...args));\n  }\n\n}\n\n/**\n * @internal\n */\nfunction toDefaultRenderScheduler(\n    context: ContextValues,\n    scheduler: RenderScheduler,\n): DefaultRenderScheduler {\n  return (options = {}) => scheduler({\n    ...options,\n    window: options.window || context.get(BootstrapWindow),\n  });\n}\n\n/**\n * A key of bootstrap, definition, or component context value containing {@link DefaultRenderScheduler} instance.\n *\n * Uses the default `RenderScheduler` (`newRenderSchedule()`) for {@link BootstrapWindow bootstrap window}.\n *\n * @category Core\n */\nexport const DefaultRenderScheduler: ContextUpRef<DefaultRenderScheduler, RenderScheduler> = (\n    /*#__PURE__*/ new DefaultRenderSchedulerKey()\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextValueSlot } from '@proc7ts/context-values';\nimport { contextDestroyed, ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, digAfter, EventKeeper } from '@proc7ts/fun-events';\nimport { ComponentContext, ComponentContext__symbol, ComponentContextHolder } from '../../component';\n\n/**\n * Element adapter is a function able to convert a raw element to component. E.g. mount a component to it.\n *\n * Features may use it internally. E.g. an `AutoConnectSupport` applies it to each added DOM element.\n *\n * Multiple element adapters can be registered in bootstrap context.\n *\n * @category Core\n */\nexport type ElementAdapter =\n/**\n * @param element - Target raw element to adapt.\n *\n * @returns An adapted component's context, or `undefined` if element can not be adapted.\n */\n    (this: void, element: any) => ComponentContext | undefined;\n\n/**\n * @internal\n */\nclass ElementAdapterKey extends ContextUpKey<ElementAdapter, ElementAdapter> {\n\n  readonly upKey: ContextUpKey.UpKey<ElementAdapter, ElementAdapter>;\n\n  constructor() {\n    super('element-adapter');\n    this.upKey = this.createUpKey(\n        slot => slot.insert(slot.seed.do(digAfter((...adapters) => {\n\n          const combined: ElementAdapter = adapters.reduce(\n              (prev, adapter) => element => prev(element) || adapter(element),\n              defaultElementAdapter,\n          );\n\n          if (combined !== defaultElementAdapter) {\n            return afterThe(combined);\n          }\n          if (slot.hasFallback && slot.or) {\n            return slot.or;\n          }\n\n          return afterThe(defaultElementAdapter);\n        }))),\n    );\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          ElementAdapter,\n          EventKeeper<ElementAdapter[]> | ElementAdapter,\n          AfterEvent<ElementAdapter[]>>,\n  ): void {\n\n    let delegated: ElementAdapter;\n\n    slot.context.get(\n        this.upKey,\n        slot.hasFallback ? { or: slot.or != null ? afterThe(slot.or) : slot.or } : undefined,\n    )!(\n        adapter => delegated = adapter,\n    ).whenOff(\n        reason => delegated = contextDestroyed(reason),\n    );\n\n    slot.insert(element => delegated(element));\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultElementAdapter(element: ComponentContextHolder): ComponentContext | undefined {\n  return element[ComponentContext__symbol];\n}\n\n/**\n * A key of bootstrap context value containing combined {@link ElementAdapter} instance.\n *\n * @category Core\n */\nexport const ElementAdapter: ContextUpRef<ElementAdapter, ElementAdapter> = (/*#__PURE__*/ new ElementAdapterKey());\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { FnContextKey } from '@proc7ts/context-values/updatable';\nimport { filterArray, itsEach, overArray } from '@proc7ts/push-iterator';\nimport { isElement } from '../../common';\nimport { ComponentContext__symbol, ComponentContextHolder, ComponentMount } from '../../component';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { ElementAdapter } from './element-adapter';\n\n/**\n * Element mutations observer.\n *\n * It is a `MutationObserver` implementation that:\n * - always observes target's children,\n * - applies {@link ElementAdapter element adapter} to added elements,\n * - tracks mounted components {@link ComponentMount.connected connection state}.\n *\n * A function constructing element observer instance could be obtained from bootstrap context.\n *\n * @category Core\n */\nexport interface ElementObserver extends MutationObserver {\n\n  /**\n   * Configures the observer callback to begin receiving notifications of changes to the DOM that match the given\n   * options.\n   * To stop the MutationObserver (so that none of its callbacks will be triggered any longer), call\n   * {@link disconnect}.\n   *\n   * @param target - A DOM node within the DOM tree to watch for changes, and to be the root of a subtree of nodes\n   * to be watched.\n   * @param options - An options that describe what DOM mutations should be reported to the observer's callback.\n   */\n  observe(target: Node, options?: ElementObserverInit): void;\n\n}\n\n/**\n * A key of bootstrap context value containing a function constructing a new {@link ElementObserver} instance.\n *\n * @category Core\n */\nexport const ElementObserver: FnContextKey<[MutationCallback], ElementObserver> = (/*#__PURE__*/ new FnContextKey(\n    'element-observer',\n    {\n      byDefault: bootstrapDefault(bsContext => {\n\n        const adapter = bsContext.get(ElementAdapter);\n        class DefaultElementObserver extends MutationObserver implements ElementObserver {\n\n          constructor(callback: MutationCallback) {\n            super(mutations => {\n              mutations.forEach(mutation => {\n                itsEach(\n                    overArray(mutation.removedNodes),\n                    node => mountOf(node as ComponentContextHolder)?.checkConnected(),\n                );\n                itsEach(\n                    filterArray(mutation.addedNodes, isElement),\n                    element => adapter(element)?.mount?.checkConnected(),\n                );\n              });\n              callback(mutations, this);\n            });\n          }\n\n          observe(target: Node, options?: ElementObserverInit): void {\n            super.observe(target, { ...options, childList: true });\n          }\n\n        }\n\n        return callback => new DefaultElementObserver(callback);\n      }),\n    },\n));\n\n/**\n * Element observer initialization options.\n *\n * @category Core\n */\nexport interface ElementObserverInit extends MutationObserverInit {\n\n  /**\n   * Whether mutations to target's children are to be observed.\n   *\n   * Always `true`.\n   */\n  childList?: true;\n\n}\n\n/**\n * @internal\n */\nfunction mountOf(node: ComponentContextHolder): ComponentMount | undefined {\n  return node[ComponentContext__symbol]?.mount;\n}\n","import { ComponentClass, DefinitionContext } from '../../component/definition';\n\n/**\n * @internal\n */\nexport const DefinitionContext__symbol = (/*#__PURE__*/ Symbol('definition-context'));\n\n/**\n * @internal\n */\nexport interface ComponentDefinitionClass<T extends object> extends ComponentClass<T> {\n  [DefinitionContext__symbol]?: DefinitionContext<T>;\n}\n\n/**\n * @internal\n */\nexport function definitionContextOf<T extends object>(\n    componentType: ComponentDefinitionClass<T>,\n): DefinitionContext<T> {\n  // eslint-disable-next-line no-prototype-builtins\n  if (!componentType.hasOwnProperty(DefinitionContext__symbol)) {\n    throw new TypeError(`Component is not defined: ${componentType}`);\n  }\n  return componentType[DefinitionContext__symbol] as DefinitionContext<T>;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { html__naming, isQualifiedName, QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { Class, newPromiseResolver, PromiseResolver } from '@proc7ts/primitives';\nimport { BootstrapContext, bootstrapDefault } from '../../boot';\nimport { BootstrapWindow, DefaultNamespaceAliaser } from '../../boot/globals';\nimport { definitionContextOf } from '../../boot/impl/definition-context.symbol.impl';\nimport { ComponentClass } from './component-class';\n\n/**\n * @internal\n */\nconst CustomElements__key = (/*#__PURE__*/ new SingleContextKey<CustomElements>(\n    'custom-elements',\n    {\n      byDefault: bootstrapDefault(createCustomElements),\n    },\n));\n\n/**\n * Custom elements registry.\n *\n * This is used to register custom elements.\n *\n * Typically implemented by `window.customElements`.\n *\n * @category Core\n */\nexport abstract class CustomElements {\n\n  /**\n   * A key of bootstrap context value containing a `CustomElements` instance used to register custom\n   * elements.\n   *\n   * Target value defaults to `window.customElements` from the window provided under `[BootstrapWindow.key]`.\n   */\n  static get [ContextKey__symbol](): ContextKey<CustomElements> {\n    return CustomElements__key;\n  }\n\n  /**\n   * Defines custom element.\n   *\n   * @param componentTypeOrName - A component class constructor or custom element name. The latter may belong to\n   * namespace to avoid naming conflicts.\n   * @param elementType - A constructor of custom element to define.\n   */\n  abstract define(componentTypeOrName: ComponentClass | QualifiedName, elementType: Class): void;\n\n  /**\n   * Allows to wait for component definition.\n   *\n   * This corresponds to `window.customElements.whenDefined()` method.\n   *\n   * @param componentTypeOrName - Component class constructor or custom element name possibly belonging to some\n   * namespace.\n   *\n   * @return A promise that is resolved when custom element is registered.\n   *\n   * @throws TypeError If `componentType` does not contain a component definition.\n   */\n  abstract whenDefined(componentTypeOrName: ComponentClass | QualifiedName): Promise<void>;\n\n}\n\n/**\n * @internal\n */\nfunction createCustomElements(bsContext: BootstrapContext): CustomElements {\n\n  const customElements: CustomElementRegistry = bsContext.get(BootstrapWindow).customElements;\n  const nsAlias = bsContext.get(DefaultNamespaceAliaser);\n\n  class CustomElements$ extends CustomElements {\n\n    define(componentTypeOrName: ComponentClass | string, elementType: Class): void {\n      if (isQualifiedName(componentTypeOrName)) {\n        customElements.define(html__naming.name(componentTypeOrName, nsAlias), elementType);\n        return;\n      }\n\n      const defContext = definitionContextOf(componentTypeOrName);\n      const { name, extend } = defContext.elementDef;\n\n      if (!name) {\n        componentResolver(componentTypeOrName).resolve(undefined);\n        return; // Anonymous component.\n      }\n      if (extend && extend.name) {\n        customElements.define(\n            html__naming.name(name, nsAlias),\n            elementType,\n            {\n              extends: extend.name,\n            },\n        );\n      } else {\n        customElements.define(html__naming.name(name, nsAlias), elementType);\n      }\n    }\n\n    whenDefined(componentTypeOrName: ComponentClass | string): Promise<void> {\n      if (isQualifiedName(componentTypeOrName)) {\n        return customElements.whenDefined(html__naming.name(componentTypeOrName, nsAlias));\n      }\n\n      const defContext = definitionContextOf(componentTypeOrName);\n      const { name } = defContext.elementDef;\n\n      if (!name) {\n        return componentResolver(componentTypeOrName).promise();\n      }\n\n      return customElements.whenDefined(html__naming.name(name, nsAlias));\n    }\n\n  }\n\n  return new CustomElements$();\n}\n\n/**\n * @internal\n */\nconst ComponentResolver__symbol = (/*#__PURE__*/ Symbol('component-resolver'));\n\n/**\n * @internal\n */\ninterface CustomComponentClass<T extends object = any> extends ComponentClass<T> {\n  [ComponentResolver__symbol]?: PromiseResolver;\n}\n\n/**\n * @internal\n */\nfunction componentResolver(componentType: CustomComponentClass): PromiseResolver {\n  // eslint-disable-next-line no-prototype-builtins\n  if (componentType.hasOwnProperty(ComponentResolver__symbol)) {\n    return componentType[ComponentResolver__symbol] as PromiseResolver;\n  }\n  return componentType[ComponentResolver__symbol] = newPromiseResolver();\n}\n","import { SingleContextKey } from '@proc7ts/context-values';\nimport { DefinitionContext } from './definition-context';\n\n/**\n * @internal\n */\nexport const DefinitionContext__key = (/*#__PURE__*/ new SingleContextKey<DefinitionContext>('definition-context'));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { Class } from '@proc7ts/primitives';\nimport { BootstrapWindow } from '../../boot/globals';\nimport { ComponentDef } from '../component-def';\nimport { DefinitionContext__key } from './definition.context.key.impl';\n\n/**\n * Custom element definition meta.\n *\n * @category Core\n */\nexport interface ElementDef {\n\n  /**\n   * Custom element name.\n   *\n   * The name may belong to some namespace to avoid naming conflicts. I.e. it can be either a string, or\n   * name/namespace tuple.\n   *\n   * When omitted an anonymous component will be registered. Such component is not bound to custom element, but it\n   * still can be mounted.\n   */\n  readonly name?: QualifiedName;\n\n  /**\n   * Existing element to extend by custom one.\n   */\n  readonly extend: ElementDef.Extend;\n\n}\n\n/**\n * A key of definition context value containing a custom element definition.\n *\n * Target value defaults to `HTMLElement` from the window provided under `[BootstrapWindow.key]`,\n * unless `ComponentDef.extend.type` is specified.\n *\n * @category Core\n */\nexport const ElementDef: SingleContextRef<ElementDef> = (/*#__PURE__*/ new SingleContextKey<ElementDef>(\n    'element-def',\n    {\n      byDefault(values) {\n\n        const componentType = values.get(DefinitionContext__key).componentType;\n        const { name, extend } = ComponentDef.of(componentType);\n\n        const elementExtend: ElementDef.Extend = {\n          get type() {\n            return extend && extend.type || values.get(BootstrapWindow).HTMLElement;\n          },\n          get name() {\n            return extend && extend.name;\n          },\n        };\n\n        return {\n          get name() {\n            return name;\n          },\n          get extend() {\n            return elementExtend;\n          },\n        };\n      },\n    },\n));\n\n/**\n * @category Core\n */\nexport namespace ElementDef {\n\n  /**\n   * The definition of element to extend by custom one.\n   */\n  export interface Extend {\n\n    /**\n     * The class constructor of element to extend.\n     */\n    readonly type: Class;\n\n    /**\n     * The name of element to extend.\n     *\n     * This is to support `as` attribute of standard HTML element. Note that this is not supported by polyfills.\n     */\n    readonly name?: string;\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues, ContextValueSpec } from '@proc7ts/context-values';\nimport { OnEvent } from '@proc7ts/fun-events';\nimport { Class, Supply } from '@proc7ts/primitives';\nimport { ComponentContext } from '../component-context';\nimport { ComponentMount } from '../component-mount';\nimport { ComponentClass } from './component-class';\nimport { DefinitionContext__key } from './definition.context.key.impl';\nimport { ElementDef } from './element-def';\n\n/**\n * Component definition context.\n *\n * Extends `ContextValues` interface. The values are provided by corresponding providers registered with\n * {@link BootstrapSetup.perDefinition} and {@link DefinitionSetup.perDefinition} methods. All {@link BootstrapContext}\n * values are available too.\n *\n * @category Core\n * @typeParam T - A type of component.\n */\nexport abstract class DefinitionContext<T extends object = any> extends ContextValues {\n\n  /**\n   * A key of definition context value containing the definition context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<DefinitionContext> {\n    return DefinitionContext__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element class constructor.\n   *\n   * It is an error accessing this property before the element class is created, e.g. from inside of\n   * {@link ComponentDef.define} function. In such case you may wish to add a `whenReady()` callback.\n   */\n  abstract readonly elementType: Class;\n\n  /**\n   * Custom element definition.\n   */\n  get elementDef(): ElementDef {\n    return this.get(ElementDef);\n  }\n\n  /**\n   * An `OnEvent` sender of component definition context upon its readiness.\n   *\n   * The custom element class is not constructed until component definition is complete.\n   * The registered receiver will be notified when the custom element class is constructed.\n   *\n   * If the custom element class is constructed already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[this]>;\n\n  /**\n   * An `OnEvent` sender of component context upon its instantiation.\n   *\n   * If component instantiated after the receiver is registered, that receiver would receive an instantiated component's\n   * context immediately.\n   *\n   * If component already exists when the receiver is registered, that receiver would receive instantiated component's\n   * context only when/if component is {@link ComponentContext.whenConnected connected}. This is to prevent resource\n   * leaks on destroyed components.\n   */\n  abstract readonly whenComponent: OnEvent<[ComponentContext<T>]>;\n\n  /**\n   * Mounts a component to arbitrary element.\n   *\n   * This method creates a component, but instead of creating a custom element for, it mounts it to the target\n   * `element`.\n   *\n   * It is up to the features to update the target element. They can use a `ComponentContext.mount` property to check\n   * whether the component is mounted or is constructed in standard way.\n   *\n   * The constructed component will be in disconnected state. To update its connection state either update a\n   * `ComponentMount.connected` property, or use a `connectTo()` method.\n   *\n   * @param element - Target element to mount new component to.\n   *\n   * @returns New component mount.\n   *\n   * @throws Error If target element is already bound to some component.\n   */\n  abstract mountTo(element: any): ComponentMount<T>;\n\n  /**\n   * Connects a component to arbitrary element.\n   *\n   * This method does the same as `mountTo()`, but also marks the mounted component as connected.\n   *\n   * @param element - Target element to mount new component to.\n   *\n   * @returns New component mount.\n   *\n   * @throws Error If target element is already bound to some component.\n   */\n  connectTo(element: any): ComponentMount<T> {\n\n    const mount = this.mountTo(element);\n\n    mount.connect();\n\n    return mount;\n  }\n\n  /**\n   * Provides a value available in the context of each component of the defined component type.\n   *\n   * @typeParam TDeps - A type of dependencies.\n   * @typeParam TSrc - The type of context value sources.\n   * @typeParam TSeed - Value seed type.\n   * @param spec - Component context value specifier.\n   *\n   * @returns A value supply that removes the given context value specifier once cut off.\n   */\n  abstract perComponent<TDeps extends any[], TSrc, TSeed>(\n      spec: ContextValueSpec<ComponentContext<T>, any, TDeps, TSrc, TSeed>,\n  ): Supply;\n\n}\n","import { onceOn, OnEvent, trackValue, valueOn_ } from '@proc7ts/fun-events';\nimport { Supply, valueProvider } from '@proc7ts/primitives';\nimport { ComponentContext, ComponentContext__symbol, ComponentContextHolder, ComponentEvent } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { DefinitionContext$ } from './definition-context.impl';\n\nconst enum ComponentStatus {\n  Building,\n  Ready,\n  Built,\n  Settled,\n  Connected,\n}\n\n/**\n * @internal\n */\nexport abstract class ComponentContext$<T extends object> extends ComponentContext<T> {\n\n  readonly whenReady: OnEvent<[this]>;\n  readonly whenSettled: OnEvent<[this]>;\n  readonly whenConnected: OnEvent<[this]>;\n  readonly get: ComponentContext<T>['get'];\n  private _status = trackValue<ComponentStatus>(ComponentStatus.Building);\n\n  constructor(\n      readonly _definitionContext: DefinitionContext$<T>,\n      readonly element: any,\n  ) {\n    super();\n\n    this.whenReady = this._status.read.do(\n        valueOn_(status => !!status && this),\n        onceOn,\n    );\n    this.whenSettled = this._status.read.do(\n        valueOn_(status => status >= ComponentStatus.Settled && this),\n        onceOn,\n    );\n    this.whenConnected = this._status.read.do(\n        valueOn_(status => status >= ComponentStatus.Connected && this),\n        onceOn,\n    );\n\n    const registry = _definitionContext._newComponentRegistry();\n\n    registry.provide({ a: ComponentContext, is: this });\n    this.get = registry.newValues().get;\n  }\n\n  get componentType(): ComponentClass<T> {\n    return this._definitionContext.componentType;\n  }\n\n  get component(): T {\n    return this._component();\n  }\n\n  get settled(): boolean {\n    return this._status.it >= ComponentStatus.Settled && !this.supply.isOff;\n  }\n\n  get connected(): boolean {\n    return this._status.it >= ComponentStatus.Connected && !this.supply.isOff;\n  }\n\n  get supply(): Supply {\n    return this._status.supply;\n  }\n\n  _component(): T {\n    throw new TypeError('Component is not constructed yet. Consider to use a `whenReady()` callback');\n  }\n\n  settle(): void {\n    if (this._status.it === ComponentStatus.Built) {\n      // Prevent settling until exiting custom element constructor\n      this._status.it = ComponentStatus.Settled;\n    }\n  }\n\n  destroy(reason?: any): void {\n    try {\n      this._status.supply.off(reason);\n    } finally {\n      delete (this.component as ComponentContextHolder)[ComponentContext__symbol];\n      delete (this.element as ComponentContextHolder)[ComponentContext__symbol];\n      this._component = componentDestroyed;\n      removeElement(this.element);\n    }\n  }\n\n  _createComponent(): this {\n\n    const whenComponent = this._definitionContext._whenComponent;\n\n    let lastRev = 0;\n\n    (this.element as ComponentContextHolder)[ComponentContext__symbol] = this;\n    whenComponent.readNotifier.do(onceOn)(notifier => lastRev = notifier(this, lastRev));\n    this.whenConnected(() => {\n      whenComponent.readNotifier({\n        supply: new Supply().needs(this),\n        receive: (_, notifier) => {\n          lastRev = notifier(this, lastRev);\n        },\n      });\n    });\n    this._definitionContext._elementBuilder.components.send(this);\n\n    const component = newComponent(this);\n\n    this._component = valueProvider(component);\n    this._status.it = ComponentStatus.Ready; // Issue `whenReady` event\n\n    return this;\n  }\n\n  _connect(): void {\n    this._status.it = ComponentStatus.Connected;\n  }\n\n  _created(): void {\n    if (this._status.it < ComponentStatus.Built) { // Mounted component can be connected already\n      this._status.it = ComponentStatus.Built; // Can settle now\n    }\n    this.whenConnected(\n        () => this.dispatchEvent(new ComponentEvent('wesib:component', { bubbles: true })),\n    );\n  }\n\n}\n\nfunction newComponent<T extends object>(context: ComponentContext<T>): T {\n\n  type ComponentProto = T & {\n    [ComponentContext__symbol]?: ComponentContext<T>;\n  };\n\n  const type = context.componentType;\n  const proto = type.prototype as ComponentProto;\n  const prevContext = proto[ComponentContext__symbol];\n\n  proto[ComponentContext__symbol] = context;\n  try {\n\n    const component = new type(context);\n\n    (component as ComponentContextHolder)[ComponentContext__symbol] = context;\n\n    return component;\n  } finally {\n    proto[ComponentContext__symbol] = prevContext;\n  }\n}\n\nfunction removeElement(element: Element): void {\n\n  const { parentNode } = element;\n\n  if (parentNode) {\n    parentNode.removeChild(element);\n  }\n}\n\nfunction componentDestroyed(): never {\n  throw new TypeError('Component destroyed already');\n}\n","import { ComponentMount } from '../../component';\nimport { ComponentContext$ } from './component-context.impl';\nimport { DefinitionContext$ } from './definition-context.impl';\n\nclass ComponentMount$<T extends object> extends ComponentMount<T> {\n\n  constructor(readonly context: ComponentContext$<T>) {\n    super();\n  }\n\n  get connected(): boolean {\n    return this.context.connected;\n  }\n\n  connect(): void {\n    this.context._connect();\n  }\n\n  checkConnected(): boolean {\n\n    const el = this.context.element as Element;\n    const doc = el.ownerDocument;\n    const connected = doc != null && doc.contains(el);\n\n    if (connected !== this.connected) {\n      if (connected) {\n        this.connect();\n      } else {\n        this.context.destroy();\n      }\n    }\n\n    return connected;\n  }\n\n}\n\n/**\n * @internal\n */\nexport class MountComponentContext$<T extends object> extends ComponentContext$<T> {\n\n  readonly mount: ComponentMount<T>;\n\n  constructor(definitionContext: DefinitionContext$<T>, element: any) {\n    super(definitionContext, element);\n    this.mount = this.mount = new ComponentMount$<T>(this);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentContext } from './component-context';\n\n/**\n * A mount of the component to an element.\n *\n * This is constructed when a component is mounted to arbitrary element by {@link DefinitionContext.mountTo} method.\n *\n * Mounted components do not maintain their connection state automatically. It is a calling code responsibility to set\n * their connection state by updating {@link ComponentMount.connected} property. E.g. by calling a\n * {@link ComponentMount.checkConnected} method. An {@link ElementObserver} and {@link AutoConnectSupport} feature\n * could be used to do it automatically.\n *\n * @category Core\n * @typeParam T - A type of component.\n */\nexport abstract class ComponentMount<T extends object = any> {\n\n  /**\n   * Mounted component context.\n   */\n  abstract readonly context: ComponentContext<T>;\n\n  /**\n   * Component connection state.\n   *\n   * The initial state is set by {@link checkConnected} method.\n   */\n  abstract readonly connected: boolean;\n\n  /**\n   * Mounted component.\n   */\n  get component(): T {\n    return this.context.component;\n  }\n\n  /**\n   * An element the component is mounted to.\n   */\n  get element(): any {\n    return this.context.element as unknown;\n  }\n\n  /**\n   * Forcibly connects mounted component element to the document.\n   */\n  abstract connect(): void;\n\n  /**\n   * Checks whether the mounted component element is actually connected to its owning document.\n   *\n   * Updates the `connected` property and returns its value.\n   *\n   * When component is disconnected after it has been connected, the component is {@link ComponentContext.destroy\n   * destroyed}.\n   *\n   * @returns `true` if the component element is connected, or `false` otherwise.\n   */\n  abstract checkConnected(): boolean;\n\n}\n","import { Class } from '@proc7ts/primitives';\nimport { CustomElementClass } from '../../common';\nimport { ComponentContext__symbol } from '../../component';\nimport { ElementDef } from '../../component/definition';\nimport { ComponentContext$ } from './component-context.impl';\nimport { DefinitionContext$ } from './definition-context.impl';\n\nclass CustomComponentContext$<T extends object> extends ComponentContext$<T> {\n\n  get mount(): undefined {\n    return;\n  }\n\n}\n\n/**\n * @internal\n */\nexport function customElementType<T extends object>(\n    definitionContext: DefinitionContext$<T>,\n): Class {\n\n  const elementDef = definitionContext.get(ElementDef);\n\n  class CustomElement$ extends (elementDef.extend.type as CustomElementClass) {\n\n    // Component context reference\n    [ComponentContext__symbol]: CustomComponentContext$<T>;\n\n    constructor() {\n      super();\n\n      const context = new CustomComponentContext$(definitionContext, this);\n\n      context._createComponent();\n      context._created();\n    }\n\n    connectedCallback(): void {\n      super.connectedCallback?.();\n      this[ComponentContext__symbol]._connect();\n    }\n\n    disconnectedCallback(): void {\n      this[ComponentContext__symbol].destroy();\n      super.disconnectedCallback?.();\n    }\n\n  }\n\n  return CustomElement$;\n}\n","import { AfterEvent, EventEmitter, mapAfter_, OnEvent, onEventBy, trackValue } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\n\nexport class WhenComponent<T extends object> {\n\n  readonly onCreated: OnEvent<[ComponentContext<T>]>;\n  readonly readNotifier: AfterEvent<[ComponentNotifier<T>]>;\n\n  constructor() {\n\n    const currentRev = trackValue(0);\n    const created = new EventEmitter<[ComponentContext<T>, number]>();\n\n    this.onCreated = onEventBy(receiver => {\n\n      const receiverRev = currentRev.it + 1;\n\n      created.on({\n        supply: receiver.supply,\n        receive: (eventContext, componentContext, notifiedRev) => {\n          if (notifiedRev < receiverRev) {\n            // Notify only receivers added after the last notification\n            receiver.receive(\n                {\n                  onRecurrent(recurrentReceiver) {\n                    eventContext.onRecurrent(recurrentContext => recurrentReceiver(recurrentContext));\n                  },\n                },\n                componentContext,\n            );\n          }\n        },\n      });\n\n      ++currentRev.it;\n    });\n    this.readNotifier = currentRev.read.do(\n        mapAfter_(\n            rev => (context, notifiedRev) => {\n              created.send(context, notifiedRev);\n              return rev;\n            },\n        ),\n    );\n  }\n\n}\n\nexport type ComponentNotifier<T extends object> = (\n    this: void,\n    context: ComponentContext<T>,\n    notifiedRev: number,\n) => number;\n","import { ContextValues, ContextValueSpec } from '@proc7ts/context-values';\nimport { mapOn_, onceOn, OnEvent, trackValue, translateOn, ValueTracker } from '@proc7ts/fun-events';\nimport { Class, Supply, valueProvider } from '@proc7ts/primitives';\nimport {\n  ComponentContext,\n  ComponentContext__symbol,\n  ComponentContextHolder,\n  ComponentDef,\n  ComponentMount,\n} from '../../component';\nimport { DefinitionContext, DefinitionSetup } from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { ComponentContextRegistry, PerComponentRegistry } from './component-context-registry.impl';\nimport { MountComponentContext$ } from './component-mount.impl';\nimport { customElementType } from './custom-element.impl';\nimport { DefinitionContextRegistry, PerDefinitionRegistry } from './definition-context-registry.impl';\nimport { ComponentDefinitionClass, DefinitionContext__symbol } from './definition-context.symbol.impl';\nimport { ElementBuilder } from './element-builder.impl';\nimport { postDefSetup } from './post-def-setup.impl';\nimport { WhenComponent } from './when-component.impl';\n\n/**\n * @internal\n */\nexport class DefinitionContext$<T extends object> extends DefinitionContext<T> {\n\n  readonly whenReady: OnEvent<[this]>;\n  readonly get: ContextValues['get'];\n  private readonly _def: ComponentDef.Options<T>;\n  readonly _whenComponent = new WhenComponent<T>();\n  private readonly _ready: ValueTracker<boolean>;\n  private readonly _whenReady: OnEvent<[]>;\n  private readonly _perComponentRegistry: ComponentContextRegistry;\n\n  constructor(\n      readonly _bsContext: BootstrapContext,\n      readonly _elementBuilder: ElementBuilder,\n      readonly componentType: ComponentDefinitionClass<T>,\n  ) {\n    super();\n    this._ready = trackValue(false);\n    this._whenReady = this._ready.read.do(translateOn((send, ready) => ready && send()));\n    this._def = ComponentDef.of(componentType);\n\n    const definitionContextRegistry = new DefinitionContextRegistry(_bsContext.get(PerDefinitionRegistry).seeds());\n\n    definitionContextRegistry.provide({ a: DefinitionContext, is: this });\n\n    this.get = definitionContextRegistry.newValues().get;\n\n    const parentPerComponentRegistry = _bsContext.get(PerComponentRegistry).append(seedKey => this.get(seedKey));\n    this._perComponentRegistry = new ComponentContextRegistry(parentPerComponentRegistry.seeds());\n\n    this.whenReady = this._whenReady.do(mapOn_(valueProvider(this)), onceOn);\n\n    const definitionSetup: DefinitionSetup<T> = {\n      get componentType() {\n        return componentType;\n      },\n      whenReady: this.whenReady,\n      whenComponent: this.whenComponent,\n      perDefinition: spec => definitionContextRegistry.provide(spec),\n      perComponent: spec => this._perComponentRegistry.provide(spec),\n    };\n\n    this._def.setup?.(definitionSetup);\n    postDefSetup(componentType).setup(definitionSetup);\n  }\n\n  get elementType(): Class {\n    return this._elementType();\n  }\n\n  get whenComponent(): OnEvent<[ComponentContext<T>]> {\n    return this._whenComponent.onCreated;\n  }\n\n  mountTo(element: ComponentContextHolder): ComponentMount<T> {\n    if (element[ComponentContext__symbol]) {\n      throw new Error(`Element ${String(element)} already bound to component`);\n    }\n\n    const context = new MountComponentContext$(this, element);\n\n    context._createComponent();\n\n    const { mount } = context;\n\n    mount.checkConnected();\n    context._created();\n    context.settle();\n\n    return mount;\n  }\n\n  perComponent<TDeps extends any[], TSrc, TSeed>(\n      spec: ContextValueSpec<ComponentContext<T>, any, TDeps, TSrc, TSeed>,\n  ): Supply {\n    return this._perComponentRegistry.provide(spec);\n  }\n\n  _newComponentRegistry(): ComponentContextRegistry {\n    return new ComponentContextRegistry(this._perComponentRegistry.seeds());\n  }\n\n  _elementType(): Class {\n    throw new Error('Custom element class is not constructed yet. Consider to use a `whenReady()` callback');\n  }\n\n  _define(): void {\n    this._def.define?.(this);\n    this._elementBuilder.definitions.send(this);\n    this._elementType = valueProvider(customElementType(this));\n    this.componentType[DefinitionContext__symbol] = this;\n    this._ready.it = true;\n  }\n\n}\n","import { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { EventEmitter } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\nimport { ComponentClass, DefinitionContext } from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { DefinitionContext$ } from './definition-context.impl';\n\n/**\n * @internal\n */\nexport interface ElementBuilder {\n  readonly definitions: EventEmitter<[DefinitionContext]>;\n  readonly components: EventEmitter<[ComponentContext]>;\n  buildElement<T extends object>(this: void, componentType: ComponentClass<T>): DefinitionContext<T>;\n}\n\n/**\n * @internal\n */\nexport const ElementBuilder: SingleContextRef<ElementBuilder> = (/*#__PURE__*/ new SingleContextKey<ElementBuilder>(\n    'element-builder',\n    {\n      byDefault: bootstrapDefault(newElementBuilder),\n    },\n));\n\nfunction newElementBuilder(bsContext: BootstrapContext): ElementBuilder {\n  return {\n    definitions: new EventEmitter<[DefinitionContext]>(),\n    components: new EventEmitter<[ComponentContext]>(),\n    buildElement<T extends object>(componentType: ComponentClass<T>) {\n\n      const definitionContext = new DefinitionContext$(bsContext, this, componentType);\n\n      definitionContext._define();\n\n      return definitionContext;\n    },\n  };\n\n}\n","import { ContextModule } from '@proc7ts/context-values/updatable';\nimport { valueProvider } from '@proc7ts/primitives';\nimport { ElementBuilder } from '../../boot/impl';\nimport { ComponentClass, CustomElements } from '../../component/definition';\nimport { BootstrapWorkbench, componentDefStage } from './bootstrap-workbench.impl';\n\n/**\n * @internal\n */\nexport class ComponentRegistry {\n\n  private _components?: ComponentClass[] = undefined;\n\n  constructor(private readonly _setup: ContextModule.Setup) {\n  }\n\n  define<T extends object>(componentType: ComponentClass<T>): void {\n    if (this._components) {\n      this._components.push(componentType);\n    } else {\n      this._components = [componentType];\n      this._defineAll(this._components);\n    }\n  }\n\n  private _defineAll(components: ComponentClass[]): void {\n\n    const workbench = this._setup.get(BootstrapWorkbench);\n    const whenDefined = workbench.work(componentDefStage).run(() => {\n\n      const customElements = this._setup.get(CustomElements);\n      const elementBuilder = this._setup.get(ElementBuilder);\n\n      components.forEach(componentType => {\n\n        const defContext = elementBuilder.buildElement(componentType);\n\n        customElements.define(componentType, defContext.elementType);\n      });\n      this._components = undefined;\n    });\n\n    this._setup.initBy(valueProvider(whenDefined));\n  }\n\n}\n","import { ContextRegistry, ContextValueSpec } from '@proc7ts/context-values';\nimport { ContextModule } from '@proc7ts/context-values/updatable';\nimport { onceOn, OnEvent, supplyOn, valueOn_ } from '@proc7ts/fun-events';\nimport { Class, Supply } from '@proc7ts/primitives';\nimport { BootstrapContext } from '../../boot';\nimport {\n  BootstrapContextRegistry,\n  ElementBuilder,\n  onPostDefSetup,\n  PerComponentRegistry,\n  PerDefinitionRegistry,\n} from '../../boot/impl';\nimport { ComponentContext } from '../../component';\nimport { ComponentClass, DefinitionContext, DefinitionSetup } from '../../component/definition';\nimport { FeatureContext } from '../feature-context';\nimport { ComponentRegistry } from './component-registry.impl';\n\n/**\n * @internal\n */\nexport class FeatureContext$ extends FeatureContext {\n\n  readonly whenReady: OnEvent<[FeatureContext]>;\n  private _onDefinition?: OnEvent<[DefinitionContext]>;\n  private _onComponent?: OnEvent<[ComponentContext]>;\n  readonly get: FeatureContext['get'];\n  private readonly _bsContext: BootstrapContext;\n  private readonly _componentRegistry: ComponentRegistry;\n\n  constructor(readonly feature: Class, private readonly _setup: ContextModule.Setup) {\n    super();\n\n    this._bsContext = _setup.get(BootstrapContext);\n\n    const handle = _setup.get(_setup.module);\n    const registry = new ContextRegistry<FeatureContext>(this._bsContext);\n\n    registry.provide({ a: FeatureContext, is: this });\n    this.get = registry.newValues().get;\n\n    this.whenReady = handle.read.do(\n        valueOn_(({ ready }) => ready && this),\n        onceOn,\n    );\n\n    this._componentRegistry = new ComponentRegistry(this._setup);\n  }\n\n  get supply(): Supply {\n    return this._setup.supply;\n  }\n\n  get onDefinition(): OnEvent<[DefinitionContext]> {\n    return this._onDefinition\n        || (this._onDefinition = this._setup.get(ElementBuilder).definitions.on.do(supplyOn(this)));\n  }\n\n  get onComponent(): OnEvent<[ComponentContext]> {\n    return this._onComponent\n        || (this._onComponent = this._setup.get(ElementBuilder).components.on.do(supplyOn(this)));\n  }\n\n  provide<TDeps extends any[], TSrc, TSeed>(\n      spec: ContextValueSpec<BootstrapContext, any, TDeps, TSrc, TSeed>,\n  ): Supply {\n    return this._bsContext.get(BootstrapContextRegistry).provide(spec).needs(this);\n  }\n\n  perDefinition<TDeps extends any[], TSrc, TSeed>(\n      spec: ContextValueSpec<DefinitionContext, any, TDeps, TSrc, TSeed>,\n  ): Supply {\n    return this._bsContext.get(PerDefinitionRegistry).provide(spec).needs(this);\n  }\n\n  perComponent<TDeps extends any[], TSrc, TSeed>(\n      spec: ContextValueSpec<ComponentContext, any, TDeps, TSrc, TSeed>,\n  ): Supply {\n    return this._bsContext.get(PerComponentRegistry).provide(spec).needs(this);\n  }\n\n  setupDefinition<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionSetup]> {\n    return onPostDefSetup(componentType, this.supply);\n  }\n\n  define<T extends object>(componentType: ComponentClass<T>): void {\n    this._componentRegistry.define(componentType);\n  }\n\n}\n","import { ContextModule } from '@proc7ts/context-values/updatable';\nimport { Class, setOfElements, valueProvider } from '@proc7ts/primitives';\nimport { ComponentDef, ComponentDef__symbol } from '../../component';\nimport { FeatureDef } from '../feature-def';\nimport { BootstrapWorkbench, featureInitStage, featureSetupStage } from './bootstrap-workbench.impl';\nimport { FeatureContext$ } from './feature-context.impl';\n\nconst FeatureModule__symbol = (/*#__PURE__*/ Symbol('feature-module'));\n\ninterface FeatureClass extends Class {\n\n  [FeatureModule__symbol]?: FeatureModule;\n\n}\n\n/**\n * @internal\n */\nexport class FeatureModule extends ContextModule {\n\n  static of(feature: FeatureClass): FeatureModule {\n    if (Object.prototype.hasOwnProperty.call(feature, FeatureModule__symbol)) {\n      return feature[FeatureModule__symbol]!;\n    }\n    return feature[FeatureModule__symbol] = new FeatureModule(feature);\n  }\n\n  constructor(readonly feature: Class) {\n    super(feature.name, FeatureModule$options(feature));\n  }\n\n  async setup(setup: ContextModule.Setup): Promise<void> {\n\n    const workbench = setup.get(BootstrapWorkbench);\n\n    await workbench.work(featureSetupStage).run(() => super.setup(setup));\n  }\n\n}\n\nfunction FeatureModule$options(feature: Class): ContextModule.Options {\n\n  const def = featureDef(feature);\n  const has: FeatureModule[] = [];\n  const needs: FeatureModule[] = [];\n\n  for (const replaced of setOfElements(def.has)) {\n    has.push(FeatureModule.of(replaced));\n  }\n  for (const required of setOfElements(def.needs)) {\n    needs.push(FeatureModule.of(required));\n  }\n\n  return {\n    needs,\n    has,\n    setup(setup) {\n\n      const workbench = setup.get(BootstrapWorkbench);\n      const featureContext = new FeatureContext$(feature, setup);\n\n      if (def.init) {\n\n        const whenInit = workbench.work(featureInitStage).run(() => {\n          def.init!(featureContext);\n        });\n\n        setup.initBy(valueProvider(whenInit));\n      }\n\n      def.setup?.(featureContext);\n    },\n  };\n}\n\nfunction featureDef(featureType: Class): FeatureDef.Options {\n\n  let def = FeatureDef.of(featureType);\n\n  if (ComponentDef__symbol in featureType) {\n    def = FeatureDef.merge(\n        def,\n        {\n          init(context) {\n            context.define(featureType);\n          },\n        },\n    );\n\n    const { feature } = ComponentDef.of(featureType);\n\n    if (feature) {\n      def = FeatureDef.merge(def, feature);\n    }\n\n  }\n\n  return def;\n}\n","import { OnEvent, onPromise } from '@proc7ts/fun-events';\nimport { ComponentClass, CustomElements, DefinitionContext } from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { definitionContextOf } from './definition-context.symbol.impl';\n\n/**\n * @internal\n */\nexport const WhenDefined__symbol = (/*#__PURE__*/ Symbol('when-defined'));\n\ninterface WhenDefinedComponentClass<T extends object> extends ComponentClass<T> {\n  [WhenDefined__symbol]?: OnEvent<[DefinitionContext<T>]>;\n}\n\n/**\n * @internal\n */\nexport function whenDefined<T extends object>(\n    bsContext: BootstrapContext,\n    componentType: WhenDefinedComponentClass<T>,\n): OnEvent<[DefinitionContext<T>]> {\n  // eslint-disable-next-line no-prototype-builtins\n  if (componentType.hasOwnProperty(WhenDefined__symbol)) {\n    return componentType[WhenDefined__symbol] as OnEvent<[DefinitionContext<T>]>;\n  }\n\n  const result: OnEvent<[DefinitionContext<T>]> = onPromise(\n      Promise.resolve(bsContext.whenReady)\n          .then(() => bsContext.get(CustomElements).whenDefined(componentType))\n          .then(() => definitionContextOf(componentType)),\n  );\n\n  return componentType[WhenDefined__symbol] = result;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { newNamespaceAliaser } from '@frontmeans/namespace-aliaser';\nimport { ContextModule } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, AfterEvent__symbol, onceOn, OnEvent, trackValue, valueOn, valueOn_ } from '@proc7ts/fun-events';\nimport { Class, SupplyPeer, valueProvider } from '@proc7ts/primitives';\nimport { ComponentClass, DefinitionContext } from '../../component/definition';\nimport { FeatureDef, FeatureRef, FeatureStatus } from '../../feature';\nimport { FeatureModule } from '../../feature/loader';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { DefaultNamespaceAliaser } from '../globals';\nimport { BootstrapContextRegistry } from '../impl';\nimport { whenDefined } from '../impl/when-defined.impl';\n\n/**\n * Bootstraps components.\n *\n * Both features and components can be passed as parameters to this function.\n *\n * @category Core\n * @param features - Features and components to enable.\n *\n * @returns Bootstrap context instance.\n */\nexport function bootstrapComponents(...features: Class[]): BootstrapContext {\n\n  const bootstrapContextRegistry = BootstrapContextRegistry.create();\n  const { bootstrapContext, complete } = initBootstrap(bootstrapContextRegistry);\n  const feature = features.length === 1 ? features[0] : bootstrapFeature(features);\n\n  bootstrapContext.load(feature)\n      .read\n      .do(\n          valueOn_(({ ready }) => ready),\n          onceOn,\n      )\n      .then(complete)\n      .catch(console.error);\n\n  return bootstrapContext;\n}\n\n/**\n * @internal\n */\nfunction bootstrapFeature(needs: Class[]): Class {\n  return FeatureDef.define(class BootstrapFeature {}, { needs });\n}\n\n/**\n * @internal\n */\nconst enum BootstrapStage {\n  Init,\n  Ready,\n}\n\n/**\n * @internal\n */\nfunction initBootstrap(\n    bootstrapContextRegistry: BootstrapContextRegistry,\n): {\n  bootstrapContext: BootstrapContext;\n  complete(): void;\n} {\n\n  const stage = trackValue<BootstrapStage>(BootstrapStage.Init);\n  const values = bootstrapContextRegistry.values;\n\n  class BootstrapContext$ extends BootstrapContext {\n\n    readonly whenReady: OnEvent<[BootstrapContext]>;\n    readonly get = values.get;\n\n    constructor() {\n      super();\n      this.whenReady = stage.read.do(\n          valueOn(bsStage => !!bsStage && this),\n          onceOn,\n      );\n      bootstrapContextRegistry.provide({ a: DefaultNamespaceAliaser, by: newNamespaceAliaser });\n      bootstrapContextRegistry.provide({ a: BootstrapContext, is: this });\n    }\n\n    whenDefined<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionContext<T>]> {\n      return whenDefined(this, componentType);\n    }\n\n    load(feature: Class, user?: SupplyPeer): FeatureRef {\n\n      const module = FeatureModule.of(feature);\n      const supply = bootstrapContextRegistry.provide(module);\n\n      if (user) {\n        supply.needs(user);\n      } else {\n        user = supply;\n      }\n\n      const use = this.get(module).use(user);\n      const read = FeatureRef$read(feature, use);\n\n      return {\n        read,\n        whenReady: read.do(\n            valueOn_(status => status.ready && status),\n            onceOn,\n        ),\n        [AfterEvent__symbol]: valueProvider(read),\n        supply,\n      };\n    }\n\n  }\n\n  const bootstrapContext = new BootstrapContext$();\n\n  return {\n    bootstrapContext,\n    complete(): void {\n      stage.it = BootstrapStage.Ready;\n    },\n  };\n}\n\nfunction FeatureRef$read(\n    feature: Class,\n    use: ContextModule.Use,\n): AfterEvent<[FeatureStatus]> {\n\n  const status = trackValue<FeatureStatus>({ feature, ready: false });\n\n  use.read(({ module, ready }) => {\n\n    const feature = (module as FeatureModule).feature;\n    const lastStatus = status.it;\n\n    if (!lastStatus || lastStatus.feature !== feature || lastStatus.ready !== ready) {\n      status.it = {\n        feature,\n        ready,\n      };\n    }\n  }).needs(use);\n  status.supply.needs(use);\n\n  return status.read;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing element an attributes.\n *\n * Thus, an attribute state path is always something like `[AttributePath__root, 'attribute-name']`.\n *\n * @category Feature\n */\nexport const AttributePath__root = (/*#__PURE__*/ Symbol('attribute'));\n\n/**\n * A path to the named attribute state.\n *\n * @category Feature\n */\nexport type AttributePath = readonly [keyof AttributePath.RootKeys, string];\n\n/**\n * Constructs a named attribute state path.\n *\n * @category Feature\n * @param name - Target attribute name.\n *\n * @return Attribute state path.\n */\nexport function attributePathTo(name: string): AttributePath {\n  return [AttributePath__root, name];\n}\n\n/**\n * @category Feature\n */\nexport namespace AttributePath {\n  export interface RootKeys {\n    [AttributePath__root]: true;\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { StatePath } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { ComponentContext } from '../../component';\nimport { AttributeUpdateReceiver } from './attribute-def';\nimport { AttributeChangedCallback } from './attribute-descriptor';\nimport { attributePathTo } from './attribute-path';\n\n/**\n * @internal\n */\nexport function attributeStateUpdate<T extends object>(\n    name: string,\n    updateState: boolean | AttributeUpdateReceiver<T> | StatePath = true,\n): AttributeChangedCallback<T> {\n  if (updateState === false) {\n    return noop;\n  }\n  if (updateState === true || typeof updateState === 'function') {\n\n    const path = attributePathTo(name);\n    const update: AttributeUpdateReceiver<T> = updateState === true ? updateAttributeState : updateState;\n\n    return (component: T, newValue, oldValue) => update(component, path, newValue, oldValue);\n  }\n\n  return (component: T, newValue, oldValue) => updateAttributeState(\n      component,\n      updateState,\n      newValue,\n      oldValue,\n  );\n}\n\nfunction updateAttributeState<T extends object>(\n    component: T,\n    path: StatePath,\n    newValue: string | null,\n    oldValue: string | null,\n): void {\n  ComponentContext.of(component).updateState(path, newValue, oldValue);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Converts property name to _dash-style_ attribute name.\n *\n * - Any ASCII uppercase letter A to Z is transformed into a dash followed by its lowercase counterpart;\n * - other characters are left unchanged.\n *\n * @category Feature\n * @param name - Property name to convert.\n *\n * @returns  _dash-style_ attribute name.\n */\nexport function property2attributeName(name: string): string {\n\n  let result: string | undefined;\n\n  for (let i = 0; i < name.length; ++i) {\n\n    const c = name[i];\n\n    if (c <= 'Z' && c >= 'A') {\n      if (!result) {\n        // Allocate result on first conversion\n        result = name.substring(0, i);\n      }\n      result += '-' + c.toLowerCase();\n    } else if (result) {\n      result += c;\n    }\n  }\n\n  return result || name;\n}\n","import { AttributeDef } from './attribute-def';\nimport { AttributeChangedCallback, AttributeDescriptor } from './attribute-descriptor';\nimport { attributeStateUpdate } from './attribute-state-update.impl';\nimport { property2attributeName } from './property2attribute-name';\n\n/**\n * @internal\n */\nexport function parseAttributeDescriptor<T extends object>(\n    target: T,\n    propertyKey: string | symbol,\n    opts?: AttributeDef<T> | string,\n): AttributeDescriptor<T> {\n\n  let name: string;\n  let change: AttributeChangedCallback<T>;\n\n  if (typeof opts === 'string') {\n    name = property2attributeName(opts);\n    change = attributeStateUpdate(name);\n  } else {\n    if (opts && opts.name) {\n      name = property2attributeName(opts.name);\n    } else if (typeof propertyKey !== 'string') {\n      throw new TypeError(\n          'Attribute name is required as property key is not a string: '\n          + `${target.constructor.name}.prototype.${String(propertyKey)}`,\n      );\n    } else {\n      name = property2attributeName(propertyKey);\n    }\n\n    change = attributeStateUpdate(name, opts && opts.updateState);\n  }\n\n  return { name, change };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextRef, SingleContextKey } from '@proc7ts/context-values';\nimport { mergeFunctions } from '@proc7ts/primitives';\nimport { BootstrapWindow } from '../../boot/globals';\nimport { CustomElementClass } from '../../common';\nimport { ComponentContext, ComponentMount } from '../../component';\nimport { DefinitionContext } from '../../component/definition';\nimport { AttributeChangedCallback, AttributeDescriptor } from './attribute-descriptor';\n\n/**\n * A registry of component's element attributes.\n *\n * @category Feature\n */\nexport interface AttributeRegistry {\n\n  /**\n   * Declares component element's attribute.\n   *\n   * @param descriptor - Attribute descriptor.\n   */\n  declareAttribute(descriptor: AttributeDescriptor): void;\n\n}\n\n/**\n * A key of component definition context value containing {@link AttributeRegistry attribute registry}.\n *\n * @category Feature\n */\nexport const AttributeRegistry: ContextRef<AttributeRegistry> = (\n    /*#__PURE__*/ new SingleContextKey<AttributeRegistry>(\n        'attribute-registry',\n        {\n          byDefault(context) {\n            return new AttributeRegistry$(context.get(DefinitionContext));\n          },\n        },\n    )\n);\n\n/**\n * @internal\n */\nclass AttributeRegistry$ implements AttributeRegistry {\n\n  private readonly attrs = new Map<string, AttributeChangedCallback<any>>();\n\n  constructor(private readonly _context: DefinitionContext) {\n    _context.whenReady(({ elementType }) => this.define(elementType as CustomElementClass));\n    _context.whenComponent(({ mount }) => {\n      if (mount) {\n        // Mount element attributes\n        this.mount(mount);\n      }\n    });\n  }\n\n  declareAttribute({ name, change }: AttributeDescriptor): void {\n    this.attrs.set(name, mergeFunctions(this.attrs.get(name), change));\n  }\n\n  private define(elementType: CustomElementClass): void {\n\n    const { attrs } = this;\n\n    if (!attrs.size) {\n      return; // No attributes defined\n    }\n\n    Object.defineProperty(elementType, 'observedAttributes', {\n      configurable: true,\n      enumerable: true,\n      value: observedAttributes(elementType, [...attrs.keys()]),\n    });\n    Object.defineProperty(elementType.prototype, 'attributeChangedCallback', {\n      configurable: true,\n      enumerable: true,\n      value: attributeChangedCallback(elementType, attrs),\n    });\n  }\n\n  private mount(mount: ComponentMount): void {\n\n    const { element } = mount as { element: Element };\n    const { attrs } = this;\n    const attributeFilter = [...attrs.keys()];\n\n    if (!attributeFilter.length) {\n      return; // No attributes defined\n    }\n\n    const MutationObserver = this._context.get(BootstrapWindow).MutationObserver;\n    const observer = new MutationObserver(\n        records => records.forEach(\n            record => {\n\n              const attributeName = record.attributeName as string;\n\n              return attrs.get(attributeName)!(\n                  ComponentContext.of(element).component,\n                  element.getAttribute(attributeName),\n                  record.oldValue,\n              );\n            },\n        ),\n    );\n\n    observer.observe(element, {\n      attributes: true,\n      attributeFilter,\n      attributeOldValue: true,\n    });\n  }\n\n}\n\n/**\n * @internal\n */\ntype ElementAttributeChanged = (\n    this: any,\n    name: string,\n    oldValue: string | null,\n    newValue: string | null,\n) => void;\n\n/**\n * @internal\n */\nfunction observedAttributes(\n    elementType: CustomElementClass,\n    attrs: readonly string[],\n): readonly string[] {\n\n  const alreadyObserved = elementType.observedAttributes;\n\n  if (Array.isArray(alreadyObserved)) {\n\n    const newAttrs = new Set<string>(alreadyObserved);\n\n    attrs.forEach(attr => newAttrs.add(attr));\n\n    attrs = [...newAttrs];\n  }\n\n  return attrs;\n}\n\n/**\n * @internal\n */\nfunction attributeChangedCallback<T extends object>(\n    elementType: CustomElementClass,\n    attrs: Map<string, AttributeChangedCallback<T>>,\n): ElementAttributeChanged {\n\n  const prevCallback = elementType.prototype.attributeChangedCallback;\n\n  if (!prevCallback) {\n    return function (this: any, name, oldValue, newValue) {\n      attrs.get(name)!(ComponentContext.of<T>(this).component, newValue, oldValue);\n    };\n  }\n\n  return function (this: any, name, oldValue, newValue) {\n\n    const attrChanged = attrs.get(name);\n\n    if (attrChanged) {\n      attrChanged(ComponentContext.of<T>(this).component, newValue, oldValue);\n    } else {\n      prevCallback.call(this, name, oldValue, newValue);\n    }\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentContext, ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { AttributeDef } from './attribute-def';\nimport { parseAttributeDescriptor } from './attribute-descriptor.impl';\nimport { AttributeRegistry } from './attribute-registry';\n\n/**\n * Creates a decorator for component's property that accesses custom element's attribute.\n *\n * The decorated property accesses corresponding attribute on read, and updates it on setting. `null` value corresponds\n * to absent attribute. Setting to `null` removes corresponding attribute.\n *\n * @category Feature\n * @typeParam T - A type of decorated component class.\n * @param def - Attribute definition or just an attribute name (either _camelCase_ or _dash-style_).\n *\n * @return Component property decorator.\n */\nexport function Attribute<T extends ComponentClass>(\n    def?: AttributeDef<InstanceType<T>> | string,\n): ComponentPropertyDecorator<string | null, T> {\n  return ComponentProperty(({ type, key }) => {\n\n    const descriptor = parseAttributeDescriptor(type.prototype, key, def);\n    const { name } = descriptor;\n\n    return {\n      componentDef: {\n        define(defContext) {\n          defContext.get(AttributeRegistry).declareAttribute(descriptor);\n        },\n      },\n      get(component: InstanceType<T>): string | null {\n        return (ComponentContext.of(component).element as Element).getAttribute(name);\n      },\n      set(component: InstanceType<T>, newValue: string | null) {\n\n        const { element } = ComponentContext.of(component) as { element: Element };\n\n        if (newValue != null) {\n          element.setAttribute(name, newValue);\n        } else {\n          element.removeAttribute(name);\n        }\n      },\n    };\n  });\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { AttributeDef } from './attribute-def';\nimport { parseAttributeDescriptor } from './attribute-descriptor.impl';\nimport { AttributeRegistry } from './attribute-registry';\n\n/**\n * Creates a component method decorator for custom element attribute change callback.\n *\n * The decorated method should have up to two parameters:\n *\n * - the first one accepts new attribute value.\n * - the second one accepts old attribute value (or `null`),\n *\n * Example:\n * ```TypeScript\n * @Component('my-component')\n * class MyComponent {\n *\n *   @AttributeChanged('my-attribute')\n *   myAttributeChanged(newValue: string, oldValue: string | null) {\n *     console.log(`my-attribute value changed from ${oldValue} to ${newValue}`);\n *   }\n *\n * }\n * ```\n *\n * @category Feature\n * @typeParam T - A type of decorated component class.\n * @param def - Attribute definition or just an attribute name.\n *\n * @return Component method decorator.\n */\nexport function AttributeChanged<T extends ComponentClass>(\n    def?: AttributeDef<InstanceType<T>> | string,\n): ComponentPropertyDecorator<(newValue: string | null, oldValue: string | null) => void, T> {\n  return ComponentProperty(({ type, get, key }) => {\n\n    const { name, change } = parseAttributeDescriptor(type.prototype, key, def);\n\n    return {\n      componentDef: {\n        define(defContext) {\n          defContext.get(AttributeRegistry).declareAttribute({\n            name,\n            change(\n                component: InstanceType<T>,\n                newValue: string | null,\n                oldValue: string | null,\n            ) {\n\n              const callback = get(component);\n\n              callback.call(component, newValue, oldValue);\n              change(component, newValue, oldValue);\n            },\n          });\n        },\n      },\n    };\n  });\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { StatePath } from '@proc7ts/fun-events';\nimport { Class } from '@proc7ts/primitives';\nimport { Component, ComponentDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { AttributeUpdateReceiver } from './attribute-def';\nimport { AttributeRegistry } from './attribute-registry';\nimport { attributeStateUpdate } from './attribute-state-update.impl';\nimport { property2attributeName } from './property2attribute-name';\n\n/**\n * Creates a component decorator declaring supported custom element's attributes.\n *\n * @category Feature\n * @typeParam T - A type of decorated component class.\n * @param items - Attributes definition options.\n *\n * @return New component decorator.\n */\nexport function Attributes<T extends ComponentClass = Class>(\n    ...items: readonly Attributes.Item<InstanceType<T>>[]\n): ComponentDecorator<T> {\n  return Component({\n    define(defContext) {\n\n      const registry = defContext.get(AttributeRegistry);\n\n      for (const item of items) {\n        if (typeof item === 'string') {\n\n          const name = property2attributeName(item);\n\n          registry.declareAttribute({\n            name,\n            change: attributeStateUpdate(name),\n          });\n        } else {\n          for (const [key, updateState] of Object.entries(item)) {\n\n            const name = property2attributeName(key);\n\n            registry.declareAttribute({\n              name,\n              change: attributeStateUpdate(name, updateState),\n            });\n          }\n        }\n      }\n    },\n  });\n}\n\n/**\n * @category Feature\n */\nexport namespace Attributes {\n\n  /**\n   * Attribute definition item.\n   *\n   * This is either an attribute name (_camelCase_ or _dash-style_), or a per-attribute options map.\n   *\n   * @typeParam T - A type of component.\n   */\n  export type Item<T extends object> = Map<T> | string;\n\n  /**\n   * Per-attribute definition options.\n   *\n   * This is a map with attribute names as keys (either _camelCase_ or _dash-style_), and their state update\n   * instructions as values.\n   *\n   * The state update instruction can be one of:\n   * - `false` to not update the component state,\n   * - `true` to update the component state with changed attribute key,\n   * - a state value key to update, or\n   * - an attribute update receiver function with custom state update logic.\n   *\n   * @typeParam T - A type of component.\n   */\n  export interface Map<T extends object> {\n    readonly [name: string]: boolean | StatePath | AttributeUpdateReceiver<T>;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValueSlot, SimpleContextKey } from '@proc7ts/context-values';\nimport { StateTracker } from '@proc7ts/fun-events';\nimport { ComponentContext, StateUpdater } from '../../component';\n\nclass ComponentStateKey extends SimpleContextKey<ComponentState> {\n\n  constructor() {\n    super('component-state');\n  }\n\n  grow(\n      slot: ContextValueSlot<ComponentState, ComponentState, SimpleContextKey.Seed<ComponentState>>,\n  ): void {\n\n    const provided = slot.seed();\n    let state: ComponentState;\n\n    if (provided != null) {\n      state = provided;\n      slot.insert(state);\n    } else if (slot.hasFallback) {\n      return;\n    } else {\n      state = new ComponentState();\n      slot.context.get(ComponentContext).supply.whenOff(reason => state.done(reason));\n      slot.insert(state);\n    }\n\n    slot.setup(({ registry }) => {\n      registry.provide({ a: StateUpdater, is: state.update });\n    });\n  }\n\n}\n\n/**\n * @internal\n */\nconst ComponentState__key = (/*#__PURE__*/ new ComponentStateKey());\n\n/**\n * Component state tracker.\n *\n * @category Feature\n */\nexport class ComponentState extends StateTracker {\n\n  static get [ContextKey__symbol](): ContextKey<ComponentState> {\n    return ComponentState__key;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing component state properties.\n *\n * Thus a property state path is always something like `[StatePropertyPath__root, 'property-name']`.\n *\n * @category Feature\n */\nexport const StatePropertyPath__root = (/*#__PURE__*/ Symbol('state-property'));\n\n/**\n * A path to the named component property state.\n *\n * @category Feature\n * @typeParam TKey - Target property key type.\n */\nexport type StatePropertyPath<TKey extends PropertyKey = PropertyKey> = readonly [\n  keyof StatePropertyPath.RootKeys,\n  TKey,\n];\n\n/**\n * Constructs a named component property state path.\n *\n * @category Feature\n * @typeParam TKey - Target property key type.\n * @param key - Target property key.\n *\n * @return DOM property state path.\n */\nexport function statePropertyPathTo<TKey extends PropertyKey = PropertyKey>(key: TKey): StatePropertyPath<TKey> {\n  return [StatePropertyPath__root, key];\n}\n\n/**\n * @category Feature\n */\nexport namespace StatePropertyPath {\n  export interface RootKeys {\n    [StatePropertyPath__root]: true;\n  }\n}\n","import { StatePath } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\nimport { StatePropertyPath, statePropertyPathTo } from './state-property-path';\nimport { StatePropertyUpdateReceiver } from './state-property.decorator';\n\n/**\n * @internal\n */\nexport type StatePropertyUpdateCallback<T extends object> = <TKey extends keyof T>(\n    this: void,\n    component: T,\n    newValue: T[TKey],\n    oldValue: T[TKey],\n) => void;\n\n/**\n * @internal\n */\nexport function statePropertyUpdate<T extends object>(\n    propertyKey: PropertyKey,\n    updateState: true | StatePropertyUpdateReceiver<T> | StatePath = true,\n): StatePropertyUpdateCallback<T> {\n  if (updateState === true || typeof updateState === 'function') {\n\n    const path = statePropertyPathTo(propertyKey as keyof T);\n    const update = updateState === true ? updateStatePropertyState : updateState;\n\n    return (component, newValue, oldValue) => update(component, path, newValue, oldValue);\n  }\n\n  return (component, newValue, oldValue) => {\n    if (newValue !== oldValue) {\n      ComponentContext.of(component).updateState(updateState, newValue, oldValue);\n    }\n  };\n}\n\nfunction updateStatePropertyState<T extends object, TKey extends keyof T>(\n    component: T,\n    path: StatePropertyPath<TKey>,\n    newValue: T[TKey],\n    oldValue: T[TKey],\n): void {\n  if (newValue !== oldValue) {\n    ComponentContext.of(component).updateState(path, newValue, oldValue);\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { StatePath } from '@proc7ts/fun-events';\nimport { Class } from '@proc7ts/primitives';\nimport { ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { StatePropertyPath } from './state-property-path';\nimport { statePropertyUpdate } from './state-property-update.impl';\n\n/**\n * Creates a decorator of component property containing part of component state.\n *\n * Once such property updated, the component state is {@link ComponentContext.updateState also updated}.\n *\n * @category Feature\n * @typeParam T - A type of decorated component class.\n * @param def - Custom element property definition.\n *\n * @returns Component property decorator.\n */\nexport function StateProperty<TValue = any, T extends ComponentClass = Class>(\n    { updateState }: StatePropertyDef = {},\n): ComponentPropertyDecorator<TValue, T> {\n  return ComponentProperty(({ get, set, key }) => {\n    if (updateState !== false) {\n\n      const setValue = set;\n      const update = statePropertyUpdate<InstanceType<T>>(key, updateState);\n\n      set = (component, newValue) => {\n\n        const oldValue = get(component);\n\n        setValue(component, newValue);\n        update(component, newValue, oldValue);\n      };\n    }\n\n    return {\n      get,\n      set,\n    };\n  });\n}\n\n/**\n * Component state property definition.\n *\n * This is a parameter to {@link StateProperty @StateProperty} decorator applied to component property.\n *\n * @category Feature\n */\nexport interface StatePropertyDef<T extends object = any> {\n\n  /**\n   * Whether to update the component state after this property changed.\n   *\n   * Can be one of:\n   * - `false` to not update the component state,\n   * - `true` (the default value) to update the component state with changed property key,\n   * - a state value key to update, or\n   * - an state property update receiver function with custom state update logic.\n   *\n   * By default does not update component state if property value didn't change.\n   */\n  readonly updateState?: boolean | StatePath | StatePropertyUpdateReceiver<T>;\n\n}\n\n/**\n * Component state property updates receiver invoked when its value changed.\n *\n * @category Feature\n * @typeParam T - A type of component.\n */\nexport type StatePropertyUpdateReceiver<T extends object> =\n/**\n * @typeParam TKey - A type of component property keys.\n * @param component - Component instance.\n * @param path - The changed property state path in the form of `[StatePropertyPath__root, propertyKey]`.\n * @param newValue - New property value.\n * @param oldValue - Previous property value.\n */\n    <TKey extends keyof T>(\n        this: void,\n        component: T,\n        path: StatePropertyPath<TKey>,\n        newValue: T[TKey],\n        oldValue: T[TKey],\n    ) => void;\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { OnEvent, StatePath, supplyOn, translateOn, ValueTracker } from '@proc7ts/fun-events';\nimport { Supply } from '@proc7ts/primitives';\nimport { ComponentContext } from '../../component';\nimport { ComponentState } from '../state';\nimport { attributePathTo } from './attribute-path';\n\nclass AttributeTracker extends ValueTracker<string | null> {\n\n  readonly on: OnEvent<[string | null, string | null]>;\n  readonly supply = new Supply();\n\n  constructor(\n      private readonly _context: ComponentContext,\n      private readonly _name: string,\n      path: StatePath,\n  ) {\n    super();\n    this.on = this._context.get(ComponentState).track(path).onUpdate.do(\n        translateOn((send, _path, newValue, oldValue) => send(newValue, oldValue)),\n        supplyOn(this),\n    );\n  }\n\n  get it(): string | null {\n    return (this._context.element as Element).getAttribute(this._name);\n  }\n\n  set it(value: string | null) {\n    if (!this.supply.isOff) {\n      if (value == null) {\n        (this._context.element as Element).removeAttribute(this._name);\n      } else {\n        (this._context.element as Element).setAttribute(this._name, value);\n      }\n    }\n  }\n\n}\n\n/**\n * Creates a tracker of custom element's attribute value.\n *\n * Requires attribute to be defined. E.g. with {@link Attribute @Attribute}, {@link AttributeChanged @AttributeChanged},\n * or {@link Attributes @Attributes} decorator.\n *\n * @category Feature\n * @param context - Target component context.\n * @param name - Attribute name.\n * @param path - Custom attribute state path.\n *\n * @returns New attribute value tracker.\n */\nexport function trackAttribute(\n    context: ComponentContext,\n    name: string,\n    path: StatePath = attributePathTo(name),\n): ValueTracker<string | null> {\n  return new AttributeTracker(context, name, path);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextRef, SingleContextKey } from '@proc7ts/context-values';\nimport { Class } from '@proc7ts/primitives';\nimport { ComponentMount } from '../../component';\nimport { DefinitionContext } from '../../component/definition';\nimport { DomPropertyDescriptor } from './dom-property-descriptor';\n\n/**\n * A registry of component's element properties.\n *\n * @category Feature\n */\nexport interface DomPropertyRegistry {\n\n  /**\n   * Declares component element's property.\n   *\n   * @param descriptor - Property descriptor.\n   */\n  declareDomProperty(descriptor: DomPropertyDescriptor): void;\n\n}\n\n/**\n * A key of component definition context value containing {@link DomPropertyRegistry DOM property registry}.\n *\n * @category Feature\n */\nexport const DomPropertyRegistry: ContextRef<DomPropertyRegistry> = (\n    /*#__PURE__*/ new SingleContextKey<DomPropertyRegistry>(\n        'dom-property-registry',\n        {\n          byDefault(context) {\n            return new DomPropertyRegistry$(context.get(DefinitionContext));\n          },\n        },\n    )\n);\n\n/**\n * @internal\n */\nclass DomPropertyRegistry$ implements DomPropertyRegistry {\n\n  private readonly props = new Map<PropertyKey, PropertyDescriptor>();\n\n  constructor(defContext: DefinitionContext) {\n    defContext.whenReady(\n        ({ elementType }) => this.define(elementType),\n    );\n    defContext.whenComponent(({ mount }) => {\n      if (mount) {\n        // Mount element properties\n        this.mount(mount);\n      }\n    });\n  }\n\n  declareDomProperty({ key, descriptor }: DomPropertyDescriptor): void {\n    this.props.set(key, descriptor);\n  }\n\n  private define<T extends object>(elementType: Class<T>): void {\n\n    const prototype = elementType.prototype;\n\n    this.props.forEach((desc, key) => {\n      Object.defineProperty(prototype, key, desc);\n    });\n  }\n\n  private mount<T extends object>({ element }: ComponentMount<T>): void {\n    this.props.forEach((desc, key) => {\n      Object.defineProperty(element, key, desc);\n    });\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing DOM properties.\n *\n * Thus a property state path is always something like `[DomPropertyPath__root, 'property-name']`.\n *\n * @category Feature\n */\nexport const DomPropertyPath__root = (/*#__PURE__*/ Symbol('dom-property'));\n\n/**\n * A path to the named DOM property state.\n *\n * @category Feature\n * @typeParam TKey - Property key type.\n */\nexport type DomPropertyPath<TKey extends PropertyKey = PropertyKey> = readonly [keyof DomPropertyPath.RootKeys, TKey];\n\n/**\n * Constructs a named DOM property state path.\n *\n * @category Feature\n * @typeParam TKey - Property key type.\n * @param key - Target property key.\n *\n * @return DOM property state path.\n */\nexport function domPropertyPathTo<TKey extends PropertyKey = PropertyKey>(key: TKey): DomPropertyPath<TKey> {\n  return [DomPropertyPath__root, key];\n}\n\n/**\n * @category Feature\n */\nexport namespace DomPropertyPath {\n  export interface RootKeys {\n    [DomPropertyPath__root]: true;\n  }\n}\n","import { StatePath } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\nimport { DomPropertyUpdateReceiver } from './dom-property-def';\nimport { DomPropertyPath, domPropertyPathTo } from './dom-property-path';\n\n/**\n * @internal\n */\nexport type DomPropertyUpdateCallback<T extends object> = <TKey extends keyof T>(\n    this: void,\n    component: T,\n    newValue: T[TKey],\n    oldValue: T[TKey],\n) => void;\n\n/**\n * @internal\n */\nexport function domPropertyUpdate<T extends object>(\n    propertyKey: PropertyKey,\n    updateState: true | DomPropertyUpdateReceiver<T> | StatePath = true,\n): DomPropertyUpdateCallback<T> {\n  if (updateState === true || typeof updateState === 'function') {\n\n    const path = domPropertyPathTo(propertyKey as keyof T);\n    const update = updateState === true ? updateDomPropertyState : updateState;\n\n    return (component, newValue, oldValue) => update(component, path, newValue, oldValue);\n  }\n  return (component, newValue, oldValue) => {\n    if (newValue !== oldValue) {\n      ComponentContext.of(component).updateState(updateState, newValue, oldValue);\n    }\n  };\n}\n\nfunction updateDomPropertyState<T extends object, TKey extends keyof T>(\n    component: T,\n    path: DomPropertyPath<TKey>,\n    newValue: T[TKey],\n    oldValue: T[TKey],\n): void {\n  if (newValue !== oldValue) {\n    ComponentContext.of(component).updateState(path, newValue, oldValue);\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '@proc7ts/primitives';\nimport { ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { DomPropertyDef } from './dom-property-def';\nimport { domPropertyDescriptor } from './dom-property-descriptor.impl';\nimport { DomPropertyRegistry } from './dom-property-registry';\nimport { domPropertyUpdate } from './dom-property-update.impl';\n\n/**\n * Creates component property decorator that declares a property to add to custom element created for this component.\n *\n * The value of declared element's property will be read from and written to decorated one.\n *\n * By default does not update component state if property value didn't change.\n *\n * @category Feature\n * @typeParam T - A type of decorated component class.\n * @param def - Custom element property definition.\n *\n * @returns Component property decorator.\n */\nexport function DomProperty<TValue = any, T extends ComponentClass = Class>(\n    def: DomPropertyDef<T> = {},\n): ComponentPropertyDecorator<TValue, T> {\n  return ComponentProperty(descriptor => {\n\n    const { key, get } = descriptor;\n    let { set } = descriptor;\n    const domDescriptor = domPropertyDescriptor(descriptor, def);\n\n    if (def.updateState !== false) {\n\n      const updateState = domPropertyUpdate<InstanceType<T>>(key, def.updateState);\n      const setValue = set;\n\n      set = (component, newValue) => {\n\n        const oldValue = get(component);\n\n        setValue(component, newValue);\n        updateState(component, newValue, oldValue);\n      };\n    }\n\n    return {\n      componentDef: {\n        define(defContext) {\n          defContext.get(DomPropertyRegistry).declareDomProperty(domDescriptor);\n        },\n      },\n      get,\n      set,\n    };\n  });\n}\n\n/**\n * Component method decorator that declares a method to add to custom element created for this component.\n *\n * This is just an alias of {@link DomProperty @DomProperty} decorator.\n *\n * @category Feature\n */\nexport { DomProperty as DomMethod };\n","import { PropertyAccessorDescriptor } from '@proc7ts/primitives';\nimport { ComponentContext, ComponentContextHolder, ComponentProperty } from '../../component';\nimport { DomPropertyDef } from './dom-property-def';\nimport { DomPropertyDescriptor } from './dom-property-descriptor';\n\n/**\n * @internal\n */\nexport function domPropertyDescriptor<TValue>(\n    propertyDesc: ComponentProperty.Descriptor<TValue>,\n    {\n      propertyKey: key = propertyDesc.key,\n      configurable = propertyDesc.configurable,\n      enumerable = propertyDesc.enumerable,\n      writable = propertyDesc.writable,\n    }: DomPropertyDef,\n): DomPropertyDescriptor {\n\n  type ComponentType = { [TKey in ComponentProperty.Descriptor<TValue>['key']]: TValue };\n\n  const componentPropertyKey = propertyDesc.key as string;\n  const descriptor: PropertyAccessorDescriptor<TValue> = {\n    configurable,\n    enumerable,\n    get: function (this: ComponentContextHolder): TValue {\n      return ComponentContext.of<ComponentType>(this).component[componentPropertyKey];\n    },\n    set: writable\n        ? function (this: ComponentContextHolder, value: TValue) {\n          ComponentContext.of<ComponentType>(this).component[componentPropertyKey] = value;\n        }\n        : undefined,\n  };\n\n  return { key, descriptor };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport {\n  EventSender,\n  isEventSender,\n  OnEvent,\n  onSupplied,\n  StatePath,\n  supplyOn,\n  translateOn_,\n} from '@proc7ts/fun-events';\nimport { valueByRecipe } from '@proc7ts/primitives';\nimport { ComponentContext } from '../../component';\nimport { ComponentState } from '../state';\n\n/**\n * Element rendering definition.\n *\n * This is either a {@link RenderDef.Spec rendering specifier}, or its {@link RenderDef.Provider provider function}.\n *\n * @category Feature\n */\nexport type RenderDef =\n    | RenderDef.Spec\n    | RenderDef.Provider;\n\n/**\n * @category Feature\n */\nexport namespace RenderDef {\n\n  /**\n   * Rendering options.\n   */\n  export interface Options {\n\n    /**\n     * When to start the rendering.\n     *\n     * One of:\n     * - `settled` (the default) - start rendering when component is {@link ComponentContext.settled settled}.\n     * - `connected` - start rendering when component's element is {@link ComponentContext.connected connected}\n     *   to document.\n     */\n    readonly when?: 'settled' | 'connected';\n\n    /**\n     * Reports rendering error. E.g. a render shot execution failure.\n     *\n     * @param messages - Error messages to report.\n     */\n    error?(...messages: any[]): void;\n\n  }\n\n  /**\n   * Rendering specifier.\n   */\n  export interface Spec extends Options {\n\n    /**\n     * A trigger that issues rendering.\n     *\n     * This can be useful e.g. when component has multiple independent sub-views.\n     *\n     * This can be one of the following:\n     * - A path to component state part the renderer should track. The rendering would trigger only when the target\n     *   state part is updated.\n     * - Arbitrary event sender. The rendering would be triggered on any event from this sender.\n     *\n     * A root state path is tracked when omitted.\n     *\n     * When trigger is a root path (the default value), then the rendering will be triggered by any state update.\n     * Except for updates of sub-states inside {@link RenderPath__root}.\n     */\n    readonly on?: StatePath | EventSender<[]>;\n\n  }\n\n  /**\n   * Rendering specifier provider signature.\n   */\n  export type Provider =\n  /**\n   * @param context - A context of component to render.\n   *\n   * @returns Rendering specifier.\n   */\n      (\n          this: void,\n          context: ComponentContext,\n      ) => RenderDef.Spec;\n\n}\n\n/**\n * A root path to sub-states updates to which will be ignored by default.\n *\n * This can be used to create sub-states that won't trigger rendering occasionally, but only when requested explicitly.\n *\n * @category Feature\n */\nexport const RenderPath__root = (/*#__PURE__*/ Symbol('render'));\n\n/**\n * @category Feature\n */\nexport const RenderDef = {\n\n  /**\n   * Builds a rendering specifier for component by its definition.\n   *\n   * @param context - A context of component to render.\n   * @param def - Arbitrary rendering definition.\n   *\n   * @returns Rendering specifier.\n   */\n  spec(\n      this: void,\n      context: ComponentContext,\n      def: RenderDef,\n  ): RenderDef.Spec {\n    return valueByRecipe(def, context);\n  },\n\n  /**\n   * Fulfills rendering specifier with the given defaults.\n   *\n   * @param base - Base rendering specifier to fulfill.\n   * @param defaults - Defaults that will be applied unless defined in `base` specifier.\n   *\n   * @return `base` rendering specifier fulfilled by `defaults`.\n   */\n  fulfill(this: void, base: RenderDef.Spec, defaults: RenderDef.Spec = {}): RenderDef.Spec {\n\n    const { on = defaults.on, error } = base;\n\n    return {\n      on,\n      error: error ? error.bind(base) : defaults.error && defaults.error.bind(defaults),\n    };\n  },\n\n  /**\n   * Builds a trigger issuing rendering updates.\n   *\n   * @param context - Rendered component context.\n   * @param spec - Rendering specifier.\n   *\n   * @returns `OnEvent` sender that sends an event each time the rendering required.\n   */\n  trigger(\n      this: void,\n      context: ComponentContext,\n      spec: RenderDef.Spec = {},\n  ): OnEvent<[]> {\n\n    const { on = [] } = spec;\n\n    if ((typeof on === 'object' || typeof on === 'function') && isEventSender(on)) {\n      return onSupplied(on).do(supplyOn(context));\n    }\n\n    const trigger = context\n        .get(ComponentState)\n        .track(on)\n        .onUpdate.do(\n            supplyOn(context),\n        );\n\n    if (Array.isArray(on) && !on.length) {\n      return trigger.do(translateOn_(\n          (send, path: StatePath.Normalized) => path[0] !== RenderPath__root && send(),\n      ));\n    }\n\n    return trigger;\n  },\n\n};\n","import { immediateRenderScheduler, RenderExecution } from '@frontmeans/render-scheduler';\nimport { noop, Supply } from '@proc7ts/primitives';\nimport { DefaultRenderScheduler } from '../../boot/globals';\nimport { ComponentContext } from '../../component';\nimport { ElementRenderCtl } from './element-render-ctl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * @internal\n */\nconst enum RenderStatus {\n  Cancelled = -1,\n  Complete = 0,\n  Pending = 1,\n  Scheduled = 2,\n}\n\n/**\n * @internal\n */\nexport class ElementRenderCtl$ implements ElementRenderCtl {\n\n  private readonly _renders = new Set<() => void>();\n\n  constructor(private readonly _context: ComponentContext) {\n  }\n\n  renderBy(\n      renderer: ElementRenderer,\n      def: RenderDef = {},\n  ): Supply {\n\n    const spec = RenderDef.spec(this._context, def);\n    const trigger = RenderDef.trigger(this._context, spec);\n    const schedule = this._context.get(DefaultRenderScheduler)({\n      ...RenderDef.fulfill(spec),\n      node: this._context.element as Element,\n    });\n    const whenConnected = spec.when === 'connected';\n    let status = RenderStatus.Pending;\n    const startRendering = (): 0 | void => status /* there is an update to render */ && scheduleRenderer();\n    const onUpdate = whenConnected\n        ? () => this._context.connected && scheduleRenderer()\n        : () => this._context.settled && scheduleRenderer();\n    const supply = trigger(onUpdate)\n        .needs(this._context)\n        .whenOff(cancelRenderer);\n\n    (whenConnected ? this._context.whenConnected : this._context.whenSettled)(startRendering);\n\n    const immediateSchedule = immediateRenderScheduler();\n\n    this._renders.add(renderNow);\n\n    return supply.whenOff(() => this._renders.delete(renderNow));\n\n    function scheduleRenderer(): void {\n      status = RenderStatus.Scheduled;\n      schedule(renderElement);\n    }\n\n    function renderNow(): void {\n      immediateSchedule(renderElement);\n    }\n\n    function cancelRenderer(): void {\n      if (status === RenderStatus.Scheduled) { // Scheduled, but not rendered yet\n        schedule(noop);\n      }\n      status = RenderStatus.Cancelled;\n    }\n\n    function renderElement(execution: RenderExecution): void {\n      if (status > RenderStatus.Complete) { // Prevent excessive rendering\n        status = RenderStatus.Complete;\n        for (; ;) {\n\n          const newRenderer = renderer(execution);\n\n          if (newRenderer === renderer || typeof newRenderer !== 'function') {\n            break;\n          }\n\n          renderer = newRenderer;\n        }\n      }\n    }\n  }\n\n  renderNow(): void {\n    this._renders.forEach(render => render());\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextRef, SingleContextKey } from '@proc7ts/context-values';\nimport { Supply } from '@proc7ts/primitives';\nimport { ComponentContext } from '../../component';\nimport { ElementRenderCtl$ } from './element-render-ctl.impl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * A render control of component's element.\n *\n * Controls rendering by {@link ElementRenderer element renderers}.\n *\n * Available in component context.\n *\n * @category Feature\n */\nexport interface ElementRenderCtl {\n\n  /**\n   * Enables component element rendering by the given `renderer`.\n   *\n   * A `renderer` call will be scheduled by {@link DefaultRenderScheduler} once component state updated.\n   *\n   * @param renderer - Element renderer function.\n   * @param def - Optional element rendering definition.\n   *\n   * @returns Render shots supply. Element `renderer` will stop rendering once this supply is cut off.\n   */\n  renderBy(\n      renderer: ElementRenderer,\n      def?: RenderDef,\n  ): Supply;\n\n  /**\n   * Executes scheduled element render shots immediately.\n   *\n   * Uses `immediateRenderScheduler` for that.\n   *\n   * Does not execute element renderers that are not scheduled. I.e. if no corresponding state updates happened.\n   */\n  renderNow(): void;\n\n}\n\n/**\n * A key of component context value containing {@link ElementRenderCtl element render control}.\n *\n * @category Feature\n */\nexport const ElementRenderCtl: ContextRef<ElementRenderCtl> = (\n    /*#__PURE__*/ new SingleContextKey<ElementRenderCtl>(\n        'element-render-ctl',\n        {\n          byDefault(values) {\n            return new ElementRenderCtl$(values.get(ComponentContext));\n          },\n        },\n    )\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { RenderSchedule, RenderScheduleOptions, RenderShot } from '@frontmeans/render-scheduler';\nimport { ContextRef, ContextValues, SingleContextKey } from '@proc7ts/context-values';\nimport { trackValue } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { ElementRenderCtl } from './element-render-ctl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * A signature of element render scheduler.\n *\n * Schedules render shots to be executed by {@link ElementRenderCtl element render control}.\n *\n * Available in component context.\n *\n * @category Feature\n */\nexport type ElementRenderScheduler =\n/**\n * @param options - Options of constructed element render schedule.\n *\n * @returns New render schedule.\n */\n    (this: void, options?: ElementRenderScheduleOptions) => RenderSchedule;\n\n/**\n * Options for render schedule.\n *\n * This is passed to {@link ElementRenderScheduler element render scheduler} when constructing new render schedule.\n *\n * Generic `RenderSchedule` options are ignored.\n *\n * @category Feature\n */\nexport interface ElementRenderScheduleOptions extends RenderScheduleOptions, RenderDef.Options {\n\n  /**\n   * When to start the rendering.\n   *\n   * One of:\n   * - `settled` - start rendering when component is {@link ComponentContext.settled settled}.\n   * - `connected` (the default) - start rendering when component's element is {@link ComponentContext.connected\n   *   connected} to document.\n   */\n  readonly when?: 'settled' | 'connected';\n\n  /**\n   * Reports rendering error. E.g. a render shot execution failure.\n   *\n   * @param messages - Error messages to report.\n   */\n  error?(...messages: any[]): void;\n\n}\n\n/**\n * @internal\n */\nfunction newElementRenderScheduler(context: ContextValues): ElementRenderScheduler {\n\n  const renderCtl = context.get(ElementRenderCtl);\n\n  return (opts = {}): RenderSchedule => {\n\n    const recentShot = trackValue<RenderShot>(noop);\n    const renderer: ElementRenderer = execution => {\n      recentShot.it(execution);\n    };\n\n    renderCtl.renderBy(renderer, RenderDef.fulfill({ on: recentShot.on }, opts));\n\n    return (shot: RenderShot): void => {\n      recentShot.it = execution => shot(execution); // Ensure render shot always updated\n    };\n  };\n}\n\n/**\n * A key of component context value containing {@link ElementRenderScheduler element render scheduler}.\n *\n * @category Feature\n */\nexport const ElementRenderScheduler: ContextRef<ElementRenderScheduler> = (\n    /*#__PURE__*/ new SingleContextKey<ElementRenderScheduler>(\n        'element-render-scheduler',\n        {\n          byDefault: newElementRenderScheduler,\n        },\n    )\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { RenderExecution } from '@frontmeans/render-scheduler';\nimport { ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { ElementRenderCtl } from './element-render-ctl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * Component property decorator that declares a rendering method for the component.\n *\n * The decorated method call will be scheduled by {@link DefaultRenderScheduler} once component state updated.\n *\n * The decorated method should have no arguments. It may return either nothing, or a function. In the latter case the\n * returned function will be called immediately to render the element. It may, in turn, return a renderer function,\n * and so on.\n *\n * Enables rendering with {@link ElementRenderCtl.renderBy element render control}.\n *\n * @category Feature\n * @typeParam T - A type of decorated component class.\n * @param def - Non-mandatory render definition.\n *\n * @returns Component method decorator.\n */\nexport function Render<T extends ComponentClass>(\n    def?: RenderDef,\n): ComponentPropertyDecorator<(execution: RenderExecution) => ElementRenderer | void, T> {\n  return ComponentProperty(({ get }) => ({\n    componentDef: {\n      define(defContext) {\n        defContext.whenComponent(context => {\n          context.whenReady(() => {\n\n            const { component } = context;\n            const renderer = get(component).bind(component);\n\n            context.get(ElementRenderCtl).renderBy(renderer, def);\n          });\n        });\n      },\n    },\n  }));\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\n\n/**\n * Component shadow content root.\n *\n * @category Feature\n */\nexport type ShadowContentRoot = ShadowRoot;\n\n/**\n * A key of component context value containing a shadow content root instance.\n *\n * This is only available when the component is decorated with {@link AttachShadow @AttachShadow} decorator.\n *\n * @category Feature\n */\nexport const ShadowContentRoot: SingleContextRef<ShadowContentRoot> = (\n    /*#__PURE__*/ new SingleContextKey<ShadowContentRoot>('shadow-content-root')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * An event related to element's shadow DOM.\n *\n * The following event types supported:\n * - `wesib:shadowAttached` is dispatched when a shadow root is attached to element.\n *   In particular, it is dispatched for components decorated with {@link AttachShadow @AttachShadow}.\n *   The event is dispatched when component is connected for the first time. I.e. when element is added to the document.\n *   This event bubbles and is not cancelable.\n *\n * @category Feature\n */\nexport class ShadowDomEvent extends Event {\n\n  /**\n   * Shadow root this event relates to.\n   */\n  get shadowRoot(): ShadowRoot {\n    return (this.target as Element).shadowRoot as ShadowRoot;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { FnContextKey, FnContextRef } from '@proc7ts/context-values/updatable';\nimport { ComponentContext, ComponentContext__symbol, ComponentContextHolder } from '../../component';\nimport { ShadowContentDef } from './attach-shadow.decorator';\nimport { ShadowDomEvent } from './shadow-dom-event';\n\n/**\n * Shadow root builder function type.\n *\n * An instance of this function is available in component context and is used by {@link AttachShadow @AttachShadow}\n * decorator to attach shadow root to decorated component's custom element.\n *\n * By default, if shadow root already exists for the component's element, it uses one.\n *\n * Dispatches a `wesib:shadowAttached` event for the found or attached shadow root.\n *\n * @category Feature\n */\nexport type ShadowRootBuilder =\n/**\n * @param context - Target component context.\n * @param init - Shadow root initialization options.\n *\n * @returns A shadow root instance for target component, or `null`/`undefined` if one can not be attached.\n */\n    (context: ComponentContext, init: ShadowContentDef) => ShadowRoot | null | undefined;\n\n/**\n * A key of component context value containing a shadow root builder instance.\n *\n * @category Feature\n */\nexport const ShadowRootBuilder: FnContextRef<Parameters<ShadowRootBuilder>, ReturnType<ShadowRootBuilder>> = (\n    /*#__PURE__*/ new FnContextKey<Parameters<ShadowRootBuilder>, ReturnType<ShadowRootBuilder>>(\n        'shadow-root-builder',\n        {\n          byDefault() {\n            return attachShadow;\n          },\n        },\n    )\n);\n\n/**\n * @internal\n */\nfunction attachShadow(context: ComponentContext, init: ShadowRootInit): ShadowRoot | undefined {\n\n  const element = context.element as Element;\n  const shadowRoot = shadowRootOf(element, init);\n\n  if (shadowRoot) {\n    (shadowRoot as ComponentContextHolder)[ComponentContext__symbol] = context;\n    context.whenConnected(() => context.dispatchEvent(new ShadowDomEvent(\n        'wesib:shadowAttached',\n        { bubbles: true },\n    )));\n  }\n\n  return shadowRoot;\n}\n\n/**\n * @internal\n */\nfunction shadowRootOf(element: Element, init: ShadowRootInit): ShadowRoot | undefined {\n\n  const existing = element.shadowRoot;\n\n  if (existing) {\n    // Shadow root already attached. Using it.\n    return existing;\n  }\n  if ('attachShadow' in element) {\n    return element.attachShadow(init);\n  }\n\n  return; // Unable to attach shadow root.\n}\n\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '@proc7ts/primitives';\nimport { Component, ComponentContext, ComponentDecorator, ContentRoot } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { ShadowContentRoot } from './shadow-content-root';\nimport { ShadowRootBuilder } from './shadow-root-builder';\n\n/**\n * @internal\n */\nconst defaultShadowContentDef: ShadowContentDef = { mode: 'open' };\n\n/**\n * Shadow content root definition.\n *\n * This is a readonly component shadow root initialization options.\n *\n * @category Feature\n */\nexport type ShadowContentDef = Readonly<ShadowRootInit>;\n\n/**\n * Creates a component decorator that attaches shadow root to decorated component instance.\n *\n * @category Feature\n * @typeParam T - A type of decorated component class.\n * @param def - Shadow content root definition. Uses `mode: 'open'` by default.\n *\n * @returns New component decorator.\n */\nexport function AttachShadow<T extends ComponentClass = Class>(\n    def: ShadowContentDef = defaultShadowContentDef,\n): ComponentDecorator<T> {\n  return Component({\n    setup(setup) {\n      setup.perComponent(\n          {\n            a: ShadowContentRoot,\n            by(ctx: ComponentContext<InstanceType<T>>) {\n              return ctx.get(ShadowRootBuilder)(ctx, def);\n            },\n          },\n      );\n      setup.perComponent({ // Content root is an alias of shadow root when present.\n        a: ContentRoot,\n        by(context: ComponentContext<InstanceType<T>>) {\n          return context.get(ShadowContentRoot, { or: null });\n        },\n      });\n    },\n  });\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { NamespaceDef } from '@frontmeans/namespace-aliaser';\n\n/**\n * Default Wesib namespace definition.\n *\n * @category Core\n */\nexport const Wesib__NS: NamespaceDef = (/*#__PURE__*/ new NamespaceDef(\n    'https://wesib.github.io/ns',\n    'b',\n    'wesib',\n));\n"],"names":["BootstrapContext__key","SingleContextKey","BootstrapContext","ContextValues","ContextKey__symbol","bootstrapDefault","provide","context","key","bootstrapContext","get","isElement","node","nodeType","Node","ELEMENT_NODE","MetaAccessor","[object Object]","symbol","this","type","hasOwnProperty","undefined","ownDef","own","superType","superClassOf","superDef","of","merge","sources","prevMeta","updates","map","source","meta","newMeta","Object","defineProperty","configurable","value","FeatureDef__symbol","Symbol","FeatureMeta","super","defs","reduce","prev","def","needs","elementOrArray","extendSetOfElements","setOfElements","has","setup","mergeFunctions","init","featureMeta","noFeatureDef","FeatureDef","featureType","for","all","define","Feature","FeatureContext__key","FeatureContext","componentType","whenDefined","feature","user","load","Supply","BootstrapWorkbench","byDefault","Workbench","featureSetupStage","WorkStage","featureInitStage","after","componentDefStage","ComponentDef__symbol","ComponentMeta","isQualifiedName","name","componentMeta","noComponentDef","ComponentDef","Component","decorator","ComponentContext__key","ComponentEventDispatcher__key","values","dispatcher","DomEventDispatcher","element","supply","dispatch","event","on","ContentRoot","ctx","StateUpdaterKey","ContextUpKey","upKey","createUpKey","slot","insert","seed","do","digAfter","fns","length","combined","fn","noop","afterThe","path","newValue","oldValue","statePath","hasFallback","or","delegated","whenOff","StateUpdater","ComponentContext__symbol","ComponentContext","updateState","TypeError","String","contentRoot","ComponentEvent","Event","target","AnonymousComponentProperty__symbol","ComponentProperty","decorateWith","set","writable","readable","enumerable","component","componentDef","By","provider","result","proto","propertyKey","descriptor","desc","updateDescriptor","isField","updatedDesc","toPropertyAccessorDescriptor","fieldAccessorDescriptor","decoratePropertyAccessor","getValue","setValue","constructor","call","notReadableAccessor","notWritableAccessor","updated","With","access","As","valueProvider","Bind","binder","accessor__symbol","accessor","existing","bind","BootstrapContextRegistry__key","BootstrapContextRegistry","ContextRegistry","a","is","newValues","PerComponentRegistry","ComponentContextRegistry","PerDefinitionRegistry","bsContext","DefinitionContextRegistry","PostDefSetup__symbol","postDefSetup","tracker","trackValue","emitter","EventEmitter","onSetup","read","valueOn","asis","onAny","superPostDefSetup","send","it","BootstrapWindow","window","BootstrapRoot","document","body","DefaultNamespaceAliaser","DefaultRenderSchedulerKey","toDefaultRenderScheduler","newRenderSchedule","scheduler","reason","contextDestroyed","args","options","DefaultRenderScheduler","ElementAdapterKey","adapters","adapter","defaultElementAdapter","ElementAdapter","ElementObserver","FnContextKey","DefaultElementObserver","MutationObserver","callback","mutations","forEach","mutation","itsEach","overArray","removedNodes","mount","mountOf","checkConnected","filterArray","addedNodes","observe","childList","DefinitionContext__symbol","definitionContextOf","CustomElements__key","customElements","nsAlias","CustomElements","componentTypeOrName","elementType","html__naming","defContext","extend","elementDef","extends","componentResolver","resolve","promise","ComponentResolver__symbol","newPromiseResolver","DefinitionContext__key","ElementDef","elementExtend","HTMLElement","DefinitionContext","mountTo","connect","ComponentContext$","_definitionContext","whenReady","_status","valueOn_","status","onceOn","whenSettled","whenConnected","registry","_newComponentRegistry","_component","settled","isOff","connected","off","componentDestroyed","parentNode","removeChild","removeElement","whenComponent","_whenComponent","lastRev","readNotifier","notifier","receive","_","_elementBuilder","components","prototype","prevContext","newComponent","dispatchEvent","bubbles","ComponentMount$","_connect","el","doc","ownerDocument","contains","destroy","MountComponentContext$","definitionContext","CustomComponentContext$","WhenComponent","currentRev","created","onCreated","onEventBy","receiver","receiverRev","eventContext","componentContext","notifiedRev","recurrentReceiver","onRecurrent","recurrentContext","mapAfter_","rev","DefinitionContext$","_bsContext","_ready","_whenReady","translateOn","ready","_def","definitionContextRegistry","seeds","parentPerComponentRegistry","append","seedKey","_perComponentRegistry","mapOn_","definitionSetup","perDefinition","spec","perComponent","_elementType","Error","_createComponent","_created","settle","definitions","CustomElement$","connectedCallback","disconnectedCallback","customElementType","ElementBuilder","_define","ComponentRegistry","_setup","_components","push","_defineAll","work","run","elementBuilder","buildElement","initBy","FeatureContext$","handle","module","_componentRegistry","onDefinition","_onDefinition","supplyOn","onComponent","_onComponent","onPostDefSetup","FeatureModule__symbol","FeatureModule","ContextModule","featureDef","replaced","required","workbench","featureContext","whenInit","FeatureModule$options","WhenDefined__symbol","bootstrapComponents","features","bootstrapContextRegistry","create","complete","stage","BootstrapContext$","bsStage","by","newNamespaceAliaser","onPromise","Promise","then","use","lastStatus","FeatureRef$read","AfterEvent__symbol","initBootstrap","catch","console","error","AttributePath__root","attributePathTo","attributeStateUpdate","update","updateAttributeState","property2attributeName","i","c","substring","toLowerCase","parseAttributeDescriptor","opts","change","AttributeRegistry","AttributeRegistry$","_context","Map","attrs","size","observedAttributes","keys","attributeChangedCallback","attributeFilter","records","record","attributeName","getAttribute","attributes","attributeOldValue","alreadyObserved","Array","isArray","newAttrs","Set","attr","add","prevCallback","attrChanged","Attribute","declareAttribute","setAttribute","removeAttribute","AttributeChanged","Attributes","items","item","entries","ComponentStateKey","SimpleContextKey","provided","state","ComponentState","done","ComponentState__key","StateTracker","StatePropertyPath__root","statePropertyPathTo","updateStatePropertyState","StateProperty","statePropertyUpdate","AttributeTracker","ValueTracker","_name","track","onUpdate","_path","trackAttribute","DomPropertyRegistry","DomPropertyRegistry$","props","DomPropertyPath__root","domPropertyPathTo","updateDomPropertyState","DomProperty","domDescriptor","propertyDesc","componentPropertyKey","domPropertyDescriptor","domPropertyUpdate","declareDomProperty","RenderPath__root","RenderDef","valueByRecipe","base","defaults","isEventSender","onSupplied","trigger","translateOn_","ElementRenderCtl$","renderer","schedule","fulfill","when","scheduleRenderer","immediateSchedule","immediateRenderScheduler","_renders","renderNow","delete","renderElement","execution","newRenderer","render","ElementRenderCtl","ElementRenderScheduler","renderCtl","recentShot","renderBy","shot","Render","ShadowContentRoot","ShadowDomEvent","shadowRoot","ShadowRootBuilder","attachShadow","shadowRootOf","defaultShadowContentDef","mode","AttachShadow","Wesib__NS","NamespaceDef"],"mappings":"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"}