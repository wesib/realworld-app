{"version":3,"file":"wesib.acbfb4f5.js","sources":["../../../../wesib/src/boot/bootstrap-context.key.impl.ts","../../../../wesib/src/boot/bootstrap-context.ts","../../../../wesib/src/boot/bootstrap-default.ts","../../../../wesib/src/common/is-element.ts","../../../../wesib/src/common/meta-accessor.ts","../../../../wesib/src/feature/feature-def.ts","../../../../wesib/src/feature/feature.decorator.ts","../../../../wesib/src/feature/feature-context.ts","../../../../wesib/src/feature/feature-needs-error.ts","../../../../wesib/src/feature/feature-ref.ts","../../../../wesib/src/component/component-def.ts","../../../../wesib/src/component/component.decorator.ts","../../../../wesib/src/component/component-context.key.impl.ts","../../../../wesib/src/component/component-event.key.impl.ts","../../../../wesib/src/component/content-root.ts","../../../../wesib/src/component/state-updater.ts","../../../../wesib/src/component/component-context.ts","../../../../wesib/src/component/component-event.ts","../../../../wesib/src/component/component-property.decorator.ts","../../../../wesib/src/common/decorators.ts","../../../../wesib/src/boot/impl/bootstrap-context-registry.impl.ts","../../../../wesib/src/boot/impl/component-context-registry.impl.ts","../../../../wesib/src/boot/impl/definition-context-registry.impl.ts","../../../../wesib/src/boot/impl/post-def-setup.impl.ts","../../../../wesib/src/boot/globals/bootstrap-window.ts","../../../../wesib/src/boot/globals/bootstrap-root.ts","../../../../wesib/src/boot/globals/default-namespace-aliaser.ts","../../../../wesib/src/boot/globals/default-render-scheduler.ts","../../../../wesib/src/boot/globals/element-adapter.ts","../../../../wesib/src/boot/globals/element-observer.ts","../../../../wesib/src/boot/impl/definition-context.symbol.impl.ts","../../../../wesib/src/component/definition/custom-elements.ts","../../../../wesib/src/component/definition/definition.context.key.impl.ts","../../../../wesib/src/component/definition/element-def.ts","../../../../wesib/src/component/definition/definition-context.ts","../../../../wesib/src/boot/impl/component-context.impl.ts","../../../../wesib/src/boot/impl/component-mount.impl.ts","../../../../wesib/src/component/component-mount.ts","../../../../wesib/src/boot/impl/custom-element.impl.ts","../../../../wesib/src/boot/impl/when-component.impl.ts","../../../../wesib/src/boot/impl/definition-context.impl.ts","../../../../wesib/src/boot/impl/element-builder.impl.ts","../../../../wesib/src/feature/loader/component-registry.impl.ts","../../../../wesib/src/feature/loader/feature-context.impl.ts","../../../../wesib/src/feature/loader/feature-loader.impl.ts","../../../../wesib/src/feature/loader/feature-request.impl.ts","../../../../wesib/src/feature/loader/feature-requester.impl.ts","../../../../wesib/src/boot/impl/when-defined.impl.ts","../../../../wesib/src/boot/bootstrap/bootstrap-components.ts","../../../../wesib/src/feature/attributes/attribute-path.ts","../../../../wesib/src/feature/attributes/attribute-state-update.impl.ts","../../../../wesib/src/feature/attributes/property2attribute-name.ts","../../../../wesib/src/feature/attributes/attribute-descriptor.impl.ts","../../../../wesib/src/feature/attributes/attribute-registry.ts","../../../../wesib/src/feature/attributes/attribute.decorator.ts","../../../../wesib/src/feature/attributes/attribute-changed.decorator.ts","../../../../wesib/src/feature/attributes/attributes.decorator.ts","../../../../wesib/src/feature/state/component-state.ts","../../../../wesib/src/feature/state/state-property-path.ts","../../../../wesib/src/feature/state/state-property-update.impl.ts","../../../../wesib/src/feature/state/state-property.decorator.ts","../../../../wesib/src/feature/attributes/track-attribute.ts","../../../../wesib/src/feature/dom-properties/dom-property-registry.ts","../../../../wesib/src/feature/dom-properties/dom-property-path.ts","../../../../wesib/src/feature/dom-properties/dom-property-update.impl.ts","../../../../wesib/src/feature/dom-properties/dom-property.decorator.ts","../../../../wesib/src/feature/dom-properties/dom-property-descriptor.impl.ts","../../../../wesib/src/feature/render/render-def.ts","../../../../wesib/src/feature/render/element-render-ctl.impl.ts","../../../../wesib/src/feature/render/element-render-ctl.ts","../../../../wesib/src/feature/render/element-render-scheduler.ts","../../../../wesib/src/feature/render/render.decorator.ts","../../../../wesib/src/feature/shadow-dom/shadow-content-root.ts","../../../../wesib/src/feature/shadow-dom/shadow-dom-event.ts","../../../../wesib/src/feature/shadow-dom/shadow-root-builder.ts","../../../../wesib/src/feature/shadow-dom/attach-shadow.decorator.ts","../../../../wesib/src/wesib.ns.ts"],"sourcesContent":["import { SingleContextKey } from '@proc7ts/context-values';\nimport { BootstrapContext } from './bootstrap-context';\n\n/**\n * @internal\n */\nexport const BootstrapContext__key = (/*#__PURE__*/ new SingleContextKey<BootstrapContext>('bootstrap-context'));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues } from '@proc7ts/context-values';\nimport { OnEvent } from '@proc7ts/fun-events';\nimport { Class } from '@proc7ts/primitives';\nimport { ComponentClass, DefinitionContext } from '../component/definition';\nimport { FeatureRef } from '../feature';\nimport { BootstrapContext__key } from './bootstrap-context.key.impl';\n\n/**\n * Components bootstrap context.\n *\n * An instance of this class is passed to {@link FeatureDef.Options.init} method so that the feature can configure\n * itself.\n *\n * Extends `BootstrapValues` interface. The values could be {@link BootstrapSetup.provide pre-configured} in feature\n * definitions.\n *\n * @category Core\n */\nexport abstract class BootstrapContext extends ContextValues {\n\n  /**\n   * A key of bootstrap context value containing the bootstrap context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<BootstrapContext> {\n    return BootstrapContext__key;\n  }\n\n  /**\n   * An `OnEvent` sender of bootstrap readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete.\n   *\n   * If bootstrap is complete already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[BootstrapContext]>;\n\n  /**\n   * Allows to wait for component definition.\n   *\n   * This corresponds to `window.customElements.whenDefined()` method.\n   *\n   * @typeParam T - A type of component.\n   * @param componentType - Component class constructor.\n   *\n   * @return An `OnEvent` sender of definition context sent when the given `componentType` is registered.\n   */\n  abstract whenDefined<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionContext<T>]>;\n\n  /**\n   * Allows to loads the given `feature`.\n   *\n   * @param feature - The feature to load.\n   *\n   * @returns  Loaded feature reference.\n   */\n  abstract load(feature: Class): FeatureRef;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKeyDefault } from '@proc7ts/context-values';\nimport { BootstrapContext } from './bootstrap-context';\n\n/**\n * Provides a default value for bootstrap context key.\n *\n * @category Core\n * @typeParam TValue - Context value type.\n * @typeParam TKey - Context key type.\n * @param provide - A function accepting bootstrap context and target key as parameters, and returning either a default\n * value, or `null`/`undefined` if unknown.\n *\n * @returns A provider of default value for bootstrap context value key.\n */\nexport function bootstrapDefault<TValue, TKey extends ContextKey<any, any, any>>(\n    provide: (this: void, context: BootstrapContext, key: TKey) => TValue | null | undefined,\n): ContextKeyDefault<TValue, TKey> {\n  return (context, key): TValue | null | undefined => {\n\n    const bootstrapContext = context.get(BootstrapContext);\n\n    return context === bootstrapContext\n        ? provide(bootstrapContext, key)\n        : bootstrapContext.get(key) as TValue;\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Checks whether the given DOM node is element.\n *\n * @category Utility\n * @param node - A DOM node to check.\n *\n * @returns `true` is `node` is element, or `false` otherwise.\n */\nexport function isElement(node: Node): node is Element {\n  return node.nodeType === Node.ELEMENT_NODE;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class, superClassOf } from '@proc7ts/primitives';\n\n/**\n * @category Utility\n */\nexport abstract class MetaAccessor<TMeta, TSrc = TMeta> {\n\n  readonly symbol: symbol;\n\n  protected constructor(symbol: symbol) {\n    this.symbol = symbol;\n  }\n\n  own(type: Class): TMeta | undefined {\n    // eslint-disable-next-line no-prototype-builtins,@typescript-eslint/no-unsafe-member-access\n    return type.hasOwnProperty(this.symbol) ? (type as any)[this.symbol] as TMeta : undefined;\n  }\n\n  of(type: Class): TMeta | undefined {\n\n    const ownDef: TMeta | undefined = this.own(type);\n    const superType = superClassOf(type);\n    const superDef = superType && this.of(superType);\n\n    return ownDef ? (superDef ? this.merge([superDef, ownDef]) : ownDef) : superDef;\n  }\n\n  define<T extends Class>(type: T, sources: readonly TSrc[]): T {\n\n    const prevMeta = this.own(type);\n    const updates = sources.map(source => this.meta(source, type));\n    const newMeta: TMeta = this.merge(prevMeta ? [prevMeta, ...updates] : updates);\n\n    Object.defineProperty(\n        type,\n        this.symbol,\n        {\n          configurable: true,\n          value: newMeta,\n        },\n    );\n\n    return type;\n  }\n\n  abstract merge(metas: readonly TMeta[]): TMeta;\n\n  protected abstract meta(source: TSrc, type: Class): TMeta;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class, elementOrArray, extendSetOfElements, mergeFunctions, setOfElements } from '@proc7ts/primitives';\nimport { BootstrapSetup } from '../boot';\nimport { MetaAccessor } from '../common';\nimport { FeatureContext } from './feature-context';\n\n/**\n * A key of a property holding a feature definition within its class constructor.\n *\n * @category Core\n */\nexport const FeatureDef__symbol = (/*#__PURE__*/ Symbol('feature-def'));\n\n/**\n * Feature definition.\n *\n * This can be one of:\n * - feature definition options object,\n * - feature definition holder, or\n * - feature definition factory.\n *\n * @category Core\n */\nexport type FeatureDef =\n    | FeatureDef.Options\n    | FeatureDef.Holder\n    | FeatureDef.Factory;\n\nexport namespace FeatureDef {\n\n  /**\n   * Feature definition options.\n   */\n  export interface Options {\n\n    readonly [FeatureDef__symbol]?: undefined;\n\n    /**\n     * Features this one requires.\n     */\n    readonly needs?: Class | readonly Class[];\n\n    /**\n     * Features this one provides.\n     *\n     * The feature always provides itself.\n     */\n    readonly has?: Class | readonly Class[];\n\n    /**\n     * Sets up bootstrap.\n     *\n     * This method is called before bootstrap context created.\n     *\n     * @param setup - Bootstrap setup.\n     */\n    setup?(setup: BootstrapSetup): void;\n\n    /**\n     * Bootstraps this feature by calling the given bootstrap context constructed.\n     *\n     * @param context - Feature initialization context.\n     */\n    init?(context: FeatureContext): void;\n\n  }\n\n  /**\n   * Feature definition holder.\n   */\n  export interface Holder {\n\n    /**\n     * The feature definition this holder contains.\n     */\n    readonly [FeatureDef__symbol]: FeatureDef;\n\n  }\n\n  /**\n   * Feature definition factory.\n   */\n  export interface Factory {\n\n    /**\n     * Builds feature definition.\n     *\n     * @param featureType - A feature class constructor to build definition for.\n     *\n     * @returns Built feature definition.\n     */\n    [FeatureDef__symbol](featureType: Class): FeatureDef;\n\n  }\n\n}\n\n/**\n * @internal\n */\nclass FeatureMeta extends MetaAccessor<FeatureDef.Options, FeatureDef> {\n\n  constructor() {\n    super(FeatureDef__symbol);\n  }\n\n  merge(defs: readonly FeatureDef.Options[]): FeatureDef.Options {\n    return defs.reduce<FeatureDef.Options>(\n        (prev, def) => ({\n          needs: elementOrArray(extendSetOfElements(setOfElements(prev.needs), def.needs)),\n          has: elementOrArray(extendSetOfElements(setOfElements(prev.has), def.has)),\n          setup: mergeFunctions<[BootstrapSetup], void, Class>(prev.setup, def.setup),\n          init: mergeFunctions<[FeatureContext], void, Class>(prev.init, def.init),\n        }),\n        {},\n    );\n  }\n\n  meta(source: FeatureDef, type: Class): FeatureDef.Options {\n\n    const def = source[FeatureDef__symbol];\n\n    return def == null\n        ? source as FeatureDef.Options\n        : this.meta(\n            typeof def === 'function' ? (source as FeatureDef.Factory)[FeatureDef__symbol](type) : def,\n            type,\n        );\n  }\n\n}\n\n/**\n * @internal\n */\nconst featureMeta = (/*#__PURE__*/ new FeatureMeta());\n\n/**\n * @internal\n */\nconst noFeatureDef: FeatureDef.Factory = {\n  [FeatureDef__symbol]() {\n    return {};\n  },\n};\n\n/**\n * @category Core\n */\nexport const FeatureDef = {\n\n  /**\n   * Extracts feature definition options from its type.\n   *\n   * @param featureType - Target feature class constructor.\n   *\n   * @returns Feature definition options. May be empty when there is no feature definition found in the given\n   * `featureType`.\n   */\n  of(this: void, featureType: Class): FeatureDef.Options {\n    return featureMeta.of(featureType) || {};\n  },\n\n  /**\n   * Builds feature definition options for the given feature class.\n   *\n   * @param featureType - Target feature class constructor.\n   * @param def - A feature definition.\n   *\n   * @returns Feature definition options.\n   */\n  for(this: void, featureType: Class, def: FeatureDef): FeatureDef.Options {\n    return featureMeta.meta(def, featureType);\n  },\n\n  /**\n   * Merges multiple feature definition options.\n   *\n   * @param defs - Feature definition options to merge.\n   *\n   * @returns Merged feature definition options.\n   */\n  merge(this: void, ...defs: readonly FeatureDef.Options[]): FeatureDef.Options {\n    return featureMeta.merge(defs);\n  },\n\n  /**\n   * Merges multiple feature definitions.\n   *\n   * @param defs - Feature definitions to merge.\n   *\n   * @returns Merged feature definition.\n   */\n  all(this: void, ...defs: readonly FeatureDef[]): FeatureDef {\n    return defs.reduce(\n        (prev, def) => ({\n          [FeatureDef__symbol](featureType: Class) {\n            return FeatureDef.merge(\n                FeatureDef.for(featureType, prev),\n                FeatureDef.for(featureType, def),\n            );\n          },\n        }),\n        noFeatureDef,\n    );\n  },\n\n  /**\n   * Defines a feature.\n   *\n   * Either creates new or extends an existing feature definition and stores it under `[FeatureDef__symbol]` key.\n   *\n   * @typeParam T - Feature type.\n   * @param featureType - Feature class constructor.\n   * @param defs - Feature definitions.\n   *\n   * @returns The `type` instance.\n   */\n  define<T extends Class>(this: void, featureType: T, ...defs: readonly FeatureDef[]): T {\n    return featureMeta.define(featureType, defs);\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '@proc7ts/primitives';\nimport { TypedClassDecorator } from '../common';\nimport { FeatureDef } from './feature-def';\n\n/**\n * Feature class decorator.\n *\n * Decorate a class with this decorator to define it as a feature like this:\n * ```TypeScript\n * @Feature({ needs: [OtherFeature, MyComponent] })\n * class MyFeature {\n *   // ...\n * }\n * ```\n *\n * Such feature can be passed to {@link bootstrapComponents} function or referenced by other features.\n *\n * This is an alternative to direct call to {@link FeatureDef.define} method.\n *\n * @category Core\n * @typeParam T - A type of decorated feature class.\n * @param defs - Feature definitions.\n *\n * @returns A feature class decorator.\n */\nexport function Feature<T extends Class = any>(...defs: FeatureDef[]): TypedClassDecorator<T> {\n  return (type: T) => FeatureDef.define(type, ...defs);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValueSpec, SingleContextKey } from '@proc7ts/context-values';\nimport { OnEvent } from '@proc7ts/fun-events';\nimport { Class, Supply, SupplyPeer } from '@proc7ts/primitives';\nimport { BootstrapContext, BootstrapSetup } from '../boot';\nimport { ComponentContext } from '../component';\nimport { ComponentClass, DefinitionContext, DefinitionSetup } from '../component/definition';\nimport { FeatureRef } from './feature-ref';\n\n/**\n * @internal\n */\nconst FeatureContext__key = (/*#__PURE__*/ new SingleContextKey<FeatureContext>('feature-context'));\n\n/**\n * Feature initialization context.\n *\n * @category Core\n */\nexport abstract class FeatureContext\n    extends BootstrapContext\n    implements BootstrapSetup, SupplyPeer {\n\n  /**\n   * A key of feature context value containing the feature context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<FeatureContext> {\n    return FeatureContext__key;\n  }\n\n  /**\n   * Feature class this context is created for.\n   */\n  abstract readonly feature: Class;\n\n  /**\n   * An `OnEvent` sender of feature readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete and the feature is loaded.\n   *\n   * If the above conditions satisfied already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[FeatureContext]>;\n\n  /**\n   * An `OnEvent` sender of component definition events.\n   *\n   * The registered receiver will be notified when new component class is defined, but before its custom element class\n   * constructed.\n   */\n  abstract readonly onDefinition: OnEvent<[DefinitionContext]>;\n\n  /**\n   * An `OnEvent` sender of component construction events.\n   *\n   * The registered receiver will be notified right before component is constructed.\n   */\n  abstract readonly onComponent: OnEvent<[ComponentContext]>;\n\n  /**\n   * Feature supply.\n   *\n   * Cut off once feature unloaded.\n   */\n  abstract readonly supply: Supply;\n\n  /**\n   * Provides bootstrap context value.\n   *\n   * Note that this happens when bootstrap context already exists. To provide a value before bootstrap context created\n   * a {@link BootstrapSetup.provide} method can be used.\n   *\n   * @typeParam TDeps - Dependencies tuple type.\n   * @typeParam TSrc - Source value type.\n   * @typeParam TSeed - Value seed type.\n   * @param spec - Context value specifier.\n   *\n   * @returns A value supply that removes the given context value specifier once cut off.\n   */\n  abstract provide<TDeps extends any[], TSrc, TSeed>(\n      spec: ContextValueSpec<BootstrapContext, any, TDeps, TSrc, TSeed>,\n  ): Supply;\n\n  abstract perDefinition<TDeps extends any[], TSrc, TSeed>(\n      spec: ContextValueSpec<DefinitionContext, any, TDeps, TSrc, TSeed>,\n  ): Supply;\n\n  abstract perComponent<TDeps extends any[], TSrc, TSeed>(\n      spec: ContextValueSpec<ComponentContext, any, TDeps, TSrc, TSeed>,\n  ): Supply;\n\n  abstract setupDefinition<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionSetup]>;\n\n  /**\n   * Defines a component.\n   *\n   * Creates a custom element according to component definition, and registers it with custom elements registry.\n   *\n   * Note that custom element definition will happen only when all features configuration complete.\n   *\n   * @typeParam T - A type of component.\n   * @param componentType - Component class constructor.\n   *\n   * @return Custom element class constructor registered as custom element.\n   *\n   * @throws TypeError  If `componentType` does not contain a component definition.\n   */\n  abstract define<T extends object>(componentType: ComponentClass<T>): void;\n\n  whenDefined<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionContext<T>]> {\n    return this.get(BootstrapContext).whenDefined(componentType);\n  }\n\n  load(feature: Class): FeatureRef {\n    return this.get(BootstrapContext).load(feature);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '@proc7ts/primitives';\n\n/**\n * Feature need.\n *\n * Indicates why one feature needs another one. The reason can be one of:\n *\n * - `needs` when feature {@link FeatureDef.Options.needs depends} on another one, or\n * - `has` when feature {@link FeatureDef.Options.has provides} another one.\n *\n * @category Core\n */\nexport type FeatureNeed = [Class, 'needs' | 'has', Class];\n\n/**\n * An error in feature needs. I.e. circular dependency.\n *\n * @category Core\n */\nexport class FeatureNeedsError extends Error {\n\n  /**\n   * Feature needs causing this error.\n   */\n  readonly needs: readonly FeatureNeed[];\n\n  /**\n   * Constructs feature needs error.\n   *\n   * @param needs - Feature needs causing the error.\n   */\n  constructor(needs: readonly FeatureNeed[]) {\n    super(\n        'Circular feature needs: ' + needs.reduce(\n        (\n            prev,\n            [feature, reason, need],\n        ) => (prev ? prev : feature.name) + ` ${reason} ${need.name}`,\n        '',\n        ),\n    );\n    this.needs = needs;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { AfterEvent, AfterEvent__symbol, EventKeeper } from '@proc7ts/fun-events';\nimport { FeatureStatus } from './feature-status';\n\n/**\n * Dynamically loaded feature reference.\n *\n * It is returned from {@link BootstrapContext.load} and can be used to read feature load status and unload it.\n *\n * Implements an `EventKeeper` interface by sending a feature load status updates.\n *\n * @category Core\n */\nexport abstract class FeatureRef implements EventKeeper<[FeatureStatus]> {\n\n  /**\n   * A promise resolved when feature is unloaded.\n   *\n   * This happens after all feature references dismissed.\n   */\n  abstract readonly down: Promise<void>;\n\n  /**\n   * An `AfterEvent` keeper of feature load status.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[FeatureStatus]>;\n\n  [AfterEvent__symbol](): AfterEvent<[FeatureStatus]> {\n    return this.read;\n  }\n\n  /**\n   * Dismisses feature reference.\n   *\n   * When all feature references dismissed, then unloads the feature. This removes everything set up by the\n   * feature via {@link BootstrapSetup} and {@link DefinitionSetup}.\n   *\n   * @param reason - Arbitrary reason of feature reference dismiss. This will be reported by load status supplies\n   * as their cut off reason.\n   *\n   * @returns A promise resolved when feature is unloaded. This happens only after all feature references dismissed.\n   */\n  abstract dismiss(reason?: any): Promise<void>;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { isQualifiedName, QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { mergeFunctions } from '@proc7ts/primitives';\nimport { MetaAccessor } from '../common';\nimport { FeatureDef, FeatureDef__symbol } from '../feature';\nimport { ComponentClass, DefinitionContext, DefinitionSetup, ElementDef } from './definition';\n\n/**\n * A key of a property holding a component definition within its class constructor.\n *\n * @category Core\n */\nexport const ComponentDef__symbol = (/*#__PURE__*/ Symbol('component-def'));\n\n/**\n * Component definition.\n *\n * A custom element class will be created for each registered component in accordance to this definition.\n *\n * This can be one of:\n * - custom element name (possibly qualified),\n * - component definition options,\n * - component definition holder,\n * - component definition factory,\n * - feature definition holder, or\n * - feature definition factory.\n *\n * @category Core\n * @typeParam T - A type of component.\n */\nexport type ComponentDef<T extends object = any> =\n    | QualifiedName\n    | ComponentDef.Options<T>\n    | ComponentDef.Holder<T>\n    | ComponentDef.Factory<T>\n    | FeatureDef.Holder\n    | FeatureDef.Factory;\n\nexport namespace ComponentDef {\n\n  /**\n   * Component definition options.\n   */\n  export interface Options<T extends object = any> {\n\n    readonly [ComponentDef__symbol]?: undefined;\n\n    /**\n     * Custom element name.\n     *\n     * The name may belong to some namespace to avoid naming conflicts. I.e. it can be either a string, or\n     * name/namespace tuple.\n     *\n     * When omitted an anonymous component will be registered. Such component is not bound to custom element, but it\n     * still can be mounted.\n     */\n    readonly name?: QualifiedName;\n\n    /**\n     * Existing element to extend by custom one.\n     */\n    readonly extend?: ElementDef.Extend;\n\n    /**\n     * Additional feature definition options.\n     */\n    readonly feature?: FeatureDef.Options;\n\n    /**\n     * Sets up component definition.\n     *\n     * This method is called before component definition context constructed.\n     *\n     * @param setup - Component definition setup.\n     */\n    setup?(setup: DefinitionSetup<T>): void;\n\n    /**\n     * Defines this component by calling the given component definition context methods.\n     *\n     * This function is called before the custom element is defined.\n     *\n     * @param defContext - Component definition context.\n     */\n    define?(defContext: DefinitionContext<T>): void;\n\n  }\n\n  /**\n   * Component definition holder.\n   *\n   * @typeParam T - A type of component.\n   */\n  export interface Holder<T extends object = any> {\n\n    /**\n     * The component definition this holder contains.\n     */\n    readonly [ComponentDef__symbol]: ComponentDef<T>;\n\n  }\n\n  /**\n   * Component definition factory.\n   *\n   * @typeParam T - A type of component.\n   */\n  export interface Factory<T extends object = any> {\n\n    /**\n     * Builds component definition.\n     *\n     * @param componentType - A component class constructor to build definition for.\n     *\n     * @returns Built component definition.\n     */\n    [ComponentDef__symbol](componentType: ComponentClass<T>): ComponentDef<T>;\n\n  }\n\n}\n\n/**\n * @internal\n */\ntype ComponentDefHolder<T extends object> =\n    | ComponentDef.Options<T>\n    | ComponentDef.Holder<T>\n    | ComponentDef.Factory<T>\n    | { [ComponentDef__symbol]?: undefined };\n\n/**\n * @internal\n */\ntype FeatureDefHolder =\n    | FeatureDef.Holder\n    | FeatureDef.Factory\n    | { [FeatureDef__symbol]?: undefined };\n\n/**\n * @internal\n */\nclass ComponentMeta extends MetaAccessor<ComponentDef.Options, ComponentDef> {\n\n  constructor() {\n    super(ComponentDef__symbol);\n  }\n\n  merge<T extends object>(defs: readonly ComponentDef.Options<T>[]): ComponentDef.Options<T> {\n    return defs.reduce(\n        (prev, def) => ({\n          ...prev,\n          ...def,\n          setup: mergeFunctions(prev.setup, def.setup),\n          define: mergeFunctions(prev.define, def.define),\n          feature: prev.feature\n              ? def.feature ? FeatureDef.merge(prev.feature, def.feature) : prev.feature\n              : def.feature,\n        }),\n        {},\n    );\n  }\n\n  meta<T extends object>(source: ComponentDef<T>, componentType: ComponentClass<T>): ComponentDef.Options<T> {\n\n    const def = (source as ComponentDefHolder<T>)[ComponentDef__symbol];\n\n    if (def != null) {\n      return this.meta(\n          typeof def === 'function' ? (source as ComponentDef.Factory<T>)[ComponentDef__symbol](componentType) : def,\n          componentType,\n      );\n    }\n    if ((source as FeatureDefHolder)[FeatureDef__symbol] != null) {\n      return {\n        feature: FeatureDef.for(componentType, source as FeatureDef),\n      };\n    }\n    if (isQualifiedName(source)) {\n      return { name: source };\n    }\n\n    return source as ComponentDef.Options<T>;\n  }\n\n}\n\n/**\n * @internal\n */\nconst componentMeta = (/*#__PURE__*/ new ComponentMeta());\n\n/**\n * @internal\n */\nconst noComponentDef: ComponentDef.Factory = {\n  [ComponentDef__symbol]() {\n    return {};\n  },\n};\n\n/**\n * @category Core\n */\nexport const ComponentDef = {\n\n  /**\n   * Extracts component definition options from its type.\n   *\n   * @typeParam T - A type of component.\n   * @param componentType - Target component class constructor.\n   *\n   * @returns Component definition options. May be empty if there is not definition attached to component type.\n   */\n  of<T extends object>(this: void, componentType: ComponentClass<T>): ComponentDef.Options<T> {\n    return componentMeta.of(componentType) as ComponentDef.Options<T> || {};\n  },\n\n  /**\n   * Builds component definition options for the given component class.\n   *\n   * @param componentType - Target component class constructor.\n   * @param source - A source of component definition.\n   *\n   * @returns Component definition.\n   */\n  for<T extends object>(\n      this: void,\n      componentType: ComponentClass<T>,\n      source: ComponentDef<T>,\n  ): ComponentDef.Options<T> {\n    return componentMeta.meta(source, componentType);\n  },\n\n  /**\n   * Merges multiple component definition options.\n   *\n   * @typeParam T - A type of component.\n   * @param defs - Component definition options to merge.\n   *\n   * @returns Merged component definition options.\n   */\n  merge<T extends object>(this: void, ...defs: ComponentDef.Options<T>[]): ComponentDef.Options<T> {\n    return componentMeta.merge(defs);\n  },\n\n  /**\n   * Merges multiple component definitions.\n   *\n   * @typeParam T - A type of component.\n   * @param defs - Component definitions to merge.\n   *\n   * @returns Merged component definition.\n   */\n  all<T extends object>(this: void, ...defs: ComponentDef<T>[]): ComponentDef<T> {\n    return defs.reduce<ComponentDef.Factory<T>>(\n        (prev, def) => ({\n          [ComponentDef__symbol](componentType: ComponentClass<T>) {\n            return ComponentDef.merge(\n                ComponentDef.for(componentType, prev),\n                ComponentDef.for(componentType, def),\n            );\n          },\n        }),\n        noComponentDef,\n    );\n  },\n\n  /**\n   * Defines a component.\n   *\n   * Either assigns new or extends existing component definition and stores it under {@link ComponentDef__symbol} key.\n   *\n   * Each component can be passed directly to {@link bootstrapComponents} function or added as a requirement\n   * of another feature.\n   *\n   * @typeParam T - A type of component.\n   * @param componentType - Component class constructor.\n   * @param defs - Component definitions.\n   *\n   * @returns The `type` instance.\n   */\n  define<T extends ComponentClass>(\n      this: void,\n      componentType: T,\n      ...defs: ComponentDef<InstanceType<T>>[]\n  ): T {\n    return componentMeta.define(componentType, defs);\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '@proc7ts/primitives';\nimport { ComponentDef, ComponentDef__symbol } from './component-def';\nimport { ComponentClass } from './definition';\n\n/**\n * Component decorator interface.\n *\n * In addition to being a decorator for component class, it may also serve as {@link ComponentDef component definition}.\n * Thus it can be added as parameter to {@link Component @Component} decorator, or used as class decorator by itself.\n *\n * Constructed by {@link Component} function.\n *\n * @category Core\n * @typeParam T - A type of decorated component class.\n */\nexport type ComponentDecorator<T extends ComponentClass = Class> =\n    & ((this: void, type: T) => T | void)\n    & ComponentDef<InstanceType<T>>;\n\n/**\n * Decorator of component class.\n *\n * Decorated class becomes component:\n * ```TypeScript\n * @Component({ name: 'my-element' })\n * class MyComponent {\n *   // ...\n * }\n * ```\n *\n * Such component can be registered with {@link FeatureContext.define} method or used as a feature, e.g. passed to\n * {@link bootstrapComponents} function, or added to {@link FeatureDef.Options.needs} property of another feature.\n *\n * This is an alternative to direct call to {@link ComponentDef.Options.define} method.\n *\n * @category Core\n * @typeParam T - A type of decorated component class.\n * @param defs - Component definitions.\n *\n * @returns A component class decorator.\n */\nexport function Component<T extends ComponentClass = Class>(\n    ...defs: ComponentDef<InstanceType<T>>[]\n): ComponentDecorator<T> {\n\n  const decorator = ((type: T) => ComponentDef.define(type, ...defs)) as ComponentDecorator<T>;\n  const def = decorator as ComponentDef.Factory<InstanceType<T>>;\n\n  def[ComponentDef__symbol] = () => ComponentDef.all(...defs);\n\n  return decorator;\n}\n","import { SingleContextKey } from '@proc7ts/context-values';\nimport { ComponentContext } from './component-context';\n\n/**\n * @internal\n */\nexport const ComponentContext__key = (/*#__PURE__*/ new SingleContextKey<ComponentContext>('component-context'));\n","import { DomEventDispatcher, OnDomEvent } from '@frontmeans/dom-events';\nimport { SingleContextKey } from '@proc7ts/context-values';\nimport { ComponentContext__key } from './component-context.key.impl';\nimport { ComponentEventDispatcher } from './component-event';\n\n/**\n * @internal\n */\nexport const ComponentEventDispatcher__key = (/*#__PURE__*/ new SingleContextKey<ComponentEventDispatcher>(\n    'component-event-dispatcher',\n    {\n      byDefault(values) {\n\n        const context = values.get(ComponentContext__key);\n        const dispatcher = new DomEventDispatcher(context.element);\n\n        dispatcher.supply.needs(context);\n\n        return {\n          dispatch(event: Event): boolean {\n            return dispatcher.dispatch(event);\n          },\n          on<TEvent extends Event>(type: string): OnDomEvent<TEvent> {\n            return dispatcher.on(type);\n          },\n        };\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { ComponentContext__key } from './component-context.key.impl';\n\n/**\n * Component content root node.\n *\n * Either element itself, or its shadow root.\n *\n * @category Core\n */\nexport type ContentRoot = Element | ShadowRoot;\n\n/**\n * A key of component context value containing a component root element.\n *\n * This is an element itself by default. But can be overridden e.g. by {@link AttachShadow @AttachShadow} decorator.\n *\n * @category Core\n */\nexport const ContentRoot: SingleContextRef<ContentRoot> = (/*#__PURE__*/ new SingleContextKey<ContentRoot>(\n    'content-root',\n    {\n      byDefault(ctx): ContentRoot {\n        return ctx.get(ComponentContext__key).element as ContentRoot;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextValueSlot } from '@proc7ts/context-values';\nimport { ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, digAfter, EventKeeper, statePath, StatePath } from '@proc7ts/fun-events';\nimport { mergeFunctions, noop } from '@proc7ts/primitives';\n\n/**\n * Component state updater signature.\n *\n * @category Core\n */\nexport type StateUpdater =\n/**\n * @typeParam TValue - Updated value type\n * @param path - Updated state node path.\n * @param newValue - New value.\n * @param oldValue - Replaced value.\n */\n    <TValue>(this: void, path: StatePath, newValue: TValue, oldValue: TValue) => void;\n\nexport namespace StateUpdater {\n\n  /**\n   * Normalized component state updater signature.\n   *\n   * Accepts normalized state path.\n   */\n  export type Normalized =\n  /**\n   * @typeParam TValue - Updated value type\n   * @param path - Normalized path of updated state node.\n   * @param newValue - New value.\n   * @param oldValue - Replaced value.\n   */\n      <TValue>(this: void, path: StatePath.Normalized, newValue: TValue, oldValue: TValue) => void;\n\n}\n\n/**\n * @internal\n */\nclass StateUpdaterKey extends ContextUpKey<StateUpdater, StateUpdater.Normalized> {\n\n  readonly upKey: ContextUpKey.UpKey<StateUpdater, StateUpdater.Normalized>;\n\n  constructor() {\n    super('state-updater');\n    this.upKey = this.createUpKey(\n        slot => slot.insert(slot.seed.do(digAfter(\n            (...fns) => {\n              if (fns.length) {\n\n                const combined: StateUpdater.Normalized = fns.reduce(\n                    (prev, fn) => mergeFunctions(fn, prev),\n                    noop,\n                );\n\n                return afterThe((path, newValue, oldValue) => combined(statePath(path), newValue, oldValue));\n              }\n\n              if (slot.hasFallback && slot.or) {\n                return slot.or;\n              }\n\n              return afterThe(noop);\n            },\n        ))),\n    );\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          StateUpdater,\n          EventKeeper<StateUpdater.Normalized[]> | StateUpdater.Normalized,\n          AfterEvent<StateUpdater.Normalized[]>>,\n  ): void {\n\n    let delegated: StateUpdater;\n\n    slot.context.get(\n        this.upKey,\n        slot.hasFallback ? { or: slot.or != null ? afterThe(slot.or) : slot.or } : undefined,\n    )!(\n        fn => delegated = fn,\n    ).whenOff(\n        () => delegated = noop,\n    );\n\n    slot.insert((path, newValue, oldValue) => delegated(path, newValue, oldValue));\n  }\n\n}\n\n/**\n * A key of component context value containing a component {@link StateUpdater state updater} function.\n *\n * Features are calling this function by default when component state changes, e.g. attribute value or DOM property\n * modified.\n *\n * Does nothing by default and after component destruction.\n *\n * When multiple state updaters provided, they all will be called on each state update, in reverse order.\n *\n * @category Core\n */\nexport const StateUpdater: ContextUpRef<StateUpdater, StateUpdater.Normalized> = (/*#__PURE__*/ new StateUpdaterKey());\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { OnDomEvent } from '@frontmeans/dom-events';\nimport { ContextKey, ContextKey__symbol, ContextValues } from '@proc7ts/context-values';\nimport { OnEvent, StatePath } from '@proc7ts/fun-events';\nimport { Supply, SupplyPeer } from '@proc7ts/primitives';\nimport { ComponentContext__key } from './component-context.key.impl';\nimport { ComponentEventDispatcher__key } from './component-event.key.impl';\nimport { ComponentMount } from './component-mount';\nimport { ContentRoot } from './content-root';\nimport { ComponentClass } from './definition';\nimport { StateUpdater } from './state-updater';\n\n/**\n * A key of a custom element and component properties containing a reference to component context.\n *\n * @category Core\n */\nexport const ComponentContext__symbol = (/*#__PURE__*/ Symbol('component-context'));\n\n/**\n * Component context.\n *\n * Passed to component constructor as its only parameter.\n *\n * Extends `ContextValues` interface. The values are provided by corresponding providers registered with\n * {@link BootstrapSetup.perComponent}} and {@link DefinitionSetup.perComponent} methods.\n *\n * @category Core\n * @typeParam T - A type of component.\n */\nexport abstract class ComponentContext<T extends object = any> extends ContextValues implements SupplyPeer {\n\n  /**\n   * A key of component context value containing the component context instance itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<ComponentContext> {\n    return ComponentContext__key;\n  }\n\n  /**\n   * Extracts component context from its custom element or from component itself.\n   *\n   * @param element - Custom element instance created for the component or the component itself.\n   *\n   * @return Component context reference stored under {@link ComponentContext__symbol} key.\n   *\n   * @throws TypeError  When the given `element` does not contain component context reference.\n   */\n  static of<T extends object>(element: any): ComponentContext<T> {\n\n    const context = (element as ComponentContextHolder<T>)[ComponentContext__symbol];\n\n    if (!context) {\n      throw TypeError(`No component context found in ${String(element)}`);\n    }\n\n    return context;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element constructed for the component according to its type.\n   *\n   * E.g. `HTMLElement` instance.\n   */\n  abstract readonly element: any;\n\n  /**\n   * A component instance.\n   *\n   * It is an error accessing this property before the component is created, e.g. from inside of component constructor\n   * or {@link DefinitionContext.whenComponent component instantiation event} receiver. A {@link whenReady} callback\n   * could be utilized to work this around.\n   */\n  abstract readonly component: T;\n\n  /**\n   * Component mount.\n   *\n   * This is set when component is mounted to arbitrary element by {@link DefinitionContext.mountTo}. It is `undefined`\n   * for components created in standard way.\n   */\n  abstract readonly mount: ComponentMount<T> | undefined;\n\n  /**\n   * Whether the component is settled.\n   *\n   * Component settlement happens:\n   * - when {@link settle} method is called,\n   * - when component is {@link DefinitionContext.mountTo mounted} to element, or\n   * - when component's element is {@link connected}.\n   *\n   * It is guaranteed that component settlement won't happen inside custom element's constructor. So the settlement\n   * event may be used e.g. to start DOM manipulations, as the latter is prohibited inside custom element constructor.\n   *\n   * This becomes `true` right before {@link whenSettled} event is sent.\n   */\n  abstract readonly settled: boolean;\n\n  /**\n   * Whether the component's element is connected.\n   *\n   * This becomes `true` right before {@link whenConnected} event is sent.\n   */\n  abstract readonly connected: boolean;\n\n  /**\n   * An `OnEvent` sender of component readiness event.\n   *\n   * The component is constructed shortly after custom element. So the component may not exist when requested\n   * e.g. inside component constructor or {@link DefinitionContext.whenComponent component instantiation event}\n   * receiver. The registered receiver will be notified when the component is constructed.\n   *\n   * If the component is constructed already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[this]>;\n\n  /**\n   * An `OnEvent` sender of component settlement event.\n   *\n   * The registered receiver is called when component is {@link settled}. If settled already the receiver is called\n   * immediately.\n   */\n  abstract readonly whenSettled: OnEvent<[this]>;\n\n  /**\n   * An `OnEvent` sender of component's element connection event.\n   *\n   * The registered receiver is called when component's element is connected. I.e. when custom element's\n   * `connectedCallback()` method is called, or when the element this component is {@link mount mounted to} is\n   * {@link ComponentMount.connect connected}.\n   *\n   * If connected already the receiver is called immediately.\n   */\n  abstract readonly whenConnected: OnEvent<[this]>;\n\n  /**\n   * An event supply that {@link destroy destroys} component when cut off.\n   */\n  abstract readonly supply: Supply;\n\n  /**\n   * Updates component's state.\n   *\n   * This is a shorthand for invoking a component {@link StateUpdater state updater} .\n   *\n   * @typeParam TValue - A type of changed value.\n   * @param key - Changed value key.\n   * @param newValue - New value.\n   * @param oldValue - Previous value.\n   */\n  readonly updateState: StateUpdater;\n\n  constructor() {\n    super();\n    this.updateState = <TValue>(key: StatePath, newValue: TValue, oldValue: TValue): void => {\n      this.get(StateUpdater)(key, newValue, oldValue);\n    };\n  }\n\n  /**\n   * Component content root.\n   *\n   * This is a shorthand for requesting a {@link ContentRoot content root} from component context.\n   */\n  get contentRoot(): ContentRoot {\n    return this.get(ContentRoot);\n  }\n\n  /**\n   * Settles component.\n   *\n   * Calling this method has no effect if component is {@link settled} already, when component is not\n   * {@link whenReady ready} yet, or custom element's constructor is not exited.\n   *\n   * Calling this method may trigger DOM manipulations (the latter is prohibited inside custom element's constructor).\n   * This may be desired for rendering optimizations. E.g. to render element's content _before_ adding it to document.\n   *\n   * This method is called automatically when {@link DefinitionContext.mountTo mounting} component to element.\n   */\n  abstract settle(): void;\n\n  /**\n   * Returns a DOM event producer for the given event type.\n   *\n   * This is a shorthand for invoking a component event producer function available under\n   * `[ComponentEventProducer.key]` key.\n   *\n   * @typeParam TEvent - DOM event type.\n   * @param type - An event type to listen for.\n   *\n   * @returns A producer of DOM event events of the given type.\n   */\n  on<TEvent extends Event>(type: string): OnDomEvent<TEvent> {\n    return this.get(ComponentEventDispatcher__key).on(type);\n  }\n\n  /**\n   * Dispatches an event to component element.\n   *\n   * This is a shorthand for invoking a component {@link ComponentEventDispatcher event dispatcher}.\n   *\n   * @param event - An event to dispatch.\n   */\n  dispatchEvent(event: Event): void {\n    this.get(ComponentEventDispatcher__key).dispatch(event);\n  }\n\n  /**\n   * Destroys the component.\n   *\n   * Removes element from the DOM tree. I.e. disconnects custom element first.\n   *\n   * After this method call the component should no longer be used.\n   *\n   * Note that component destruction is virtual. It is up to developer to decide when component is no longer needed.\n   * However the component is destroyed automatically once disconnected, i.e. when custom element's\n   * `disconnectedCallback()` method is called.\n   *\n   * @param reason - Optional reason of destruction.\n   */\n  abstract destroy(reason?: any): void;\n\n}\n\n/**\n * An object potentially containing component context.\n *\n * Either element or component instance.\n */\nexport interface ComponentContextHolder<T extends object = any> {\n  [ComponentContext__symbol]?: ComponentContext<T>;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { OnDomEvent } from '@frontmeans/dom-events';\nimport { SingleContextRef } from '@proc7ts/context-values';\nimport { ComponentContext } from './component-context';\nimport { ComponentEventDispatcher__key } from './component-event.key.impl';\n\n/**\n * Component event.\n *\n * Events of this type are thrown by various services to inform on component status changes.\n *\n * It is illegal to dispatch such events for elements not bound to components. It is reasonable to dispatch events\n * using {@link ComponentEventDispatcher} available in component context.\n *\n * The following event types supported:\n * - `wesib:component` is dispatched when component is bound to element. I.e. when HTML element is upgraded to custom\n *   one defined by component, or component is mounted to element. The event is dispatched when component is connected\n *   for the first time. I.e. when element is added to the document.\n *   This event bubbles and is not cancelable.\n *\n * @category Core\n * @event ComponentEvent#wesib:component\n */\nexport class ComponentEvent extends Event {\n\n  /**\n   * Target component context.\n   */\n  get context(): ComponentContext {\n    return ComponentContext.of(this.target);\n  }\n\n}\n\n/**\n * Component event dispatcher is used to listen for and dispatch component events.\n *\n * It is available in bootstrap context context.\n *\n * By default treats a component element as event target.\n *\n * @category Core\n */\nexport interface ComponentEventDispatcher {\n\n  /**\n   * Dispatches the DOM event for the given component.\n   *\n   * @param event - An event to dispatch.\n   *\n   * @returns `true` if either event's `cancelable` attribute value is `false` or its `preventDefault()` method was not\n   * invoked, or `false` otherwise.\n   */\n  dispatch(event: Event): boolean;\n\n  /**\n   * Returns an `OnDomEvent` sender of DOM events of the given type.\n   *\n   * @typeParam TEvent - DOM event type.\n   * @param type - An event type to listen for.\n   *\n   * @returns A producer of DOM event events of the given type.\n   */\n  on<TEvent extends Event>(type: string): OnDomEvent<TEvent>;\n\n}\n\n/**\n * A key of component context value containing component event dispatcher.\n *\n * @category Core\n */\nexport const ComponentEventDispatcher: SingleContextRef<ComponentEventDispatcher> = ComponentEventDispatcher__key;\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class, PropertyAccessorDescriptor, valueProvider } from '@proc7ts/primitives';\nimport { decoratePropertyAccessor } from '../common';\nimport { ComponentDef, ComponentDef__symbol } from './component-def';\nimport { Component, ComponentDecorator } from './component.decorator';\nimport { ComponentClass } from './definition';\n\n/**\n * Component property decorator interface.\n *\n * Allows to construct a {@link ComponentDecorator component decorator} by declaring a virtual property to use instead\n * of decorated one.\n *\n * Constructed by {@link ComponentProperty} function.\n *\n * @category Core\n * @typeParam TValue - Property value type.\n * @typeParam T - A type of decorated component class.\n */\nexport interface ComponentPropertyDecorator<TValue, T extends ComponentClass = Class> {\n\n  /**\n   * Decorates component method.\n   *\n   * @typeParam TPropValue - Property value type.\n   * @param proto - Decorated class prototype.\n   * @param propertyKey - Decorated property key.\n   * @param descriptor - Decorated property descriptor.\n   *\n   * @returns  Either updated property descriptor, or nothing.\n   */\n  // eslint-disable-next-line\n  <TPropValue extends TValue>(\n      this: void,\n      proto: InstanceType<T>,\n      propertyKey: string | symbol,\n      descriptor?: TypedPropertyDescriptor<TPropValue>,\n  ): any | void;\n\n  /**\n   * Builds component decorator assuming the virtual property has the given value.\n   *\n   * @param value - Virtual property value.\n   * @param key - Virtual property key. Defaults to {@link AnonymousComponentProperty__symbol}.\n   *\n   * @returns New component decorator.\n   */\n  As(\n      this: void,\n      value: TValue,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n  /**\n   * Builds component decorator assuming the virtual property value is provided by the given `provider`.\n   *\n   * @param provider - Virtual property read-only value provider.\n   * @param key - Virtual property key. Defaults to {@link AnonymousComponentProperty__symbol}.\n   *\n   * @returns New component decorator.\n   */\n  By(\n      this: void,\n      provider: ComponentProperty.Provider<TValue, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n  /**\n   * Builds component decorator assuming the decorated property is available via the given `accessor`.\n   *\n   * @param accessor - Virtual property accessor.\n   * @param key - Virtual property key. Defaults to {@link AnonymousComponentProperty__symbol}.\n   *\n   * @returns New component decorator.\n   */\n  With(\n      this: void,\n      accessor: ComponentProperty.Accessor<TValue, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n  /**\n   * Builds component decorator assuming the decorated property is bound to component with by the given `binder`.\n   *\n   * @param binder - A binder of virtual property accessor\n   * @param key - Virtual property key. Defaults to {@link AnonymousComponentProperty__symbol}..\n   *\n   * @returns New component decorator.\n   */\n  Bind(\n      this: void,\n      binder: ComponentProperty.Binder<TValue, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n}\n\nexport namespace ComponentProperty {\n\n  /**\n   * Component property value provider signature.\n   *\n   * This function will be called each time the property value is requested.\n   *\n   * @typeParam TValue - Property value type.\n   * @typeParam T - A type of component.\n   */\n  export type Provider<TValue, T extends object = any> =\n  /**\n   * @param component - Component instance.\n   * @param key - Target property key.\n   *\n   * @returns Property value.\n   */\n      (\n          this: void,\n          component: T,\n          key: string | symbol,\n      ) => TValue;\n\n  /**\n   * Component property accessor.\n   *\n   * Allows to read and write property value.\n   *\n   * @typeParam TValue - Property value type.\n   * @typeParam T - A type of component.\n   */\n  export interface Accessor<TValue, T extends object = any> {\n\n    /**\n     * Reads property value.\n     *\n     * May throw if the property is not readable.\n     *\n     * @param component - Target component instance.\n     * @param key - Property key.\n     *\n     * @returns Property value.\n     */\n    get(this: void, component: T, key: string | symbol): TValue;\n\n    /**\n     * Assigns new property value.\n     *\n     * May throw is the property is not writable.\n     *\n     * @param component - Target component instance.\n     * @param value - New property value.\n     * @param key - Property key.\n     */\n    set(this: void, component: T, value: TValue, key: string | symbol): void;\n\n  }\n\n  /**\n   * Property accessor binder signature.\n   *\n   * This is a function that binds a {@link BoundAccessor property accessor} to target component.\n   *\n   * @typeParam TValue - Property value type.\n   * @typeParam T - A type of component.\n   */\n  export type Binder<TValue, T extends object = any> =\n  /**\n   * @param component - Target component to bind property accessor to.\n   * @param key - Property key.\n   *\n   * @returns Property accessor bound to `component`.\n   */\n      (\n          this: void,\n          component: T,\n          key: string | symbol,\n      ) => BoundAccessor<TValue>;\n\n  export interface BoundAccessor<TValue> {\n\n    /**\n     * Reads bound component's property value.\n     *\n     * An attempt to read the value would throw when omitted.\n     *\n     * @returns Property value.\n     */\n    get?(): TValue;\n\n    /**\n     * Assigns bound component's new property value.\n     *\n     * An attempt to assign the value would throw when omitted.\n     *\n     * @param value - New property value.\n     */\n    set?(value: TValue): void;\n\n  }\n\n  /**\n   * Component property descriptor.\n   *\n   * Passed to {@link Definer property definer} by {@link ComponentProperty} function to construct a {@link Definition\n   * property definition}.\n   *\n   * @typeParam TValue - Property value type.\n   * @typeParam T - A type of component class.\n   */\n  export interface Descriptor<TValue, T extends ComponentClass = Class> {\n\n    /**\n     * Component class constructor.\n     */\n    readonly type: T;\n\n    /**\n     * Component property key.\n     */\n    readonly key: string | symbol;\n\n    /**\n     * Whether the property is initially writable.\n     *\n     * This can be changed by {@link Definition.get property read definition}.\n     */\n    readonly readable: boolean;\n\n    /**\n     * Whether the property is initially writable.\n     *\n     * This can be changed by {@link Definition.set property assignment definition}.\n     */\n    readonly writable: boolean;\n\n    /**\n     * Whether the property is initially enumerable.\n     *\n     * This can be changed by {@link Definition.enumerable property definition}.\n     */\n    readonly enumerable: boolean;\n\n    /**\n     * Whether the property is initially configurable.\n     *\n     * This can be changed by {@link Definition.configurable property definition}.\n     */\n    readonly configurable: boolean;\n\n    /**\n     * Reads property value.\n     *\n     * May throw if the property is not readable.\n     *\n     * @param component - Target component instance.\n     *\n     * @returns Property value.\n     */\n    get(this: void, component: InstanceType<T>): TValue;\n\n    /**\n     * Assigns new property value.\n     *\n     * May throw is the property is not writable.\n     *\n     * @param component - Target component instance.\n     * @param value - New property value.\n     */\n    set(this: void, component: InstanceType<T>, value: TValue): void;\n\n  }\n\n  /**\n   * Component property definition builder signature.\n   *\n   * This is a function called by {@link ComponentProperty} to define the property.\n   *\n   * @typeParam TValue - Property value type.\n   * @typeParam T - A type of component class.\n   */\n  export type Definer<TValue, T extends ComponentClass = Class> =\n  /**\n   * @param descriptor - Component property descriptor.\n   *\n   * @returns Component property definition. Or nothing if the property definition is not to be changed.\n   */\n      (\n          this: void,\n          descriptor: Descriptor<TValue, T>,\n      ) => Definition<TValue, T> | void;\n\n  /**\n   * Property definition to apply to existing property.\n   *\n   * When applying to decorated property, this definition updates its definition.\n   *\n   * When applying to virtual property assumed by one of {@link ComponentPropertyDecorator} methods, most of returned\n   * values ignored. Except for {@link Definition.componentDef component definition}, {@link Definition.get value\n   * reader}, and {@link Definition.set value setter}.\n   *\n   * @typeParam TValue - Property value type.\n   * @typeParam T - A type of component class.\n   */\n  export interface Definition<TValue, T extends ComponentClass = Class> {\n\n    /**\n     * Component definition to apply to component.\n     *\n     * When specified, it is used to enable certain functionality for decorated (or virtual) property.\n     */\n    readonly componentDef?: ComponentDef<InstanceType<T>>;\n\n    /**\n     * Whether to make the property enumerable.\n     *\n     * When specified, it is used as `enumerable` attribute value of decorated property descriptor.\n     */\n    readonly enumerable?: boolean;\n\n    /**\n     * Whether to make the property configurable.\n     *\n     * When specified, it is used as `configurable` attribute value of decorated property descriptor.\n     */\n    readonly configurable?: boolean;\n\n    /**\n     * Reads property value.\n     *\n     * When specified it changes how the property value is read.\n     *\n     * When neither {@link get}, nor {@link set} specified, the property access does not change.\n     *\n     * @param component - Target component instance.\n     * @param key - Property key.\n     *\n     * @returns Property value.\n     */\n    get?(this: void, component: InstanceType<T>, key: string | symbol): TValue;\n\n    /**\n     * Assigns new property value.\n     *\n     * When specified it changes how the property value is assigned.\n     *\n     * When neither {@link get}, nor {@link set} specified, the property access does not change.\n     *\n     * @param component - Target component instance.\n     * @param value - New property value.\n     * @param key - Property key.\n     */\n    set?(this: void, component: InstanceType<T>, value: TValue, key: string | symbol): void;\n\n  }\n\n}\n\n/**\n * Anonymous component property key.\n *\n * Used as a default virtual property key.\n *\n * @category Core\n */\nexport const AnonymousComponentProperty__symbol = (/*#__PURE__*/ Symbol('anonymous-component-property'));\n\n/**\n * Decorator of component property.\n *\n * Updates decorated property and component definition. Can be converted to {@link ComponentDecorator component\n * decorator} by calling appropriate method of returned decorator instance.\n *\n * @category Core\n * @typeParam TValue - Decorated property value type.\n * @typeParam T - A type of decorated component class.\n * @param define - Component property definition builder.\n *\n * @returns Component property decorator.\n */\nexport function ComponentProperty<TValue, T extends ComponentClass = Class>(\n    define: ComponentProperty.Definer<TValue, T>,\n): ComponentPropertyDecorator<TValue, T> {\n\n  const decorator = (\n      proto: InstanceType<T>,\n      propertyKey: string | symbol,\n      descriptor?: TypedPropertyDescriptor<TValue>,\n  ): any | void => decoratePropertyAccessor(\n      proto,\n      propertyKey,\n      descriptor,\n      desc => {\n\n        const { get: getValue, set: setValue } = desc;\n        const type = proto.constructor as T;\n        const { get, set, configurable, enumerable, componentDef = {} } = define({\n          type,\n          key: propertyKey,\n          readable: !!desc.get,\n          writable: !!desc.set,\n          enumerable: !!desc.enumerable,\n          configurable: !!desc.configurable,\n          get: getValue\n              ? ((component: InstanceType<T>) => getValue.call(component))\n              : notReadableAccessor(propertyKey),\n          set: setValue\n              ? ((component, value) => setValue.call(component, value))\n              : notWritableAccessor(propertyKey),\n        }) || {};\n\n        ComponentDef.define(type, componentDef);\n\n        const updated: PropertyAccessorDescriptor<TValue> = {\n          ...desc,\n          configurable: configurable ?? desc.configurable,\n          enumerable: enumerable ?? desc.enumerable,\n        };\n\n        if (get || set) {\n          updated.get = get && function (this: InstanceType<T>) {\n            return get(this, propertyKey);\n          };\n          updated.set = set && function (this: InstanceType<T>, value: TValue) {\n            set(this, value, propertyKey);\n          };\n        }\n\n        return updated;\n      },\n  );\n  const decorateWith = (\n      { get, set }: ComponentProperty.Accessor<TValue, InstanceType<T>>,\n      key: string | symbol = AnonymousComponentProperty__symbol,\n      writable: boolean,\n  ): ComponentDecorator<T> => Component({\n    [ComponentDef__symbol](type: InstanceType<T>) {\n\n      const def = define({\n        type,\n        key,\n        readable: true,\n        writable,\n        enumerable: false,\n        configurable: false,\n        get: component => get(component, key),\n        set: (component, value) => set(component, value, key),\n      });\n\n      return (def && def.componentDef) || {};\n    },\n  });\n  const By = (\n      provider: ComponentProperty.Provider<TValue, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T> => decorateWith(\n      {\n        get(component, key) {\n          return provider(component, key);\n        },\n      } as ComponentProperty.Accessor<TValue>,\n      key,\n      false,\n  );\n\n  const result = decorator as ComponentPropertyDecorator<TValue, T>;\n\n  result.With = (access, key) => decorateWith(access, key, true);\n  result.By = By;\n  result.As = (value, key?) => By(valueProvider(value), key);\n  result.Bind = (binder, key = AnonymousComponentProperty__symbol) => {\n\n    const accessor__symbol = Symbol(`${String(key)}:accessor`);\n\n    interface HostComponent {\n      [accessor__symbol]?: {\n        get(): TValue;\n        set(value: TValue): void;\n      };\n    }\n\n    const accessor = (component: HostComponent): {\n      get(): TValue;\n      set(value: TValue): void;\n    } => {\n\n      const existing = component[accessor__symbol];\n\n      if (existing) {\n        return existing;\n      }\n\n      const accessor = binder(component as InstanceType<T>, key);\n\n      return component[accessor__symbol] = {\n        get: accessor.get ? accessor.get.bind(accessor) : notReadableAccessor(key),\n        set: accessor.set ? accessor.set.bind(accessor) : notWritableAccessor(key),\n      };\n    };\n\n    return decorateWith(\n        {\n          get(component) {\n            return accessor(component).get();\n          },\n          set(component, value) {\n            return accessor(component).set(value);\n          },\n        },\n        key,\n        true,\n    );\n  };\n\n  return result;\n}\n\n/**\n * @internal\n */\nfunction notReadableAccessor(propertyKey: string | symbol): () => never {\n  return () => { throw new TypeError(`\"${String(propertyKey)}\" is not readable`); };\n}\n\n/**\n * @internal\n */\nfunction notWritableAccessor(propertyKey: string | symbol): () => never {\n  return () => { throw new TypeError(`\"${String(propertyKey)}\" is not writable`); };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport {\n  Class,\n  fieldAccessorDescriptor,\n  PropertyAccessorDescriptor,\n  toPropertyAccessorDescriptor,\n} from '@proc7ts/primitives';\n\n/**\n * Typed class decorator.\n *\n * @category Utility\n * @typeParam T - A type of class to decorate.\n */\nexport type TypedClassDecorator<T extends Class> = (type: T) => T | void;\n\n/**\n * Typed property decorator.\n *\n * @category Utility\n * @typeParam T - A type of class the decorated property belongs to.\n */\nexport type TypedPropertyDecorator<T extends Class> =\n    <TValue>(\n        target: InstanceType<T>,\n        propertyKey: string | symbol,\n        descriptor?: TypedPropertyDescriptor<TValue>,\n    ) => any | void;\n\n/**\n * Property decorator helper converting a field or property to the one with accessor (`get` and optionally `set`).\n *\n * @category Utility\n * @typeParam T - A type of target object.\n * @typeParam TValue - A property value type.\n * @param target - Target object containing the property.\n * @param propertyKey - Target property key.\n * @param desc - Target property descriptor, or `undefined` for object fields.\n * @param updateDescriptor - Descriptor updater. Accepts the accessor descriptor as the only argument. If returns\n * a descriptor, then it is applied to the property. Otherwise the target property descriptor is never updated.\n *\n * @returns Updated property descriptor to return from decorator to apply to the property, or `undefined` if there is\n * nothing to update.\n */\nexport function decoratePropertyAccessor<T, TValue>(\n    target: T,\n    propertyKey: string | symbol,\n    desc: TypedPropertyDescriptor<TValue> | undefined,\n    updateDescriptor: (desc: PropertyAccessorDescriptor<TValue>) => PropertyAccessorDescriptor<TValue>,\n): PropertyAccessorDescriptor<TValue> | undefined {\n\n  const isField = !desc;\n  const accessorDesc = desc\n      ? toPropertyAccessorDescriptor(desc)\n      : fieldAccessorDescriptor(target, propertyKey as keyof T) as unknown as PropertyAccessorDescriptor<TValue>;\n  const updatedDesc = updateDescriptor(accessorDesc);\n\n  if (isField && updatedDesc) {\n    Object.defineProperty(target, propertyKey, updatedDesc);\n    return;\n  }\n\n  return updatedDesc;\n}\n","import {\n  ContextKey,\n  ContextKey__symbol,\n  ContextRegistry,\n  ContextValues,\n  SingleContextKey,\n} from '@proc7ts/context-values';\nimport { BootstrapContext } from '../bootstrap-context';\n\nconst BootstrapContextRegistry__key = (\n    /*#__PURE__*/ new SingleContextKey<BootstrapContextRegistry>('bootstrap-context-registry')\n);\n\n/**\n * @internal\n */\nexport class BootstrapContextRegistry extends ContextRegistry<BootstrapContext> {\n\n  static get [ContextKey__symbol](): ContextKey<BootstrapContextRegistry> {\n    return BootstrapContextRegistry__key;\n  }\n\n  readonly values: ContextValues;\n\n  static create(): BootstrapContextRegistry {\n    return new BootstrapContextRegistry();\n  }\n\n  private constructor() {\n    super();\n    this.provide({ a: BootstrapContextRegistry, is: this });\n    this.values = this.newValues();\n  }\n\n}\n","import { ContextRef, ContextRegistry, SingleContextKey } from '@proc7ts/context-values';\nimport { ComponentContext } from '../../component';\nimport { bootstrapDefault } from '../bootstrap-default';\n\nexport type PerComponentRegistry = ComponentContextRegistry;\n\nexport const PerComponentRegistry: ContextRef<PerComponentRegistry> = (\n    /*#__PURE__*/ new SingleContextKey<ComponentContextRegistry>(\n    'per-component-registry',\n    {\n      byDefault: bootstrapDefault(() => new ComponentContextRegistry()),\n    },\n));\n\n/**\n * @internal\n */\nexport class ComponentContextRegistry extends ContextRegistry<ComponentContext> {\n}\n","import { ContextRef, ContextRegistry, SingleContextKey } from '@proc7ts/context-values';\nimport { DefinitionContext } from '../../component/definition';\nimport { bootstrapDefault } from '../bootstrap-default';\n\n/**\n * @internal\n */\nexport type PerDefinitionRegistry = DefinitionContextRegistry;\n\n/**\n * @internal\n */\nexport const PerDefinitionRegistry: ContextRef<PerDefinitionRegistry> = (\n    /*#__PURE__*/ new SingleContextKey<DefinitionContextRegistry>(\n    'per-definition-registry',\n    {\n      byDefault: bootstrapDefault(bsContext => new DefinitionContextRegistry(bsContext)),\n    },\n));\n\n/**\n * @internal\n */\nexport class DefinitionContextRegistry extends ContextRegistry<DefinitionContext> {\n}\n","import { EventEmitter, onAny, OnEvent, onEventBy, supplyOn, trackValue, valueOn } from '@proc7ts/fun-events';\nimport { asis, superClassOf, Supply } from '@proc7ts/primitives';\nimport { ComponentDef__symbol } from '../../component';\nimport { ComponentClass, DefinitionSetup } from '../../component/definition';\n\n/**\n * @internal\n */\nexport function onPostDefSetup(\n    componentType: ComponentClass,\n    supply: Supply,\n): OnEvent<[DefinitionSetup]> {\n\n  const { on } = postDefSetup(componentType);\n\n  return onEventBy(receiver => {\n    on({\n      supply: receiver.supply.needs(supply),\n      receive(ctx, setup) {\n\n        const whenReady = setup.whenReady.do(supplyOn(supply));\n        const whenComponent = setup.whenComponent.do(supplyOn(supply));\n\n        receiver.receive(ctx, {\n          get componentType() {\n            return setup.componentType;\n          },\n          get whenReady() {\n            return whenReady;\n          },\n          get whenComponent() {\n            return whenComponent;\n          },\n          perDefinition(spec) {\n            return setup.perDefinition(spec).needs(supply);\n          },\n          perComponent(spec) {\n            return setup.perComponent(spec).needs(supply);\n          },\n        });\n      },\n    });\n  });\n}\n\n/**\n * @internal\n */\nexport interface PostDefSetup<T extends object = any> {\n  readonly on: OnEvent<[DefinitionSetup<T>]>;\n  send(setup: DefinitionSetup): void;\n  setup(setup: DefinitionSetup<T>): void;\n}\n\nconst PostDefSetup__symbol = (/*#__PURE__*/ Symbol('post-def-setup'));\n\ninterface PostDefComponentClass<T extends object> extends ComponentClass<T> {\n  [PostDefSetup__symbol]?: PostDefSetup<T>;\n}\n\n/**\n * @internal\n */\nexport function postDefSetup<T extends object>(componentType: PostDefComponentClass<T>): PostDefSetup<T> {\n  // eslint-disable-next-line no-prototype-builtins\n  if (componentType.hasOwnProperty(PostDefSetup__symbol)) {\n    return componentType[PostDefSetup__symbol] as PostDefSetup<T>;\n  }\n\n  const tracker = trackValue<DefinitionSetup<T>>();\n  const emitter = new EventEmitter<[DefinitionSetup]>();\n  const onSetup: OnEvent<[DefinitionSetup<T>]> = tracker.read.do(valueOn(asis));\n  const on = onAny(onSetup, emitter);\n  const superType = superClassOf(componentType, type => ComponentDef__symbol in type);\n\n  if (superType) {\n\n    const superPostDefSetup = postDefSetup(superType);\n\n    on(setup => superPostDefSetup.send(setup));\n  }\n\n  const result: PostDefSetup<T> = {\n    on,\n    send(setup) {\n      emitter.send(setup);\n    },\n    setup(setup) {\n      tracker.it = setup;\n    },\n  };\n\n  Object.defineProperty(componentType, PostDefSetup__symbol, { value: result });\n\n  return result;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\n\n/**\n * A window the components bootstrap is performed against.\n *\n * @category Core\n */\nexport type BootstrapWindow = Window & typeof globalThis;\n\n/**\n * A key of bootstrap context value containing a window instance the bootstrap is performed against.\n *\n * Target value defaults to current window.\n *\n * @category Core\n */\nexport const BootstrapWindow: SingleContextRef<BootstrapWindow> = (/*#__PURE__*/ new SingleContextKey(\n    'window',\n    {\n      byDefault() {\n        return window;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { BootstrapWindow } from './bootstrap-window';\n\n/**\n * A window (e.g. DOM) element all bootstrapped components belong to.\n *\n * @category Core\n */\nexport type BootstrapRoot = Element;\n\n/**\n * A key of bootstrap context value containing a bootstrap root.\n *\n * Target value defaults to document body of {@link BootstrapWindow}.\n *\n * @category Core\n */\nexport const BootstrapRoot: SingleContextRef<BootstrapRoot> = (/*#__PURE__*/ new SingleContextKey(\n    'bootstrap-root',\n    {\n      byDefault(ctx) {\n        return ctx.get(BootstrapWindow).document.body;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { NamespaceAliaser } from '@frontmeans/namespace-aliaser';\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\n\n/**\n * Namespace aliaser used by default.\n *\n * Maps namespaces to their unique aliases.\n *\n * @category Core\n */\nexport type DefaultNamespaceAliaser = NamespaceAliaser;\n\n/**\n * A key of bootstrap context value containing the default namespace aliaser.\n *\n * @category Core\n */\nexport const DefaultNamespaceAliaser: SingleContextRef<DefaultNamespaceAliaser> = (\n    /*#__PURE__*/ new SingleContextKey<DefaultNamespaceAliaser>('default-namespace-aliaser')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { newRenderSchedule, RenderScheduler } from '@frontmeans/render-scheduler';\nimport { ContextValues, ContextValueSlot } from '@proc7ts/context-values';\nimport { contextDestroyed, ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, digAfter, EventKeeper } from '@proc7ts/fun-events';\nimport { BootstrapWindow } from './bootstrap-window';\n\n/**\n * Default rendering tasks scheduler.\n *\n * @category Core\n */\nexport type DefaultRenderScheduler = RenderScheduler;\n\n/**\n * @internal\n */\nclass DefaultRenderSchedulerKey extends ContextUpKey<DefaultRenderScheduler, RenderScheduler> {\n\n  readonly upKey: ContextUpKey.UpKey<DefaultRenderScheduler, RenderScheduler>;\n\n  constructor() {\n    super('default-render-scheduler');\n    this.upKey = this.createUpKey(\n        slot => slot.insert(slot.seed.do(digAfter(\n            (...fns) => {\n              if (fns.length) {\n                return afterThe(toDefaultRenderScheduler(slot.context, fns[fns.length - 1]));\n              }\n              if (slot.hasFallback && slot.or) {\n                return slot.or;\n              }\n              return afterThe(toDefaultRenderScheduler(slot.context, newRenderSchedule));\n            },\n        ))),\n    );\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          DefaultRenderScheduler,\n          EventKeeper<RenderScheduler[]> | RenderScheduler,\n          AfterEvent<RenderScheduler[]>>,\n  ): void {\n\n    let delegated: DefaultRenderScheduler;\n\n    slot.context.get(\n        this.upKey,\n        slot.hasFallback ? { or: slot.or != null ? afterThe(slot.or) : slot.or } : undefined,\n    )!(\n        scheduler => delegated = toDefaultRenderScheduler(slot.context, scheduler),\n    ).whenOff(\n        reason => delegated = contextDestroyed(reason),\n    );\n\n    slot.insert((...args) => delegated(...args));\n  }\n\n}\n\n/**\n * @internal\n */\nfunction toDefaultRenderScheduler(\n    context: ContextValues,\n    scheduler: RenderScheduler,\n): DefaultRenderScheduler {\n  return (options = {}) => scheduler({\n    ...options,\n    window: options.window || context.get(BootstrapWindow),\n  });\n}\n\n/**\n * A key of bootstrap, definition, or component context value containing {@link DefaultRenderScheduler} instance.\n *\n * Uses the default `RenderScheduler` (`newRenderSchedule()`) for {@link BootstrapWindow bootstrap window}.\n *\n * @category Core\n */\nexport const DefaultRenderScheduler: ContextUpRef<DefaultRenderScheduler, RenderScheduler> = (\n    /*#__PURE__*/ new DefaultRenderSchedulerKey()\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextValueSlot } from '@proc7ts/context-values';\nimport { contextDestroyed, ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, digAfter, EventKeeper } from '@proc7ts/fun-events';\nimport { ComponentContext, ComponentContext__symbol, ComponentContextHolder } from '../../component';\n\n/**\n * Element adapter is a function able to convert a raw element to component. E.g. mount a component to it.\n *\n * Features may use it internally. E.g. an `AutoConnectSupport` applies it to each added DOM element.\n *\n * Multiple element adapters can be registered in bootstrap context.\n *\n * @category Core\n */\nexport type ElementAdapter =\n/**\n * @param element - Target raw element to adapt.\n *\n * @returns An adapted component's context, or `undefined` if element can not be adapted.\n */\n    (this: void, element: any) => ComponentContext | undefined;\n\n/**\n * @internal\n */\nclass ElementAdapterKey extends ContextUpKey<ElementAdapter, ElementAdapter> {\n\n  readonly upKey: ContextUpKey.UpKey<ElementAdapter, ElementAdapter>;\n\n  constructor() {\n    super('element-adapter');\n    this.upKey = this.createUpKey(\n        slot => slot.insert(slot.seed.do(digAfter((...adapters) => {\n\n          const combined: ElementAdapter = adapters.reduce(\n              (prev, adapter) => element => prev(element) || adapter(element),\n              defaultElementAdapter,\n          );\n\n          if (combined !== defaultElementAdapter) {\n            return afterThe(combined);\n          }\n          if (slot.hasFallback && slot.or) {\n            return slot.or;\n          }\n\n          return afterThe(defaultElementAdapter);\n        }))),\n    );\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          ElementAdapter,\n          EventKeeper<ElementAdapter[]> | ElementAdapter,\n          AfterEvent<ElementAdapter[]>>,\n  ): void {\n\n    let delegated: ElementAdapter;\n\n    slot.context.get(\n        this.upKey,\n        slot.hasFallback ? { or: slot.or != null ? afterThe(slot.or) : slot.or } : undefined,\n    )!(\n        adapter => delegated = adapter,\n    ).whenOff(\n        reason => delegated = contextDestroyed(reason),\n    );\n\n    slot.insert(element => delegated(element));\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultElementAdapter(element: ComponentContextHolder): ComponentContext | undefined {\n  return element[ComponentContext__symbol];\n}\n\n/**\n * A key of bootstrap context value containing combined {@link ElementAdapter} instance.\n *\n * @category Core\n */\nexport const ElementAdapter: ContextUpRef<ElementAdapter, ElementAdapter> = (/*#__PURE__*/ new ElementAdapterKey());\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { FnContextKey } from '@proc7ts/context-values/updatable';\nimport { filterArray, itsEach, overArray } from '@proc7ts/push-iterator';\nimport { isElement } from '../../common';\nimport { ComponentContext__symbol, ComponentContextHolder, ComponentMount } from '../../component';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { ElementAdapter } from './element-adapter';\n\n/**\n * Element mutations observer.\n *\n * It is a `MutationObserver` implementation that:\n * - always observes target's children,\n * - applies {@link ElementAdapter element adapter} to added elements,\n * - tracks mounted components {@link ComponentMount.connected connection state}.\n *\n * A function constructing element observer instance could be obtained from bootstrap context.\n *\n * @category Core\n */\nexport interface ElementObserver extends MutationObserver {\n\n  /**\n   * Configures the observer callback to begin receiving notifications of changes to the DOM that match the given\n   * options.\n   * To stop the MutationObserver (so that none of its callbacks will be triggered any longer), call\n   * {@link disconnect}.\n   *\n   * @param target - A DOM node within the DOM tree to watch for changes, and to be the root of a subtree of nodes\n   * to be watched.\n   * @param options - An options that describe what DOM mutations should be reported to the observer's callback.\n   */\n  observe(target: Node, options?: ElementObserverInit): void;\n\n}\n\n/**\n * A key of bootstrap context value containing a function constructing a new {@link ElementObserver} instance.\n *\n * @category Core\n */\nexport const ElementObserver: FnContextKey<[MutationCallback], ElementObserver> = (/*#__PURE__*/ new FnContextKey(\n    'element-observer',\n    {\n      byDefault: bootstrapDefault(bsContext => {\n\n        const adapter = bsContext.get(ElementAdapter);\n        class DefaultElementObserver extends MutationObserver implements ElementObserver {\n\n          constructor(callback: MutationCallback) {\n            super(mutations => {\n              mutations.forEach(mutation => {\n                itsEach(\n                    overArray(mutation.removedNodes),\n                    node => mountOf(node as ComponentContextHolder)?.checkConnected(),\n                );\n                itsEach(\n                    filterArray(mutation.addedNodes, isElement),\n                    element => adapter(element)?.mount?.checkConnected(),\n                );\n              });\n              callback(mutations, this);\n            });\n          }\n\n          observe(target: Node, options?: ElementObserverInit): void {\n            super.observe(target, { ...options, childList: true });\n          }\n\n        }\n\n        return callback => new DefaultElementObserver(callback);\n      }),\n    },\n));\n\n/**\n * Element observer initialization options.\n *\n * @category Core\n */\nexport interface ElementObserverInit extends MutationObserverInit {\n\n  /**\n   * Whether mutations to target's children are to be observed.\n   *\n   * Always `true`.\n   */\n  childList?: true;\n\n}\n\n/**\n * @internal\n */\nfunction mountOf(node: ComponentContextHolder): ComponentMount | undefined {\n  return node[ComponentContext__symbol]?.mount;\n}\n","import { ComponentClass, DefinitionContext } from '../../component/definition';\n\n/**\n * @internal\n */\nexport const DefinitionContext__symbol = (/*#__PURE__*/ Symbol('definition-context'));\n\n/**\n * @internal\n */\nexport interface ComponentDefinitionClass<T extends object> extends ComponentClass<T> {\n  [DefinitionContext__symbol]?: DefinitionContext<T>;\n}\n\n/**\n * @internal\n */\nexport function definitionContextOf<T extends object>(\n    componentType: ComponentDefinitionClass<T>,\n): DefinitionContext<T> {\n  // eslint-disable-next-line no-prototype-builtins\n  if (!componentType.hasOwnProperty(DefinitionContext__symbol)) {\n    throw new TypeError(`Component is not defined: ${componentType}`);\n  }\n  return componentType[DefinitionContext__symbol] as DefinitionContext<T>;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { html__naming, isQualifiedName, QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { Class, newPromiseResolver, PromiseResolver } from '@proc7ts/primitives';\nimport { BootstrapContext, bootstrapDefault } from '../../boot';\nimport { BootstrapWindow, DefaultNamespaceAliaser } from '../../boot/globals';\nimport { definitionContextOf } from '../../boot/impl/definition-context.symbol.impl';\nimport { ComponentClass } from './component-class';\n\n/**\n * @internal\n */\nconst CustomElements__key = (/*#__PURE__*/ new SingleContextKey<CustomElements>(\n    'custom-elements',\n    {\n      byDefault: bootstrapDefault(createCustomElements),\n    },\n));\n\n/**\n * Custom elements registry.\n *\n * This is used to register custom elements.\n *\n * Typically implemented by `window.customElements`.\n *\n * @category Core\n */\nexport abstract class CustomElements {\n\n  /**\n   * A key of bootstrap context value containing a `CustomElements` instance used to register custom\n   * elements.\n   *\n   * Target value defaults to `window.customElements` from the window provided under `[BootstrapWindow.key]`.\n   */\n  static get [ContextKey__symbol](): ContextKey<CustomElements> {\n    return CustomElements__key;\n  }\n\n  /**\n   * Defines custom element.\n   *\n   * @param componentTypeOrName - A component class constructor or custom element name. The latter may belong to\n   * namespace to avoid naming conflicts.\n   * @param elementType - A constructor of custom element to define.\n   */\n  abstract define(componentTypeOrName: ComponentClass | QualifiedName, elementType: Class): void;\n\n  /**\n   * Allows to wait for component definition.\n   *\n   * This corresponds to `window.customElements.whenDefined()` method.\n   *\n   * @param componentTypeOrName - Component class constructor or custom element name possibly belonging to some\n   * namespace.\n   *\n   * @return A promise that is resolved when custom element is registered.\n   *\n   * @throws TypeError If `componentType` does not contain a component definition.\n   */\n  abstract whenDefined(componentTypeOrName: ComponentClass | QualifiedName): Promise<void>;\n\n}\n\n/**\n * @internal\n */\nfunction createCustomElements(bsContext: BootstrapContext): CustomElements {\n\n  const customElements: CustomElementRegistry = bsContext.get(BootstrapWindow).customElements;\n  const nsAlias = bsContext.get(DefaultNamespaceAliaser);\n\n  class CustomElements$ extends CustomElements {\n\n    define(componentTypeOrName: ComponentClass | string, elementType: Class): void {\n      if (isQualifiedName(componentTypeOrName)) {\n        customElements.define(html__naming.name(componentTypeOrName, nsAlias), elementType);\n        return;\n      }\n\n      const defContext = definitionContextOf(componentTypeOrName);\n      const { name, extend } = defContext.elementDef;\n\n      if (!name) {\n        componentResolver(componentTypeOrName).resolve(undefined);\n        return; // Anonymous component.\n      }\n      if (extend && extend.name) {\n        customElements.define(\n            html__naming.name(name, nsAlias),\n            elementType,\n            {\n              extends: extend.name,\n            },\n        );\n      } else {\n        customElements.define(html__naming.name(name, nsAlias), elementType);\n      }\n    }\n\n    whenDefined(componentTypeOrName: ComponentClass | string): Promise<void> {\n      if (isQualifiedName(componentTypeOrName)) {\n        return customElements.whenDefined(html__naming.name(componentTypeOrName, nsAlias));\n      }\n\n      const defContext = definitionContextOf(componentTypeOrName);\n      const { name } = defContext.elementDef;\n\n      if (!name) {\n        return componentResolver(componentTypeOrName).promise();\n      }\n\n      return customElements.whenDefined(html__naming.name(name, nsAlias));\n    }\n\n  }\n\n  return new CustomElements$();\n}\n\n/**\n * @internal\n */\nconst ComponentResolver__symbol = (/*#__PURE__*/ Symbol('component-resolver'));\n\n/**\n * @internal\n */\ninterface CustomComponentClass<T extends object = any> extends ComponentClass<T> {\n  [ComponentResolver__symbol]?: PromiseResolver;\n}\n\n/**\n * @internal\n */\nfunction componentResolver(componentType: CustomComponentClass): PromiseResolver {\n  // eslint-disable-next-line no-prototype-builtins\n  if (componentType.hasOwnProperty(ComponentResolver__symbol)) {\n    return componentType[ComponentResolver__symbol] as PromiseResolver;\n  }\n  return componentType[ComponentResolver__symbol] = newPromiseResolver();\n}\n","import { SingleContextKey } from '@proc7ts/context-values';\nimport { DefinitionContext } from './definition-context';\n\n/**\n * @internal\n */\nexport const DefinitionContext__key = (/*#__PURE__*/ new SingleContextKey<DefinitionContext>('definition-context'));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { Class } from '@proc7ts/primitives';\nimport { BootstrapWindow } from '../../boot/globals';\nimport { ComponentDef } from '../component-def';\nimport { DefinitionContext__key } from './definition.context.key.impl';\n\n/**\n * Custom element definition meta.\n *\n * @category Core\n */\nexport interface ElementDef {\n\n  /**\n   * Custom element name.\n   *\n   * The name may belong to some namespace to avoid naming conflicts. I.e. it can be either a string, or\n   * name/namespace tuple.\n   *\n   * When omitted an anonymous component will be registered. Such component is not bound to custom element, but it\n   * still can be mounted.\n   */\n  readonly name?: QualifiedName;\n\n  /**\n   * Existing element to extend by custom one.\n   */\n  readonly extend: ElementDef.Extend;\n\n}\n\n/**\n * A key of definition context value containing a custom element definition.\n *\n * Target value defaults to `HTMLElement` from the window provided under `[BootstrapWindow.key]`,\n * unless `ComponentDef.extend.type` is specified.\n */\nexport const ElementDef: SingleContextRef<ElementDef> = (/*#__PURE__*/ new SingleContextKey<ElementDef>(\n    'element-def',\n    {\n      byDefault(values) {\n\n        const componentType = values.get(DefinitionContext__key).componentType;\n        const { name, extend } = ComponentDef.of(componentType);\n\n        const elementExtend: ElementDef.Extend = {\n          get type() {\n            return extend && extend.type || values.get(BootstrapWindow).HTMLElement;\n          },\n          get name() {\n            return extend && extend.name;\n          },\n        };\n\n        return {\n          get name() {\n            return name;\n          },\n          get extend() {\n            return elementExtend;\n          },\n        };\n      },\n    },\n));\n\n/**\n * @category Core\n */\nexport namespace ElementDef {\n\n  /**\n   * The definition of element to extend by custom one.\n   */\n  export interface Extend {\n\n    /**\n     * The class constructor of element to extend.\n     */\n    readonly type: Class;\n\n    /**\n     * The name of element to extend.\n     *\n     * This is to support `as` attribute of standard HTML element. Note that this is not supported by polyfills.\n     */\n    readonly name?: string;\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues, ContextValueSpec } from '@proc7ts/context-values';\nimport { OnEvent } from '@proc7ts/fun-events';\nimport { Class, Supply } from '@proc7ts/primitives';\nimport { ComponentContext } from '../component-context';\nimport { ComponentMount } from '../component-mount';\nimport { ComponentClass } from './component-class';\nimport { DefinitionContext__key } from './definition.context.key.impl';\nimport { ElementDef } from './element-def';\n\n/**\n * Component definition context.\n *\n * Extends `ContextValues` interface. The values are provided by corresponding providers registered with\n * {@link BootstrapSetup.perDefinition} and {@link DefinitionSetup.perDefinition} methods. All {@link BootstrapContext}\n * values are available too.\n *\n * @category Core\n * @typeParam T - A type of component.\n */\nexport abstract class DefinitionContext<T extends object = any> extends ContextValues {\n\n  /**\n   * A key of definition context value containing the definition context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<DefinitionContext> {\n    return DefinitionContext__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element class constructor.\n   *\n   * It is an error accessing this property before the element class is created, e.g. from inside of\n   * {@link ComponentDef.define} function. In such case you may wish to add a `whenReady()` callback.\n   */\n  abstract readonly elementType: Class;\n\n  /**\n   * Custom element definition.\n   */\n  get elementDef(): ElementDef {\n    return this.get(ElementDef);\n  }\n\n  /**\n   * An `OnEvent` sender of component definition context upon its readiness.\n   *\n   * The custom element class is not constructed until component definition is complete.\n   * The registered receiver will be notified when the custom element class is constructed.\n   *\n   * If the custom element class is constructed already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[this]>;\n\n  /**\n   * An `OnEvent` sender of component context upon its instantiation.\n   *\n   * If component instantiated after the receiver is registered, that receiver would receive an instantiated component's\n   * context immediately.\n   *\n   * If component already exists when the receiver is registered, that receiver would receive instantiated component's\n   * context only when/if component is {@link ComponentContext.whenConnected connected}. This is to prevent resource\n   * leaks on destroyed components.\n   */\n  abstract readonly whenComponent: OnEvent<[ComponentContext<T>]>;\n\n  /**\n   * Mounts a component to arbitrary element.\n   *\n   * This method creates a component, but instead of creating a custom element for, it mounts it to the target\n   * `element`.\n   *\n   * It is up to the features to update the target element. They can use a `ComponentContext.mount` property to check\n   * whether the component is mounted or is constructed in standard way.\n   *\n   * The constructed component will be in disconnected state. To update its connection state either update a\n   * `ComponentMount.connected` property, or use a `connectTo()` method.\n   *\n   * @param element - Target element to mount new component to.\n   *\n   * @returns New component mount.\n   *\n   * @throws Error If target element is already bound to some component.\n   */\n  abstract mountTo(element: any): ComponentMount<T>;\n\n  /**\n   * Connects a component to arbitrary element.\n   *\n   * This method does the same as `mountTo()`, but also marks the mounted component as connected.\n   *\n   * @param element - Target element to mount new component to.\n   *\n   * @returns New component mount.\n   *\n   * @throws Error If target element is already bound to some component.\n   */\n  connectTo(element: any): ComponentMount<T> {\n\n    const mount = this.mountTo(element);\n\n    mount.connect();\n\n    return mount;\n  }\n\n  /**\n   * Provides a value available in the context of each component of the defined component type.\n   *\n   * @typeParam TDeps - A type of dependencies.\n   * @typeParam TSrc - The type of context value sources.\n   * @typeParam TSeed - Value seed type.\n   * @param spec - Component context value specifier.\n   *\n   * @returns A value supply that removes the given context value specifier once cut off.\n   */\n  abstract perComponent<TDeps extends any[], TSrc, TSeed>(\n      spec: ContextValueSpec<ComponentContext<T>, any, TDeps, TSrc, TSeed>,\n  ): Supply;\n\n}\n","import { onceOn, OnEvent, trackValue, valueOn_ } from '@proc7ts/fun-events';\nimport { Supply, valueProvider } from '@proc7ts/primitives';\nimport { ComponentContext, ComponentContext__symbol, ComponentContextHolder, ComponentEvent } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { DefinitionContext$ } from './definition-context.impl';\n\nconst enum ComponentStatus {\n  Building,\n  Ready,\n  Built,\n  Settled,\n  Connected,\n}\n\n/**\n * @internal\n */\nexport abstract class ComponentContext$<T extends object> extends ComponentContext<T> {\n\n  readonly whenReady: OnEvent<[this]>;\n  readonly whenSettled: OnEvent<[this]>;\n  readonly whenConnected: OnEvent<[this]>;\n  readonly get: ComponentContext<T>['get'];\n  private _status = trackValue<ComponentStatus>(ComponentStatus.Building);\n\n  constructor(\n      readonly _definitionContext: DefinitionContext$<T>,\n      readonly element: any,\n  ) {\n    super();\n\n    this.whenReady = this._status.read.do(\n        valueOn_(status => !!status && this),\n        onceOn,\n    );\n    this.whenSettled = this._status.read.do(\n        valueOn_(status => status >= ComponentStatus.Settled && this),\n        onceOn,\n    );\n    this.whenConnected = this._status.read.do(\n        valueOn_(status => status >= ComponentStatus.Connected && this),\n        onceOn,\n    );\n\n    const registry = _definitionContext._newComponentRegistry();\n\n    registry.provide({ a: ComponentContext, is: this });\n    this.get = registry.newValues().get;\n  }\n\n  get componentType(): ComponentClass<T> {\n    return this._definitionContext.componentType;\n  }\n\n  get component(): T {\n    return this._component();\n  }\n\n  get settled(): boolean {\n    return this._status.it >= ComponentStatus.Settled && !this.supply.isOff;\n  }\n\n  get connected(): boolean {\n    return this._status.it >= ComponentStatus.Connected && !this.supply.isOff;\n  }\n\n  get supply(): Supply {\n    return this._status.supply;\n  }\n\n  _component(): T {\n    throw new TypeError('Component is not constructed yet. Consider to use a `whenReady()` callback');\n  }\n\n  settle(): void {\n    if (this._status.it === ComponentStatus.Built) {\n      // Prevent settling until exiting custom element constructor\n      this._status.it = ComponentStatus.Settled;\n    }\n  }\n\n  destroy(reason?: any): void {\n    try {\n      this._status.supply.off(reason);\n    } finally {\n      delete (this.component as ComponentContextHolder)[ComponentContext__symbol];\n      delete (this.element as ComponentContextHolder)[ComponentContext__symbol];\n      this._component = componentDestroyed;\n      removeElement(this.element);\n    }\n  }\n\n  _createComponent(): this {\n\n    const whenComponent = this._definitionContext._whenComponent;\n\n    let lastRev = 0;\n\n    (this.element as ComponentContextHolder)[ComponentContext__symbol] = this;\n    whenComponent.readNotifier.do(onceOn)(notifier => lastRev = notifier(this, lastRev));\n    this.whenConnected(() => {\n      whenComponent.readNotifier({\n        supply: new Supply().needs(this),\n        receive: (_, notifier) => {\n          lastRev = notifier(this, lastRev);\n        },\n      });\n    });\n    this._definitionContext._elementBuilder.components.send(this);\n\n    const component = newComponent(this);\n\n    this._component = valueProvider(component);\n    this._status.it = ComponentStatus.Ready; // Issue `whenReady` event\n\n    return this;\n  }\n\n  _connect(): void {\n    this._status.it = ComponentStatus.Connected;\n  }\n\n  _created(): void {\n    if (this._status.it < ComponentStatus.Built) { // Mounted component can be connected already\n      this._status.it = ComponentStatus.Built; // Can settle now\n    }\n    this.whenConnected(\n        () => this.dispatchEvent(new ComponentEvent('wesib:component', { bubbles: true })),\n    );\n  }\n\n}\n\nfunction newComponent<T extends object>(context: ComponentContext<T>): T {\n\n  type ComponentProto = T & {\n    [ComponentContext__symbol]?: ComponentContext<T>;\n  };\n\n  const type = context.componentType;\n  const proto = type.prototype as ComponentProto;\n  const prevContext = proto[ComponentContext__symbol];\n\n  proto[ComponentContext__symbol] = context;\n  try {\n\n    const component = new type(context);\n\n    (component as ComponentContextHolder)[ComponentContext__symbol] = context;\n\n    return component;\n  } finally {\n    proto[ComponentContext__symbol] = prevContext;\n  }\n}\n\nfunction removeElement(element: Element): void {\n\n  const { parentNode } = element;\n\n  if (parentNode) {\n    parentNode.removeChild(element);\n  }\n}\n\nfunction componentDestroyed(): never {\n  throw new TypeError('Component destroyed already');\n}\n","import { ComponentMount } from '../../component';\nimport { ComponentContext$ } from './component-context.impl';\nimport { DefinitionContext$ } from './definition-context.impl';\n\nclass ComponentMount$<T extends object> extends ComponentMount<T> {\n\n  constructor(readonly context: ComponentContext$<T>) {\n    super();\n  }\n\n  get connected(): boolean {\n    return this.context.connected;\n  }\n\n  connect(): void {\n    this.context._connect();\n  }\n\n  checkConnected(): boolean {\n\n    const el = this.context.element as Element;\n    const doc = el.ownerDocument;\n    const connected = doc != null && doc.contains(el);\n\n    if (connected !== this.connected) {\n      if (connected) {\n        this.connect();\n      } else {\n        this.context.destroy();\n      }\n    }\n\n    return connected;\n  }\n\n}\n\n/**\n * @internal\n */\nexport class MountComponentContext$<T extends object> extends ComponentContext$<T> {\n\n  readonly mount: ComponentMount<T>;\n\n  constructor(definitionContext: DefinitionContext$<T>, element: any) {\n    super(definitionContext, element);\n    this.mount = this.mount = new ComponentMount$<T>(this);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentContext } from './component-context';\n\n/**\n * A mount of the component to an element.\n *\n * This is constructed when a component is mounted to arbitrary element by {@link DefinitionContext.mountTo} method.\n *\n * Mounted components do not maintain their connection state automatically. It is a calling code responsibility to set\n * their connection state by updating {@link ComponentMount.connected} property. E.g. by calling a\n * {@link ComponentMount.checkConnected} method. An {@link ElementObserver} and {@link AutoConnectSupport} feature\n * could be used to do it automatically.\n *\n * @category Core\n * @typeParam T - A type of component.\n */\nexport abstract class ComponentMount<T extends object = any> {\n\n  /**\n   * Mounted component context.\n   */\n  abstract readonly context: ComponentContext<T>;\n\n  /**\n   * Component connection state.\n   *\n   * The initial state is set by {@link checkConnected} method.\n   */\n  abstract readonly connected: boolean;\n\n  /**\n   * Mounted component.\n   */\n  get component(): T {\n    return this.context.component;\n  }\n\n  /**\n   * An element the component is mounted to.\n   */\n  get element(): any {\n    return this.context.element as unknown;\n  }\n\n  /**\n   * Forcibly connects mounted component element to the document.\n   */\n  abstract connect(): void;\n\n  /**\n   * Checks whether the mounted component element is actually connected to its owning document.\n   *\n   * Updates the `connected` property and returns its value.\n   *\n   * When component is disconnected after it has been connected, the component is {@link ComponentContext.destroy\n   * destroyed}.\n   *\n   * @returns `true` if the component element is connected, or `false` otherwise.\n   */\n  abstract checkConnected(): boolean;\n\n}\n","import { Class } from '@proc7ts/primitives';\nimport { CustomElementClass } from '../../common';\nimport { ComponentContext__symbol } from '../../component';\nimport { ElementDef } from '../../component/definition';\nimport { ComponentContext$ } from './component-context.impl';\nimport { DefinitionContext$ } from './definition-context.impl';\n\nclass CustomComponentContext$<T extends object> extends ComponentContext$<T> {\n\n  get mount(): undefined {\n    return;\n  }\n\n}\n\n/**\n * @internal\n */\nexport function customElementType<T extends object>(\n    definitionContext: DefinitionContext$<T>,\n): Class {\n\n  const elementDef = definitionContext.get(ElementDef);\n\n  class CustomElement$ extends (elementDef.extend.type as CustomElementClass) {\n\n    // Component context reference\n    [ComponentContext__symbol]: CustomComponentContext$<T>;\n\n    constructor() {\n      super();\n\n      const context = new CustomComponentContext$(definitionContext, this);\n\n      context._createComponent();\n      context._created();\n    }\n\n    connectedCallback(): void {\n      super.connectedCallback?.();\n      this[ComponentContext__symbol]._connect();\n    }\n\n    disconnectedCallback(): void {\n      this[ComponentContext__symbol].destroy();\n      super.disconnectedCallback?.();\n    }\n\n  }\n\n  return CustomElement$;\n}\n","import { AfterEvent, EventEmitter, mapAfter_, OnEvent, onEventBy, trackValue } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\n\nexport class WhenComponent<T extends object> {\n\n  readonly onCreated: OnEvent<[ComponentContext<T>]>;\n  readonly readNotifier: AfterEvent<[ComponentNotifier<T>]>;\n\n  constructor() {\n\n    const currentRev = trackValue(0);\n    const created = new EventEmitter<[ComponentContext<T>, number]>();\n\n    this.onCreated = onEventBy(receiver => {\n\n      const receiverRev = currentRev.it + 1;\n\n      created.on({\n        supply: receiver.supply,\n        receive: (eventContext, componentContext, notifiedRev) => {\n          if (notifiedRev < receiverRev) {\n            // Notify only receivers added after the last notification\n            receiver.receive(\n                {\n                  onRecurrent(recurrentReceiver) {\n                    eventContext.onRecurrent(recurrentContext => recurrentReceiver(recurrentContext));\n                  },\n                },\n                componentContext,\n            );\n          }\n        },\n      });\n\n      ++currentRev.it;\n    });\n    this.readNotifier = currentRev.read.do(\n        mapAfter_(\n            rev => (context, notifiedRev) => {\n              created.send(context, notifiedRev);\n              return rev;\n            },\n        ),\n    );\n  }\n\n}\n\nexport type ComponentNotifier<T extends object> = (\n    this: void,\n    context: ComponentContext<T>,\n    notifiedRev: number,\n) => number;\n","import { ContextValues, ContextValueSpec } from '@proc7ts/context-values';\nimport { mapOn_, onceOn, OnEvent, trackValue, translateOn, ValueTracker } from '@proc7ts/fun-events';\nimport { Class, Supply, valueProvider } from '@proc7ts/primitives';\nimport {\n  ComponentContext,\n  ComponentContext__symbol,\n  ComponentContextHolder,\n  ComponentDef,\n  ComponentMount,\n} from '../../component';\nimport { DefinitionContext, DefinitionSetup } from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { ComponentContextRegistry, PerComponentRegistry } from './component-context-registry.impl';\nimport { MountComponentContext$ } from './component-mount.impl';\nimport { customElementType } from './custom-element.impl';\nimport { DefinitionContextRegistry, PerDefinitionRegistry } from './definition-context-registry.impl';\nimport { ComponentDefinitionClass, DefinitionContext__symbol } from './definition-context.symbol.impl';\nimport { ElementBuilder } from './element-builder.impl';\nimport { postDefSetup } from './post-def-setup.impl';\nimport { WhenComponent } from './when-component.impl';\n\n/**\n * @internal\n */\nexport class DefinitionContext$<T extends object> extends DefinitionContext<T> {\n\n  readonly whenReady: OnEvent<[this]>;\n  readonly get: ContextValues['get'];\n  private readonly _def: ComponentDef.Options<T>;\n  readonly _whenComponent = new WhenComponent<T>();\n  private readonly _ready: ValueTracker<boolean>;\n  private readonly _whenReady: OnEvent<[]>;\n  private readonly _perComponentRegistry: ComponentContextRegistry;\n\n  constructor(\n      readonly _bsContext: BootstrapContext,\n      readonly _elementBuilder: ElementBuilder,\n      readonly componentType: ComponentDefinitionClass<T>,\n  ) {\n    super();\n    this._ready = trackValue(false);\n    this._whenReady = this._ready.read.do(translateOn((send, ready) => ready && send()));\n    this._def = ComponentDef.of(componentType);\n\n    const definitionContextRegistry = new DefinitionContextRegistry(_bsContext.get(PerDefinitionRegistry).seeds());\n\n    definitionContextRegistry.provide({ a: DefinitionContext, is: this });\n\n    this.get = definitionContextRegistry.newValues().get;\n\n    const parentPerComponentRegistry = _bsContext.get(PerComponentRegistry).append(seedKey => this.get(seedKey));\n    this._perComponentRegistry = new ComponentContextRegistry(parentPerComponentRegistry.seeds());\n\n    this.whenReady = this._whenReady.do(mapOn_(valueProvider(this)), onceOn);\n\n    const definitionSetup: DefinitionSetup<T> = {\n      get componentType() {\n        return componentType;\n      },\n      whenReady: this.whenReady,\n      whenComponent: this.whenComponent,\n      perDefinition: spec => definitionContextRegistry.provide(spec),\n      perComponent: spec => this._perComponentRegistry.provide(spec),\n    };\n\n    this._def.setup?.(definitionSetup);\n    postDefSetup(componentType).setup(definitionSetup);\n  }\n\n  get elementType(): Class {\n    return this._elementType();\n  }\n\n  get whenComponent(): OnEvent<[ComponentContext<T>]> {\n    return this._whenComponent.onCreated;\n  }\n\n  mountTo(element: ComponentContextHolder): ComponentMount<T> {\n    if (element[ComponentContext__symbol]) {\n      throw new Error(`Element ${String(element)} already bound to component`);\n    }\n\n    const context = new MountComponentContext$(this, element);\n\n    context._createComponent();\n\n    const { mount } = context;\n\n    mount.checkConnected();\n    context._created();\n    context.settle();\n\n    return mount;\n  }\n\n  perComponent<TDeps extends any[], TSrc, TSeed>(\n      spec: ContextValueSpec<ComponentContext<T>, any, TDeps, TSrc, TSeed>,\n  ): Supply {\n    return this._perComponentRegistry.provide(spec);\n  }\n\n  _newComponentRegistry(): ComponentContextRegistry {\n    return new ComponentContextRegistry(this._perComponentRegistry.seeds());\n  }\n\n  _elementType(): Class {\n    throw new Error('Custom element class is not constructed yet. Consider to use a `whenReady()` callback');\n  }\n\n  _define(): void {\n    this._def.define?.(this);\n    this._elementBuilder.definitions.send(this);\n    this._elementType = valueProvider(customElementType(this));\n    this.componentType[DefinitionContext__symbol] = this;\n    this._ready.it = true;\n  }\n\n}\n","import { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { EventEmitter } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\nimport { ComponentClass, DefinitionContext } from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { DefinitionContext$ } from './definition-context.impl';\n\n/**\n * @internal\n */\nexport interface ElementBuilder {\n  readonly definitions: EventEmitter<[DefinitionContext]>;\n  readonly components: EventEmitter<[ComponentContext]>;\n  buildElement<T extends object>(this: void, componentType: ComponentClass<T>): DefinitionContext<T>;\n}\n\n/**\n * @internal\n */\nexport const ElementBuilder: SingleContextRef<ElementBuilder> = (/*#__PURE__*/ new SingleContextKey<ElementBuilder>(\n    'element-builder',\n    {\n      byDefault: bootstrapDefault(newElementBuilder),\n    },\n));\n\nfunction newElementBuilder(bsContext: BootstrapContext): ElementBuilder {\n  return {\n    definitions: new EventEmitter<[DefinitionContext]>(),\n    components: new EventEmitter<[ComponentContext]>(),\n    buildElement<T extends object>(componentType: ComponentClass<T>) {\n\n      const definitionContext = new DefinitionContext$(bsContext, this, componentType);\n\n      definitionContext._define();\n\n      return definitionContext;\n    },\n  };\n\n}\n","import { ElementBuilder } from '../../boot/impl';\nimport { ComponentClass, CustomElements } from '../../component/definition';\nimport { FeatureContext } from '../feature-context';\n\n/**\n * @internal\n */\nexport class ComponentRegistry {\n\n  private _definitionQueue?: (() => void)[] = [];\n\n  constructor(private readonly _context: FeatureContext) {\n    _context.whenReady(() => {\n      this._definitionQueue!.forEach(definition => definition());\n      delete this._definitionQueue;\n    });\n  }\n\n  get customElements(): CustomElements {\n    return this._context.get(CustomElements);\n  }\n\n  define<T extends object>(componentType: ComponentClass<T>): void {\n    this._definitionQueue!.push(() => {\n\n      const elementBuilder = this._context.get(ElementBuilder);\n      const defContext = elementBuilder.buildElement(componentType);\n\n      this.customElements.define(componentType, defContext.elementType);\n    });\n  }\n\n}\n","import { ContextRegistry, ContextValueSpec } from '@proc7ts/context-values';\nimport { afterAll, onceOn, OnEvent, supplyOn, trackValue, valueOn } from '@proc7ts/fun-events';\nimport { Class, Supply } from '@proc7ts/primitives';\nimport { BootstrapContext } from '../../boot';\nimport {\n  BootstrapContextRegistry,\n  ElementBuilder,\n  onPostDefSetup,\n  PerComponentRegistry,\n  PerDefinitionRegistry,\n} from '../../boot/impl';\nimport { ComponentContext } from '../../component';\nimport { ComponentClass, DefinitionContext, DefinitionSetup } from '../../component/definition';\nimport { FeatureContext } from '../feature-context';\nimport { ComponentRegistry } from './component-registry.impl';\nimport { FeatureLoader } from './feature-loader.impl';\n\n/**\n * @internal\n */\nexport class FeatureContext$ extends FeatureContext {\n\n  readonly whenReady: OnEvent<[FeatureContext]>;\n  readonly onDefinition: OnEvent<[DefinitionContext]>;\n  readonly onComponent: OnEvent<[ComponentContext]>;\n  readonly supply = new Supply();\n  readonly get: FeatureContext['get'];\n  private readonly _componentRegistry: ComponentRegistry;\n\n  constructor(\n      private readonly _bsContext: BootstrapContext,\n      private readonly _loader: FeatureLoader,\n  ) {\n    super();\n\n    const registry = new ContextRegistry<FeatureContext>(_bsContext);\n\n    registry.provide({ a: FeatureContext, is: this });\n    this.get = registry.newValues().get;\n\n    this.whenReady = afterAll({\n      st: this._loader.state,\n      bs: trackValue<BootstrapContext>().by(_bsContext.whenReady),\n    }).do(\n        valueOn(({ st: [ready], bs: [bs] }) => bs && ready && this),\n        onceOn,\n    );\n    this.onDefinition = _bsContext.get(ElementBuilder).definitions.on.do(supplyOn(this));\n    this.onComponent = this._bsContext.get(ElementBuilder).components.on.do(supplyOn(this));\n\n    this._componentRegistry = new ComponentRegistry(this);\n  }\n\n  get feature(): Class {\n    return this._loader.request.feature;\n  }\n\n  provide<TDeps extends any[], TSrc, TSeed>(\n      spec: ContextValueSpec<BootstrapContext, any, TDeps, TSrc, TSeed>,\n  ): Supply {\n    return this._bsContext.get(BootstrapContextRegistry).provide(spec).needs(this);\n  }\n\n  perDefinition<TDeps extends any[], TSrc, TSeed>(\n      spec: ContextValueSpec<DefinitionContext, any, TDeps, TSrc, TSeed>,\n  ): Supply {\n    return this._bsContext.get(PerDefinitionRegistry).provide(spec).needs(this);\n  }\n\n  perComponent<TDeps extends any[], TSrc, TSeed>(\n      spec: ContextValueSpec<ComponentContext, any, TDeps, TSrc, TSeed>,\n  ): Supply {\n    return this._bsContext.get(PerComponentRegistry).provide(spec).needs(this);\n  }\n\n  setupDefinition<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionSetup]> {\n    return onPostDefSetup(componentType, this.supply);\n  }\n\n  define<T extends object>(componentType: ComponentClass<T>): void {\n    this._componentRegistry.define(componentType);\n  }\n\n}\n","import { ContextValueSlot } from '@proc7ts/context-values';\nimport { ContextUpKey } from '@proc7ts/context-values/updatable';\nimport {\n  afterAll,\n  afterEach,\n  AfterEvent,\n  afterEventBy,\n  afterThe,\n  digAfter_,\n  EventKeeper,\n  mapAfter,\n  mapAfter_,\n  shareAfter,\n  trackValue,\n  translateAfter,\n  translateAfter_,\n} from '@proc7ts/fun-events';\nimport { Class, isPresent, setOfElements } from '@proc7ts/primitives';\nimport { BootstrapContext } from '../../boot';\nimport { FeatureContext } from '../feature-context';\nimport { FeatureContext$ } from './feature-context.impl';\nimport { FeatureClause, FeatureRequest } from './feature-request.impl';\n\nconst FeatureKey__symbol = (/*#__PURE__*/ Symbol('feature-key'));\n\ninterface FeatureClass extends Class {\n  [FeatureKey__symbol]?: FeatureKey;\n}\n\n/**\n * @internal\n */\nexport class FeatureKey extends ContextUpKey<AfterEvent<[FeatureLoader?]>, FeatureClause> {\n\n  static of(feature: Class): FeatureKey {\n    // eslint-disable-next-line no-prototype-builtins\n    return feature.hasOwnProperty(FeatureKey__symbol)\n        ? ((feature as FeatureClass)[FeatureKey__symbol] as FeatureKey)\n        : ((feature as FeatureClass)[FeatureKey__symbol] = new FeatureKey(feature));\n  }\n\n  get upKey(): this {\n    return this;\n  }\n\n  private constructor(feature: Class) {\n    super(`feature:${feature.name}`);\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          AfterEvent<[FeatureLoader?]>,\n          EventKeeper<FeatureClause[]> | FeatureClause,\n          AfterEvent<FeatureClause[]>>,\n  ): void {\n    slot.insert(loadFeature(\n        slot.context.get(BootstrapContext),\n        slot.seed.do(mapAfter(preferredFeatureClause)),\n    ));\n  }\n\n}\n\nfunction preferredFeatureClause(...clauses: FeatureClause[]): FeatureClause | undefined {\n\n  let required = false;\n  let preferred: FeatureClause | undefined;\n\n  for (const clause of clauses) {\n    switch (clause[1]) {\n    case 'is':\n      required = true;\n      if (!preferred) {\n        preferred = clause;\n      }\n      break;\n    case 'has':\n      preferred = clause;\n      break;\n    case 'needs':\n      required = true;\n    }\n  }\n\n  return required ? preferred : undefined;\n}\n\nfunction loadFeature(\n    bsContext: BootstrapContext,\n    from: AfterEvent<[FeatureClause?]>,\n): AfterEvent<[FeatureLoader?]> {\n  return afterEventBy<[FeatureLoader?]>(receiver => {\n\n    let origin: Class | undefined;\n    let source: AfterEvent<[FeatureLoader?]> = afterThe();\n    let stageId: Promise<FeatureStageId> = Promise.resolve('idle');\n\n    return afterAll({\n      clause: from,\n      deps: loadFeatureDeps(bsContext, from),\n    }).do(digAfter_(({ clause: [clause], deps }): AfterEvent<[FeatureLoader?]> => {\n      if (!clause) {\n        return afterThe();\n      }\n\n      const [request, , target] = clause;\n\n      if (request.feature === origin) {\n        return source; // Origin didn't change. Reuse the source.\n      }\n\n      origin = request.feature;\n\n      if (target !== origin) {\n        // Originated from replacement feature provider. Reuse its loader.\n        return source = bsContext.get(FeatureKey.of(origin)).do(mapAfter_(\n            loader => {\n              if (loader) {\n                loader.to(stageId);\n                stageId = loader.stage;\n              }\n              return loader;\n            },\n        ));\n      }\n\n      // Create feature's own loader\n      const ownLoader = new FeatureLoader(bsContext, request, deps).to(stageId);\n      const ownSource = afterThe(ownLoader);\n\n      return source = afterEventBy<[FeatureLoader]>(\n          rcv => ownSource(rcv).whenOff(() => {\n            stageId = ownLoader.unload();\n          }),\n      ).do(shareAfter); // Can be accessed again when reused\n    }))(receiver);\n  }).do(\n      translateAfter(preventDuplicateLoader()),\n  );\n}\n\nfunction preventDuplicateLoader():\n    (\n        send: (loader?: FeatureLoader) => void,\n        loader?: FeatureLoader,\n    ) => void {\n\n  let lastLoader: FeatureLoader | null | undefined = null; // Initially `null` to differ from `undefined`\n\n  return (send, loader?: FeatureLoader): void => {\n    if (lastLoader !== loader) {\n      lastLoader = loader;\n\n      if (loader) {\n        send(loader);\n      } else {\n        send();\n      }\n    }\n  };\n}\n\nfunction loadFeatureDeps(\n    bsContext: BootstrapContext,\n    from: AfterEvent<[FeatureClause?]>,\n): AfterEvent<FeatureLoader[]> {\n  return from.do(digAfter_(clause => {\n    if (!clause) {\n      return afterThe();\n    }\n\n    const [{ def }] = clause;\n    const needs = setOfElements(def.needs);\n\n    if (!needs.size) {\n      return afterThe();\n    }\n\n    return afterEach(\n        ...[...needs].map(dep => bsContext.get(FeatureKey.of(dep))),\n    ).do(\n        translateAfter_(presentFeatureDeps),\n    );\n  }));\n}\n\nfunction presentFeatureDeps(send: (...loaders: FeatureLoader[]) => void, ...deps: [FeatureLoader?][]): void {\n  return send(...deps.map(([dep]) => dep).filter(isPresent));\n}\n\n/**\n * @internal\n */\nexport class FeatureLoader {\n\n  readonly down: Promise<void>;\n  private _stage: Promise<FeatureStage>;\n  private _down!: () => void;\n  readonly state = trackValue(false);\n\n  constructor(\n      readonly bsContext: BootstrapContext,\n      readonly request: FeatureRequest,\n      readonly deps: FeatureLoader[],\n  ) {\n    this.down = new Promise(resolve => this._down = resolve);\n    this._stage = Promise.resolve(new SetupFeatureStage(this));\n  }\n\n  get stage(): Promise<FeatureStageId> {\n    return this._stage.then(stage => stage.after);\n  }\n\n  get ready(): boolean {\n    return this.state.it;\n  }\n\n  to(stageId: Promise<FeatureStageId>): this {\n\n    const lastStage = this._stage;\n\n    this._stage = stageId.then(id => lastStage.then(stage => stage[id]()));\n\n    return this;\n  }\n\n  async setup(): Promise<void> {\n    await (this._stage = this._stage.then(stage => stage.setup()));\n  }\n\n  async init(): Promise<void> {\n    await (this._stage = this._stage.then(stage => stage.init()));\n  }\n\n  async unload(): Promise<FeatureStageId> {\n\n    const prevStage = this._stage;\n\n    // Unloaded feature should never be accessed again.\n    delete (this as unknown as { _stage?: Promise<FeatureStage> })._stage;\n\n    const stage = await prevStage;\n    const stageId = await stage.stop();\n\n    this._down();\n\n    return stageId;\n  }\n\n}\n\ntype FeatureStageId = 'idle' | 'setup' | 'init';\ntype FeatureStageStop = (this: void) => Promise<any>;\n\nabstract class FeatureStage {\n\n  abstract readonly after: FeatureStageId;\n\n  constructor(\n      readonly loader: FeatureLoader,\n      private readonly _stop: FeatureStageStop = () => Promise.resolve(),\n  ) {}\n\n  idle(): Promise<this> {\n    return Promise.resolve(this);\n  }\n\n  abstract setup(): Promise<FeatureStage>;\n\n  abstract init(): Promise<FeatureStage>;\n\n  stop(): Promise<FeatureStageId> {\n    return this._stop().then(() => this.after);\n  }\n\n  protected perDep(action: (dep: FeatureLoader) => Promise<void>): Promise<any> {\n\n    const { deps } = this.loader;\n\n    return Promise.all(deps.map(dep => action(dep)));\n  }\n\n}\n\nclass SetupFeatureStage extends FeatureStage {\n\n  get after(): 'idle' {\n    return 'idle';\n  }\n\n  async setup(): Promise<FeatureStage> {\n    await this.perDep(loader => loader.setup());\n\n    const { bsContext, request: { def } } = this.loader;\n    const context = new FeatureContext$(bsContext, this.loader);\n    const supply = context.supply;\n\n    def.setup?.(context);\n\n    return new InitFeatureStage(\n        this.loader,\n        context,\n        () => Promise.resolve(supply.off()),\n    );\n  }\n\n  init(): Promise<FeatureStage> {\n    return this.setup().then(stage => stage.init());\n  }\n\n}\n\nclass InitFeatureStage extends FeatureStage {\n\n  get after(): 'setup' {\n    return 'setup';\n  }\n\n  constructor(\n      state: FeatureLoader,\n      private readonly _context: FeatureContext,\n      stop: FeatureStageStop,\n  ) {\n    super(state, stop);\n  }\n\n  setup(): Promise<FeatureStage> {\n    return Promise.resolve(this);\n  }\n\n  async init(): Promise<FeatureStage> {\n    await this.perDep(loader => loader.init());\n\n    const { request: { def } } = this.loader;\n\n    def.init?.(this._context);\n\n    return new ActiveFeatureStage(this);\n  }\n\n}\n\nclass ActiveFeatureStage extends FeatureStage {\n\n  get after(): 'init' {\n    return 'init';\n  }\n\n  constructor(prev: InitFeatureStage) {\n    super(prev.loader, () => prev.stop());\n    prev.loader.state.it = true;\n  }\n\n  setup(): Promise<FeatureStage> {\n    return Promise.resolve(this);\n  }\n\n  init(): Promise<FeatureStage> {\n    return Promise.resolve(this);\n  }\n\n}\n","import { Class, setOfElements, Supply, SupplyPeer } from '@proc7ts/primitives';\nimport { ComponentDef, ComponentDef__symbol } from '../../component';\nimport { FeatureDef } from '../feature-def';\nimport { FeatureNeedsError } from '../feature-needs-error';\nimport { FeatureKey } from './feature-loader.impl';\nimport { FeatureRequester } from './feature-requester.impl';\n\n/**\n * @internal\n */\nexport type FeatureClause = [FeatureRequest, 'is' | 'needs' | 'has', Class];\n\n/**\n * @internal\n */\nexport type FeatureNeedClause = [FeatureRequest, 'needs' | 'has', Class];\n\n/**\n * @internal\n */\nexport class FeatureRequest implements SupplyPeer {\n\n  readonly def: FeatureDef.Options;\n  readonly supply = new Supply();\n  private _uses = 0;\n\n  constructor(\n      private readonly _requester: FeatureRequester,\n      readonly feature: Class,\n  ) {\n    this.def = featureDef(feature);\n  }\n\n  request(clauses: readonly FeatureNeedClause[]): this {\n\n    const requester = this._requester;\n    const { registry } = requester;\n    const isClause: FeatureClause = [this, 'is', this.feature];\n\n    registry.provide({\n      a: FeatureKey.of(this.feature),\n      is: isClause,\n    }).needs(this);\n\n    for (const feature of setOfElements(this.def.has)) {\n\n      const clause: FeatureNeedClause = [this, 'has', feature];\n\n      registry.provide({ a: FeatureKey.of(feature), is: clause }).needs(this);\n\n      // Request the provided feature _after_ provider\n      const request = requester.request(feature, [...clauses, clause]);\n\n      this.supply.whenOff(() => request.unuse());\n    }\n\n    for (const feature of setOfElements(this.def.needs)) {\n\n      const clause: FeatureNeedClause = [this, 'needs', feature];\n      const request = requester.request(feature, [...clauses, clause]);\n\n      this.supply.whenOff(() => request.unuse());\n      registry.provide({ a: FeatureKey.of(feature), is: clause }).needs(this);\n    }\n\n    this._uses = 1;\n\n    return this;\n  }\n\n  reuse(clauses: readonly FeatureNeedClause[]): this {\n    if (!this._uses) {\n      throw new FeatureNeedsError(clauses.map(\n          ([{ feature }, reason, need]) => [feature, reason, need],\n      ));\n    }\n\n    ++this._uses;\n\n    return this;\n  }\n\n  unuse(): void {\n    if (!--this._uses) {\n      this.supply.off();\n    }\n  }\n\n}\n\nfunction featureDef(featureType: Class): FeatureDef.Options {\n\n  let def = FeatureDef.of(featureType);\n\n  if (ComponentDef__symbol in featureType) {\n    def = FeatureDef.merge(\n        def,\n        {\n          init(context) {\n            context.define(featureType);\n          },\n        },\n    );\n\n    const { feature } = ComponentDef.of(featureType);\n\n    if (feature) {\n      def = FeatureDef.merge(def, feature);\n    }\n\n  }\n\n  return def;\n}\n\n","import { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { Class } from '@proc7ts/primitives';\nimport { BootstrapContext, bootstrapDefault } from '../../boot';\nimport { BootstrapContextRegistry } from '../../boot/impl';\nimport { FeatureNeedClause, FeatureRequest } from './feature-request.impl';\n\nconst FeatureRequester__key = (/*#__PURE__*/ new SingleContextKey<FeatureRequester>(\n    'feature-requester',\n    {\n      byDefault: bootstrapDefault(context => new FeatureRequester(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport class FeatureRequester {\n\n  static get [ContextKey__symbol](): ContextKey<FeatureRequester> {\n    return FeatureRequester__key;\n  }\n\n  readonly registry: BootstrapContextRegistry;\n  private readonly _map = new Map<Class, FeatureRequest>();\n\n  constructor(context: BootstrapContext) {\n    this.registry = context.get(BootstrapContextRegistry);\n  }\n\n  request(feature: Class, clauses: readonly FeatureNeedClause[] = []): FeatureRequest {\n\n    const existing = this._map.get(feature);\n\n    if (existing) {\n      return existing.reuse(clauses);\n    }\n\n    const request = new FeatureRequest(this, feature);\n\n    this._map.set(feature, request);\n    request.supply.whenOff(() => this._map.delete(feature));\n\n    return request.request(clauses);\n  }\n\n}\n","import { OnEvent, onPromise } from '@proc7ts/fun-events';\nimport { ComponentClass, CustomElements, DefinitionContext } from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { definitionContextOf } from './definition-context.symbol.impl';\n\n/**\n * @internal\n */\nexport const WhenDefined__symbol = (/*#__PURE__*/ Symbol('when-defined'));\n\ninterface WhenDefinedComponentClass<T extends object> extends ComponentClass<T> {\n  [WhenDefined__symbol]?: OnEvent<[DefinitionContext<T>]>;\n}\n\n/**\n * @internal\n */\nexport function whenDefined<T extends object>(\n    bsContext: BootstrapContext,\n    componentType: WhenDefinedComponentClass<T>,\n): OnEvent<[DefinitionContext<T>]> {\n  // eslint-disable-next-line no-prototype-builtins\n  if (componentType.hasOwnProperty(WhenDefined__symbol)) {\n    return componentType[WhenDefined__symbol] as OnEvent<[DefinitionContext<T>]>;\n  }\n\n  const result: OnEvent<[DefinitionContext<T>]> = onPromise(\n      Promise.resolve(bsContext.whenReady)\n          .then(() => bsContext.get(CustomElements).whenDefined(componentType))\n          .then(() => definitionContextOf(componentType)),\n  );\n\n  return componentType[WhenDefined__symbol] = result;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { newNamespaceAliaser } from '@frontmeans/namespace-aliaser';\nimport {\n  AfterEvent,\n  afterEventBy,\n  mapAfter,\n  onceOn,\n  OnEvent,\n  shareAfter,\n  supplyAfter,\n  trackValue,\n  valueOn,\n} from '@proc7ts/fun-events';\nimport { Class } from '@proc7ts/primitives';\nimport { ComponentClass, DefinitionContext } from '../../component/definition';\nimport { FeatureDef, FeatureRef, FeatureStatus } from '../../feature';\nimport { FeatureKey, FeatureLoader, FeatureRequester } from '../../feature/loader';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { DefaultNamespaceAliaser } from '../globals';\nimport { BootstrapContextRegistry } from '../impl';\nimport { whenDefined } from '../impl/when-defined.impl';\n\n/**\n * Bootstraps components.\n *\n * Both features and components can be passed as parameters to this function.\n *\n * @category Core\n * @param features - Features and components to enable.\n *\n * @returns Bootstrap context instance.\n */\nexport function bootstrapComponents(...features: Class[]): BootstrapContext {\n\n  const bootstrapContextRegistry = BootstrapContextRegistry.create();\n  const { bootstrapContext, complete } = initBootstrap(bootstrapContextRegistry);\n  const feature = features.length === 1 ? features[0] : bootstrapFeature(features);\n\n  bootstrapContext.get(FeatureRequester).request(feature);\n  bootstrapContext.get(FeatureKey.of(feature))(loader => {\n    loader!.init().then(complete).catch(console.error);\n  });\n\n  return bootstrapContext;\n}\n\n/**\n * @internal\n */\nfunction bootstrapFeature(needs: Class[]): Class {\n  return FeatureDef.define(class BootstrapFeature {}, { needs });\n}\n\n/**\n * @internal\n */\nconst enum BootstrapStage {\n  Init,\n  Ready,\n}\n\n/**\n * @internal\n */\nfunction initBootstrap(\n    bootstrapContextRegistry: BootstrapContextRegistry,\n): {\n  bootstrapContext: BootstrapContext;\n  complete(): void;\n} {\n\n  const stage = trackValue<BootstrapStage>(BootstrapStage.Init);\n  const values = bootstrapContextRegistry.values;\n\n  class BootstrapContext$ extends BootstrapContext {\n\n    readonly whenReady: OnEvent<[BootstrapContext]>;\n    readonly get = values.get;\n\n    constructor() {\n      super();\n      this.whenReady = stage.read.do(\n          valueOn(bsStage => !!bsStage && this),\n          onceOn,\n      );\n      bootstrapContextRegistry.provide({ a: DefaultNamespaceAliaser, by: newNamespaceAliaser });\n      bootstrapContextRegistry.provide({ a: BootstrapContext, is: this });\n    }\n\n    whenDefined<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionContext<T>]> {\n      return whenDefined(this, componentType);\n    }\n\n    load(feature: Class<any>): FeatureRef {\n\n      interface FeatureInfo {\n        status: FeatureStatus;\n        down?: Promise<void>;\n      }\n\n      const status = afterEventBy<[FeatureInfo]>(receiver => {\n\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const request = bootstrapContext.get(FeatureRequester).request(feature);\n        const info = trackValue<FeatureInfo>({\n          status: {\n            feature,\n            ready: false,\n          },\n        });\n\n        this.get(FeatureKey.of(feature))({\n          supply: receiver.supply,\n          receive(_ctx, ldr) {\n\n            // Present until `request` revoked\n            // But that happens only when supply is cut off.\n            const loader = ldr as FeatureLoader;\n\n            info.it = {\n              status: {\n                feature: loader.request.feature,\n                ready: loader.ready,\n              },\n              down: loader.down,\n            };\n            if (!loader.ready) {\n              loader.init().then(() => {\n                info.it = {\n                  status: {\n                    feature: loader.request.feature,\n                    ready: true,\n                  },\n                  down: loader.down,\n                };\n              }).catch(console.error);\n            }\n          },\n        }).whenOff(() => {\n          request.unuse(); // Apply this callback _after_ registration complete,\n                           // to prevent receiver call.\n        });\n\n        info.read(receiver);\n      }).do(shareAfter);\n\n      let whenDown: Promise<void>;\n      const supply = status(({ down }) => {\n        whenDown = down!;\n      });\n\n      class Ref extends FeatureRef {\n\n        readonly read: AfterEvent<[FeatureStatus]> = status.do(\n            supplyAfter(supply),\n            mapAfter(({ status }) => status),\n        );\n\n        get down(): Promise<void> {\n          return whenDown;\n        }\n\n        dismiss(reason?: any): Promise<void> {\n          supply.off(reason);\n          return whenDown;\n        }\n\n      }\n\n      return new Ref();\n    }\n\n  }\n\n  const bootstrapContext = new BootstrapContext$();\n\n  return {\n    bootstrapContext,\n    complete(): void {\n      stage.it = BootstrapStage.Ready;\n    },\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing element an attributes.\n *\n * Thus, an attribute state path is always something like `[AttributePath__root, 'attribute-name']`.\n *\n * @category Feature\n */\nexport const AttributePath__root = (/*#__PURE__*/ Symbol('attribute'));\n\n/**\n * A path to the named attribute state.\n *\n * @category Feature\n */\nexport type AttributePath = readonly [keyof AttributePath.RootKeys, string];\n\n/**\n * Constructs a named attribute state path.\n *\n * @category Feature\n * @param name - Target attribute name.\n *\n * @return Attribute state path.\n */\nexport function attributePathTo(name: string): AttributePath {\n  return [AttributePath__root, name];\n}\n\n/**\n * @category Feature\n */\nexport namespace AttributePath {\n  export interface RootKeys {\n    [AttributePath__root]: true;\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { StatePath } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { ComponentContext } from '../../component';\nimport { AttributeUpdateReceiver } from './attribute-def';\nimport { AttributeChangedCallback } from './attribute-descriptor';\nimport { attributePathTo } from './attribute-path';\n\n/**\n * @internal\n */\nexport function attributeStateUpdate<T extends object>(\n    name: string,\n    updateState: boolean | AttributeUpdateReceiver<T> | StatePath = true,\n): AttributeChangedCallback<T> {\n  if (updateState === false) {\n    return noop;\n  }\n  if (updateState === true || typeof updateState === 'function') {\n\n    const path = attributePathTo(name);\n    const update: AttributeUpdateReceiver<T> = updateState === true ? updateAttributeState : updateState;\n\n    return (component: T, newValue, oldValue) => update(component, path, newValue, oldValue);\n  }\n\n  return (component: T, newValue, oldValue) => updateAttributeState(\n      component,\n      updateState,\n      newValue,\n      oldValue,\n  );\n}\n\nfunction updateAttributeState<T extends object>(\n    component: T,\n    path: StatePath,\n    newValue: string | null,\n    oldValue: string | null,\n): void {\n  ComponentContext.of(component).updateState(path, newValue, oldValue);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Converts property name to _dash-style_ attribute name.\n *\n * - Any ASCII uppercase letter A to Z is transformed into a dash followed by its lowercase counterpart;\n * - other characters are left unchanged.\n *\n * @category Feature\n * @param name - Property name to convert.\n *\n * @returns  _dash-style_ attribute name.\n */\nexport function property2attributeName(name: string): string {\n\n  let result: string | undefined;\n\n  for (let i = 0; i < name.length; ++i) {\n\n    const c = name[i];\n\n    if (c <= 'Z' && c >= 'A') {\n      if (!result) {\n        // Allocate result on first conversion\n        result = name.substring(0, i);\n      }\n      result += '-' + c.toLowerCase();\n    } else if (result) {\n      result += c;\n    }\n  }\n\n  return result || name;\n}\n","import { AttributeDef } from './attribute-def';\nimport { AttributeChangedCallback, AttributeDescriptor } from './attribute-descriptor';\nimport { attributeStateUpdate } from './attribute-state-update.impl';\nimport { property2attributeName } from './property2attribute-name';\n\n/**\n * @internal\n */\nexport function parseAttributeDescriptor<T extends object>(\n    target: T,\n    propertyKey: string | symbol,\n    opts?: AttributeDef<T> | string,\n): AttributeDescriptor<T> {\n\n  let name: string;\n  let change: AttributeChangedCallback<T>;\n\n  if (typeof opts === 'string') {\n    name = property2attributeName(opts);\n    change = attributeStateUpdate(name);\n  } else {\n    if (opts && opts.name) {\n      name = property2attributeName(opts.name);\n    } else if (typeof propertyKey !== 'string') {\n      throw new TypeError(\n          'Attribute name is required as property key is not a string: '\n          + `${target.constructor.name}.prototype.${String(propertyKey)}`,\n      );\n    } else {\n      name = property2attributeName(propertyKey);\n    }\n\n    change = attributeStateUpdate(name, opts && opts.updateState);\n  }\n\n  return { name, change };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextRef, SingleContextKey } from '@proc7ts/context-values';\nimport { mergeFunctions } from '@proc7ts/primitives';\nimport { BootstrapWindow } from '../../boot/globals';\nimport { CustomElementClass } from '../../common';\nimport { ComponentContext, ComponentMount } from '../../component';\nimport { DefinitionContext } from '../../component/definition';\nimport { AttributeChangedCallback, AttributeDescriptor } from './attribute-descriptor';\n\n/**\n * A registry of component's element attributes.\n *\n * @category Feature\n */\nexport interface AttributeRegistry {\n\n  /**\n   * Declares component element's attribute.\n   *\n   * @param descriptor - Attribute descriptor.\n   */\n  declareAttribute(descriptor: AttributeDescriptor): void;\n\n}\n\n/**\n * A key of component definition context value containing {@link AttributeRegistry attribute registry}.\n *\n * @category Feature\n */\nexport const AttributeRegistry: ContextRef<AttributeRegistry> = (\n    /*#__PURE__*/ new SingleContextKey<AttributeRegistry>(\n        'attribute-registry',\n        {\n          byDefault(context) {\n            return new AttributeRegistry$(context.get(DefinitionContext));\n          },\n        },\n    )\n);\n\n/**\n * @internal\n */\nclass AttributeRegistry$ implements AttributeRegistry {\n\n  private readonly attrs = new Map<string, AttributeChangedCallback<any>>();\n\n  constructor(private readonly _context: DefinitionContext) {\n    _context.whenReady(({ elementType }) => this.define(elementType as CustomElementClass));\n    _context.whenComponent(({ mount }) => {\n      if (mount) {\n        // Mount element attributes\n        this.mount(mount);\n      }\n    });\n  }\n\n  declareAttribute({ name, change }: AttributeDescriptor): void {\n    this.attrs.set(name, mergeFunctions(this.attrs.get(name), change));\n  }\n\n  private define(elementType: CustomElementClass): void {\n\n    const { attrs } = this;\n\n    if (!attrs.size) {\n      return; // No attributes defined\n    }\n\n    Object.defineProperty(elementType, 'observedAttributes', {\n      configurable: true,\n      enumerable: true,\n      value: observedAttributes(elementType, [...attrs.keys()]),\n    });\n    Object.defineProperty(elementType.prototype, 'attributeChangedCallback', {\n      configurable: true,\n      enumerable: true,\n      value: attributeChangedCallback(elementType, attrs),\n    });\n  }\n\n  private mount(mount: ComponentMount): void {\n\n    const { element } = mount as { element: Element };\n    const { attrs } = this;\n    const attributeFilter = [...attrs.keys()];\n\n    if (!attributeFilter.length) {\n      return; // No attributes defined\n    }\n\n    const MutationObserver = this._context.get(BootstrapWindow).MutationObserver;\n    const observer = new MutationObserver(\n        records => records.forEach(\n            record => {\n\n              const attributeName = record.attributeName as string;\n\n              return attrs.get(attributeName)!(\n                  ComponentContext.of(element).component,\n                  element.getAttribute(attributeName),\n                  record.oldValue,\n              );\n            },\n        ),\n    );\n\n    observer.observe(element, {\n      attributes: true,\n      attributeFilter,\n      attributeOldValue: true,\n    });\n  }\n\n}\n\n/**\n * @internal\n */\ntype ElementAttributeChanged = (\n    this: any,\n    name: string,\n    oldValue: string | null,\n    newValue: string | null,\n) => void;\n\n/**\n * @internal\n */\nfunction observedAttributes(\n    elementType: CustomElementClass,\n    attrs: readonly string[],\n): readonly string[] {\n\n  const alreadyObserved = elementType.observedAttributes;\n\n  if (Array.isArray(alreadyObserved)) {\n\n    const newAttrs = new Set<string>(alreadyObserved);\n\n    attrs.forEach(attr => newAttrs.add(attr));\n\n    attrs = [...newAttrs];\n  }\n\n  return attrs;\n}\n\n/**\n * @internal\n */\nfunction attributeChangedCallback<T extends object>(\n    elementType: CustomElementClass,\n    attrs: Map<string, AttributeChangedCallback<T>>,\n): ElementAttributeChanged {\n\n  const prevCallback = elementType.prototype.attributeChangedCallback;\n\n  if (!prevCallback) {\n    return function (this: any, name, oldValue, newValue) {\n      attrs.get(name)!(ComponentContext.of<T>(this).component, newValue, oldValue);\n    };\n  }\n\n  return function (this: any, name, oldValue, newValue) {\n\n    const attrChanged = attrs.get(name);\n\n    if (attrChanged) {\n      attrChanged(ComponentContext.of<T>(this).component, newValue, oldValue);\n    } else {\n      prevCallback.call(this, name, oldValue, newValue);\n    }\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentContext, ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { AttributeDef } from './attribute-def';\nimport { parseAttributeDescriptor } from './attribute-descriptor.impl';\nimport { AttributeRegistry } from './attribute-registry';\n\n/**\n * Creates a decorator for component's property that accesses custom element's attribute.\n *\n * The decorated property accesses corresponding attribute on read, and updates it on setting. `null` value corresponds\n * to absent attribute. Setting to `null` removes corresponding attribute.\n *\n * @category Feature\n * @typeParam T - A type of decorated component class.\n * @param def - Attribute definition or just an attribute name (either _camelCase_ or _dash-style_).\n *\n * @return Component property decorator.\n */\nexport function Attribute<T extends ComponentClass>(\n    def?: AttributeDef<InstanceType<T>> | string,\n): ComponentPropertyDecorator<string | null, T> {\n  return ComponentProperty(({ type, key }) => {\n\n    const descriptor = parseAttributeDescriptor(type.prototype, key, def);\n    const { name } = descriptor;\n\n    return {\n      componentDef: {\n        define(defContext) {\n          defContext.get(AttributeRegistry).declareAttribute(descriptor);\n        },\n      },\n      get(component: InstanceType<T>): string | null {\n        return (ComponentContext.of(component).element as Element).getAttribute(name);\n      },\n      set(component: InstanceType<T>, newValue: string | null) {\n\n        const { element } = ComponentContext.of(component) as { element: Element };\n\n        if (newValue != null) {\n          element.setAttribute(name, newValue);\n        } else {\n          element.removeAttribute(name);\n        }\n      },\n    };\n  });\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { AttributeDef } from './attribute-def';\nimport { parseAttributeDescriptor } from './attribute-descriptor.impl';\nimport { AttributeRegistry } from './attribute-registry';\n\n/**\n * Creates a component method decorator for custom element attribute change callback.\n *\n * The decorated method should have up to two parameters:\n *\n * - the first one accepts new attribute value.\n * - the second one accepts old attribute value (or `null`),\n *\n * Example:\n * ```TypeScript\n * @Component('my-component')\n * class MyComponent {\n *\n *   @AttributeChanged('my-attribute')\n *   myAttributeChanged(newValue: string, oldValue: string | null) {\n *     console.log(`my-attribute value changed from ${oldValue} to ${newValue}`);\n *   }\n *\n * }\n * ```\n *\n * @category Feature\n * @typeParam T - A type of decorated component class.\n * @param def - Attribute definition or just an attribute name.\n *\n * @return Component method decorator.\n */\nexport function AttributeChanged<T extends ComponentClass>(\n    def?: AttributeDef<InstanceType<T>> | string,\n): ComponentPropertyDecorator<(newValue: string | null, oldValue: string | null) => void, T> {\n  return ComponentProperty(({ type, get, key }) => {\n\n    const { name, change } = parseAttributeDescriptor(type.prototype, key, def);\n\n    return {\n      componentDef: {\n        define(defContext) {\n          defContext.get(AttributeRegistry).declareAttribute({\n            name,\n            change(\n                component: InstanceType<T>,\n                newValue: string | null,\n                oldValue: string | null,\n            ) {\n\n              const callback = get(component);\n\n              callback.call(component, newValue, oldValue);\n              change(component, newValue, oldValue);\n            },\n          });\n        },\n      },\n    };\n  });\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { StatePath } from '@proc7ts/fun-events';\nimport { Class } from '@proc7ts/primitives';\nimport { Component, ComponentDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { AttributeUpdateReceiver } from './attribute-def';\nimport { AttributeRegistry } from './attribute-registry';\nimport { attributeStateUpdate } from './attribute-state-update.impl';\nimport { property2attributeName } from './property2attribute-name';\n\n/**\n * Creates a component decorator declaring supported custom element's attributes.\n *\n * @category Feature\n * @typeParam T - A type of decorated component class.\n * @param items - Attributes definition options.\n *\n * @return New component decorator.\n */\nexport function Attributes<T extends ComponentClass = Class>(\n    ...items: readonly Attributes.Item<InstanceType<T>>[]\n): ComponentDecorator<T> {\n  return Component({\n    define(defContext) {\n\n      const registry = defContext.get(AttributeRegistry);\n\n      for (const item of items) {\n        if (typeof item === 'string') {\n\n          const name = property2attributeName(item);\n\n          registry.declareAttribute({\n            name,\n            change: attributeStateUpdate(name),\n          });\n        } else {\n          for (const [key, updateState] of Object.entries(item)) {\n\n            const name = property2attributeName(key);\n\n            registry.declareAttribute({\n              name,\n              change: attributeStateUpdate(name, updateState),\n            });\n          }\n        }\n      }\n    },\n  });\n}\n\nexport namespace Attributes {\n\n  /**\n   * Attribute definition item.\n   *\n   * This is either an attribute name (_camelCase_ or _dash-style_), or a per-attribute options map.\n   *\n   * @typeParam T - A type of component.\n   */\n  export type Item<T extends object> = Map<T> | string;\n\n  /**\n   * Per-attribute definition options.\n   *\n   * This is a map with attribute names as keys (either _camelCase_ or _dash-style_), and their state update\n   * instructions as values.\n   *\n   * The state update instruction can be one of:\n   * - `false` to not update the component state,\n   * - `true` to update the component state with changed attribute key,\n   * - a state value key to update, or\n   * - an attribute update receiver function with custom state update logic.\n   *\n   * @typeParam T - A type of component.\n   */\n  export interface Map<T extends object> {\n    readonly [name: string]: boolean | StatePath | AttributeUpdateReceiver<T>;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValueSlot, SimpleContextKey } from '@proc7ts/context-values';\nimport { StateTracker } from '@proc7ts/fun-events';\nimport { ComponentContext, StateUpdater } from '../../component';\n\nclass ComponentStateKey extends SimpleContextKey<ComponentState> {\n\n  constructor() {\n    super('component-state');\n  }\n\n  grow(\n      slot: ContextValueSlot<ComponentState, ComponentState, SimpleContextKey.Seed<ComponentState>>,\n  ): void {\n\n    const provided = slot.seed();\n    let state: ComponentState;\n\n    if (provided != null) {\n      state = provided;\n      slot.insert(state);\n    } else if (slot.hasFallback) {\n      return;\n    } else {\n      state = new ComponentState();\n      slot.context.get(ComponentContext).supply.whenOff(reason => state.done(reason));\n      slot.insert(state);\n    }\n\n    slot.setup(({ registry }) => {\n      registry.provide({ a: StateUpdater, is: state.update });\n    });\n  }\n\n}\n\n/**\n * @internal\n */\nconst ComponentState__key = (/*#__PURE__*/ new ComponentStateKey());\n\n/**\n * Component state tracker.\n *\n * @category Feature\n */\nexport class ComponentState extends StateTracker {\n\n  static get [ContextKey__symbol](): ContextKey<ComponentState> {\n    return ComponentState__key;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing component state properties.\n *\n * Thus a property state path is always something like `[StatePropertyPath__root, 'property-name']`.\n *\n * @category Feature\n */\nexport const StatePropertyPath__root = (/*#__PURE__*/ Symbol('state-property'));\n\n/**\n * A path to the named component property state.\n *\n * @category Feature\n * @typeParam TKey - Target property key type.\n */\nexport type StatePropertyPath<TKey extends PropertyKey = PropertyKey> = readonly [\n  keyof StatePropertyPath.RootKeys,\n  TKey,\n];\n\n/**\n * Constructs a named component property state path.\n *\n * @category Feature\n * @typeParam TKey - Target property key type.\n * @param key - Target property key.\n *\n * @return DOM property state path.\n */\nexport function statePropertyPathTo<TKey extends PropertyKey = PropertyKey>(key: TKey): StatePropertyPath<TKey> {\n  return [StatePropertyPath__root, key];\n}\n\n/**\n * @category Feature\n */\nexport namespace StatePropertyPath {\n  export interface RootKeys {\n    [StatePropertyPath__root]: true;\n  }\n}\n","import { StatePath } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\nimport { StatePropertyPath, statePropertyPathTo } from './state-property-path';\nimport { StatePropertyUpdateReceiver } from './state-property.decorator';\n\n/**\n * @internal\n */\nexport type StatePropertyUpdateCallback<T extends object> = <TKey extends keyof T>(\n    this: void,\n    component: T,\n    newValue: T[TKey],\n    oldValue: T[TKey],\n) => void;\n\n/**\n * @internal\n */\nexport function statePropertyUpdate<T extends object>(\n    propertyKey: PropertyKey,\n    updateState: true | StatePropertyUpdateReceiver<T> | StatePath = true,\n): StatePropertyUpdateCallback<T> {\n  if (updateState === true || typeof updateState === 'function') {\n\n    const path = statePropertyPathTo(propertyKey as keyof T);\n    const update = updateState === true ? updateStatePropertyState : updateState;\n\n    return (component, newValue, oldValue) => update(component, path, newValue, oldValue);\n  }\n\n  return (component, newValue, oldValue) => {\n    if (newValue !== oldValue) {\n      ComponentContext.of(component).updateState(updateState, newValue, oldValue);\n    }\n  };\n}\n\nfunction updateStatePropertyState<T extends object, TKey extends keyof T>(\n    component: T,\n    path: StatePropertyPath<TKey>,\n    newValue: T[TKey],\n    oldValue: T[TKey],\n): void {\n  if (newValue !== oldValue) {\n    ComponentContext.of(component).updateState(path, newValue, oldValue);\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { StatePath } from '@proc7ts/fun-events';\nimport { Class } from '@proc7ts/primitives';\nimport { ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { StatePropertyPath } from './state-property-path';\nimport { statePropertyUpdate } from './state-property-update.impl';\n\n/**\n * Creates a decorator of component property containing part of component state.\n *\n * Once such property updated, the component state is {@link ComponentContext.updateState also updated}.\n *\n * @category Feature\n * @typeParam T - A type of decorated component class.\n * @param def - Custom element property definition.\n *\n * @returns Component property decorator.\n */\nexport function StateProperty<TValue = any, T extends ComponentClass = Class>(\n    { updateState }: StatePropertyDef = {},\n): ComponentPropertyDecorator<TValue, T> {\n  return ComponentProperty(({ get, set, key }) => {\n    if (updateState !== false) {\n\n      const setValue = set;\n      const update = statePropertyUpdate<InstanceType<T>>(key, updateState);\n\n      set = (component, newValue) => {\n\n        const oldValue = get(component);\n\n        setValue(component, newValue);\n        update(component, newValue, oldValue);\n      };\n    }\n\n    return {\n      get,\n      set,\n    };\n  });\n}\n\n/**\n * Component state property definition.\n *\n * This is a parameter to {@link StateProperty @StateProperty} decorator applied to component property.\n *\n * @category Feature\n */\nexport interface StatePropertyDef<T extends object = any> {\n\n  /**\n   * Whether to update the component state after this property changed.\n   *\n   * Can be one of:\n   * - `false` to not update the component state,\n   * - `true` (the default value) to update the component state with changed property key,\n   * - a state value key to update, or\n   * - an state property update receiver function with custom state update logic.\n   *\n   * By default does not update component state if property value didn't change.\n   */\n  readonly updateState?: boolean | StatePath | StatePropertyUpdateReceiver<T>;\n\n}\n\n/**\n * Component state property updates receiver invoked when its value changed.\n *\n * @category Feature\n * @typeParam T - A type of component.\n */\nexport type StatePropertyUpdateReceiver<T extends object> =\n/**\n * @typeParam TKey - A type of component property keys.\n * @param component - Component instance.\n * @param path - The changed property state path in the form of `[StatePropertyPath__root, propertyKey]`.\n * @param newValue - New property value.\n * @param oldValue - Previous property value.\n */\n    <TKey extends keyof T>(\n        this: void,\n        component: T,\n        path: StatePropertyPath<TKey>,\n        newValue: T[TKey],\n        oldValue: T[TKey],\n    ) => void;\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { OnEvent, StatePath, supplyOn, translateOn, ValueTracker } from '@proc7ts/fun-events';\nimport { Supply } from '@proc7ts/primitives';\nimport { ComponentContext } from '../../component';\nimport { ComponentState } from '../state';\nimport { attributePathTo } from './attribute-path';\n\nclass AttributeTracker extends ValueTracker<string | null> {\n\n  readonly on: OnEvent<[string | null, string | null]>;\n  readonly supply = new Supply();\n\n  constructor(\n      private readonly _context: ComponentContext,\n      private readonly _name: string,\n      path: StatePath,\n  ) {\n    super();\n    this.on = this._context.get(ComponentState).track(path).onUpdate.do(\n        translateOn((send, _path, newValue, oldValue) => send(newValue, oldValue)),\n        supplyOn(this),\n    );\n  }\n\n  get it(): string | null {\n    return (this._context.element as Element).getAttribute(this._name);\n  }\n\n  set it(value: string | null) {\n    if (!this.supply.isOff) {\n      if (value == null) {\n        (this._context.element as Element).removeAttribute(this._name);\n      } else {\n        (this._context.element as Element).setAttribute(this._name, value);\n      }\n    }\n  }\n\n}\n\n/**\n * Creates a tracker of custom element's attribute value.\n *\n * Requires attribute to be defined. E.g. with {@link Attribute @Attribute}, {@link AttributeChanged @AttributeChanged},\n * or {@link Attributes @Attributes} decorator.\n *\n * @category Feature\n * @param context - Target component context.\n * @param name - Attribute name.\n * @param path - Custom attribute state path.\n *\n * @returns New attribute value tracker.\n */\nexport function trackAttribute(\n    context: ComponentContext,\n    name: string,\n    path: StatePath = attributePathTo(name),\n): ValueTracker<string | null> {\n  return new AttributeTracker(context, name, path);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextRef, SingleContextKey } from '@proc7ts/context-values';\nimport { Class } from '@proc7ts/primitives';\nimport { ComponentMount } from '../../component';\nimport { DefinitionContext } from '../../component/definition';\nimport { DomPropertyDescriptor } from './dom-property-descriptor';\n\n/**\n * A registry of component's element properties.\n *\n * @category Feature\n */\nexport interface DomPropertyRegistry {\n\n  /**\n   * Declares component element's property.\n   *\n   * @param descriptor - Property descriptor.\n   */\n  declareDomProperty(descriptor: DomPropertyDescriptor): void;\n\n}\n\n/**\n * A key of component definition context value containing {@link DomPropertyRegistry DOM property registry}.\n *\n * @category Feature\n */\nexport const DomPropertyRegistry: ContextRef<DomPropertyRegistry> = (\n    /*#__PURE__*/ new SingleContextKey<DomPropertyRegistry>(\n        'dom-property-registry',\n        {\n          byDefault(context) {\n            return new DomPropertyRegistry$(context.get(DefinitionContext));\n          },\n        },\n    )\n);\n\n/**\n * @internal\n */\nclass DomPropertyRegistry$ implements DomPropertyRegistry {\n\n  private readonly props = new Map<PropertyKey, PropertyDescriptor>();\n\n  constructor(defContext: DefinitionContext) {\n    defContext.whenReady(\n        ({ elementType }) => this.define(elementType),\n    );\n    defContext.whenComponent(({ mount }) => {\n      if (mount) {\n        // Mount element properties\n        this.mount(mount);\n      }\n    });\n  }\n\n  declareDomProperty({ key, descriptor }: DomPropertyDescriptor): void {\n    this.props.set(key, descriptor);\n  }\n\n  private define<T extends object>(elementType: Class<T>): void {\n\n    const prototype = elementType.prototype;\n\n    this.props.forEach((desc, key) => {\n      Object.defineProperty(prototype, key, desc);\n    });\n  }\n\n  private mount<T extends object>({ element }: ComponentMount<T>): void {\n    this.props.forEach((desc, key) => {\n      Object.defineProperty(element, key, desc);\n    });\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing DOM properties.\n *\n * Thus a property state path is always something like `[DomPropertyPath__root, 'property-name']`.\n *\n * @category Feature\n */\nexport const DomPropertyPath__root = (/*#__PURE__*/ Symbol('dom-property'));\n\n/**\n * A path to the named DOM property state.\n *\n * @category Feature\n * @typeParam TKey - Property key type.\n */\nexport type DomPropertyPath<TKey extends PropertyKey = PropertyKey> = readonly [keyof DomPropertyPath.RootKeys, TKey];\n\n/**\n * Constructs a named DOM property state path.\n *\n * @category Feature\n * @typeParam TKey - Property key type.\n * @param key - Target property key.\n *\n * @return DOM property state path.\n */\nexport function domPropertyPathTo<TKey extends PropertyKey = PropertyKey>(key: TKey): DomPropertyPath<TKey> {\n  return [DomPropertyPath__root, key];\n}\n\n/**\n * @category Feature\n */\nexport namespace DomPropertyPath {\n  export interface RootKeys {\n    [DomPropertyPath__root]: true;\n  }\n}\n","import { StatePath } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\nimport { DomPropertyUpdateReceiver } from './dom-property-def';\nimport { DomPropertyPath, domPropertyPathTo } from './dom-property-path';\n\n/**\n * @internal\n */\nexport type DomPropertyUpdateCallback<T extends object> = <TKey extends keyof T>(\n    this: void,\n    component: T,\n    newValue: T[TKey],\n    oldValue: T[TKey],\n) => void;\n\n/**\n * @internal\n */\nexport function domPropertyUpdate<T extends object>(\n    propertyKey: PropertyKey,\n    updateState: true | DomPropertyUpdateReceiver<T> | StatePath = true,\n): DomPropertyUpdateCallback<T> {\n  if (updateState === true || typeof updateState === 'function') {\n\n    const path = domPropertyPathTo(propertyKey as keyof T);\n    const update = updateState === true ? updateDomPropertyState : updateState;\n\n    return (component, newValue, oldValue) => update(component, path, newValue, oldValue);\n  }\n  return (component, newValue, oldValue) => {\n    if (newValue !== oldValue) {\n      ComponentContext.of(component).updateState(updateState, newValue, oldValue);\n    }\n  };\n}\n\nfunction updateDomPropertyState<T extends object, TKey extends keyof T>(\n    component: T,\n    path: DomPropertyPath<TKey>,\n    newValue: T[TKey],\n    oldValue: T[TKey],\n): void {\n  if (newValue !== oldValue) {\n    ComponentContext.of(component).updateState(path, newValue, oldValue);\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '@proc7ts/primitives';\nimport { ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { DomPropertyDef } from './dom-property-def';\nimport { domPropertyDescriptor } from './dom-property-descriptor.impl';\nimport { DomPropertyRegistry } from './dom-property-registry';\nimport { domPropertyUpdate } from './dom-property-update.impl';\n\n/**\n * Creates component property decorator that declares a property to add to custom element created for this component.\n *\n * The value of declared element's property will be read from and written to decorated one.\n *\n * By default does not update component state if property value didn't change.\n *\n * @category Feature\n * @typeParam T - A type of decorated component class.\n * @param def - Custom element property definition.\n *\n * @returns Component property decorator.\n */\nexport function DomProperty<TValue = any, T extends ComponentClass = Class>(\n    def: DomPropertyDef<T> = {},\n): ComponentPropertyDecorator<TValue, T> {\n  return ComponentProperty(descriptor => {\n\n    const { key, get } = descriptor;\n    let { set } = descriptor;\n    const domDescriptor = domPropertyDescriptor(descriptor, def);\n\n    if (def.updateState !== false) {\n\n      const updateState = domPropertyUpdate<InstanceType<T>>(key, def.updateState);\n      const setValue = set;\n\n      set = (component, newValue) => {\n\n        const oldValue = get(component);\n\n        setValue(component, newValue);\n        updateState(component, newValue, oldValue);\n      };\n    }\n\n    return {\n      componentDef: {\n        define(defContext) {\n          defContext.get(DomPropertyRegistry).declareDomProperty(domDescriptor);\n        },\n      },\n      get,\n      set,\n    };\n  });\n}\n\n/**\n * Component method decorator that declares a method to add to custom element created for this component.\n *\n * This is just an alias of {@link DomProperty @DomProperty} decorator.\n *\n * @category Feature\n */\nexport { DomProperty as DomMethod };\n","import { PropertyAccessorDescriptor } from '@proc7ts/primitives';\nimport { ComponentContext, ComponentContextHolder, ComponentProperty } from '../../component';\nimport { DomPropertyDef } from './dom-property-def';\nimport { DomPropertyDescriptor } from './dom-property-descriptor';\n\n/**\n * @internal\n */\nexport function domPropertyDescriptor<TValue>(\n    propertyDesc: ComponentProperty.Descriptor<TValue>,\n    {\n      propertyKey: key = propertyDesc.key,\n      configurable = propertyDesc.configurable,\n      enumerable = propertyDesc.enumerable,\n      writable = propertyDesc.writable,\n    }: DomPropertyDef,\n): DomPropertyDescriptor {\n\n  type ComponentType = { [TKey in ComponentProperty.Descriptor<TValue>['key']]: TValue };\n\n  const componentPropertyKey = propertyDesc.key as string;\n  const descriptor: PropertyAccessorDescriptor<TValue> = {\n    configurable,\n    enumerable,\n    get: function (this: ComponentContextHolder): TValue {\n      return ComponentContext.of<ComponentType>(this).component[componentPropertyKey];\n    },\n    set: writable\n        ? function (this: ComponentContextHolder, value: TValue) {\n          ComponentContext.of<ComponentType>(this).component[componentPropertyKey] = value;\n        }\n        : undefined,\n  };\n\n  return { key, descriptor };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport {\n  EventSender,\n  isEventSender,\n  OnEvent,\n  onSupplied,\n  StatePath,\n  supplyOn,\n  translateOn_,\n} from '@proc7ts/fun-events';\nimport { valueByRecipe } from '@proc7ts/primitives';\nimport { ComponentContext } from '../../component';\nimport { ComponentState } from '../state';\n\n/**\n * Element rendering definition.\n *\n * This is either a {@link RenderDef.Spec rendering specifier}, or its {@link RenderDef.Provider provider function}.\n *\n * @category Feature\n */\nexport type RenderDef =\n    | RenderDef.Spec\n    | RenderDef.Provider;\n\nexport namespace RenderDef {\n\n  /**\n   * Rendering options.\n   */\n  export interface Options {\n\n    /**\n     * When to start the rendering.\n     *\n     * One of:\n     * - `settled` (the default) - start rendering when component is {@link ComponentContext.settled settled}.\n     * - `connected` - start rendering when component's element is {@link ComponentContext.connected connected}\n     *   to document.\n     */\n    readonly when?: 'settled' | 'connected';\n\n    /**\n     * Reports rendering error. E.g. a render shot execution failure.\n     *\n     * @param messages - Error messages to report.\n     */\n    error?(...messages: any[]): void;\n\n  }\n\n  /**\n   * Rendering specifier.\n   */\n  export interface Spec extends Options {\n\n    /**\n     * A trigger that issues rendering.\n     *\n     * This can be useful e.g. when component has multiple independent sub-views.\n     *\n     * This can be one of the following:\n     * - A path to component state part the renderer should track. The rendering would trigger only when the target\n     *   state part is updated.\n     * - Arbitrary event sender. The rendering would be triggered on any event from this sender.\n     *\n     * A root state path is tracked when omitted.\n     *\n     * When trigger is a root path (the default value), then the rendering will be triggered by any state update.\n     * Except for updates of sub-states inside {@link RenderPath__root}.\n     */\n    readonly on?: StatePath | EventSender<[]>;\n\n  }\n\n  /**\n   * Rendering specifier provider signature.\n   */\n  export type Provider =\n  /**\n   * @param context - A context of component to render.\n   *\n   * @returns Rendering specifier.\n   */\n      (\n          this: void,\n          context: ComponentContext,\n      ) => RenderDef.Spec;\n\n}\n\n/**\n * A root path to sub-states updates to which will be ignored by default.\n *\n * This can be used to create sub-states that won't trigger rendering occasionally, but only when requested explicitly.\n *\n * @category Feature\n */\nexport const RenderPath__root = (/*#__PURE__*/ Symbol('render'));\n\n/**\n * @category Feature\n */\nexport const RenderDef = {\n\n  /**\n   * Builds a rendering specifier for component by its definition.\n   *\n   * @param context - A context of component to render.\n   * @param def - Arbitrary rendering definition.\n   *\n   * @returns Rendering specifier.\n   */\n  spec(\n      this: void,\n      context: ComponentContext,\n      def: RenderDef,\n  ): RenderDef.Spec {\n    return valueByRecipe(def, context);\n  },\n\n  /**\n   * Fulfills rendering specifier with the given defaults.\n   *\n   * @param base - Base rendering specifier to fulfill.\n   * @param defaults - Defaults that will be applied unless defined in `base` specifier.\n   *\n   * @return `base` rendering specifier fulfilled by `defaults`.\n   */\n  fulfill(this: void, base: RenderDef.Spec, defaults: RenderDef.Spec = {}): RenderDef.Spec {\n\n    const { on = defaults.on, error } = base;\n\n    return {\n      on,\n      error: error ? error.bind(base) : defaults.error && defaults.error.bind(defaults),\n    };\n  },\n\n  /**\n   * Builds a trigger issuing rendering updates.\n   *\n   * @param context - Rendered component context.\n   * @param spec - Rendering specifier.\n   *\n   * @returns `OnEvent` sender that sends an event each time the rendering required.\n   */\n  trigger(\n      this: void,\n      context: ComponentContext,\n      spec: RenderDef.Spec = {},\n  ): OnEvent<[]> {\n\n    const { on = [] } = spec;\n\n    if ((typeof on === 'object' || typeof on === 'function') && isEventSender(on)) {\n      return onSupplied(on).do(supplyOn(context));\n    }\n\n    const trigger = context\n        .get(ComponentState)\n        .track(on)\n        .onUpdate.do(\n            supplyOn(context),\n        );\n\n    if (Array.isArray(on) && !on.length) {\n      return trigger.do(translateOn_(\n          (send, path: StatePath.Normalized) => path[0] !== RenderPath__root && send(),\n      ));\n    }\n\n    return trigger;\n  },\n\n};\n","import { immediateRenderScheduler, RenderExecution } from '@frontmeans/render-scheduler';\nimport { noop, Supply } from '@proc7ts/primitives';\nimport { DefaultRenderScheduler } from '../../boot/globals';\nimport { ComponentContext } from '../../component';\nimport { ElementRenderCtl } from './element-render-ctl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * @internal\n */\nconst enum RenderStatus {\n  Cancelled = -1,\n  Complete = 0,\n  Pending = 1,\n  Scheduled = 2,\n}\n\n/**\n * @internal\n */\nexport class ElementRenderCtl$ implements ElementRenderCtl {\n\n  private readonly _renders = new Set<() => void>();\n\n  constructor(private readonly _context: ComponentContext) {\n  }\n\n  renderBy(\n      renderer: ElementRenderer,\n      def: RenderDef = {},\n  ): Supply {\n\n    const spec = RenderDef.spec(this._context, def);\n    const trigger = RenderDef.trigger(this._context, spec);\n    const schedule = this._context.get(DefaultRenderScheduler)({\n      ...RenderDef.fulfill(spec),\n      node: this._context.element as Element,\n    });\n    const whenConnected = spec.when === 'connected';\n    let status = RenderStatus.Pending;\n    const startRendering = (): 0 | void => status /* there is an update to render */ && scheduleRenderer();\n    const onUpdate = whenConnected\n        ? () => this._context.connected && scheduleRenderer()\n        : () => this._context.settled && scheduleRenderer();\n    const supply = trigger(onUpdate)\n        .needs(this._context)\n        .whenOff(cancelRenderer);\n\n    (whenConnected ? this._context.whenConnected : this._context.whenSettled)(startRendering);\n\n    const immediateSchedule = immediateRenderScheduler();\n\n    this._renders.add(renderNow);\n\n    return supply.whenOff(() => this._renders.delete(renderNow));\n\n    function scheduleRenderer(): void {\n      status = RenderStatus.Scheduled;\n      schedule(renderElement);\n    }\n\n    function renderNow(): void {\n      immediateSchedule(renderElement);\n    }\n\n    function cancelRenderer(): void {\n      if (status === RenderStatus.Scheduled) { // Scheduled, but not rendered yet\n        schedule(noop);\n      }\n      status = RenderStatus.Cancelled;\n    }\n\n    function renderElement(execution: RenderExecution): void {\n      if (status > RenderStatus.Complete) { // Prevent excessive rendering\n        status = RenderStatus.Complete;\n        for (; ;) {\n\n          const newRenderer = renderer(execution);\n\n          if (newRenderer === renderer || typeof newRenderer !== 'function') {\n            break;\n          }\n\n          renderer = newRenderer;\n        }\n      }\n    }\n  }\n\n  renderNow(): void {\n    this._renders.forEach(render => render());\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextRef, SingleContextKey } from '@proc7ts/context-values';\nimport { Supply } from '@proc7ts/primitives';\nimport { ComponentContext } from '../../component';\nimport { ElementRenderCtl$ } from './element-render-ctl.impl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * A render control of component's element.\n *\n * Controls rendering by {@link ElementRenderer element renderers}.\n *\n * Available in component context.\n *\n * @category Feature\n */\nexport interface ElementRenderCtl {\n\n  /**\n   * Enables component element rendering by the given `renderer`.\n   *\n   * A `renderer` call will be scheduled by {@link DefaultRenderScheduler} once component state updated.\n   *\n   * @param renderer - Element renderer function.\n   * @param def - Optional element rendering definition.\n   *\n   * @returns Render shots supply. Element `renderer` will stop rendering once this supply is cut off.\n   */\n  renderBy(\n      renderer: ElementRenderer,\n      def?: RenderDef,\n  ): Supply;\n\n  /**\n   * Executes scheduled element render shots immediately.\n   *\n   * Uses `immediateRenderScheduler` for that.\n   *\n   * Does not execute element renderers that are not scheduled. I.e. if no corresponding state updates happened.\n   */\n  renderNow(): void;\n\n}\n\n/**\n * A key of component context value containing {@link ElementRenderCtl element render control}.\n *\n * @category Feature\n */\nexport const ElementRenderCtl: ContextRef<ElementRenderCtl> = (\n    /*#__PURE__*/ new SingleContextKey<ElementRenderCtl>(\n        'element-render-ctl',\n        {\n          byDefault(values) {\n            return new ElementRenderCtl$(values.get(ComponentContext));\n          },\n        },\n    )\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { RenderSchedule, RenderScheduleOptions, RenderShot } from '@frontmeans/render-scheduler';\nimport { ContextRef, ContextValues, SingleContextKey } from '@proc7ts/context-values';\nimport { trackValue } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { ElementRenderCtl } from './element-render-ctl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * A signature of element render scheduler.\n *\n * Schedules render shots to be executed by {@link ElementRenderCtl element render control}.\n *\n * Available in component context.\n *\n * @category Feature\n */\nexport type ElementRenderScheduler =\n/**\n * @param options - Options of constructed element render schedule.\n *\n * @returns New render schedule.\n */\n    (this: void, options?: ElementRenderScheduleOptions) => RenderSchedule;\n\n/**\n * Options for render schedule.\n *\n * This is passed to {@link ElementRenderScheduler element render scheduler} when constructing new render schedule.\n *\n * Generic `RenderSchedule` options are ignored.\n *\n * @category Feature\n */\nexport interface ElementRenderScheduleOptions extends RenderScheduleOptions, RenderDef.Options {\n\n  /**\n   * When to start the rendering.\n   *\n   * One of:\n   * - `settled` - start rendering when component is {@link ComponentContext.settled settled}.\n   * - `connected` (the default) - start rendering when component's element is {@link ComponentContext.connected\n   *   connected} to document.\n   */\n  readonly when?: 'settled' | 'connected';\n\n  /**\n   * Reports rendering error. E.g. a render shot execution failure.\n   *\n   * @param messages - Error messages to report.\n   */\n  error?(...messages: any[]): void;\n\n}\n\n/**\n * @internal\n */\nfunction newElementRenderScheduler(context: ContextValues): ElementRenderScheduler {\n\n  const renderCtl = context.get(ElementRenderCtl);\n\n  return (opts = {}): RenderSchedule => {\n\n    const recentShot = trackValue<RenderShot>(noop);\n    const renderer: ElementRenderer = execution => {\n      recentShot.it(execution);\n    };\n\n    renderCtl.renderBy(renderer, RenderDef.fulfill({ on: recentShot.on }, opts));\n\n    return (shot: RenderShot): void => {\n      recentShot.it = execution => shot(execution); // Ensure render shot always updated\n    };\n  };\n}\n\n/**\n * A key of component context value containing {@link ElementRenderScheduler element render scheduler}.\n *\n * @category Feature\n */\nexport const ElementRenderScheduler: ContextRef<ElementRenderScheduler> = (\n    /*#__PURE__*/ new SingleContextKey<ElementRenderScheduler>(\n        'element-render-scheduler',\n        {\n          byDefault: newElementRenderScheduler,\n        },\n    )\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { RenderExecution } from '@frontmeans/render-scheduler';\nimport { ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { ElementRenderCtl } from './element-render-ctl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * Component property decorator that declares a rendering method for the component.\n *\n * The decorated method call will be scheduled by {@link DefaultRenderScheduler} once component state updated.\n *\n * The decorated method should have no arguments. It may return either nothing, or a function. In the latter case the\n * returned function will be called immediately to render the element. It may, in turn, return a renderer function,\n * and so on.\n *\n * Enables rendering with {@link ElementRenderCtl.renderBy element render control}.\n *\n * @category Feature\n * @typeParam T - A type of decorated component class.\n * @param def - Non-mandatory render definition.\n *\n * @returns Component method decorator.\n */\nexport function Render<T extends ComponentClass>(\n    def?: RenderDef,\n): ComponentPropertyDecorator<(execution: RenderExecution) => ElementRenderer | void, T> {\n  return ComponentProperty(({ get }) => ({\n    componentDef: {\n      define(defContext) {\n        defContext.whenComponent(context => {\n          context.whenReady(() => {\n\n            const { component } = context;\n            const renderer = get(component).bind(component);\n\n            context.get(ElementRenderCtl).renderBy(renderer, def);\n          });\n        });\n      },\n    },\n  }));\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\n\n/**\n * Component shadow content root.\n *\n * @category Feature\n */\nexport type ShadowContentRoot = ShadowRoot;\n\n/**\n * A key of component context value containing a shadow content root instance.\n *\n * This is only available when the component is decorated with {@link AttachShadow @AttachShadow} decorator.\n *\n * @category Feature\n */\nexport const ShadowContentRoot: SingleContextRef<ShadowContentRoot> = (\n    /*#__PURE__*/ new SingleContextKey<ShadowContentRoot>('shadow-content-root')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * An event related to element's shadow DOM.\n *\n * The following event types supported:\n * - `wesib:shadowAttached` is dispatched when a shadow root is attached to element.\n *   In particular, it is dispatched for components decorated with {@link AttachShadow @AttachShadow}.\n *   The event is dispatched when component is connected for the first time. I.e. when element is added to the document.\n *   This event bubbles and is not cancelable.\n *\n * @category Feature\n */\nexport class ShadowDomEvent extends Event {\n\n  /**\n   * Shadow root this event relates to.\n   */\n  get shadowRoot(): ShadowRoot {\n    return (this.target as Element).shadowRoot as ShadowRoot;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { FnContextKey, FnContextRef } from '@proc7ts/context-values/updatable';\nimport { ComponentContext, ComponentContext__symbol, ComponentContextHolder } from '../../component';\nimport { ShadowContentDef } from './attach-shadow.decorator';\nimport { ShadowDomEvent } from './shadow-dom-event';\n\n/**\n * Shadow root builder function type.\n *\n * An instance of this function is available in component context and is used by {@link AttachShadow @AttachShadow}\n * decorator to attach shadow root to decorated component's custom element.\n *\n * By default, if shadow root already exists for the component's element, it uses one.\n *\n * Dispatches a `wesib:shadowAttached` event for the found or attached shadow root.\n *\n * @category Feature\n */\nexport type ShadowRootBuilder =\n/**\n * @param context - Target component context.\n * @param init - Shadow root initialization options.\n *\n * @returns A shadow root instance for target component, or `null`/`undefined` if one can not be attached.\n */\n    (context: ComponentContext, init: ShadowContentDef) => ShadowRoot | null | undefined;\n\n/**\n * A key of component context value containing a shadow root builder instance.\n *\n * @category Feature\n */\nexport const ShadowRootBuilder: FnContextRef<Parameters<ShadowRootBuilder>, ReturnType<ShadowRootBuilder>> = (\n    /*#__PURE__*/ new FnContextKey<Parameters<ShadowRootBuilder>, ReturnType<ShadowRootBuilder>>(\n        'shadow-root-builder',\n        {\n          byDefault() {\n            return attachShadow;\n          },\n        },\n    )\n);\n\n/**\n * @internal\n */\nfunction attachShadow(context: ComponentContext, init: ShadowRootInit): ShadowRoot | undefined {\n\n  const element = context.element as Element;\n  const shadowRoot = shadowRootOf(element, init);\n\n  if (shadowRoot) {\n    (shadowRoot as ComponentContextHolder)[ComponentContext__symbol] = context;\n    context.whenConnected(() => context.dispatchEvent(new ShadowDomEvent(\n        'wesib:shadowAttached',\n        { bubbles: true },\n    )));\n  }\n\n  return shadowRoot;\n}\n\n/**\n * @internal\n */\nfunction shadowRootOf(element: Element, init: ShadowRootInit): ShadowRoot | undefined {\n\n  const existing = element.shadowRoot;\n\n  if (existing) {\n    // Shadow root already attached. Using it.\n    return existing;\n  }\n  if ('attachShadow' in element) {\n    return element.attachShadow(init);\n  }\n\n  return; // Unable to attach shadow root.\n}\n\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '@proc7ts/primitives';\nimport { Component, ComponentContext, ComponentDecorator, ContentRoot } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { ShadowContentRoot } from './shadow-content-root';\nimport { ShadowRootBuilder } from './shadow-root-builder';\n\n/**\n * @internal\n */\nconst defaultShadowContentDef: ShadowContentDef = { mode: 'open' };\n\n/**\n * Shadow content root definition.\n *\n * This is a readonly component shadow root initialization options.\n *\n * @category Feature\n */\nexport type ShadowContentDef = Readonly<ShadowRootInit>;\n\n/**\n * Creates a component decorator that attaches shadow root to decorated component instance.\n *\n * @category Feature\n * @typeParam T - A type of decorated component class.\n * @param def - Shadow content root definition. Uses `mode: 'open'` by default.\n *\n * @returns New component decorator.\n */\nexport function AttachShadow<T extends ComponentClass = Class>(\n    def: ShadowContentDef = defaultShadowContentDef,\n): ComponentDecorator<T> {\n  return Component({\n    setup(setup) {\n      setup.perComponent(\n          {\n            a: ShadowContentRoot,\n            by(ctx: ComponentContext<InstanceType<T>>) {\n              return ctx.get(ShadowRootBuilder)(ctx, def);\n            },\n          },\n      );\n      setup.perComponent({ // Content root is an alias of shadow root when present.\n        a: ContentRoot,\n        by(context: ComponentContext<InstanceType<T>>) {\n          return context.get(ShadowContentRoot, { or: null });\n        },\n      });\n    },\n  });\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { NamespaceDef } from '@frontmeans/namespace-aliaser';\n\n/**\n * Default Wesib namespace definition.\n *\n * @category Core\n */\nexport const Wesib__NS: NamespaceDef = (/*#__PURE__*/ new NamespaceDef(\n    'https://wesib.github.io/ns',\n    'b',\n    'wesib',\n));\n"],"names":["BootstrapContext__key","SingleContextKey","BootstrapContext","ContextValues","ContextKey__symbol","bootstrapDefault","provide","context","key","bootstrapContext","get","isElement","node","nodeType","Node","ELEMENT_NODE","MetaAccessor","[object Object]","symbol","this","type","hasOwnProperty","undefined","ownDef","own","superType","superClassOf","superDef","of","merge","sources","prevMeta","updates","map","source","meta","newMeta","Object","defineProperty","configurable","value","FeatureDef__symbol","Symbol","FeatureMeta","super","defs","reduce","prev","def","needs","elementOrArray","extendSetOfElements","setOfElements","has","setup","mergeFunctions","init","featureMeta","noFeatureDef","FeatureDef","featureType","for","all","define","Feature","FeatureContext__key","FeatureContext","componentType","whenDefined","feature","load","FeatureNeedsError","Error","reason","need","name","FeatureRef","AfterEvent__symbol","read","ComponentDef__symbol","ComponentMeta","isQualifiedName","componentMeta","noComponentDef","ComponentDef","Component","decorator","ComponentContext__key","ComponentEventDispatcher__key","values","dispatcher","DomEventDispatcher","element","supply","dispatch","event","on","ContentRoot","byDefault","ctx","StateUpdaterKey","ContextUpKey","upKey","createUpKey","slot","insert","seed","do","digAfter","fns","length","combined","fn","noop","afterThe","path","newValue","oldValue","statePath","hasFallback","or","delegated","whenOff","StateUpdater","ComponentContext__symbol","ComponentContext","updateState","TypeError","String","contentRoot","ComponentEvent","Event","target","AnonymousComponentProperty__symbol","ComponentProperty","decorateWith","set","writable","readable","enumerable","component","componentDef","By","provider","result","proto","propertyKey","descriptor","desc","updateDescriptor","isField","updatedDesc","toPropertyAccessorDescriptor","fieldAccessorDescriptor","decoratePropertyAccessor","getValue","setValue","constructor","call","notReadableAccessor","notWritableAccessor","updated","With","access","As","valueProvider","Bind","binder","accessor__symbol","accessor","existing","bind","BootstrapContextRegistry__key","BootstrapContextRegistry","ContextRegistry","a","is","newValues","PerComponentRegistry","ComponentContextRegistry","PerDefinitionRegistry","bsContext","DefinitionContextRegistry","PostDefSetup__symbol","postDefSetup","tracker","trackValue","emitter","EventEmitter","onSetup","valueOn","asis","onAny","superPostDefSetup","send","it","BootstrapWindow","window","BootstrapRoot","document","body","DefaultNamespaceAliaser","DefaultRenderSchedulerKey","toDefaultRenderScheduler","newRenderSchedule","scheduler","contextDestroyed","args","options","DefaultRenderScheduler","ElementAdapterKey","adapters","adapter","defaultElementAdapter","ElementAdapter","ElementObserver","FnContextKey","DefaultElementObserver","MutationObserver","callback","mutations","forEach","mutation","itsEach","overArray","removedNodes","mount","mountOf","checkConnected","filterArray","addedNodes","observe","childList","DefinitionContext__symbol","definitionContextOf","CustomElements__key","customElements","nsAlias","CustomElements","componentTypeOrName","elementType","html__naming","defContext","extend","elementDef","extends","componentResolver","resolve","promise","ComponentResolver__symbol","newPromiseResolver","DefinitionContext__key","ElementDef","elementExtend","HTMLElement","DefinitionContext","mountTo","connect","ComponentContext$","_definitionContext","whenReady","_status","valueOn_","status","onceOn","whenSettled","whenConnected","registry","_newComponentRegistry","_component","settled","isOff","connected","off","componentDestroyed","parentNode","removeChild","removeElement","whenComponent","_whenComponent","lastRev","readNotifier","notifier","Supply","receive","_","_elementBuilder","components","prototype","prevContext","newComponent","dispatchEvent","bubbles","ComponentMount$","_connect","el","doc","ownerDocument","contains","destroy","MountComponentContext$","definitionContext","CustomComponentContext$","WhenComponent","currentRev","created","onCreated","onEventBy","receiver","receiverRev","eventContext","componentContext","notifiedRev","recurrentReceiver","onRecurrent","recurrentContext","mapAfter_","rev","DefinitionContext$","_bsContext","_ready","_whenReady","translateOn","ready","_def","definitionContextRegistry","seeds","parentPerComponentRegistry","append","seedKey","_perComponentRegistry","mapOn_","definitionSetup","perDefinition","spec","perComponent","_elementType","_createComponent","_created","settle","definitions","CustomElement$","connectedCallback","disconnectedCallback","customElementType","ElementBuilder","_define","ComponentRegistry","_context","_definitionQueue","definition","push","buildElement","FeatureContext$","_loader","afterAll","st","state","bs","by","onDefinition","supplyOn","onComponent","_componentRegistry","request","onPostDefSetup","FeatureKey__symbol","FeatureKey","from","mapAfter","preferredFeatureClause","afterEventBy","origin","stageId","Promise","clause","deps","loadFeatureDeps","digAfter_","loader","to","stage","ownLoader","FeatureLoader","ownSource","rcv","unload","shareAfter","translateAfter","lastLoader","preventDuplicateLoader","clauses","preferred","required","size","afterEach","dep","translateAfter_","presentFeatureDeps","filter","isPresent","down","_down","_stage","SetupFeatureStage","then","after","lastStage","id","prevStage","stop","FeatureStage","_stop","action","perDep","InitFeatureStage","ActiveFeatureStage","FeatureRequest","_requester","featureDef","requester","isClause","unuse","_uses","FeatureRequester__key","FeatureRequester","Map","_map","reuse","delete","WhenDefined__symbol","bootstrapComponents","features","bootstrapContextRegistry","create","complete","BootstrapContext$","bsStage","newNamespaceAliaser","onPromise","info","_ctx","ldr","catch","console","error","whenDown","Ref","supplyAfter","initBootstrap","AttributePath__root","attributePathTo","attributeStateUpdate","update","updateAttributeState","property2attributeName","i","c","substring","toLowerCase","parseAttributeDescriptor","opts","change","AttributeRegistry","AttributeRegistry$","attrs","observedAttributes","keys","attributeChangedCallback","attributeFilter","records","record","attributeName","getAttribute","attributes","attributeOldValue","alreadyObserved","Array","isArray","newAttrs","Set","attr","add","prevCallback","attrChanged","Attribute","declareAttribute","setAttribute","removeAttribute","AttributeChanged","Attributes","items","item","entries","ComponentStateKey","SimpleContextKey","provided","ComponentState","done","ComponentState__key","StateTracker","StatePropertyPath__root","statePropertyPathTo","updateStatePropertyState","StateProperty","statePropertyUpdate","AttributeTracker","ValueTracker","_name","track","onUpdate","_path","trackAttribute","DomPropertyRegistry","DomPropertyRegistry$","props","DomPropertyPath__root","domPropertyPathTo","updateDomPropertyState","DomProperty","domDescriptor","propertyDesc","componentPropertyKey","domPropertyDescriptor","domPropertyUpdate","declareDomProperty","RenderPath__root","RenderDef","valueByRecipe","base","defaults","isEventSender","onSupplied","trigger","translateOn_","ElementRenderCtl$","renderer","schedule","fulfill","when","scheduleRenderer","immediateSchedule","immediateRenderScheduler","_renders","renderNow","renderElement","execution","newRenderer","render","ElementRenderCtl","ElementRenderScheduler","renderCtl","recentShot","renderBy","shot","Render","ShadowContentRoot","ShadowDomEvent","shadowRoot","ShadowRootBuilder","attachShadow","shadowRootOf","defaultShadowContentDef","mode","AttachShadow","Wesib__NS","NamespaceDef"],"mappings":"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"}