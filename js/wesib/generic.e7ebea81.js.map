{"version":3,"file":"generic.e7ebea81.js","sources":["../../../node_modules/@wesib/generic/src/fetch/fetch-agent-key.impl.ts","../../../node_modules/@wesib/generic/src/fetch/http-fetch-agent.ts","../../../node_modules/@wesib/generic/src/fetch/http-fetch.impl.ts","../../../node_modules/@wesib/generic/src/fetch/http-fetch.ts","../../../node_modules/@wesib/generic/src/hierarchy/hierarchy-updates.impl.ts","../../../node_modules/@wesib/generic/src/hierarchy/hierarchy-context.ts","../../../node_modules/@wesib/generic/src/hierarchy/hierarchy-registry.impl.ts","../../../node_modules/@wesib/generic/src/tree/element-node.ts","../../../node_modules/@wesib/generic/src/tree/element-node-list.ts","../../../node_modules/@wesib/generic/src/tree/element-node-list.impl.ts","../../../node_modules/@wesib/generic/src/tree/node-attributes.impl.ts","../../../node_modules/@wesib/generic/src/tree/node-properties.impl.ts","../../../node_modules/@wesib/generic/src/tree/element-node.impl.ts","../../../node_modules/@wesib/generic/src/tree/component-tree-support.feature.ts","../../../node_modules/@wesib/generic/src/navigation/hash-url/hash-url.ts","../../../node_modules/@wesib/generic/src/navigation/page-param.ts","../../../node_modules/@wesib/generic/src/navigation/hash-url/page-hash-url-param.impl.ts","../../../node_modules/@wesib/generic/src/navigation/hash-url/page-hash-url-param.ts","../../../node_modules/@wesib/generic/src/navigation/navigation-agent.ts","../../../node_modules/@wesib/generic/src/navigation/navigation.ts","../../../node_modules/@wesib/generic/src/navigation/page-param-context.ts","../../../node_modules/@wesib/generic/src/navigation/nav-history.impl.ts","../../../node_modules/@wesib/generic/src/navigation/navigation.event.ts","../../../node_modules/@wesib/generic/src/navigation/navigation.impl.ts","../../../node_modules/@wesib/generic/src/navigation/navigation-support.feature.ts","../../../node_modules/@wesib/generic/src/navigation/hash-url/page-hash-url-support.feature.ts","../../../node_modules/@wesib/generic/src/navigation/activate-nav-link.decorator.ts","../../../node_modules/@wesib/generic/src/navigation/handle-nav-links.decorator.ts","../../../node_modules/@wesib/generic/src/util/import-node.ts","../../../node_modules/@wesib/generic/src/navigation/page-load/caching-page-loader.impl.ts","../../../node_modules/@wesib/generic/src/navigation/page-load/page-load-requests.impl.ts","../../../node_modules/@wesib/generic/src/navigation/page-load/page-load-agent.ts","../../../node_modules/@wesib/generic/src/navigation/page-load/page-load-url-modifier.ts","../../../node_modules/@wesib/generic/src/navigation/page-load/page-loader.impl.ts","../../../node_modules/@wesib/generic/src/navigation/page-load/page-load-param.ts","../../../node_modules/@wesib/generic/src/navigation/page-load/page-cache-buster.impl.ts","../../../node_modules/@wesib/generic/src/navigation/page-load/page-scripts-agent.impl.ts","../../../node_modules/@wesib/generic/src/navigation/page-load/page-style-agent.impl.ts","../../../node_modules/@wesib/generic/src/navigation/page-load/page-title-agent.impl.ts","../../../node_modules/@wesib/generic/src/navigation/page-load/page-load-support.feature.ts","../../../node_modules/@wesib/generic/src/navigation/page-load/include-page.decorator.ts","../../../node_modules/@wesib/generic/src/input/default-in-aspects.ts","../../../node_modules/@wesib/generic/src/input/input-from-control.ts","../../../node_modules/@wesib/generic/src/input/convert-input.decorator.ts","../../../node_modules/@wesib/generic/src/input/input-to-form.ts","../../../node_modules/@wesib/generic/src/input/fill-input-form.decorator.ts","../../../node_modules/@wesib/generic/src/input/on-submit.decorator.ts","../../../node_modules/@wesib/generic/src/input/set-input-name.decorator.ts","../../../node_modules/@wesib/generic/src/input/use-input-element.decorator.ts"],"sourcesContent":["import { nextArg } from 'call-thru';\nimport { ContextValueOpts, ContextValues } from 'context-values';\nimport { ContextUpKey, ContextUpRef } from 'context-values/updatable';\nimport { AfterEvent, afterThe, EventKeeper, EventSender, nextAfterEvent, OnEvent, onSupplied } from 'fun-events';\n\n/**\n * @internal\n */\ntype FetchAgent<Res extends any[]> = (\n    this: void,\n    next: (this: void, request?: Request) => OnEvent<Res>,\n    request: Request,\n) => EventSender<Res>;\n\n/**\n * @internal\n */\ntype CombinedFetchAgent<Res extends any[]> = (\n    this: void,\n    next: (this: void, request: Request) => OnEvent<Res>,\n    request: Request,\n) => OnEvent<Res>;\n\n/**\n * @internal\n */\nexport class FetchAgentKey<Res extends any[]>\n    extends ContextUpKey<CombinedFetchAgent<Res>, FetchAgent<Res>>\n    implements ContextUpRef<CombinedFetchAgent<Res>, FetchAgent<Res>> {\n\n  readonly upKey: ContextUpKey.UpKey<CombinedFetchAgent<Res>, FetchAgent<Res>>;\n\n  constructor(name: string) {\n    super(name);\n    this.upKey = this.createUpKey(\n        opts => opts.seed.keep.thru(\n            (...agents) => {\n              if (agents.length) {\n                return nextArg(combineFetchAgents(agents));\n              }\n\n              const defaultProvider = (): AfterEvent<[CombinedFetchAgent<Res>]> => afterThe(defaultFetchAgent);\n\n              return nextAfterEvent(opts.byDefault(defaultProvider) || defaultProvider());\n            },\n        ),\n    );\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          CombinedFetchAgent<Res>,\n          EventKeeper<FetchAgent<Res>[]> | FetchAgent<Res>,\n          AfterEvent<FetchAgent<Res>[]>>,\n  ): CombinedFetchAgent<Res> {\n\n    let delegated!: CombinedFetchAgent<Res>;\n\n    opts.context.get(\n        this.upKey,\n        'or' in opts ? { or: opts.or != null ? afterThe(opts.or) : opts.or } : undefined,\n    )!(agent => delegated = agent);\n\n    return (next, request) => delegated(next, request);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultFetchAgent<Res extends any[]>(\n    next: (this: void, request: Request) => OnEvent<Res>,\n    request: Request,\n): OnEvent<Res> {\n  return next(request);\n}\n\n/**\n * @internal\n */\nexport function combineFetchAgents<Res extends any[]>(agents: FetchAgent<Res>[]): CombinedFetchAgent<Res> {\n  return (next, request) => {\n\n    const fetch: (agentIdx: number, agentRequest: Request) => OnEvent<Res> = (agentIdx, agentRequest) => {\n\n      const agent = agents[agentIdx];\n\n      if (!agent) {\n        return next(agentRequest);\n      }\n\n      return onSupplied(\n          agent(\n              (nextRequest = agentRequest) => fetch(agentIdx + 1, nextRequest),\n              agentRequest,\n          ),\n      );\n    };\n\n    return fetch(0, request);\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextUpRef } from 'context-values/updatable';\nimport { EventSender, OnEvent } from 'fun-events';\nimport { FetchAgentKey } from './fetch-agent-key.impl';\n\n/**\n * HTTP fetch agent signature.\n *\n * The agent can be used to alter [[HttpFetch]] processing. For that it should be registered in appropriate context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by [[HttpFetch]].\n */\nexport type HttpFetchAgent =\n/**\n * @param next  Either calls the next agent in chain, or actually fetches the data if this agent is the last one.\n * Accepts an optional `Request` parameter. The original request will be used instead when omitted.\n * @param request  HTTP request.\n *\n * @returns An `EventSender` of response object(s). It is returned either to preceding agent in chain, or as a result of\n * [[HttpFetch]] call.\n */\n    (\n        this: void,\n        next: (this: void, request?: Request) => OnEvent<[Response]>,\n        request: Request,\n    ) => EventSender<[Response]>;\n\nexport namespace HttpFetchAgent {\n\n  /**\n   * Combined HTTP fetch agent signature.\n   *\n   * This is what is available under [[HttpFetchAgent]] key.\n   */\n  export type Combined =\n  /**\n   * @param next  Either calls the next agent in chain, or actually fetches the data if this agent is the last one.\n   * Accepts `Request` parameter.\n   * @param request  HTTP request.\n   *\n   * @returns An `OnEvent` registrar of response object(s) receivers. It is returned as a result of [[HttpFetch]] call.\n   */\n      (\n          this: void,\n          next: (this: void, request: Request) => OnEvent<[Response]>,\n          request: Request,\n      ) => OnEvent<[Response]>;\n\n}\n\n/**\n * A key of context value containing an [[HttpFetchAgent]] instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the fetch.\n */\nexport const HttpFetchAgent: ContextUpRef<HttpFetchAgent.Combined, HttpFetchAgent> = (\n    /*#__PURE__*/ new FetchAgentKey<[Response]>('http-fetch-agent')\n);\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { EventEmitter, EventSupply, eventSupply, OnEvent, onEventBy } from 'fun-events';\nimport { DomEventDispatcher } from 'fun-events/dom';\nimport { HttpFetch } from './http-fetch';\nimport { HttpFetchAgent } from './http-fetch-agent';\n\nconst HttpFetchAborted = {};\n\n/**\n * @internal\n */\nexport function newHttpFetch(context: BootstrapContext): HttpFetch {\n\n  const window = context.get(BootstrapWindow);\n  const agent = context.get(HttpFetchAgent);\n\n  return (input, init) => agent(fetch, new Request(input, init));\n\n  function fetch(request: Request): OnEvent<[Response]> {\n    return onEventBy(receiver => {\n\n      const responseEmitter = new EventEmitter<[Response]>();\n      let supply: EventSupply;\n\n      if ('AbortController' in window) {\n\n        const abortController = new (window as any).AbortController();\n        const { signal } = abortController;\n\n        supply = eventSupply(reason => {\n          if (reason === HttpFetchAborted) {\n            abortController.abort();\n          }\n        });\n        receiver.supply.whenOff(() => supply.off(HttpFetchAborted)).needs(supply);\n        responseEmitter.on({\n          supply,\n          receive(ctx, response) {\n            receiver.receive(ctx, response);\n          },\n        });\n\n        const customSignal = request.signal;\n\n        if (customSignal) {\n          new DomEventDispatcher(customSignal).on('abort').once(() => abortController.abort());\n          if (customSignal.aborted) {\n            abortController.abort();\n          }\n        }\n\n        request = new Request(request, { signal });\n      } else {\n        supply = responseEmitter.on(receiver);\n      }\n\n      window.fetch(request)\n          .then(response => {\n            responseEmitter.send(response);\n            supply.off();\n          })\n          .catch(reason => supply.off(reason));\n    });\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { bootstrapDefault } from '@wesib/wesib';\nimport { FnContextKey, FnContextRef } from 'context-values/updatable';\nimport { OnEvent } from 'fun-events';\nimport { newHttpFetch } from './http-fetch.impl';\n\n/**\n * HTTP fetch function signature.\n *\n * This is a function that wraps browser's\n * [fetch()](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch) function and provides\n * additional functionality. E.g. request interception.\n *\n * This function returns an `OnEvent` sender instead of a `Promise`. This allows to report multiple responses.\n * E.g. when the resource refresh requested and delivered. The request is sent whenever a receiver is registered\n * in this sender. When the fetch completes the response supply is cut off, and callbacks registered with its\n * `whenOff()` method are notified. When fetch fails for whatever reason, this reason is passed to these callbacks.\n * The fetch can be aborted by cutting off the response supply. I.e. by calling its `off()` method.\n *\n * An instance of [[HttpFetch]] is available from bootstrap context.\n */\nexport type HttpFetch =\n/**\n * @param input  The resource to fetch. This can either an URL string, or a `Request` object.\n * @param init  Custom settings to apply to the request.\n *\n * @returns An `OnEvent` sender of responses.\n */\n    (this: void, input: RequestInfo, init?: RequestInit) => OnEvent<[Response]>;\n\n/**\n * A key of bootstrap context value containing an [[HttpFetch]] instance.\n */\nexport const HttpFetch: FnContextRef<Parameters<HttpFetch>, ReturnType<HttpFetch>> = (\n    /*#__PURE__*/ new FnContextKey<Parameters<HttpFetch>, ReturnType<HttpFetch>>(\n        'http-fetch',\n        {\n          byDefault: bootstrapDefault(newHttpFetch),\n        },\n    )\n);\n","import {\n  BootstrapContext,\n  BootstrapRoot,\n  ComponentContext,\n  ComponentContext__symbol,\n  ComponentEvent,\n} from '@wesib/wesib';\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { EventEmitter, OnEvent, trackValue, ValueTracker } from 'fun-events';\nimport { DomEventDispatcher } from 'fun-events/dom';\n\n/**\n * @internal\n */\nexport type HierarchyRoot = ValueTracker<ComponentContext | undefined>;\n\n/**\n * @internal\n */\nexport const HierarchyRoot = (/*#__PURE__*/ new SingleContextKey<HierarchyRoot>(\n    'hierarchy-root',\n    {\n      byDefault: bsContext => {\n\n        const root: Element = bsContext.get(BootstrapRoot);\n\n        new DomEventDispatcher(root).on<ComponentEvent>('wesib:component')(\n            ({ context }: ComponentEvent) => context.get(HierarchyUpdates).issue(),\n        );\n\n        return trackValue();\n      },\n    },\n));\n\nconst HierarchyUpdates__key = (/*#__PURE__*/ new SingleContextKey<HierarchyUpdates>(\n    'hierarchy-updates',\n    {\n      byDefault: context => new HierarchyUpdates(context.get(ComponentContext)),\n    },\n));\n\n/**\n * @internal\n */\nexport class HierarchyUpdates {\n\n  static get [ContextKey__symbol](): ContextKey<HierarchyUpdates> {\n    return HierarchyUpdates__key;\n  }\n\n  readonly on: OnEvent<[ComponentContext]>;\n  readonly send: (this: void) => void;\n  readonly issue: () => void;\n\n  constructor(context: ComponentContext) {\n\n    const updates = new EventEmitter<[ComponentContext]>();\n    const hierarchyRoot = context.get(BootstrapContext).get(HierarchyRoot);\n\n    this.on = updates.on;\n    this.send = () => updates.send(context);\n    this.issue = () => {\n\n      const parent = findParentContext(context);\n\n      if (parent) {\n        parent[0].get(HierarchyUpdates).send();\n      } else {\n        hierarchyRoot.it = context;\n      }\n    };\n  }\n\n}\n\n/**\n * @internal\n */\nexport function findParentContext(of: ComponentContext): [ComponentContext, boolean] | undefined {\n\n  const root = of.get(BootstrapContext).get(BootstrapRoot);\n  let element: Node = of.element;\n  let immediate = true;\n\n  if (element === root) {\n    return;\n  }\n  for (;;) {\n\n    const parent = element.parentNode;\n\n    if (!parent) {\n      return;\n    }\n\n    const ctx: ComponentContext = (parent as any)[ComponentContext__symbol];\n\n    if (ctx) {\n      return [ctx, immediate];\n    }\n    if (parent === root) {\n      return;\n    }\n\n    immediate = false;\n    element = parent;\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { BootstrapContext, ComponentContext } from '@wesib/wesib';\nimport { ContextKey, ContextKey__symbol, ContextValues, ContextValueSpec, SingleContextKey } from 'context-values';\nimport { AfterEvent, afterEventBy, EventKeeper, eventSupply, trackValue } from 'fun-events';\nimport { newHierarchyRegistry } from './hierarchy-registry.impl';\nimport { findParentContext, HierarchyRoot, HierarchyUpdates } from './hierarchy-updates.impl';\n\n/**\n * @internal\n */\nconst HierarchyContext__key = (/*#__PURE__*/ new SingleContextKey<HierarchyContext>(\n    'hierarchy-context',\n    {\n      byDefault: context => newHierarchyContext(context.get(ComponentContext)),\n    },\n));\n\n/**\n * Component's hierarchy context.\n *\n * Passes provided values to hierarchy contexts of nested components.\n *\n * Available as component context value.\n *\n * @typeparam T  A type of component.\n */\nexport abstract class HierarchyContext<T extends object = any> extends ContextValues {\n\n  /**\n   * A key of component context value containing its hierarchy context instance.\n   */\n  static get [ContextKey__symbol](): ContextKey<HierarchyContext> {\n    return HierarchyContext__key;\n  }\n\n  /**\n   * Component context.\n   */\n  abstract readonly context: ComponentContext<T>;\n\n  /**\n   * An `AfterEvent` keeper of enclosing component's hierarchy context.\n   *\n   * May send `undefined` when component is outside of hierarchy. E.g. when it is disconnected.\n   */\n  abstract readonly up: AfterEvent<[HierarchyContext?]>;\n\n  /**\n   * Provides hierarchy context value.\n   *\n   * The provided value will be available in context itself, as well as in all nested hierarchy contexts.\n   *\n   * Note that the provided value key has to `ContextUpKey`.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  abstract provide<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<HierarchyContext<T>, any, Deps, Src | EventKeeper<Src[]>, Seed>,\n  ): () => void;\n\n}\n\n/**\n * @internal\n */\nfunction newHierarchyContext<T extends object>(context: ComponentContext<T>): HierarchyContext<T> {\n\n  const hierarchyRoot = context.get(BootstrapContext).get(HierarchyRoot);\n  const up = afterEventBy<[HierarchyContext?]>(\n      receiver => {\n\n        const parentHierarchy = trackValue<HierarchyContext>();\n        const rootSupply = eventSupply().needs(receiver.supply);\n        const parentSupply = eventSupply().needs(receiver.supply);\n        const updateParent = (): void => {\n\n          const parent = findParentContext(context);\n\n          if (parent) {\n\n            const [parentCtx, immediate] = parent;\n\n            parentHierarchy.it = parentCtx.get(HierarchyContext);\n            rootSupply.off();\n            if (immediate) {\n              parentSupply.off();\n            }\n          } else {\n            parentHierarchy.it = undefined;\n          }\n        };\n\n        hierarchyRoot.read({\n          supply: rootSupply,\n          receive: () => context.connected && updateParent(),\n        });\n        parentHierarchy.read.consume(\n            newParent => newParent && newParent.context.get(HierarchyUpdates).on(updateParent),\n        ).needs(parentSupply);\n        parentHierarchy.read(receiver);\n        context.whenOn({\n          supply: receiver.supply,\n          receive: (_, onSupply) => {\n            updateParent();\n            onSupply.whenOff(\n                () => {\n                  Promise.resolve().then(\n                      () => context.connected || (parentHierarchy.it = undefined),\n                  );\n                },\n            );\n          },\n        });\n      },\n  ).share();\n  const registry = newHierarchyRegistry<T>(up);\n  const values = registry.newValues();\n\n  class HierarchyCtx extends HierarchyContext<T> {\n\n    readonly get = values.get;\n\n    get context(): ComponentContext<T> {\n      return context;\n    }\n\n    get up(): AfterEvent<[HierarchyContext?]> {\n      return up;\n    }\n\n    provide<Deps extends any[], Src, Seed>(\n        spec: ContextValueSpec<HierarchyContext<T>, any, Deps, Src | EventKeeper<Src[]>, Seed>,\n    ): () => void {\n      return registry.provide(spec);\n    }\n\n  }\n\n  return new HierarchyCtx();\n}\n","import { nextArgs } from 'call-thru';\nimport { ContextRegistry } from 'context-values';\nimport { AfterEvent, nextAfterEvent } from 'fun-events';\nimport { HierarchyContext } from './hierarchy-context';\n\n/**\n * @internal\n */\nexport function newHierarchyRegistry<T extends object>(\n    up: AfterEvent<[HierarchyContext?]>,\n): ContextRegistry<HierarchyContext<T>> {\n  return new ContextRegistry(\n      key => up.keep.thru(\n          upper => upper ? nextAfterEvent(upper.get(key as any)) : nextArgs(),\n      ) as any,\n  );\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ComponentClass, ComponentContext } from '@wesib/wesib';\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { ValueTracker } from 'fun-events';\nimport { ElementNodeList } from './element-node-list';\n\n/**\n * Arbitrary element node within component tree. Either bound to some component or not.\n */\nexport type ElementNode =\n    | RawElementNode\n    | ComponentNode;\n\n/**\n * Component tree node representing arbitrary element.\n *\n * This is a base interface of all element node implementations.\n */\nexport interface ComponentTreeNode {\n\n  /**\n   * The element itself.\n   */\n  readonly element: any;\n\n  /**\n   * A context of component bound to this element, if any.\n   */\n  readonly context?: ComponentContext<any>;\n\n  /**\n   * Parent element node, or `null` if element has no parent.\n   */\n  readonly parent: ElementNode | null;\n\n  /**\n   * Selects component nodes matching the given selector.\n   *\n   * @param selector  Simple CSS selector of nested components.\n   * @param mode  Component nodes pick mode.\n   *\n   * @returns Dynamically updatable list of matching component nodes.\n   */\n  select(\n      selector: string,\n      mode?: ComponentPickMode,\n  ): ElementNodeList<ComponentNode>;\n\n  /**\n   * Selects component nodes of the given type.\n   *\n   * @param componentType  Nested component type with custom element name.\n   * @param mode  Component nodes pick mode.\n   *\n   * @returns Dynamically updatable list of matching component nodes.\n   */\n  select<T extends object>(\n      componentType: ComponentClass<T>,\n      mode?: ComponentPickMode,\n  ): ElementNodeList<ComponentNode<T>>;\n\n  /**\n   * Selects element nodes matching the given selector.\n   *\n   * @param selector  Simple CSS selector of nested elements. E.g. CSS class selector.\n   * @param mode  A mode of node picking from component tree.\n   *\n   * @returns Dynamically updatable list of matching element nodes.\n   */\n  select(\n      selector: string,\n      mode: ElementPickMode,\n  ): ElementNodeList;\n\n  /**\n   * Tracks element attribute.\n   *\n   * @param name  Target attribute name.\n   *\n   * @returns Target attribute's value tracker.\n   */\n  attribute(name: string): ValueTracker<string | null, string>;\n\n  /**\n   * Tracks element element property.\n   *\n   * The changes are tracked with `StateTracker`. So it is expected that the target property notifies on its changes\n   * with state updater. E.g. when it is defined by `@DomProperty` decorator.\n   *\n   * @param key  Target property key.\n   *\n   * @returns Target property's value tracker.\n   */\n  property<V>(key: PropertyKey): ValueTracker<V>;\n\n}\n\n/**\n * Element node representing raw element not bound to any component.\n */\nexport interface RawElementNode extends ComponentTreeNode {\n\n  readonly context?: undefined;\n\n}\n\n/**\n * Element node representing an element bound to some component.\n */\nexport interface ComponentNode<T extends object = any> extends ComponentTreeNode {\n\n  readonly context: ComponentContext<T>;\n\n}\n\n/**\n * A key of component context value containing a component node instance.\n */\nexport const ComponentNode: SingleContextRef<ComponentNode> = (\n    /*#__PURE__*/ new SingleContextKey<ComponentNode>('component-node')\n);\n\n/**\n * A mode of node picking from component tree.\n */\nexport interface ElementPickMode {\n\n  /**\n   * Set to `true` to select arbitrary nodes. Otherwise - select only component nodes.\n   */\n  all?: boolean;\n\n  /**\n   * Set to `true` to select from entire subtree. Otherwise - select from element child nodes only.\n   */\n  deep?: boolean;\n\n}\n\n/**\n * A mode that picks component nodes from component tree.\n */\nexport interface ComponentPickMode extends ElementPickMode {\n\n  all?: false;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { AIterable, ArrayLikeIterable } from 'a-iterable';\nimport { AfterEvent, AfterEvent__symbol, EventKeeper, EventSender, OnEvent, OnEvent__symbol } from 'fun-events';\nimport { ElementNode } from './element-node';\n\n/**\n * Dynamically updatable list of selected element nodes.\n *\n * It is an iterable of nodes.\n *\n * Implements an `EventSender` interface by sending added and removed nodes arrays.\n *\n * Implements an `EventKeeper` interface by sending updated node list.\n */\nexport abstract class ElementNodeList<N extends ElementNode = ElementNode>\n    extends AIterable<N>\n    implements EventSender<[N[], N[]]>, EventKeeper<[ElementNodeList<N>]> {\n\n  /**\n   * An `OnEvent` sender of list changes. Sends arrays of added and removed nodes.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly onUpdate: OnEvent<[N[], N[]]>;\n\n  get [OnEvent__symbol](): OnEvent<[N[], N[]]> {\n    return this.onUpdate;\n  }\n\n  /**\n   * An `AfterEvent` keeper of current node list.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[ElementNodeList<N>]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[ElementNodeList<N>]> {\n    return this.read;\n  }\n\n  /**\n   * An `AfterEvent` keeper of node list changes.\n   *\n   * Sends an iterables of added and removed nodes. Sends current nodes immediately upon receiver registration.\n   */\n  abstract readonly track: AfterEvent<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]>;\n\n  /**\n   * An `AfterEvent` keeper of the first node in this list.\n   */\n  abstract readonly first: AfterEvent<[N?]>;\n\n}\n","import {\n  BootstrapContext,\n  ComponentClass,\n  DefaultNamespaceAliaser,\n  ElementObserver,\n  ElementObserverInit,\n  isElement,\n} from '@wesib/wesib';\nimport {\n  AIterable,\n  ArrayLikeIterable,\n  filterIt,\n  flatMapIt,\n  itsEach,\n  itsFirst,\n  itsIterator,\n  mapIt,\n  overArray,\n} from 'a-iterable';\nimport { isPresent, nextArg, nextArgs } from 'call-thru';\nimport { AfterEvent, afterEventBy, afterSupplied, EventEmitter, eventSupply, OnEvent, onEventBy } from 'fun-events';\nimport { html__naming } from 'namespace-aliaser';\nimport { ElementNode, ElementPickMode } from './element-node';\nimport { ElementNodeList as ElementNodeList_ } from './element-node-list';\n\n/**\n * @internal\n */\nconst WATCH_DEEP: ElementObserverInit = { subtree: true };\n\n/**\n * @internal\n */\nexport function elementNodeList<N extends ElementNode>(\n    bsContext: BootstrapContext,\n    root: Element,\n    selectorOrType: string | ComponentClass<any>,\n    nodeOf: (node: Element, optional?: boolean) => N | undefined,\n    { deep, all }: ElementPickMode,\n): ElementNodeList_<N> {\n\n  const updates = new EventEmitter<[N[], N[]]>();\n  const init = deep ? WATCH_DEEP : undefined;\n  let cache = new Set<Element>();\n  let iterable: Iterable<N> | undefined;\n  let selector: string | undefined;\n  const overNodes: (nodes: NodeList) => Iterable<Node> = deep ? overNodeSubtree : overArray;\n\n  if (typeof selectorOrType === 'string') {\n    selector = selectorOrType;\n  } else {\n    bsContext.whenDefined(selectorOrType).then(({ elementDef: { name } }) => {\n      iterable = undefined;\n      if (name) {\n        selector = html__naming.name(name, bsContext.get(DefaultNamespaceAliaser));\n        if (updates.size) {\n\n          const selected = refresh();\n\n          if (selected.size) {\n\n            const added = Array.from(\n                filterIt<N | undefined, N>(\n                    mapIt(selected, node => nodeOf(node)),\n                    isPresent,\n                ),\n            );\n\n            if (added.length) {\n              updates.send(added, []);\n            }\n          }\n        }\n      }\n    });\n  }\n\n  const observer = bsContext.get(ElementObserver)(update);\n  let nodeList: ElementNodeList;\n\n  const onUpdate = onEventBy<[N[], N[]]>(receiver => {\n\n    const firstReceiver = !updates.size;\n    const supply = updates.on(receiver);\n\n    if (firstReceiver) {\n      refresh();\n      observer.observe(root, init);\n    }\n\n    return eventSupply(reason => {\n      supply.off(reason);\n      if (!updates.size) {\n        observer.disconnect();\n      }\n    }).needs(supply);\n  });\n  const read = afterEventBy<[ElementNodeList]>(onUpdate.thru(() => nodeList), () => [nodeList]);\n  const onTrackUpdate: OnEvent<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]> = onUpdate.thru(\n      (added, removed) => nextArgs(AIterable.of(added), AIterable.of(removed)),\n  );\n  const track = afterEventBy<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]>(receiver => {\n\n    const initialEmitter = new EventEmitter<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]>();\n\n    initialEmitter.on(receiver);\n    initialEmitter.send(nodeList, AIterable.of([]));\n\n    onTrackUpdate(receiver);\n  });\n  const first: AfterEvent<[N?]> = afterSupplied(read).keep.thru(\n      list => nextArg(itsFirst(list)),\n  );\n\n  if (!all) {\n    root.addEventListener('wesib:component', event => {\n\n      const element = event.target as Element;\n\n      if (cache.has(element)) {\n\n        const node = nodeOf(element) as N;\n\n        updates.send([node], []);\n      }\n    });\n  }\n\n  class ElementNodeList extends ElementNodeList_<N> {\n\n    get onUpdate(): OnEvent<[N[], N[]]> {\n      return onUpdate;\n    }\n\n    get read(): AfterEvent<[ElementNodeList]> {\n      return read;\n    }\n\n    get track(): AfterEvent<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]> {\n      return track;\n    }\n\n    get first(): AfterEvent<[N?]> {\n      return first;\n    }\n\n    [Symbol.iterator](): Iterator<N> {\n      return itsIterator(iterable || (iterable = filterIt<N | undefined, N>(\n          mapIt(\n              elements(),\n              element => nodeOf(element),\n          ),\n          isPresent,\n      )));\n    }\n\n  }\n\n  return nodeList = new ElementNodeList();\n\n  function elements(): Set<Element> {\n    return updates.size ? cache : refresh();\n  }\n\n  function refresh(): Set<Element> {\n    iterable = undefined;\n    return cache = select();\n  }\n\n  function select(): Set<Element> {\n\n    const sel = selector;\n\n    if (!sel) {\n      return new Set();\n    }\n    if (deep) {\n      return new Set(overArray(root.querySelectorAll(sel)));\n    }\n    return new Set(\n        filterIt(\n            overArray(root.children),\n            item => item.matches(sel),\n        ),\n    );\n  }\n\n  function update(mutations: MutationRecord[]): void {\n\n    const added: N[] = [];\n    const removed: N[] = [];\n\n    mutations.forEach(mutation => {\n      itsEach(\n          filterIt<N | undefined, N>(\n              mapIt(overNodes(mutation.removedNodes), removeNode),\n              isPresent,\n          ),\n          node => removed.push(node),\n      );\n      itsEach(\n          filterIt<N | undefined, N>(\n              mapIt(overNodes(mutation.addedNodes), addNode),\n              isPresent,\n          ),\n          node => added.push(node),\n      );\n    });\n    if (added.length || removed.length) {\n      updates.send(added, removed);\n    }\n  }\n\n  function addNode(node: Node): N | undefined {\n    if (!isElement(node)) {\n      return;\n    }\n    if (selector && node.matches(selector) && !cache.has(node)) {\n      cache.add(node);\n      return nodeOf(node);\n    }\n    return;\n  }\n\n  function removeNode(node: Node): N | undefined {\n    if (!isElement(node)) {\n      return;\n    }\n    if (!cache.delete(node)) {\n      return;\n    }\n    return nodeOf(node, true);\n  }\n\n}\n\nfunction overNodeSubtree(nodes: NodeList): Iterable<Node> {\n  return flatMapIt(\n      overArray(nodes),\n      node => [node, ...overNodeSubtree(node.childNodes)],\n  );\n}\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport {\n  EventEmitter,\n  eventReceiver,\n  EventReceiver,\n  eventSupply,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  noEventSupply,\n  OnEvent,\n  onEventBy,\n  ValueTracker,\n} from 'fun-events';\n\n/**\n * @internal\n */\nclass AttributesObserver {\n\n  private readonly _emitters = new Map<string, EventEmitter<[string, string | null]>>();\n  private _observer?: MutationObserver;\n\n  constructor(private readonly _bs: BootstrapContext, readonly element: Element) {\n  }\n\n  private get observer(): MutationObserver {\n    if (this._observer) {\n      return this._observer;\n    }\n\n    const Observer: typeof MutationObserver = (this._bs.get(BootstrapWindow) as any).MutationObserver;\n\n    return this._observer = new Observer(mutations => this._update(mutations));\n  }\n\n  observe(name: string, receiver: EventReceiver<[string, string | null]>): EventSupply {\n\n    const self = this;\n    const observer = this.observer;\n    const emitter = this._emitter(name);\n    const rcv = eventReceiver(receiver);\n    const supply = emitter.on({\n      supply: eventSupply(() => {\n        this._emitters.delete(name);\n        observer.disconnect();\n        if (this._emitters.size) {\n          reconnect();\n        } else {\n          this._observer = undefined;\n        }\n      }).needs(rcv.supply),\n      receive: (ctx, newValue, oldValue) => rcv.receive(ctx, newValue, oldValue),\n    });\n\n    observer.disconnect();\n    reconnect();\n\n    return supply;\n\n    function reconnect(): void {\n      self._update(observer.takeRecords());\n      observer.observe(self.element, {\n        attributes: true,\n        attributeOldValue: true,\n        attributeFilter: Array.from(self._emitters.keys()),\n      });\n    }\n  }\n\n  private _update(mutations: MutationRecord[]): void {\n    mutations.forEach(mutation => {\n\n      const attributeName = mutation.attributeName as string;\n      const emitter = this._emitters.get(attributeName);\n\n      if (emitter) {\n        emitter.send(this.element.getAttribute(attributeName) as string, mutation.oldValue);\n      }\n    });\n  }\n\n  private _emitter(name: string): EventEmitter<[string, string | null]> {\n\n    const emitter = new EventEmitter<[string, string | null]>();\n\n    this._emitters.set(name, emitter);\n\n    return emitter;\n  }\n\n}\n\n/**\n * @internal\n */\nclass AttributeTracker extends ValueTracker<string | null, string> {\n\n  private readonly _updates = new EventEmitter<[string, string | null]>();\n  readonly on: OnEvent<[string, string | null]>;\n\n  constructor(\n      private readonly _observer: AttributesObserver,\n      private readonly _name: string,\n  ) {\n    super();\n\n    let observeSupply = noEventSupply();\n\n    this.on = onEventBy(receiver => {\n      if (!this._updates.size) {\n        observeSupply = this._observer.observe(\n            _name,\n            (newValue, oldValue) => this._updates.send(newValue, oldValue),\n        );\n      }\n      receiver.supply.needs(observeSupply);\n      this._updates.on(receiver).whenOff(reason => {\n        if (!this._updates.size) {\n          observeSupply.off(reason);\n        }\n      });\n    });\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this._updates);\n  }\n\n  get it(): string | null {\n    return this._observer.element.getAttribute(this._name);\n  }\n\n  set it(value: string | null) {\n    this._observer.element.setAttribute(this._name, value as string);\n  }\n\n}\n\n/**\n * @internal\n */\nexport class NodeAttributes {\n\n  private readonly _attrs = new Map<string, AttributeTracker>();\n  private readonly _observer: AttributesObserver;\n\n  constructor(bs: BootstrapContext, element: any) {\n    this._observer = new AttributesObserver(bs, element);\n  }\n\n  get(name: string): ValueTracker<string | null, string> {\n\n    const existing = this._attrs.get(name);\n\n    if (existing) {\n      return existing;\n    }\n\n    const created = new AttributeTracker(this._observer, name);\n\n    this._attrs.set(name, created);\n\n    return created;\n  }\n\n}\n","import { ComponentContext, ComponentState, domPropertyPathTo } from '@wesib/wesib';\nimport {\n  EventEmitter,\n  EventSupply,\n  eventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  OnEvent,\n  ValueTracker,\n} from 'fun-events';\n\n/**\n * @internal\n */\nclass PropertyTracker<T> extends ValueTracker<T> {\n\n  private readonly _updates = new EventEmitter<[T, T]>();\n  private readonly _supply = eventSupply();\n\n  constructor(\n      private readonly _element: any,\n      private readonly _key: PropertyKey,\n  ) {\n    super();\n  }\n\n  get on(): OnEvent<[T, T]> {\n    return this._updates.on;\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return this._supply;\n  }\n\n  get it(): T {\n    return this._element[this._key];\n  }\n\n  set it(value: T) {\n    this._element[this._key] = value;\n  }\n\n  done(reason?: any): this {\n    this._supply.off(reason);\n    return this;\n  }\n\n  bind(context: ComponentContext): void {\n\n    const supply = eventSupplyOf(this);\n    const propertyState = context.get(ComponentState).track(domPropertyPathTo(this._key));\n\n    supply.needs(\n        propertyState.onUpdate({\n          supply: eventSupply().whenOff(reason => this._updates.done(reason)),\n          receive: (_ctx, _path, newValue: any, oldValue: any) => this._updates.send(newValue, oldValue),\n        }).needs(supply),\n    );\n  }\n\n}\n\n/**\n * @internal\n */\nexport class NodeProperties {\n\n  private readonly _props = new Map<PropertyKey, PropertyTracker<any>>();\n  private _context?: ComponentContext<any>;\n\n  constructor(private readonly _element: any) {\n  }\n\n  bind(context: ComponentContext): void {\n    this._context = context;\n    this._props.forEach(prop => prop.bind(context));\n  }\n\n  get<T>(key: PropertyKey): ValueTracker<T> {\n\n    const existing = this._props.get(key);\n\n    if (existing) {\n      return existing;\n    }\n\n    const created = new PropertyTracker<any>(this._element, key);\n\n    if (this._context) {\n      created.bind(this._context);\n    }\n    this._props.set(key, created);\n\n    return created;\n  }\n\n}\n","import {\n  BootstrapContext,\n  ComponentClass,\n  ComponentContext,\n  ComponentContext__symbol,\n  ComponentEvent,\n  ElementAdapter,\n} from '@wesib/wesib';\nimport { ValueTracker } from 'fun-events';\nimport { ComponentNode, ComponentTreeNode, ElementPickMode, ElementNode as ElementNode_ } from './element-node';\nimport { ElementNodeList } from './element-node-list';\nimport { elementNodeList } from './element-node-list.impl';\nimport { NodeAttributes } from './node-attributes.impl';\nimport { NodeProperties } from './node-properties.impl';\n\n/**\n * @internal\n */\nconst ElementNode__symbol = (/*#__PURE__*/ Symbol('element-node'));\n\n/**\n * @internal\n */\nclass ElementNode implements ComponentTreeNode {\n\n  private readonly _attrs: NodeAttributes;\n  private readonly _props: NodeProperties;\n\n  constructor(private readonly _bs: BootstrapContext, readonly element: Element) {\n    this._attrs = new NodeAttributes(_bs, element);\n    this._props = new NodeProperties(element);\n    (element as any)[ElementNode__symbol] = this;\n\n    const context = (element as any)[ComponentContext__symbol] as ComponentContext<any> | undefined;\n\n    if (context) {\n      this._bind(context);\n    } else {\n      element.addEventListener('wesib:component', event => this._bind((event as ComponentEvent).context));\n    }\n  }\n\n  get context(): ComponentContext<any> | undefined {\n    return (this.element as any)[ComponentContext__symbol];\n  }\n\n  get parent(): ElementNode_ | null {\n\n    const parent = this.element.parentNode;\n\n    return parent && elementNodeOf(this._bs, parent as Element);\n  }\n\n  select(selector: string | ComponentClass<any>, mode?: ElementPickMode): ElementNodeList<any> {\n    return selectNodes(this._bs, this.element, selector, mode);\n  }\n\n  attribute(name: string): ValueTracker<string | null, string> {\n    return this._attrs.get(name);\n  }\n\n  property<V>(key: PropertyKey): ValueTracker<V> {\n    return this._props.get(key);\n  }\n\n  private _bind(context: ComponentContext): void {\n    this._props.bind(context);\n  }\n\n}\n\n/**\n * @internal\n */\nexport function elementNodeOf(bsContext: BootstrapContext, element: Element, optional?: boolean): ElementNode_ {\n\n  const existing: ElementNode_ = (element as any)[ElementNode__symbol];\n\n  return (existing || optional) ? existing : new ElementNode(bsContext, element);\n}\n\n/**\n * @internal\n */\nfunction selectNodes(\n    bsContext: BootstrapContext,\n    root: Element,\n    selector: string | ComponentClass<any>,\n    mode: ElementPickMode = {},\n): ElementNodeList<any> {\n  if (mode.all) {\n    return elementNodeList<ElementNode_>(\n        bsContext,\n        root,\n        selector,\n        (element, optional) => elementNodeOf(bsContext, element, optional),\n        mode,\n    );\n  }\n\n  const adapter = bsContext.get(ElementAdapter);\n\n  return elementNodeList<ComponentNode>(\n      bsContext,\n      root,\n      selector,\n      (element, optional) => adapter(element) && elementNodeOf(bsContext, element, optional) as ComponentNode,\n      mode,\n  );\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { BootstrapContext, ComponentContext, FeatureDef, FeatureDef__symbol, StateSupport } from '@wesib/wesib';\nimport { ComponentNode } from './element-node';\nimport { elementNodeOf } from './element-node.impl';\n\n/**\n * @internal\n */\nconst ComponentTreeSupport__feature: FeatureDef = {\n  needs: StateSupport,\n  setup(setup) {\n    setup.perComponent({\n      a: ComponentNode,\n      by(context: ComponentContext) {\n        return elementNodeOf(context.get(BootstrapContext), context.element) as ComponentNode;\n      },\n    });\n  },\n};\n\n/**\n * Component tree support feature.\n *\n * Provides a [[ComponentNode]] instance for each component.\n */\nexport class ComponentTreeSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return ComponentTreeSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\n/**\n * Extracts URL contained in the hash of another URL.\n *\n * Extracted hash URL is based on origin of the original URL. Still, it may be absolute one.\n *\n * Input URL is never altered.\n *\n * @param url  An URL to extract hash from.\n *\n * @returns URL extracted from hash.\n */\nexport function getHashURL(url: URL): URL {\n  return new URL(url.hash.substring(1), url.origin);\n}\n\n/**\n * Creates an URL based on original one, but with hash substituted by the given hash URL.\n *\n * The hash URL is substituted as following:\n *\n * 1. If the hash URL's origin is not the same as the one of the base one, or if it contains a username,\n *    then absolute hash URL is substituted:\n * 2. Otherwise:\n *    - pathname is substituted, unless it is equal to `/` and no hash and search parameters present,\n *    - search parameters are substituted when at least one present,\n *    - hash is substituted only when present.\n *\n * Input URLs are never altered.\n *\n * @param url  Base URL.\n * @param hashURL  Hash URL to substitute.\n *\n * @returns URL with updated hash.\n */\nexport function setHashURL(url: URL, hashURL: URL): URL {\n  if (hashURL.origin !== url.origin || hashURL.username) {\n    return new URL('#' + hashURL, url);\n  }\n\n  const { pathname, search, hash } = hashURL;\n  const result = new URL('', url);\n\n  result.hash = (search || hash || pathname.length > 1) ? (pathname + search + hash) : (search + hash);\n\n  return result;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { Page } from './page';\nimport { PageParamContext } from './page-param-context';\n\n/**\n * A key of {@link PageParam.Ref page parameter request} property containing requested page parameter.\n */\nexport const PageParam__symbol = (/*#__PURE__*/ Symbol('page-param'));\n\n/**\n * Page navigation parameter.\n *\n * Can applied before navigation happened (i.e. to [[LeavePageEvent]]). Then it will be available to the target page\n * both before and after navigation.\n *\n * @typeparam T  Parameter value type.\n * @typeparam I  Parameter input type.\n */\nexport abstract class PageParam<T, I> implements PageParam.Ref<T, I> {\n\n  get [PageParam__symbol](): this {\n    return this;\n  }\n\n  /**\n   * Creates page parameter handle.\n   *\n   * This method is called when {@link Page.put assigning new page parameter}. It is called at most once per request,\n   * unless this parameter is assigned already. A {@link PageParam.Handle.put} method will be called instead\n   * in the latter case.\n   *\n   * @param page  A page to assign navigation parameter to.\n   * @param input  Parameter input used to construct its initial value.\n   * @param context  Page parameter context.\n   *\n   * @returns New page parameter value handle.\n   */\n  abstract create(page: Page, input: I, context: PageParamContext): PageParam.Handle<T, I>;\n\n  /**\n   * Creates default page parameter handle.\n   *\n   * This method is called when {@link Page.get requesting page parameter} which value is not present in the page.\n   * The value handle returned is assigned to the page.\n   *\n   * Returns nothing by default.\n   *\n   * @param _page  A page to assign navigation parameter to.\n   * @param _context  Page parameter context.\n   *\n   * @returns New page parameter value handle or nothing if there is no default value.\n   */\n  byDefault(_page: Page, _context: PageParamContext): PageParam.Handle<T, I> | undefined {\n    return;\n  }\n\n}\n\nexport namespace PageParam {\n\n  /**\n   * Page navigation parameter reference.\n   *\n   * @typeparam T  Parameter value type.\n   * @typeparam I  Parameter input type.\n   */\n  export interface Ref<T, I> {\n\n    /**\n     * Referred page navigation parameter instance.\n     */\n    readonly [PageParam__symbol]: PageParam<T, I>;\n\n  }\n\n  /**\n   * Page navigation parameter that has default value.\n   *\n   * @typeparam T  Parameter value type.\n   * @typeparam I  Parameter input type.\n   */\n  export interface WithDefaults<T, I> extends PageParam<T, I> {\n\n    byDefault(page: Page, context: PageParamContext): PageParam.Handle<T, I>;\n\n  }\n\n  export namespace WithDefaults {\n\n    /**\n     * A reference to page navigation parameter that has default value.\n     *\n     * @typeparam T  Parameter value type.\n     * @typeparam I  Parameter input type.\n     */\n    export interface Ref<T, I> {\n\n      /**\n       * Referred page navigation parameter instance.\n       */\n      readonly [PageParam__symbol]: WithDefaults<T, I>;\n\n    }\n\n  }\n\n  /**\n   * Page navigation parameter value handle.\n   *\n   * Holds and maintains parameter value.\n   *\n   * Created by {@link PageParam.create} method.\n   *\n   * @typeparam T  Parameter value type.\n   * @typeparam I  Parameter input type.\n   */\n  export interface Handle<T, I> {\n\n    /**\n     * Returns current parameter value.\n     *\n     * @returns Parameter value.\n     */\n    get(): T;\n\n    /**\n     * Puts page parameter value.\n     *\n     * This method is called when {@link Page.put re-assigning page parameter}. It is called when page parameter\n     * is assigned already and can be used to update it. The update logic is up to the implementation.\n     *\n     * @param input  Parameter input to use when updating its value.\n     */\n    put(input: I): void;\n\n    /**\n     * Transfers parameter to target page.\n     *\n     * This is called right before [[LeavePageEvent]] is fired for each parameter handle of current page.\n     *\n     * @param to  A page to transfer parameter to.\n     * @param when  When the transfer happens. Either `pretend`, `pre-open`, `pre-replace`, `open`, or `return`.\n     * `return` is used when return to page generated by another app version. E.g. from the page that has been\n     * reloaded.\n     *\n     * @returns New parameter handle instance for target page, or `undefined` if nothing to transfer.\n     */\n    transfer?(to: Page, when: 'pretend' | 'pre-open' | 'pre-replace' | 'enter' | 'return'): Handle<T, I> | undefined;\n\n    /**\n     * This method is called when the page this parameter created for is entered.\n     *\n     * @param page  Entered page.\n     * @param when  When the page is entered. Either `init`, `open`, `replace`, `enter`, or `return`.\n     */\n    enter?(page: Page, when: 'init' | 'open' | 'replace' | 'enter' | 'return'): void;\n\n    /**\n     * This method is called when the page this parameter created for is left.\n     */\n    leave?(): void;\n\n    /**\n     * This method is called when page navigation aborted and target page won't be reached.\n     *\n     * The handle won't be accessed after this method call.\n     *\n     * @param at  The page the browser remains at.\n     */\n    stay?(at: Page): void;\n\n    /**\n     * This method is called when the page this parameter is created for is removed from navigation history.\n     *\n     * The handle won't be accessed after this method call.\n     */\n    forget?(): void;\n\n  }\n\n}\n","import { Page } from '../page';\nimport { PageParam } from '../page-param';\n\nclass PageHashURLValueParam$ extends PageParam<URL | undefined | null, URL | string | null | undefined> {\n\n  create(\n      page: Page,\n      input: URL | null | undefined,\n  ): PageParam.Handle<URL | null | undefined, URL | string | null | undefined> {\n\n    let hashURL: URL | null | undefined;\n    const handle: PageParam.Handle<URL | null | undefined, URL | string | null | undefined> = {\n      get() {\n        return hashURL;\n      },\n      put(value) {\n        hashURL = typeof value === 'string' ? new URL(value, page.url.origin) : value;\n      },\n    };\n\n    handle.put(input);\n\n    return handle;\n  }\n\n}\n\n/**\n * @internal\n */\nexport const PageHashURLValueParam: PageParam<URL | null | undefined, URL | string | null | undefined> = (\n    /*#__PURE__*/ new PageHashURLValueParam$()\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { getHashURL } from './hash-url';\nimport { PageHashURLValueParam } from './page-hash-url-param.impl';\n\n/**\n * @internal\n */\nclass PageHashURLParam$ extends PageParam<URL, URL | string | null | undefined> {\n\n  create(page: Page, input: URL | string | null | undefined): PageParam.Handle<URL, URL | string | null | undefined> {\n\n    const handle: PageParam.Handle<URL, URL | string | null | undefined> = {\n      get() {\n        return page.get(PageHashURLValueParam) || getHashURL(page.url);\n      },\n      put(value) {\n        page.put(PageHashURLValueParam, value);\n      },\n    };\n\n    handle.put(input);\n\n    return handle;\n  }\n\n  byDefault(page: Page): PageParam.Handle<URL, URL> {\n    return this.create(page, null);\n  }\n\n}\n\n/**\n * Page parameter representing its {@link getHashURL hash URL}.\n *\n * When {@link Navigation.with set} to another value while navigating, the hash of target URL is updated, unless set to\n * `null` or `undefined`.\n *\n * Requires [[PageHashURLSupport]] for above to function properly.\n */\nexport const PageHashURLParam: PageParam.WithDefaults<URL, URL | string | null | undefined> = (\n    /*#__PURE__*/ new PageHashURLParam$()\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { BootstrapWindow } from '@wesib/wesib';\nimport { nextArg } from 'call-thru';\nimport { ContextValueOpts, ContextValues } from 'context-values';\nimport { ContextUpKey, ContextUpRef } from 'context-values/updatable';\nimport { AfterEvent, afterThe, EventKeeper, nextAfterEvent } from 'fun-events';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\nimport { PageParam } from './page-param';\nimport Target = Navigation.Target;\n\n/**\n * Navigation agent signature.\n *\n * The agent is called by navigation methods when leaving current page and may alter navigation processing.\n * E.g. change navigation target. For that it should be registered in appropriate context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by navigation method.\n */\nexport type NavigationAgent =\n/**\n * @param next  Either calls the next agent in chain, or applies the final navigation target if this agent is the last\n * one. Not calling this function effectively prevents navigation.\n * Accepts an optional [[Navigation.Target]] parameter. The original target will be used instead when omitted.\n * @param when  When navigation occurred. Either `pretend`, `pre-open`, or `pre-replace`.\n * @param from  The page to leave.\n * @param to  Navigation target page.\n */\n    (\n        this: void,\n        next: (this: void, target?: Target) => void,\n        when: 'pretend' | 'pre-open' | 'pre-replace',\n        from: Page,\n        to: Page,\n    ) => void;\n\n/**\n * @internal\n */\nclass NavigationAgentKey\n    extends ContextUpKey<NavigationAgent.Combined, NavigationAgent>\n    implements ContextUpRef<NavigationAgent.Combined, NavigationAgent> {\n\n  readonly upKey: ContextUpKey.UpKey<NavigationAgent.Combined, NavigationAgent>;\n\n  constructor(name: string) {\n    super(name);\n    this.upKey = this.createUpKey(\n        opts => {\n\n          const { document } = opts.context.get(BootstrapWindow);\n\n          return opts.seed.keep.thru(\n              (...agents) => {\n                if (agents.length) {\n                  return nextArg(combinedAgent);\n                }\n\n                const defaultProvider = (): AfterEvent<[NavigationAgent.Combined]> => afterThe(defaultNavigationAgent);\n\n                return nextAfterEvent(opts.byDefault(defaultProvider) || defaultProvider());\n\n                function combinedAgent(\n                    next: (this: void, target: Navigation.URLTarget) => void,\n                    when: 'pretend' | 'pre-open' | 'pre-replace',\n                    from: Page,\n                    to: Page,\n                ): void {\n\n                  return navigate(0, to);\n\n                  function navigate(agentIdx: number, agentTo: Page): void {\n\n                    const agent = agents[agentIdx];\n\n                    if (!agent) {\n                      return next(agentTo);\n                    }\n\n                    agent(\n                        (\n                            {\n                              url: nextURL = agentTo.url,\n                              title: nextTitle = agentTo.title,\n                              data: nextData = agentTo.data,\n                            }: Navigation.Target = agentTo,\n                        ) => navigate(\n                            agentIdx + 1,\n                            {\n                              url: new URL(String(nextURL), document.baseURI),\n                              title: nextTitle,\n                              data: nextData,\n                              get visited() {\n                                return agentTo.visited;\n                              },\n                              get current() {\n                                return agentTo.current;\n                              },\n                              get<T>(ref: PageParam.Ref<T, unknown>): T | undefined {\n                                return agentTo.get(ref);\n                              },\n                              put(ref, input) {\n                                agentTo.put(ref, input);\n                              },\n                            },\n                        ),\n                        when,\n                        from,\n                        agentTo,\n                    );\n                  }\n                }\n              },\n          );\n        },\n    );\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          NavigationAgent.Combined,\n          EventKeeper<NavigationAgent[]> | NavigationAgent,\n          AfterEvent<NavigationAgent[]>>,\n  ): NavigationAgent.Combined {\n\n    let delegated: NavigationAgent.Combined;\n\n    opts.context.get(\n        this.upKey,\n        'or' in opts ? { or: opts.or != null ? afterThe(opts.or) : opts.or } : undefined,\n    )!(agent => delegated = agent);\n\n    return (next, when, from, to) => delegated(next, when, from, to);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultNavigationAgent(\n    next: (this: void, target: Navigation.URLTarget) => void,\n    _when: 'pretend' | 'pre-open' | 'pre-replace',\n    _from: Page,\n    to: Page,\n): void {\n  next(to);\n}\n\nexport namespace NavigationAgent {\n\n  /**\n   * Combined navigation agent signature.\n   *\n   * This is what is available under [[NavigationAgent]] key.\n   */\n  export type Combined =\n  /**\n   * @param next  Either calls the next agent in chain, or applies the final navigation target if this agent is the last\n   * one. Not calling this function effectively prevents navigation.\n   * Accepts an optional [[Navigation.Target]] parameter. The original target will be used instead when omitted.\n   * @param when  When navigation occurred. Either `pretend`, `pre-open`, or `pre-replace`.\n   * @param from  The page to leave.\n   * @param to  Navigation target page.\n   */\n      (\n          this: void,\n          next: (this: void, target: Navigation.URLTarget) => void,\n          when: 'pretend' | 'pre-open' | 'pre-replace',\n          from: Page,\n          to: Page,\n      ) => void;\n\n}\n\n/**\n * A key of context value containing an [[NavigationAgent]] instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the navigation.\n */\nexport const NavigationAgent: ContextUpRef<NavigationAgent.Combined, NavigationAgent> = (\n    /*#__PURE__*/ new NavigationAgentKey('navigation-agent')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { AfterEvent, AfterEvent__symbol, EventKeeper, EventSender, OnEvent, OnEvent__symbol } from 'fun-events';\nimport { OnDomEvent } from 'fun-events/dom';\nimport { EnterPageEvent, LeavePageEvent, NavigationEvent, StayOnPageEvent } from './navigation.event';\nimport { Page } from './page';\nimport { PageParam } from './page-param';\n\n/**\n * @internal\n */\nconst Navigation__key = (/*#__PURE__*/ new SingleContextKey<Navigation>('navigation'));\n\n/**\n * Browser navigation service.\n *\n * Expected to be used as a [History] and [Location] APIs replacement.\n *\n * Fires additional navigation events the browser does not support natively.\n *\n * Implements an `EventSender` interface by sending {@link NavigationEvent navigation events} to registered receivers.\n *\n * Implements an `EventKeeper` interface by sending current {@link Page page} to registered receivers.\n *\n * Available as bootstrap context value when [[NavigationSupport]] feature is enabled.\n *\n * [History]: https://developer.mozilla.org/en-US/docs/Web/API/History\n * [Location]: https://developer.mozilla.org/en-US/docs/Web/API/Location\n */\nexport abstract class Navigation implements EventSender<[NavigationEvent]>, EventKeeper<[Page]> {\n\n  static get [ContextKey__symbol](): ContextKey<Navigation> {\n    return Navigation__key;\n  }\n\n  /**\n   * Current page.\n   */\n  abstract readonly page: Page;\n\n  /**\n   * The number of element in navigation history.\n   */\n  abstract readonly length: number;\n\n  /**\n   * An `OnDomEvent` registrar of enter page event receivers.\n   */\n  abstract readonly onEnter: OnDomEvent<EnterPageEvent>;\n\n  /**\n   * An `OnDomEvent` registrar of leave page event receivers.\n   *\n   * These receivers may cancel navigation by calling `preventDefault()` method of received event.\n   */\n  abstract readonly onLeave: OnDomEvent<LeavePageEvent>;\n\n  /**\n   * An `OnDomEvent` registrar of stay on page event receivers.\n   *\n   * These receivers are informed when navigation has been cancelled by one of leave page event receivers,\n   * navigation failed due to e.g. invalid URL, or when another navigation request initiated before the page left.\n   */\n  abstract readonly onStay: OnDomEvent<StayOnPageEvent>;\n\n  /**\n   * An `OnEvent` registrar of navigation events receivers.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly on: OnEvent<[NavigationEvent]>;\n\n  get [OnEvent__symbol](): OnEvent<[NavigationEvent]> {\n    return this.on;\n  }\n\n  /**\n   * An `AfterEvent` registrar of current page receivers.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[Page]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[Page]> {\n    return this.read;\n  }\n\n  /**\n   * Goes to the previous page in navigation history.\n   *\n   * Calling this method is the same as calling `go(-1)`.\n   */\n  back(): void {\n    this.go(-1);\n  }\n\n  /**\n   * Goes to the next page in navigation history.\n   *\n   * Calling this method is the same as calling `go(1)`.\n   */\n  forward(): void {\n    this.go(1);\n  }\n\n  /**\n   * Loads a page from navigation history, identified by its relative location to the current page.\n   *\n   * For example `-1` navigates to previous page, while `1` navigates to the next one. If you specify an out-of-bounds\n   * value (for instance, specifying -1 when there are no previously-visited pages in navigation history), this method\n   * silently has no effect.\n   *\n   * @param delta  Relative location in navigation history to navigate to. The absent value or value of `0` reloads\n   * the current page.\n   */\n  abstract go(delta?: number): void;\n\n  /**\n   * Reloads current page.\n   *\n   * Calling this method is the same as calling `go()`.\n   */\n  reload(): void {\n    this.go();\n  }\n\n  /**\n   * Opens a page by navigating to the given `target`.\n   *\n   * Appends an entry to navigation history.\n   *\n   * @param target  Either navigation target or URL to navigate to.\n   * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually navigate.\n   * Then navigates to the `target`, unless the event cancelled.\n   * @fires NavigateEvent@wesib:navigate  On window object when navigation succeed.\n   *\n   * @returns A promise resolved to navigated page, or to `null` otherwise.\n   */\n  abstract open(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  /**\n   * Replaces current navigation history entry with the given `target`.\n   *\n   * @param target  Either navigation target or URL to replace current history entry with.\n   * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually update the history.\n   * Then navigates to the `target`, unless the event cancelled.\n   * @fires NavigateEvent@wesib:navigate  On window object when history updated.\n   *\n   * @returns A promise resolved to navigated page, or to `null` otherwise.\n   */\n  abstract replace(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  /**\n   * Replaces current page URL with the given one.\n   *\n   * Does not alter current page state, and does not trigger any events.\n   *\n   * @param url  An URL to replace the\n   *\n   * @returns Current page with updated URL.\n   */\n  abstract update(url: string | URL): Page;\n\n  /**\n   * Creates parameterized navigation instance and assigns a page parameter to apply to target page.\n   *\n   * @typeparam T  Parameter value type.\n   * @typeparam I  Parameter input type.\n   * @param ref  A reference to page navigation parameter to apply.\n   * @param input  Parameter input to use when constructing its value.\n   *\n   * @returns New parameterized navigation instance.\n   */\n  abstract with<T, I>(ref: PageParam.Ref<T, I>, input: I): Navigation.Parameterized;\n\n}\n\nexport namespace Navigation {\n\n  /**\n   * Parameterized navigation.\n   *\n   * Allows to assign target page parameters prior to navigating to it.\n   */\n  export interface Parameterized {\n\n    /**\n     * Applies parameter to navigation target page.\n     *\n     * @typeparam T  Parameter value type.\n     * @typeparam I  Parameter input type.\n     * @param ref  A reference to page navigation parameter to apply.\n     * @param input  Parameter input to use when constructing its value.\n     *\n     * @returns New parameterized navigation instance.\n     */\n    with<T, I>(ref: PageParam.Ref<T, I>, input: I): Parameterized;\n\n    /**\n     * Opens a page by navigating to the given `target` with provided page parameters.\n     *\n     * Appends an entry to navigation history.\n     *\n     * @param target  Either navigation target or URL to navigate to. Navigates to current page URL when omitted.\n     * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually navigate.\n     * Then navigates to the `target`, unless the event cancelled.\n     * @fires NavigateEvent@wesib:navigate  On window object when navigation succeed.\n     *\n     * @returns A promise resolved to navigated page, or to `null` otherwise.\n     */\n    open(target?: Navigation.Target | string | URL): Promise<Page | null>;\n\n    /**\n     * Replaces the most recent entry in navigation history with the given `target` and provided page parameters.\n     *\n     * @param target  Either navigation target or URL to replace the latest history entry with. Navigates to current\n     * page URL when omitted.\n     * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually update the history.\n     * Then navigates to the `target`, unless the event cancelled.\n     * @fires NavigateEvent@wesib:navigate  On window object when history updated.\n     *\n     * @returns A promise resolved to navigated page, or to `null` otherwise.\n     */\n    replace(target?: Navigation.Target | string | URL): Promise<Page | null>;\n\n    /**\n     * Pretends navigation.\n     *\n     * Prepares navigation and parameters, but does not actually navigate. Instead it calls the provided callback\n     * function.\n     *\n     * This is useful e.g. to build target URL or evaluate target page parameter.\n     *\n     * @param target  Either navigation target or URL to pretend navigation to.\n     * @param callback A callback function receiving two pages as parameters: the page to leave, and the page to open.\n     * The latter one is valid only inside callback, as its parameters will be cleaned up right after callback returns.\n     * The value returned from callback is then returned from this method call. It may be used to collect some data\n     * from target page.\n     *\n     * @returns Either the value returned by callback, or `undefined` when navigation failed.\n     */\n    pretend<T>(\n        target: Navigation.Target | string | URL,\n        callback: (this: void, from: Page, to: Page) => T,\n    ): T | undefined;\n\n    /**\n     * Pretends navigation to the same page.\n     *\n     * Prepares navigation and parameters, but does not actually navigate. Instead it calls the provided callback\n     * function.\n     *\n     * This is useful e.g. to build target URL or evaluate target page parameter.\n     *\n     * @param callback A callback function receiving two pages as parameters: the page to leave, and the page to open.\n     * The latter one is valid only inside callback, as its parameters will be cleaned up right after callback returns.\n     * The value returned from callback is then returned from this method call. It may be used to collect some data\n     * from target page.\n     *\n     * @returns Either the value returned by callback, or `undefined` when navigation failed.\n     */\n    pretend<T>(\n        callback: (this: void, from: Page, to: Page) => T,\n    ): T | undefined;\n\n    /**\n     * Pretends navigation and builds navigation target.\n     *\n     * Prepares navigation and parameters, but does not actually navigate. Instead it calls the provided callback\n     * function.\n     *\n     * This is useful e.g. to build target URL or evaluate target page parameter.\n     *\n     * @param target  Either navigation target or URL to pretend navigation to. Prepends navigation to current page\n     * when omitted.\n     *\n     * @returns Either Navigation target with URL value, or `undefined` when navigation failed.\n     */\n    pretend(\n        target?: Navigation.Target | string | URL,\n    ): URLTarget | undefined;\n\n  }\n\n  /**\n   * Navigation target.\n   *\n   * This is passed to [[Navigation.open]] and [[Navigation.replace]] methods.\n   */\n  export interface Target {\n\n    /**\n     * An URL to update the browser location string to.\n     */\n    readonly url?: string | URL;\n\n    /**\n     * Opaque data to apply to session history. I.e. either push or replace.\n     */\n    readonly data?: any;\n\n    /**\n     * New window title.\n     */\n    readonly title?: string;\n\n  }\n\n  /**\n   * Navigation target with URL value.\n   */\n  export interface URLTarget extends Target {\n\n    readonly url: URL;\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextValues } from 'context-values';\n\n/**\n * Page parameter context.\n *\n * Provides values available in bootstrap context.\n */\nexport abstract class PageParamContext extends ContextValues {\n}\n","import { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { itsEach } from 'a-iterable';\nimport { noop } from 'call-thru';\nimport { ContextKey, ContextKey__symbol, ContextRegistry, SingleContextKey } from 'context-values';\nimport { ValueTracker } from 'fun-events';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\nimport { PageParam, PageParam__symbol } from './page-param';\nimport { PageParamContext } from './page-param-context';\n\nconst NavHistory__key = (/*#__PURE__*/ new SingleContextKey<NavHistory>(\n    'nav-history',\n    {\n      byDefault: bootstrapDefault(ctx => new NavHistory(ctx)),\n    },\n));\n\n/**\n * @internal\n */\nexport const NAV_DATA_KEY = 'wesib:navigation:data' as const;\n\n/**\n * @internal\n */\nexport interface PartialNavData {\n  readonly uid?: string;\n  readonly id?: number;\n  readonly data: any;\n}\n\n/**\n * @internal\n */\nexport interface NavData extends PartialNavData {\n  readonly uid: string;\n  readonly id: number;\n}\n\n/**\n * @internal\n */\nexport interface NavDataEnvelope {\n  readonly [NAV_DATA_KEY]: NavData;\n}\n\nfunction extractNavData(state: any): PartialNavData {\n  return state == null || typeof state !== 'object' ? { data: state } : state[NAV_DATA_KEY];\n}\n\n/**\n * @internal\n */\nexport class NavHistory {\n\n  static get [ContextKey__symbol](): ContextKey<NavHistory> {\n    return NavHistory__key;\n  }\n\n  private readonly _document: Document;\n  private readonly _location: Location;\n  private readonly _history: History;\n  private readonly _entries = new Map<number, PageEntry>();\n  private readonly _uid: string;\n  private _lastId = 0;\n\n  constructor(private readonly _context: BootstrapContext) {\n    const window = _context.get(BootstrapWindow);\n\n    this._document = window.document;\n    this._location = window.location;\n    this._history = window.history;\n    this._uid = btoa(String(Math.random()));\n  }\n\n  init(): PageEntry {\n\n    const { data } = extractNavData(this._history.state);\n    const entry = this.newEntry({\n      url: new URL(this._location.href),\n      data,\n      title: this._document.title,\n    });\n\n    this._entries.set(entry.id, entry);\n    entry.schedule(() => {\n      entry.enter('init');\n      this._history.replaceState(this._historyState(entry), '');\n    });\n\n    return entry;\n  }\n\n  newEntry(target: Navigation.URLTarget): PageEntry {\n    return new PageEntry(this._context, ++this._lastId, target);\n  }\n\n  open(\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const { page: { title = '', url } } = toEntry;\n\n    this._history.pushState(\n        this._historyState(toEntry),\n        title,\n        url.href,\n    );\n\n    this._enter('open', toEntry, tracker);\n  }\n\n  private _enter(\n      when: 'open' | 'enter',\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const fromEntry = tracker.it;\n\n    this._entries.set(toEntry.id, toEntry);\n\n    try {\n      // Forget all entries starting from next one\n      for (let e = fromEntry.next; e; e = e.next) {\n        this._forget(e);\n      }\n    } finally {\n      toEntry.prev = fromEntry;\n      fromEntry.next = toEntry;\n      toEntry.schedule(() => {\n        try {\n          fromEntry.leave();\n        } finally {\n          toEntry.enter(when);\n        }\n      });\n      tracker.it = toEntry;\n    }\n  }\n\n  replace(\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const fromEntry = tracker.it;\n    const { page: { title = '', url } } = toEntry;\n\n    this._history.replaceState(\n        this._historyState(toEntry),\n        title,\n        url.href,\n    );\n\n    this._entries.set(toEntry.id, toEntry);\n\n    const prev = fromEntry.prev;\n\n    if (prev) {\n      toEntry.prev = prev;\n      prev.next = toEntry;\n    }\n\n    toEntry.schedule(() => {\n      try {\n        fromEntry.leave();\n      } finally {\n        try {\n          this._forget(fromEntry);\n        } finally {\n          toEntry.enter('replace');\n        }\n      }\n    });\n    tracker.it = toEntry;\n  }\n\n  popState(\n      popState: PopStateEvent,\n      tracker: ValueTracker<PageEntry>,\n  ): PageEntry | undefined {\n\n    const { state } = popState;\n\n    if (state == null) {\n      // Hash change\n      if (this._history.state == null) {\n        // Not a return\n        return this._changeHash(tracker);\n      }\n      return; // Already handled by `hashchange` handler\n    }\n\n    const fromEntry = tracker.it;\n    const { uid, data, id: pageId } = extractNavData(state);\n    let toEntry: PageEntry;\n\n    const existingEntry = uid === this._uid && pageId != null ? this._entries.get(pageId) : undefined;\n\n    if (existingEntry) {\n      toEntry = existingEntry;\n    } else {\n      // Returning to page existed in previous app version\n      toEntry = this.newEntry({\n        url: new URL(this._location.href),\n        data,\n        title: this._document.title,\n      });\n      fromEntry.transfer(toEntry, 'return');\n      this._entries.set(toEntry.id, toEntry);\n      this._history.replaceState(this._historyState(toEntry), '');\n    }\n\n    toEntry.schedule(() => {\n      try {\n        fromEntry.leave();\n      } finally {\n        toEntry.enter('return');\n      }\n    });\n\n    tracker.it = toEntry;\n\n    return toEntry;\n  }\n\n  public hashChange(tracker: ValueTracker<PageEntry>): PageEntry | void {\n    if (this._history.state == null) {\n      // Not a return\n      return this._changeHash(tracker);\n    }\n    // Otherwise, a `popstate` event is also triggered,\n    // and its handler would do the job (or already did).\n  }\n\n  public update(tracker: ValueTracker<PageEntry>, url: URL): PageEntry {\n\n    const oldEntry = tracker.it;\n    const newEntry = new PageEntry(this._context, ++this._lastId, { ...oldEntry.page, url }, oldEntry);\n\n    this._entries.set(newEntry.id, newEntry);\n    this._history.replaceState(this._historyState(newEntry), '', url.href);\n    this._entries.delete(oldEntry.id);\n\n    return tracker.it = newEntry;\n  }\n\n  private _changeHash(tracker: ValueTracker<PageEntry>): PageEntry {\n\n    const fromEntry = tracker.it;\n    const toEntry = this.newEntry({\n      url: new URL(this._location.href),\n      data: null,\n      title: this._document.title,\n    });\n\n    try {\n      fromEntry.transfer(toEntry, 'enter');\n    } finally {\n      this._history.replaceState(this._historyState(toEntry), '');\n      this._enter('enter', toEntry, tracker);\n    }\n\n    return toEntry;\n  }\n\n  private _forget(entry: PageEntry): void {\n    this._entries.delete(entry.id);\n    entry.forget();\n  }\n\n  private _historyState({ id, page: { data } }: PageEntry): NavDataEnvelope {\n    return {\n      [NAV_DATA_KEY]: {\n        uid: this._uid,\n        id,\n        data,\n      },\n    };\n  }\n\n}\n\nconst enum PageStatus {\n  New,\n  Visited,\n  Current,\n}\n\n/**\n * @internal\n */\nexport class PageEntry {\n\n  next?: PageEntry;\n  prev?: PageEntry;\n  private _status: PageStatus = PageStatus.New;\n  readonly page: Page;\n  private readonly _params: Map<PageParam<any, any>, PageParam.Handle<any, any>>;\n  private _update: () => void = noop;\n\n  constructor(\n      private readonly _bsContext: BootstrapContext,\n      readonly id: number,\n      target: Navigation.URLTarget,\n      proto?: PageEntry,\n  ) {\n    this._params = proto ? proto._params : new Map<PageParam<any, any>, PageParam.Handle<any, any>>();\n\n    const entry = this;\n\n    this.page = {\n      get url() {\n        return target.url;\n      },\n      get title() {\n        return target.title;\n      },\n      get data() {\n        return target.data;\n      },\n      get visited() {\n        return !!entry._status;\n      },\n      get current() {\n        return entry._status === PageStatus.Current;\n      },\n      get<T>(ref: PageParam.Ref<T, unknown>): T | undefined {\n        return entry.get(ref);\n      },\n      put(ref, input) {\n        entry.put(ref, input);\n      },\n    };\n  }\n\n  get<T>(ref: PageParam.Ref<T, unknown>): T | undefined {\n\n    const param = ref[PageParam__symbol];\n    const handle: PageParam.Handle<T, unknown> | undefined = this._params.get(param);\n\n    if (handle) {\n      return handle.get();\n    }\n\n    const newHandle = param.byDefault(this.page, this._newContext());\n\n    return newHandle && this._init(param, newHandle);\n  }\n\n  put<T, I>(ref: PageParam.Ref<T, I>, input: I): T {\n\n    const param = ref[PageParam__symbol];\n    const handle: PageParam.Handle<T, I> | undefined = this._params.get(param);\n\n    if (handle) {\n      handle.put(input);\n      return handle.get();\n    }\n\n    return this._init(param, param.create(this.page, input, this._newContext()));\n  }\n\n  private _newContext(): PageParamContext {\n\n    const registry = new ContextRegistry<ParamContext>(this._bsContext);\n\n    class ParamContext extends PageParamContext {\n\n      readonly get: PageParamContext['get'] = registry.newValues().get;\n\n    }\n\n    return new ParamContext();\n  }\n\n  private _init<T, I>(param: PageParam<T, I>, handle: PageParam.Handle<T, I>): T {\n    this._params.set(param, handle);\n\n    if (this.page.current && handle.enter) {\n      handle.enter(this.page, 'init');\n    }\n\n    return handle.get();\n  }\n\n  transfer(to: PageEntry, when: 'pretend' | 'pre-open' | 'pre-replace' | 'enter' | 'return'): void {\n    itsEach(this._params.entries(), ([param, handle]) => {\n      if (handle.transfer) {\n\n        const transferred = handle.transfer(to.page, when);\n\n        if (transferred) {\n          to._params.set(param, transferred);\n        }\n      }\n    });\n  }\n\n  stay(at: Page): void {\n    itsEach(this._params.values(), handle => handle.stay && handle.stay(at));\n  }\n\n  enter(when: 'init' | 'open' | 'replace' | 'enter' | 'return'): void {\n    this._status = PageStatus.Current;\n    itsEach(this._params.values(), handle => handle.enter && handle.enter(this.page, when));\n  }\n\n  leave(): void {\n    this._status = PageStatus.Visited;\n    itsEach(this._params.values(), handle => handle.leave && handle.leave());\n  }\n\n  forget(): void {\n    itsEach(this._params.values(), handle => handle.forget && handle.forget());\n    this._params.clear();\n  }\n\n  schedule(update: () => void): void {\n    this._update = update;\n  }\n\n  apply(): void {\n\n    const update = this._update;\n\n    this._update = noop;\n    update();\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { Navigation } from './navigation';\nimport { Page } from './page';\n\n/**\n * Navigation event.\n */\nexport type NavigationEvent = LeavePageEvent | EnterPageEvent | StayOnPageEvent;\n\n/**\n * Navigation event type.\n */\nexport const enum NavigationEventType {\n\n  /**\n   * {@link EnterPageEvent Enter page event} type.\n   */\n  EnterPage = 'wesib:enterPage',\n\n  /**\n   * {@link LeavePageEvent Leave page event} type.\n   */\n  LeavePage = 'wesib:leavePage',\n\n  /**\n   * {@link StayOnPageEvent Stay on page event} type.\n   */\n  StayOnPage = 'wesib:stayOnPage',\n\n}\n\n/**\n * An event fired when navigation target reached by entering destination page.\n *\n * @event EnterPageEvent#wesib:enterPage\n */\nexport class EnterPageEvent extends Event {\n\n  /**\n   * When navigation event occurred.\n   *\n   * Can be one of:\n   * - `open` when opening a new page,\n   * - `replace` when replacing navigation history entry,\n   * - `enter` when entering new page by user action (e.g. hashchange event),\n   * - `return` when navigated to previously visited entry in navigation history.\n   */\n  readonly when: 'open' | 'replace' | 'enter' | 'return';\n\n  /**\n   * Entered page.\n   */\n  readonly to: Page;\n\n  /**\n   * Constructs enter page event.\n   *\n   * @param type  Event type.\n   * @param init  Initialization options.\n   */\n  constructor(type: string, init: EnterPageEventInit) {\n    super(type, { ...init, cancelable: false });\n    this.when = init.when;\n    this.to = init.to;\n  }\n\n}\n\n/**\n * {@link EnterPageEvent Enter page event} initialization options.\n */\nexport interface EnterPageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * When navigation event occurred.\n   *\n   * Can be one of:\n   * - `open` when opening a new page,\n   * - `replace` when replacing navigation history entry,\n   * - `enter` when entering new page by user action (e.g. hashchange event),\n   * - `return` when navigated to previously visited entry in navigation history.\n   */\n  readonly when: 'open' | 'replace' | 'enter' | 'return';\n\n  /**\n   * Entered page.\n   */\n  readonly to: Page;\n\n}\n\n/**\n * An event fired right before leaving the page in order to navigate to another one.\n *\n * This event can be cancelled in order to prevent actual navigation or history update. The navigation is also\n * cancelled when another navigation initiated by one of the handlers of this event.\n *\n * @event LeavePageEvent#wesib:leavePage\n */\nexport class LeavePageEvent extends Event {\n\n  /**\n   * When navigation event occurred. Either `pre-open` when leaving a page to open a new one, or `pre-replace` when\n   * leaving a page to replace it with another history entry.\n   */\n  readonly when: 'pre-open' | 'pre-replace';\n\n  /**\n   * The page to leave.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target page.\n   */\n  readonly to: Page;\n\n  /**\n   * Constructs leave page event.\n   *\n   * @param type  Event type.\n   * @param init  Initialization options.\n   */\n  constructor(type: string, init: LeavePageEventInit) {\n    super(type, { ...init, cancelable: true });\n    this.when = init.when;\n    this.from = init.from;\n    this.to = init.to;\n  }\n\n}\n\n/**\n * {@link LeavePageEvent Leave page event} initialization options.\n */\nexport interface LeavePageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * When navigation event occurred. Either `pre-open` when leaving a page to open a new one, or `pre-replace` when\n   * leaving a page to replace it with another history entry.\n   */\n  readonly when: 'pre-open' | 'pre-replace';\n\n  /**\n   * The page to leave.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target page.\n   */\n  readonly to: Page;\n\n}\n\n/**\n * An event fired when navigation cancelled or failed.\n *\n * @event StayOnPageEvent#wesib:stayOnPage\n */\nexport class StayOnPageEvent extends Event {\n\n  /**\n   * When navigation event occurred. Always `stay`.\n   */\n  get when(): 'stay' {\n    return 'stay';\n  }\n\n  /**\n   * The page to stay at.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target.\n   */\n  readonly to: Navigation.URLTarget;\n\n  /**\n   * A reason of navigation failure. This is set when navigation failed due to some error.\n   */\n  readonly reason?: any;\n\n  /**\n   * Constructs stay on page event.\n   *\n   * @param type  Event type.\n   * @param init  Initialization options.\n   */\n  constructor(type: string, init: StayOnPageEventInit) {\n    super(type, { ...init, cancelable: true });\n    this.from = init.from;\n    this.to = init.to;\n    this.reason = init.reason;\n  }\n\n}\n\n/**\n * {@link StayOnPageEvent Stay on page event} initialization options.\n */\nexport interface StayOnPageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * The page to stay at.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target.\n   */\n  readonly to: Navigation.URLTarget;\n\n  /**\n   * A reason of navigation failure. This is set when navigation failed due to some error.\n   */\n  readonly reason?: any;\n\n}\n","import { BootstrapContext, BootstrapWindow, mergeFunctions } from '@wesib/wesib';\nimport { noop } from 'call-thru';\nimport { AfterEvent, onAny, OnEvent, trackValue } from 'fun-events';\nimport { DomEventDispatcher, OnDomEvent } from 'fun-events/dom';\nimport { NavHistory, PageEntry } from './nav-history.impl';\nimport { Navigation as Navigation_ } from './navigation';\nimport { NavigationAgent } from './navigation-agent';\nimport {\n  EnterPageEvent,\n  LeavePageEvent,\n  NavigationEvent,\n  NavigationEventType,\n  StayOnPageEvent,\n} from './navigation.event';\nimport { Page } from './page';\nimport { PageParam } from './page-param';\n\nexport function createNavigation(context: BootstrapContext): Navigation_ {\n\n  const window = context.get(BootstrapWindow);\n  const { document, history } = window;\n  const dispatcher = new DomEventDispatcher(window);\n  const navHistory = context.get(NavHistory);\n  const agent = context.get(NavigationAgent);\n  const onEnter = dispatcher.on<EnterPageEvent>(NavigationEventType.EnterPage);\n  const onLeave = dispatcher.on<LeavePageEvent>(NavigationEventType.LeavePage);\n  const onStay = dispatcher.on<StayOnPageEvent>(NavigationEventType.StayOnPage);\n  const onEvent = onAny<[NavigationEvent]>(onEnter, onLeave, onStay);\n  const nav = trackValue<PageEntry>(navHistory.init());\n\n  nav.read(nextEntry => nextEntry.apply()); // The very first page entry receiver applies scheduled updates to page\n\n  const readPage: AfterEvent<[Page]> = nav.read.keep.thru(entry => entry.page);\n  let next: Promise<any> = Promise.resolve();\n\n  dispatcher.on<PopStateEvent>('popstate')(popState => {\n\n    const entry = navHistory.popState(popState, nav);\n\n    if (entry) {\n      dispatcher.dispatch(new EnterPageEvent(\n          NavigationEventType.EnterPage,\n          {\n            when: popState.state != null ? 'return' : 'enter',\n            to: entry.page,\n          },\n      ));\n    }\n  });\n\n  dispatcher.on('hashchange')(() => {\n\n    const entry = navHistory.hashChange(nav);\n\n    if (entry) {\n      dispatcher.dispatch(new EnterPageEvent(\n          NavigationEventType.EnterPage,\n          {\n            when: 'enter',\n            to: entry.page,\n          },\n      ));\n    }\n  });\n\n  type NavTarget = { -readonly [K in keyof Navigation_.URLTarget]: Navigation_.URLTarget[K] };\n\n  class Navigation extends Navigation_ {\n\n    get page(): Page {\n      return nav.it.page;\n    }\n\n    get length(): number {\n      return history.length;\n    }\n\n    get onEnter(): OnDomEvent<EnterPageEvent> {\n      return onEnter;\n    }\n\n    get onLeave(): OnDomEvent<LeavePageEvent> {\n      return onLeave;\n    }\n\n    get onStay(): OnDomEvent<StayOnPageEvent> {\n      return onStay;\n    }\n\n    get on(): OnEvent<[NavigationEvent]> {\n      return onEvent;\n    }\n\n    get read(): AfterEvent<[Page]> {\n      return readPage;\n    }\n\n    go(delta?: number): void {\n      history.go(delta);\n    }\n\n    open(target: Navigation_.Target | string | URL): Promise<Page | null> {\n      return navigate('pre-open', 'open', target);\n    }\n\n    replace(target: Navigation_.Target | string | URL): Promise<Page | null> {\n      return navigate('pre-replace', 'replace', target);\n    }\n\n    update(url: string | URL): Page {\n      return navHistory.update(nav, toURL(url)).page;\n    }\n\n    with<T, I>(ref: PageParam.Ref<T, I>, input: I): Navigation_.Parameterized {\n      return withParam(page => page.put(ref, input));\n    }\n\n  }\n\n  return new Navigation();\n\n  function withParam(applyParams: (page: Page) => void): Navigation_.Parameterized {\n    return {\n      with<TT, II>(ref: PageParam.Ref<TT, II>, input: II): Navigation_.Parameterized {\n        return withParam(mergeFunctions(applyParams, page => page.put(ref, input)));\n      },\n      open(target?: Navigation_.Target | string | URL) {\n        return navigate('pre-open', 'open', target, applyParams);\n      },\n      replace(target?: Navigation_.Target | string | URL) {\n        return navigate('pre-replace', 'replace', target, applyParams);\n      },\n      pretend<T>(\n          targetOrCallback?: Navigation_.Target | string | URL | ((this: void, from: Page, to: Page) => T),\n          callback: (this: void, from: Page, to: Page) => T = (_from, to) => to as unknown as T,\n      ): T | undefined {\n\n        let target: Navigation_.Target | string | URL | undefined;\n\n        if (typeof targetOrCallback === 'function') {\n          callback = targetOrCallback;\n          target = undefined;\n        } else {\n          target = targetOrCallback;\n        }\n\n        const navTarget = navTargetOf(target);\n        const fromEntry = nav.it;\n        const toEntry = newEntry('pretend', fromEntry, navTarget, applyParams);\n\n        try {\n          return applyAgent('pretend', fromEntry, navTarget, toEntry)\n              ? callback(fromEntry.page, toEntry.page)\n              : undefined;\n        } finally {\n          toEntry.stay(nav.it.page);\n        }\n      },\n    };\n  }\n\n  function toURL(url: string | URL | undefined): URL {\n    if (typeof url === 'string') {\n      return new URL(url, document.baseURI);\n    }\n    return url || nav.it.page.url;\n  }\n\n  function navTargetOf(target?: Navigation_.Target | string | URL): NavTarget {\n    if (target == null || typeof target === 'string' || target instanceof URL) {\n      return { url: toURL(target) };\n    }\n    if (target.url instanceof URL) {\n      return target as Navigation_.URLTarget;\n    }\n    return { ...target, url: toURL(target.url) };\n  }\n\n  function navigate(\n      whenLeave: 'pre-open' | 'pre-replace',\n      when: 'open' | 'replace',\n      target?: Navigation_.Target | string | URL,\n      applyParams: (page: Page) => void = noop,\n  ): Promise<Page | null> {\n\n    const navTarget = navTargetOf(target);\n    const promise = next = next.then(doNavigate, doNavigate);\n\n    return promise;\n\n    function doNavigate(): Page | null {\n\n      let toEntry: PageEntry | undefined = undefined;\n\n      try {\n\n        const prepared = prepare();\n\n        if (!prepared) {\n          return prepared; // Navigation cancelled\n        }\n\n        toEntry = prepared;\n        navHistory[when](toEntry, nav);\n        dispatcher.dispatch(new EnterPageEvent(\n            NavigationEventType.EnterPage,\n            {\n              when,\n              to: toEntry.page,\n            },\n        ));\n\n        return toEntry.page;\n      } catch (e) {\n        stay(toEntry, e);\n        throw e;\n      }\n    }\n\n    function prepare(): PageEntry | null {\n      if (next !== promise) {\n        return stay();\n      }\n\n      const fromEntry = nav.it;\n      const toEntry = newEntry(whenLeave, fromEntry, navTarget, applyParams);\n      const leavePage = new LeavePageEvent(\n          NavigationEventType.LeavePage,\n          {\n            when: whenLeave,\n            from: fromEntry.page,\n            to: toEntry.page,\n          },\n      );\n\n      if (!dispatcher.dispatch(leavePage)\n          || next !== promise\n          || !applyAgent(whenLeave, fromEntry, navTarget, toEntry)) {\n        return stay(toEntry);\n      }\n\n      return toEntry;\n    }\n\n    function stay(toEntry?: PageEntry, reason?: any): null {\n      if (toEntry) {\n        toEntry.stay(nav.it.page);\n      }\n\n      dispatcher.dispatch(new StayOnPageEvent(\n          NavigationEventType.StayOnPage,\n          {\n            from: nav.it.page,\n            to: navTarget,\n            reason,\n          },\n      ));\n\n      return null;\n    }\n\n  }\n\n  function newEntry(\n      whenLeave: 'pretend' | 'pre-open' | 'pre-replace',\n      fromEntry: PageEntry,\n      navTarget: NavTarget,\n      applyParams: (page: Page) => void,\n  ): PageEntry {\n\n    const toEntry = navHistory.newEntry(navTarget);\n\n    try {\n      fromEntry.transfer(toEntry, whenLeave);\n      applyParams(toEntry.page);\n    } catch (e) {\n      toEntry.stay(nav.it.page);\n      throw e;\n    }\n\n    return toEntry;\n  }\n\n  function applyAgent(\n      whenLeave: 'pretend' | 'pre-open' | 'pre-replace',\n      fromEntry: PageEntry,\n      navTarget: NavTarget,\n      toEntry: PageEntry,\n  ): boolean {\n\n    let navigated = false;\n\n    agent(\n        ({ url, data, title }) => {\n          navigated = true;\n          navTarget.url = url;\n          navTarget.data = data;\n          navTarget.title = title;\n        },\n        whenLeave,\n        fromEntry.page,\n        toEntry.page,\n    );\n\n    return navigated;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { createNavigation } from './navigation.impl';\n\n/**\n * @internal\n */\nconst NavigationSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.provide({ a: Navigation, by: createNavigation });\n  },\n};\n\n/**\n * Browser navigation support feature.\n *\n * Makes [[Navigation]] available in bootstrap context.\n */\nexport class NavigationSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return NavigationSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { Navigation } from '../navigation';\nimport { NavigationAgent } from '../navigation-agent';\nimport { NavigationSupport } from '../navigation-support.feature';\nimport { Page } from '../page';\nimport { setHashURL } from './hash-url';\nimport { PageHashURLValueParam } from './page-hash-url-param.impl';\n\nconst PageHashURLSupport__feature: FeatureDef = {\n  needs: NavigationSupport,\n  setup(setup) {\n    setup.provide({ a: NavigationAgent, is: pageHashURLAgent });\n  },\n};\n\n/**\n * {@link PageHashURLParam Page hash URL parameter} support feature.\n *\n * Enables [[NavigationSupport]].\n */\nexport class PageHashURLSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return PageHashURLSupport__feature;\n  }\n\n}\n\nfunction pageHashURLAgent(\n    next: (this: void, target?: Navigation.Target) => void,\n    _when: 'pretend' | 'pre-open' | 'pre-replace',\n    _from: Page,\n    to: Page,\n): void {\n\n  const hashURL = to.get(PageHashURLValueParam);\n\n  if (hashURL) {\n    next({ url: setHashURL(to.url, hashURL) });\n  } else {\n    next();\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport {\n  Class,\n  Component,\n  ComponentClass,\n  ComponentContext,\n  ComponentDecorator,\n  DefaultNamespaceAliaser,\n  DefaultRenderScheduler,\n  Wesib__NS,\n} from '@wesib/wesib';\nimport { nextArgs, noop } from 'call-thru';\nimport {\n  afterEach,\n  AfterEvent,\n  afterEventBy,\n  afterSupplied,\n  afterThe,\n  EventKeeper,\n  eventSupply,\n  EventSupply,\n  nextAfterEvent,\n} from 'fun-events';\nimport { css__naming, QualifiedName } from 'namespace-aliaser';\nimport { ComponentNode, ComponentTreeSupport, ElementNode, ElementPickMode } from '../tree';\nimport { getHashURL } from './hash-url';\nimport { Navigation } from './navigation';\nimport { NavigationSupport } from './navigation-support.feature';\nimport { Page } from './page';\n\n/**\n * @internal\n */\ninterface ActiveNavLink {\n  readonly node?: ElementNode;\n  supply(): EventSupply | undefined;\n}\n\n/**\n * @internal\n */\nconst inactiveNavLink: ActiveNavLink = {\n  supply: noop,\n};\n\n/**\n * Creates component decorator that marks at most one of navigation links inside decorated component active.\n *\n * Enables [[ComponentTreeSupport]], and [[NavigationSupport]] features.\n *\n * @typeparam T  A type of decorated component class.\n * @param def  Navigation link activation definition.\n *\n * @returns New component decorator.\n */\nexport function ActivateNavLink<T extends ComponentClass = Class>(\n    def: ActivateNavLinkDef<InstanceType<T>> = {},\n): ComponentDecorator<T> {\n\n  const { select = 'a', pick = { all: true, deep: true } } = def;\n\n  return Component({\n    feature: {\n      needs: [ComponentTreeSupport, NavigationSupport],\n    },\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const activate = activateNavLink(context, def);\n        const weigh = navLinkWeight(def);\n        const navigation = context.get(Navigation);\n        const componentNode = context.get(ComponentNode);\n\n        context.whenOn(connectSupply => {\n\n          let active: ActiveNavLink = inactiveNavLink;\n\n          navigation.read.consume(\n              page => componentNode.select(select, pick).read.keep.thru_(\n                  nodes => nextAfterEvent(afterEach(\n                      ...nodes.map(node => weigh({ node, context, page })),\n                  )),\n              ).consume(\n                  (...weights: NavLinkWeight[]) => {\n\n                    const selected = selectActiveNavLink(weights);\n\n                    if (!selected) {\n                      active = inactiveNavLink;\n                    } else if (selected !== active.node) {\n                      active = activate({ node: selected, context, page });\n                    }\n\n                    return active.supply();\n                  },\n              ),\n          ).needs(connectSupply);\n        });\n      });\n    },\n  });\n}\n\n/**\n * Navigation link activation definition.\n *\n * Defines a set of element nodes considered to be navigation links. Each matching node is {@link weigh weighed}\n * against {@link Navigation.read current page}, and the link with highest weight is marked [[active]].\n *\n * @typeparam T  A type of component.\n */\nexport interface ActivateNavLinkDef<T extends object = any> {\n\n  /**\n   * Navigation links CSS selector.\n   *\n   * `a` by default.\n   */\n  readonly select?: string;\n\n  /**\n   * A mode of navigation link node picking from component tree.\n   *\n   * By default picks any matching element from entire subtree.\n   */\n  readonly pick?: ElementPickMode;\n\n  /**\n   * Qualified name of CSS class to mark the active element with.\n   *\n   * The `active` class in Wesib namespace is used by default.\n   */\n  readonly active?: QualifiedName;\n\n  /**\n   * Weighs matching navigation link.\n   *\n   * This method will be called for each navigation link on each current page update.\n   *\n   * By default:\n   * 1. If the link path has neither hash, nor search parameters, then:\n   * 1.1. Checks whether page URL path starts with the link's one.\n   * 1.2. If so, then uses link path length as weight.\n   * 2. If the link path has search parameters, but has no hash, then requires the page path to be the same as link's\n   *    one, and page search parameters include all of the link's ones. The number of link search parameters plus the\n   *    link path length is used as weight.\n   * 3. If the link path has a hash, then requires the page path and search parameters to be the same as link's ones,\n   *    and their hashes are treated as {@link getHashURL URLs}. The weight is calculated by applying steps 1, 2, and 3\n   *    to hash URLs increased by the link path length and the number of search parameters.\n   *\n   * @param node  Navigation link node to weigh.\n   * @param page  Current navigation page.\n   * @param context  Decorated component context.\n   *\n   * @returns Either navigation link weight, or its keeper. Non-positive wights means the page URL doesn't match\n   * the link at all.\n   */\n  weigh?(\n      {\n        node,\n        page,\n        context,\n      }: {\n        node: ElementNode;\n        page: Page;\n        context: ComponentContext<T>;\n      },\n  ): number | EventKeeper<[number]>;\n\n  /**\n   * Changes navigation link activity state.\n   *\n   * This method is called each time the active link changed.\n   *\n   * @param active  Whether to make target link active (`true`), or inactive (`false`).\n   * @param node  Navigation link node to update activity state of.\n   * @param page  Current navigation page.\n   * @param context  Decorated component context.\n   */\n  activate?(\n      active: boolean,\n      {\n        node,\n        page,\n        context,\n      }: {\n        node: ElementNode;\n        page: Page;\n        context: ComponentContext<T>;\n      },\n  ): void;\n\n}\n\n/**\n * @internal\n */\ntype NavLinkWeight = [ElementNode, number];\n\n/**\n * @internal\n */\ninterface NavLinkOpts {\n  node: ElementNode;\n  page: Page;\n  context: ComponentContext;\n}\n\n/**\n * @internal\n */\nfunction selectActiveNavLink(weights: NavLinkWeight[]): ElementNode | undefined {\n\n  let maxWeight = 0;\n  let active: ElementNode | undefined;\n\n  weights.forEach(([node, weight]) => {\n    if (weight > maxWeight) {\n      maxWeight = weight;\n      active = node;\n    }\n  });\n\n  return active;\n}\n\n/**\n * @internal\n */\nfunction navLinkWeight(\n    def: ActivateNavLinkDef,\n): (opts: NavLinkOpts) => AfterEvent<NavLinkWeight> {\n  if (!def.weigh) {\n    return defaultNavLinkWeight;\n  }\n  return opts => {\n\n    const weight = def.weigh!(opts);\n\n    if (typeof weight === 'number') {\n      return afterThe(opts.node, weight);\n    }\n\n    let supplier: AfterEvent<NavLinkWeight> = afterSupplied(weight).keep.thru_(\n        weight => nextArgs(opts.node, weight),\n    );\n\n    return afterEventBy<NavLinkWeight>(receiver => {\n      supplier({\n        supply: eventSupply()\n            .needs(receiver.supply)\n            .whenOff(() => {\n              // Fall back to zero weight once the weight supply cut off\n              supplier = afterThe(opts.node, 0);\n              supplier(receiver);\n            }),\n        receive: receiver.receive.bind(receiver),\n      });\n    });\n  };\n}\n\n/**\n * @internal\n */\nfunction defaultNavLinkWeight(\n    {\n      node,\n      page,\n    }: NavLinkOpts,\n): AfterEvent<NavLinkWeight> {\n\n  const element: Element = node.element;\n  const href = element.getAttribute('href');\n\n  if (href == null) {\n    return afterThe(node, -1);\n  }\n\n  const linkURL = new URL(href, element.ownerDocument!.baseURI);\n\n  return afterThe(node, calcNavLinkWeight(linkURL, page.url));\n}\n\n/**\n * @internal\n */\nfunction calcNavLinkWeight(linkURL: URL, pageURL: URL): number {\n  if (linkURL.origin !== pageURL.origin) {\n    return -1;\n  }\n\n  const linkDir = navLinkPath2dir(linkURL);\n  const pageDir = navLinkPath2dir(pageURL);\n\n  if (linkURL.hash) {\n    if (linkDir !== pageDir) {\n      return -1;\n    }\n    // Require search parameters to be equal\n\n    const searchParamWeight = navLinkSearchParamsWeight(linkURL, pageURL);\n\n    if (searchParamWeight < 0 || navLinkSearchParamsWeight(pageURL, linkURL) < 0) {\n      return -1;\n    }\n\n    return linkURL.pathname.length\n        + searchParamWeight\n        + calcNavLinkWeight(getHashURL(linkURL), getHashURL(pageURL));\n  }\n\n  const searchParamWeight = navLinkSearchParamsWeight(linkURL, pageURL);\n\n  if (searchParamWeight) {\n    if (searchParamWeight < 0) {\n      return -1;\n    }\n    if (linkDir !== pageDir) {\n      return -1;\n    }\n    return linkURL.pathname.length + searchParamWeight;\n  }\n\n  if (!pageDir.startsWith(linkDir)) {\n    return -1;\n  }\n\n  return linkURL.pathname.length;\n}\n\n/**\n * @internal\n */\nfunction navLinkPath2dir(url: URL): string {\n\n  const path = url.pathname;\n\n  return path.endsWith('/') ? path : path + '/';\n}\n\n/**\n * @internal\n */\nfunction navLinkSearchParamsWeight(\n    { searchParams: linkParams }: URL,\n    { searchParams: pageParams }: URL,\n): number {\n\n  let weight = 0;\n\n  linkParams.forEach((_value, key) => {\n\n    const pageValues = new Set(pageParams.getAll(key));\n\n    if (weight >= 0) {\n      if (linkParams.getAll(key).every(linkValue => pageValues.has(linkValue))) {\n        weight += 1;\n      } else {\n        weight = -1;\n      }\n    }\n  });\n\n  return weight;\n}\n\n/**\n * @internal\n */\nconst NavLinkRenderSchedule__symbol = (/*#__PURE__*/ Symbol('nav-link-render-schedule'));\n\n/**\n * @internal\n */\nconst defaultActiveNavLinkClass: QualifiedName = ['active', Wesib__NS];\n\n/**\n * @internal\n */\nfunction activateNavLink(\n    context: ComponentContext,\n    def: ActivateNavLinkDef,\n): (opts: NavLinkOpts) => ActiveNavLink {\n\n  const scheduler = context.get(DefaultRenderScheduler);\n  const { active = defaultActiveNavLinkClass } = def;\n  const activeClass = css__naming.name(active, context.get(DefaultNamespaceAliaser));\n  const activate = def.activate ? def.activate.bind(def) : noop;\n  const assignClass = (active: boolean, { node }: { node: ElementNode }): void => {\n\n    const element: Element = node.element;\n    const { classList } = element;\n\n    if (active) {\n      classList.add(activeClass);\n    } else {\n      classList.remove(activeClass);\n    }\n  };\n\n  return opts => {\n\n    const { element } = opts.node;\n    const schedule = element[NavLinkRenderSchedule__symbol]\n        || (element[NavLinkRenderSchedule__symbol] = scheduler({ node: element }));\n    const makeActive = (active: boolean): void => {\n      schedule(() => assignClass(active, opts));\n      activate(active, opts);\n    };\n\n    makeActive(true);\n\n    let lastSupply: EventSupply | undefined;\n\n    return {\n      node: opts.node,\n      supply(): EventSupply {\n\n        const supply = lastSupply = eventSupply(() => {\n          if (lastSupply === supply) {\n            makeActive(false);\n          }\n        });\n\n        return supply;\n      },\n    };\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ArraySet, Class, Component, ComponentClass, ComponentContext, ComponentDecorator } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { NavigationSupport } from './navigation-support.feature';\nimport { Page } from './page';\n\n/**\n * Creates component decorator that handles events (e.g. clicks) on navigation links.\n *\n * Such events would lead to {@link @Navigation navigation actions} instead of default ones.\n *\n * Enables [[NavigationSupport]] feature.\n *\n * @typeparam T  A type of decorated component class.\n * @param def  Navigation links handler definition.\n *\n * @returns New component decorator.\n */\nexport function HandleNavLinks<T extends ComponentClass = Class>(\n    def: HandleNavLinksDef<InstanceType<T>> = {},\n): ComponentDecorator<T> {\n\n  const handle = def.handle ? def.handle.bind(def) : defaultHandleNavLinks(def);\n  const events = new ArraySet(def.event || 'click');\n\n  return Component({\n    feature: {\n      needs: NavigationSupport,\n    },\n    define(defContext) {\n      defContext.whenComponent(context => {\n        context.whenOn(connectSupply => {\n\n          const navigation = context.get(Navigation);\n\n          events.forEach(eventType => {\n            context.on(eventType)(\n                event => navigation.read.once(\n                    page => handle({\n                      event,\n                      page,\n                      context,\n                      navigation,\n                    }),\n                ),\n            ).needs(connectSupply);\n          });\n        });\n      });\n    },\n  });\n}\n\n/**\n * Navigation links handler definition.\n *\n * @typeparam T  A type of component.\n */\nexport interface HandleNavLinksDef<T extends object = any> {\n\n  /**\n   * Type or types of events to handle.\n   *\n   * `click` by default.\n   */\n  readonly event?: string | readonly string[];\n\n  /**\n   * Handles event by performing navigation action.\n   *\n   * Every {@link event} sent by one of elements inside decorated component is passed to this function. In response\n   * it may perform a navigation event.\n   *\n   * By default handles events on anchor tags. When such tag contains an `href` attribute containing same-origin URL\n   * it {@link Navigation.open opens} a page at this URL instead of default action. It also prevents navigation\n   * if URL didn't change.\n   *\n   * @param event  A click event to handle.\n   * @param page  Current navigation page.\n   * @param navigation  Navigation service to use.\n   * @param context  Component context.\n   */\n  handle?(\n      {\n        event,\n        page,\n        navigation,\n        context,\n      }: {\n        event: Event;\n        page: Page;\n        navigation: Navigation;\n        context: ComponentContext<T>;\n      },\n  ): void;\n\n  /**\n   * Extracts hyper-reference of clicked element.\n   *\n   * Extracts hyper-reference from `href` attribute of event target.\n   *\n   * @param event  A click event to handle.\n   *\n   * @returns Extracted hyper-reference, or nothing if it can not be extracted. Event will be ignored in this case.\n   */\n  href?(event: Event): string | undefined | null;\n\n}\n\n/**\n * @internal\n */\nfunction defaultNavLinkHref(event: Event): string | null {\n\n  const target = event.target as Element;\n\n  return target.getAttribute('href');\n}\n\n/**\n * @internal\n */\nfunction defaultHandleNavLinks(\n    def: HandleNavLinksDef,\n): (\n    opts: {\n      event: Event;\n      page: Page;\n      navigation: Navigation;\n    },\n) => void {\n\n  const getHref = def.href ? def.href.bind(def) : defaultNavLinkHref;\n\n  return ({\n    event,\n    page,\n    navigation,\n  }) => {\n\n    const href = getHref(event);\n\n    if (href == null) {\n      return;\n    }\n\n    const target = event.target as Element;\n    const pageURL = page.url;\n    const url = new URL(href, target.ownerDocument!.baseURI);\n\n    if (url.origin !== pageURL.origin) {\n      return; // External link\n    }\n\n    event.preventDefault();\n    if (pageURL.href !== url.href) {\n      navigation.open(href);\n    }\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { isElement } from '@wesib/wesib';\nimport { itsEach, overArray } from 'a-iterable';\n\n/**\n * Imports DOM node from one document to another.\n *\n * @param from  The node to import.\n * @param to  The node to append imported node to.\n * @param importContent  A function that imports nodes nested in parent element. [[importNodeContent]] by default.\n *\n * @returns Imported node.\n */\nexport function importNode<N extends Node>(\n    from: N,\n    to: Node,\n    importContent?: (this: void, from: N, to: N) => void,\n): N;\n\n/**\n * Imports DOM node from one document to another and inserts it before the given node.\n *\n * @param from  The node to import.\n * @param to  The node to append imported node to.\n * @param before  The node to insert imported node before, or `null` to append it to the end of target one.\n * @param importContent  A function that imports nodes nested in parent element. [[importNodeContent]] by default.\n *\n * @returns Imported node.\n */\nexport function importNode<N extends Node>(\n    from: N,\n    to: Node,\n    before?: Node | null,\n    importContent?: (this: void, from: N, to: N) => void,\n): N;\n\nexport function importNode<N extends Node>(\n    from: N,\n    to: Node,\n    beforeOrImport?: Node | null | ((this: void, from: N, to: N) => void),\n    importContent: (this: void, from: N, to: N) => void = importNodeContent,\n): N {\n\n  let before: Node | null;\n\n  if (typeof beforeOrImport === 'function') {\n    importContent = beforeOrImport;\n    before = null;\n  } else {\n    before = beforeOrImport || null;\n  }\n\n  const doc = to.ownerDocument!;\n\n  if (isElement(from)) {\n\n    const elementClone = doc.createElement(from.tagName.toLowerCase()) as Node as (Element & N);\n\n    from.getAttributeNames().forEach(attr => elementClone.setAttribute(attr, from.getAttribute(attr)!));\n    importContent(from, elementClone);\n    to.insertBefore(elementClone, before);\n\n    return elementClone;\n  }\n\n  const nodeClone = doc.importNode(from, false);\n\n  to.insertBefore(nodeClone, before);\n\n  return nodeClone;\n}\n\n/**\n * Imports DOM node contents from one document to another.\n *\n * @param from  The node which contents to import.\n * @param to  The node to append imported nodes to.\n */\nexport function importNodeContent(from: Node, to: Node): void {\n  itsEach(\n      overArray(from.childNodes),\n      node => importNode(node, to),\n  );\n}\n","import { nextArgs, nextSkip } from 'call-thru';\nimport { eventSupply, EventSupply, OnEvent, onEventBy, trackValue } from 'fun-events';\nimport { Page } from '../page';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nexport function cachingPageLoader(loader: PageLoader): PageLoader {\n\n  let state: {\n    readonly url: string;\n    readonly on: OnEvent<[PageLoadResponse]>;\n    readonly sup: EventSupply;\n  } | undefined;\n\n  return page => {\n\n    const url = pageUrl(page);\n\n    if (state) {\n      if (state.url === url) {\n        return state.on;\n      }\n      state.sup.off();\n    }\n\n    let tracked: {\n      readonly on: OnEvent<[PageLoadResponse]>;\n      num: number;\n    } | undefined;\n    const supply = eventSupply().whenOff(() => {\n      state = undefined;\n      tracked = undefined;\n    });\n\n    const on = onEventBy<[PageLoadResponse]>(receiver => {\n      if (!tracked) {\n\n        const onLoad = loader(page);\n        const tracker = trackValue<PageLoadResponse>();\n        const trackSupply = onLoad(resp => {\n          tracker.it = resp;\n        }).whenOff(reason => {\n          // Error drops page cache, unlike successful page load.\n          if (reason != null) {\n            supply.off(reason);\n          }\n        });\n\n        supply.whenOff(reason => {\n          trackSupply.off(reason);\n          tracker.done(reason);\n        });\n\n        tracked = {\n          on: tracker.read.thru_(\n              response => response ? nextArgs(response) : nextSkip(),\n          ),\n          num: 0,\n        };\n      }\n\n      const requested = tracked;\n\n      ++requested.num;\n\n      return requested.on(receiver).needs(supply).whenOff(reason => {\n        if (!--requested.num) {\n          // Allow to request the same page again\n          Promise.resolve().then(() => {\n            if (!requested.num && requested === tracked) {\n              supply.off(reason);\n            }\n          });\n        }\n      });\n    });\n\n    state = { url, on, sup: supply };\n\n    return on;\n  };\n}\n\nfunction pageUrl(page: Page): string {\n  return new URL('', page.url).href;\n}\n","import { flatMapIt, itsEach, itsIterator } from 'a-iterable';\nimport { noop } from 'call-thru';\nimport {\n  EventEmitter,\n  eventReceiver,\n  EventReceiver,\n  eventSupply,\n  EventSupply,\n  noEventSupply,\n  OnEvent,\n  onEventBy,\n} from 'fun-events';\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { PageFragmentRequest, PageLoadRequest } from './page-load-request';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nexport interface PageLoadReq extends PageLoadRequest {\n\n  readonly receiver: EventReceiver.Generic<[PageLoadResponse]>;\n\n}\n\nclass PageLoadAbortError extends Error {}\n\nclass PageLoadRequestsParam$ extends PageParam<PageLoadRequests, PageLoadRequests> {\n\n  create(\n      _page: Page,\n      requests: PageLoadRequests,\n  ): PageParam.Handle<PageLoadRequests, PageLoadRequests> {\n    return {\n      get() {\n        return requests;\n      },\n      put: noop,\n    };\n  }\n\n}\n\n/**\n * @internal\n */\nexport const PageLoadRequestsParam: PageParam<PageLoadRequests, PageLoadRequests> = new PageLoadRequestsParam$();\n\n/**\n * @internal\n */\nexport class PageLoadRequests implements Iterable<PageLoadReq> {\n\n  private readonly _map = new Map<EventSupply, PageLoadReq[]>();\n\n  constructor(\n      private readonly _navigation: Navigation,\n      private readonly _loader: PageLoader,\n  ) {}\n\n  get fragments(): readonly PageFragmentRequest[] {\n\n    const result: PageFragmentRequest[] = [];\n\n    for (const request of this) {\n      if (!request.fragment) {\n        return [];\n      }\n      result.push(request.fragment);\n    }\n\n    return result;\n  }\n\n  [Symbol.iterator](): Iterator<PageLoadReq> {\n    return itsIterator(flatMapIt(this._map.values()));\n  }\n\n  handle(): PageParam.Handle<void, PageLoadRequest> {\n\n    const self = this;\n    const pageSupply = eventSupply();\n    let loadSupply = noEventSupply();\n\n    return {\n      get() {/* void */},\n      put(request: PageLoadRequest): void {\n        self._add(request);\n      },\n      transfer(to: Page, when) {\n        if (when === 'pretend') {\n          return;\n        }\n\n        const transferred = self._transfer();\n\n        to.put(PageLoadRequestsParam, transferred);\n\n        return transferred.handle();\n      },\n      enter(page: Page, when: 'init' | 'open' | 'replace' | 'return'): void {\n        if (when === 'init') {\n          // The page is loaded already. No need to fetch it.\n          return;\n        }\n\n        loadSupply = eventSupply().needs(pageSupply);\n\n        const onLoad = onEventBy<[PageLoadResponse]>(responseReceiver => {\n\n          const emitter = new EventEmitter<[PageLoadResponse]>();\n          const supply = emitter.on(responseReceiver);\n\n          self._loader(page)(response => emitter.send(response)).whenOff(error => {\n            if (error !== undefined && !(error instanceof PageLoadAbortError)) {\n              // Report current page load error as failed load response\n              emitter.send({\n                ok: false as const,\n                page,\n                error,\n              });\n            }\n          }).needs(loadSupply);\n\n          return supply;\n        }).share();\n\n        itsEach(\n            self,\n            ({ fragment, receiver }) => onFragment(onLoad, fragment)({\n              supply: eventSupply().needs(receiver.supply),\n              receive(context, response): void {\n                receiver.receive(context, response);\n              },\n            }),\n        );\n      },\n      leave(): void {\n        loadSupply.off(new PageLoadAbortError('page left'));\n      },\n      stay() {\n        pageSupply.off(new PageLoadAbortError('navigation cancelled'));\n      },\n      forget() {\n        pageSupply.off(new PageLoadAbortError('page forgotten'));\n      },\n    };\n\n  }\n\n  private _add(request: PageLoadRequest): void {\n\n    const req = { ...request, receiver: eventReceiver(request.receiver) };\n    const { supply } = req.receiver;\n    const list = this._map.get(supply);\n\n    if (list) {\n      list.push(req);\n    } else {\n      this._map.set(supply, [req]);\n      supply.whenOff(() => this._map.delete(supply));\n    }\n  }\n\n  private _transfer(): PageLoadRequests {\n\n    const transferred = new PageLoadRequests(this._navigation, this._loader);\n\n    for (const [supply, list] of this._map.entries()) {\n      transferred._map.set(supply, Array.from(list));\n    }\n\n    return transferred;\n  }\n\n}\n\nfunction onFragment(\n    onLoad: OnEvent<[PageLoadResponse]>,\n    fragment?: PageFragmentRequest,\n): OnEvent<[PageLoadResponse]> {\n  return fragment\n      ? onLoad.thru_(\n          response => response.ok\n              ? {\n                ...response,\n                fragment: (\n                    fragment.tag != null\n                    ? response.document.getElementsByTagName(fragment.tag)[0]\n                    : response.document.getElementById(fragment.id)\n                ) || undefined,\n              }\n              : response,\n      )\n      : onLoad;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextUpRef } from 'context-values/updatable';\nimport { EventSender, OnEvent } from 'fun-events';\nimport { FetchAgentKey } from '../../fetch/fetch-agent-key.impl';\nimport { PageLoadResponse } from './page-load-response';\n\n/**\n * Page load agent signature.\n *\n * The agent can be used to alter loaded page document processing. For that it should be registered in appropriate\n * context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by page loader.\n */\nexport type PageLoadAgent =\n/**\n * @param next  Either calls the next agent in chain, or actually loads page document if this agent is the last one.\n * Accepts an optional `Request` parameter. The original request will be used instead when omitted.\n * @param request  HTTP request.\n *\n * @returns An `EventSender` of page load response. It is returned either to preceding agent in chain, or as a loaded\n * document.\n */\n    (\n        this: void,\n        next: (this: void, request?: Request) => OnEvent<[PageLoadResponse]>,\n        request: Request,\n    ) => EventSender<[PageLoadResponse]>;\n\nexport namespace PageLoadAgent {\n\n  /**\n   * Combined page load agent signature.\n   *\n   * This is what is available under [[PageLoadAgent]] key.\n   */\n  export type Combined =\n  /**\n   * @param next  Either calls the next agent in chain, or actually loads page document if this agent is the last one.\n   * Accepts `Request` parameter.\n   * @param request  HTTP request.\n   *\n   * @returns An `OnEvent` registrar of loaded document.\n   */\n      (\n          this: void,\n          next: (this: void, request: Request) => OnEvent<[PageLoadResponse]>,\n          request: Request,\n      ) => OnEvent<[PageLoadResponse]>;\n\n}\n\n/**\n * A key of context value containing an [[PageLoadAgent]] instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the fetch.\n */\nexport const PageLoadAgent: ContextUpRef<PageLoadAgent.Combined, PageLoadAgent> = (\n    /*#__PURE__*/ new FetchAgentKey<[PageLoadResponse]>('page-load-agent')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { noop, valueProvider } from 'call-thru';\nimport { ContextUpRef, FnContextKey } from 'context-values/updatable';\n\n/**\n * A signature of page load URL modifier function.\n *\n * All such functions registered in bootstrap context are called in order of their registration with current page URL.\n * They are able to modify it, e.g. by applying additional URL search parameters. The modified URL is used then to load\n * the page.\n */\nexport type PageLoadURLModifier =\n/**\n * @param url  An URL of page to load.\n */\n    (this: void, url: URL) => void;\n\n/**\n * A key of bootstrap context value containing a page load URL modifier.\n *\n * Does not modify URL by default.\n */\nexport const PageLoadURLModifier: ContextUpRef<PageLoadURLModifier, PageLoadURLModifier> = (\n    /*#__PURE__*/ new FnContextKey('page-load-url', { byDefault: valueProvider(noop) })\n);\n","import { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { itsReduction } from 'a-iterable';\nimport { nextEach } from 'call-thru';\nimport { SingleContextKey } from 'context-values';\nimport { EventNotifier, onAsync, OnEvent, onEventBy } from 'fun-events';\nimport { hthvParse, hthvQuote } from 'http-header-value';\nimport { HttpFetch } from '../../fetch';\nimport { Page } from '../page';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadRequestsParam } from './page-load-requests.impl';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\n\n/**\n * @internal\n */\nexport type PageLoader = (this: void, page: Page) => OnEvent<[PageLoadResponse]>;\n\n/**\n * @internal\n */\nexport const PageLoader = (/*#__PURE__*/ new SingleContextKey<PageLoader>(\n    'page-loader',\n    {\n      byDefault: bootstrapDefault(newPageLoader),\n    },\n));\n\nfunction newPageLoader(context: BootstrapContext): PageLoader {\n\n  const window = context.get(BootstrapWindow);\n  const httpFetch = context.get(HttpFetch);\n  const modifyURL = context.get(PageLoadURLModifier);\n  const agent = context.get(PageLoadAgent);\n  const parser: DOMParser = new (window as any).DOMParser();\n\n  return page => {\n\n    const url = new URL(page.url.href);\n\n    modifyURL(url);\n\n    const request = new Request(\n        url.href,\n        {\n          mode: 'same-origin',\n          credentials: 'same-origin',\n          headers: new Headers({ Accept: 'text/html' }),\n        },\n    );\n\n    return onEventBy(receiver => agent(fetch, request)(receiver));\n\n    function fetch(fetchRequest: Request): OnEvent<[PageLoadResponse]> {\n      requestPageFragments(page, fetchRequest);\n\n      return onEventBy<[PageLoadResponse]>(receiver => {\n\n        const dispatcher = new EventNotifier<[PageLoadResponse]>();\n\n        dispatcher.on(receiver);\n        dispatcher.send({ page });\n\n        onAsync(httpFetch(fetchRequest).thru_(\n            response => Promise.all([response, response.text()]),\n        )).thru_(\n            (...batch: [Response, string][]) => nextEach(batch),\n            ([response, text]): PageLoadResponse => {\n              if (!response.ok) {\n                return {\n                  ok: false as const,\n                  page,\n                  response,\n                  error: response.status,\n                };\n              }\n              try {\n                return {\n                  ok: true as const,\n                  page,\n                  response,\n                  document: parsePageDocument(parser, url, response, text),\n                };\n              } catch (error) {\n                return {\n                  ok: false as const,\n                  page,\n                  response,\n                  error,\n                };\n              }\n            },\n        )(receiver);\n      });\n    }\n  };\n}\n\nfunction requestPageFragments(page: Page, request: Request): void {\n\n  const fragments = page.get(PageLoadRequestsParam)?.fragments;\n\n  if (fragments && fragments.length) {\n    request.headers.set(\n        'Accept-Fragment',\n        itsReduction(\n            fragments,\n            (header, fragment) => (header ? header + ', ' : '') + (\n                fragment.tag != null\n                    ? 'tag=' + hthvQuote(fragment.tag)\n                    : 'id=' + hthvQuote(fragment.id)\n            ),\n            '',\n        ),\n    );\n  }\n}\n\nfunction parsePageDocument(parser: DOMParser, url: URL, response: Response, text: string): Document {\n\n  const doc = parser.parseFromString(\n      text,\n      hthvParse(response.headers.get('Content-Type') || 'text/html')[0].v as SupportedType,\n  );\n\n  if (doc.head) {\n\n    const base = doc.head.querySelector('base');\n\n    if (base) {\n      base.href = new URL(base.getAttribute('href')!, url).href;\n    } else {\n\n      const newBase = doc.createElement('base');\n\n      newBase.href = url.href;\n\n      doc.head.appendChild(newBase);\n    }\n  }\n\n  return doc;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { PageParamContext } from '../page-param-context';\nimport { cachingPageLoader } from './caching-page-loader.impl';\nimport { PageLoadRequest } from './page-load-request';\nimport { PageLoadRequests, PageLoadRequestsParam } from './page-load-requests.impl';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nclass PageLoadParam$ extends PageParam<void, PageLoadRequest> {\n\n  create(page: Page, request: PageLoadRequest, context: PageParamContext): PageParam.Handle<void, PageLoadRequest> {\n\n    const requests = new PageLoadRequests(context.get(Navigation), cachingPageLoader(context.get(PageLoader)));\n    const handle = requests.handle();\n\n    page.put(PageLoadRequestsParam, requests);\n    handle.put(request);\n\n    return handle;\n  }\n\n}\n\n/**\n * Page load parameter.\n *\n * Accepts a {@link PageLoadRequest page load request} as input.\n *\n * A page load is initiated whenever a page with new address is {@link Navigation.onEnter entered}.\n *\n * Page load won't be initiated if:\n * - page load parameter is not {@link Page.put} added,\n * - all added {@link PageLoadRequest.receiver response receiver}s supplies are cut off, or\n * - the entered page address is the the same one as previous one, except the hash,\n */\nexport const PageLoadParam: PageParam<void, PageLoadRequest> = (/*#__PURE__*/ new PageLoadParam$());\n","import { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { AfterEvent, afterThe } from 'fun-events';\nimport { Navigation } from '../navigation';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\n\nconst PageCacheBuster__key = (/*#__PURE__*/ new SingleContextKey<PageCacheBuster>(\n    'page-cache-buster',\n    {\n      byDefault: bootstrapDefault(context => new PageCacheBuster(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport const appRevSearchParam = '__wesib_app_rev__';\n\n/**\n * @internal\n */\nexport class PageCacheBuster {\n\n  static get [ContextKey__symbol](): SingleContextKey<PageCacheBuster> {\n    return PageCacheBuster__key;\n  }\n\n  readonly urlModifier: AfterEvent<PageLoadURLModifier[]>;\n  readonly agent: AfterEvent<PageLoadAgent[]>;\n\n  constructor(context: BootstrapContext) {\n\n    const rev = appRev(context.get(BootstrapWindow).document);\n\n    if (!rev) {\n      this.urlModifier = afterThe();\n      this.agent = afterThe();\n    } else {\n\n      const navigation = context.get(Navigation);\n\n      this.urlModifier = afterThe(url => url.searchParams.set(appRevSearchParam, rev));\n      this.agent = afterThe(\n          (next, request) => next(new Request(request.url, request))\n              .thru_(\n                  response => {\n                    if (response.ok) {\n\n                      const newRev = appRev(response.document);\n\n                      if (newRev && newRev !== rev) {\n\n                        const url = new URL(response.page.url.href);\n\n                        url.searchParams.set(appRevSearchParam, newRev);\n                        navigation.update(url);\n                        navigation.reload();\n                      }\n                    }\n\n                    return response;\n                  },\n              ),\n      );\n    }\n  }\n\n}\n\nfunction appRev(doc: Document): string | null | undefined {\n  return doc.querySelector('meta[name=wesib-app-rev]')?.getAttribute('content');\n}\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { filterIt, itsEach, mapIt, overArray } from 'a-iterable';\nimport { importNode } from '../../util';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageScriptsAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().thru_(\n      response => {\n        if (response.ok) {\n\n          const allScripts = new Set<string>(mapIt(\n              externalScripts(doc, overArray(doc.scripts)),\n              ([src]) => src,\n          ));\n\n          itsEach(\n              filterIt(\n                  externalScripts(response.document, overArray(response.document.querySelectorAll('script'))),\n                  ([src]) => !allScripts.has(src),\n              ),\n              ([src, script]) => {\n                importNode(script, doc.head, (_from, to) => to.src = src);\n                allScripts.add(src);\n              },\n          );\n        }\n        return response;\n      },\n  );\n}\n\nfunction externalScripts(\n    doc: Document,\n    scripts: Iterable<HTMLScriptElement>,\n): Iterable<readonly [string, HTMLScriptElement]> {\n  return mapIt(\n      filterIt(\n          scripts,\n          script => !!script.src,\n      ),\n      script => [new URL(script.src, doc.baseURI).href, script] as const,\n  );\n}\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { itsEach, itsFirst, overArray } from 'a-iterable';\nimport { importNode } from '../../util';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageStyleAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().thru_(\n      response => {\n        if (!response.ok) {\n          return response;\n        }\n\n        const newStyles = response.document.querySelectorAll<HTMLLinkElement>('link[rel=stylesheet]');\n\n        if (!newStyles.length) {\n          return response;\n        }\n\n        let target: Node = doc.head;\n        let before: Node | null = null;\n        const oldStyles = doc.querySelectorAll<HTMLLinkElement>('link[rel=stylesheet]');\n        const oldStylesByHref = new Map<string, HTMLLinkElement>();\n        const firstOldStyle = oldStyles.item(0);\n\n        if (firstOldStyle) {\n          target = firstOldStyle.parentNode!;\n          before = firstOldStyle;\n          itsEach(\n              overArray(oldStyles),\n              link => oldStylesByHref.set(new URL(link.href, doc.baseURI).href, link),\n          );\n        }\n\n        itsEach(\n            overArray(newStyles),\n            newStyle => {\n\n              const href = new URL(newStyle.href, doc.baseURI).href;\n              const oldStyle = oldStylesByHref.get(href);\n\n              if (oldStyle) {\n                // Style already exists.\n                if (itsFirst(oldStylesByHref.keys()) === href) {\n                  // In proper position already.\n                  // Insert the remaining styles after it.\n                  target = oldStyle.parentNode!;\n                  before = oldStyle.nextSibling;\n                } else {\n                  // Move to proper position.\n                  target.insertBefore(oldStyle, before);\n                }\n                oldStylesByHref.delete(href);\n              } else {\n                // Import new style\n                importNode(newStyle, target, before, (_from, to) => to.href = href);\n              }\n            },\n        );\n\n        // Remove remaining old styles\n        itsEach(oldStylesByHref.values(), style => style.parentNode!.removeChild(style));\n\n        return response;\n      },\n  );\n}\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageTitleAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().thru_(response => {\n    if (response.ok) {\n\n      const title = response.document.getElementsByTagName('title').item(0);\n\n      if (title && title.textContent) {\n        doc.title = title.textContent;\n      }\n    }\n\n    return response;\n  });\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { NavigationSupport } from '../navigation-support.feature';\nimport { PageCacheBuster } from './page-cache-buster.impl';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\nimport { pageScriptsAgent } from './page-scripts-agent.impl';\nimport { pageStyleAgent } from './page-style-agent.impl';\nimport { pageTitleAgent } from './page-title-agent.impl';\n\n/**\n * @internal\n */\nconst PageLoadSupport__feature: FeatureDef = {\n  needs: NavigationSupport,\n  setup(setup) {\n    setup.provide({\n      a: PageLoadURLModifier,\n      by: (buster: PageCacheBuster) => buster.urlModifier,\n      with: [PageCacheBuster],\n    });\n    setup.provide({\n      a: PageLoadAgent,\n      by: (buster: PageCacheBuster) => buster.agent,\n      with: [PageCacheBuster],\n    });\n    setup.provide({ a: PageLoadAgent, by: pageScriptsAgent });\n    setup.provide({ a: PageLoadAgent, by: pageStyleAgent });\n    setup.provide({ a: PageLoadAgent, by: pageTitleAgent });\n  },\n};\n\n/**\n * Page load support feature.\n *\n * Enables default {@link PageLoadAgent page load agents}:\n * 1. Page cache busting agent.\n *    If `<meta name=\"wesib-app-rev\">` tag is present in initial page, then sends this tag's content with each page load\n *    request as `__wesib_app_rev__` search parameter. If the loaded page contains the same named meta tag with\n *    different content, then reloads the page.\n *    This serves both as cache busting technique, and as server-side application updates handler.\n * 2. Scripts agent.\n *    Includes external scripts from loaded page into main document.\n * 3. Style agent.\n *    Replaces external styles of main document styles with the ones from loaded page.\n *    Unless loaded page has no external styles.\n * 4. Title agent.\n *    Applies loaded page title to bootstrap window. If there is one.\n */\nexport class PageLoadSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return PageLoadSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport {\n  BootstrapWindow,\n  Class,\n  Component,\n  ComponentClass,\n  ComponentContext,\n  ComponentDecorator,\n  DefaultRenderScheduler,\n} from '@wesib/wesib';\nimport { noop } from 'call-thru';\nimport { importNodeContent } from '../../util';\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageLoadParam } from './page-load-param';\nimport { PageFragmentRequest } from './page-load-request';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoadSupport } from './page-load-support.feature';\n\n/**\n * Creates component decorator that includes page contents into decorated component's element.\n *\n * The page is loaded and included whenever it is {@link Navigation.onEnter entered}.\n *\n * Utilizes [[PageLoadParam]] navigation parameter.\n *\n * Enables [[NavigationSupport]] and [[PageLoadSupport]] features.\n *\n * @typeparam T  A type of decorated component class.\n * @param def  Page inclusion definition.\n *\n * @returns New component decorator.\n */\nexport function IncludePage<T extends ComponentClass = Class>(\n    def: IncludePageDef<InstanceType<T>> = {},\n): ComponentDecorator<T> {\n\n  const onResponse = def.onResponse ? def.onResponse.bind(def) : noop;\n  const contentKey = def.contentKey ? def.contentKey.bind(def) : defaultPageContentKey;\n\n  return Component({\n    feature: {\n      needs: PageLoadSupport,\n    },\n    define(context) {\n      context.whenComponent(context => {\n\n        const document = context.get(BootstrapWindow).document;\n        const schedule = context.get(DefaultRenderScheduler)();\n        const navigation = context.get(Navigation);\n        let lastPageURL: string | undefined = contentKey(navigation.page);\n        const detectFragment = (): PageFragmentRequest => {\n\n          const { fragment } = def;\n\n          if (fragment) {\n            return fragment;\n          }\n\n          const { element: { id, tagName: tag } }: { element: Element } = context;\n\n          return id ? { id } : { tag };\n        };\n\n        context.whenOn(supply => {\n\n          const range = document.createRange();\n\n          range.selectNodeContents(context.contentRoot);\n\n          navigation.read.once(page => {\n            page.put(\n                PageLoadParam,\n                {\n                  fragment: detectFragment(),\n                  receiver: {\n                    supply,\n                    receive: (_ctx, response) => handleResponse(response),\n                  },\n                },\n            );\n          });\n\n          function handleResponse(response: PageLoadResponse): void {\n\n            const newPageURL = contentKey(response.page);\n\n            if (newPageURL === lastPageURL) {\n              return; // Only hash changed. Do not refresh the page.\n            }\n\n            if (!response.ok) {\n              schedule(() => onResponse({ context, range, response }));\n              return;\n            }\n\n            lastPageURL = newPageURL;\n            schedule(() => {\n              range.deleteContents();\n\n              const target = document.createDocumentFragment();\n              const { fragment } = response;\n\n              if (fragment) {\n                importNodeContent(fragment, target);\n                range.insertNode(target);\n              }\n\n              onResponse({ context, range, response });\n            });\n          }\n        });\n      });\n    },\n  });\n}\n\n/**\n * @internal\n */\nfunction defaultPageContentKey({ url }: Page): string {\n  return new URL('', url).href;\n}\n\n/**\n * Page inclusion definition.\n *\n * Configures {@link IncludePage @LoadPage} decorator.\n *\n * @typeparam T  A type of component.\n */\nexport interface IncludePageDef<T extends object = any> {\n\n  /**\n   * Page fragment to include.\n   *\n   * By default uses custom element identifier if present, or element tag name otherwise.\n   */\n  readonly fragment?: PageFragmentRequest;\n\n  /**\n   * Builds content key for the given page.\n   *\n   * The loaded content will replace already included one only when their content key differ.\n   *\n   * By default uses page URL without hash part as a key. This prevents content refresh when only URL hash changes.\n   *\n   * @param page  Target page. Either loaded or not.\n   *\n   * @returns Content key.\n   */\n  contentKey?(page: Page): any;\n\n  /**\n   * Performs additional actions during page load.\n   *\n   * This method is called inside page contents render schedule for {@link PageLoadResponse.ok each stage} of page\n   * load. At the final stage it is called after loaded page contents included.\n   *\n   * This method can be used e.g. to indicate the page load progress.\n   *\n   * @param context  Decorated component context.\n   * @param response  Page load response.\n   * @param range  Document range the loaded page contents going to replace.\n   */\n  onResponse?(\n      {\n        context,\n        response,\n        range,\n      }: {\n        context: ComponentContext<T>;\n        response: PageLoadResponse;\n        range: Range;\n      },\n  ): void;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { DefaultNamespaceAliaser, DefaultRenderScheduler } from '@wesib/wesib';\nimport { ContextKey__symbol, ContextValueOpts, ContextValues } from 'context-values';\nimport { ContextUpKey, ContextUpRef } from 'context-values/updatable';\nimport { afterAll, AfterEvent, EventKeeper } from 'fun-events';\nimport { InConverter, InNamespaceAliaser, InRenderScheduler, intoConvertedBy } from 'input-aspects';\n\n/**\n * Default input aspects.\n *\n * This is an `AfterEvent` keeper of aspect converter meant to be applied to controls.\n *\n * As a bare minimum it assigns the following aspects to converted controls:\n * - `InRenderScheduler` set to `DefaultRenderScheduler`,\n * - `InNamespaceAliaser` set to `DefaultNamespaceAliaser.\n *\n * More input aspect converters may be registered in context. They may override the default ones.\n */\nexport type DefaultInAspects = AfterEvent<[InConverter.Aspect<any, any>]>;\n\n/**\n * @internal\n */\nclass DefaultInAspectsKey\n    extends ContextUpKey<AfterEvent<[InConverter.Aspect<any, any>]>, InConverter.Aspect<any, any>> {\n\n  get upKey(): this {\n    return this;\n  }\n\n  constructor() {\n    super('default-in-aspects');\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          AfterEvent<[InConverter.Aspect<any, any>]>,\n          EventKeeper<InConverter.Aspect<any, any>[]> | InConverter.Aspect<any, any>,\n          AfterEvent<InConverter.Aspect<any, any>[]>>,\n  ): AfterEvent<[InConverter.Aspect.Factory<any, any>]> {\n\n    const nsAlias = opts.context.get(DefaultNamespaceAliaser);\n\n    return afterAll({\n      scheduler: opts.context.get(DefaultRenderScheduler[ContextKey__symbol].upKey),\n      fns: opts.seed,\n    }).keep.thru(\n        ({\n            scheduler: [scheduler],\n            fns,\n        }) => intoConvertedBy(\n            ...fns,\n            InRenderScheduler.to(scheduler),\n            InNamespaceAliaser.to(nsAlias),\n        ),\n    );\n  }\n\n}\n\n/**\n * A key of bootstrap, definition, or component context containing default input aspects.\n */\nexport const DefaultInAspects: ContextUpRef<DefaultInAspects, InConverter.Aspect<any, any>> = (\n    /*#__PURE__*/ new DefaultInAspectsKey()\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { ComponentContext } from '@wesib/wesib';\nimport { SingleContextUpKey, SingleContextUpRef } from 'context-values/updatable';\nimport { eventSupply, EventSupply } from 'fun-events';\nimport { InControl } from 'input-aspects';\nimport { HierarchyContext } from '../hierarchy';\n\n/**\n * A user input originated from control.\n *\n * It is meant to be present in root {@link HierarchyContext hierarchy context}. Nested components may access it from\n * their hierarchy contexts to participate in user input.\n *\n * An [[inputFromControl]] function can be used to initiate user input.\n *\n * @typeparam Value  Input value type.\n */\nexport interface InputFromControl<Value = any> {\n\n  /**\n   * Root component context the input is initiated for.\n   */\n  readonly root: ComponentContext;\n\n  /**\n   * User input control.\n   */\n  readonly control: InControl<Value>;\n\n}\n\n/**\n * No user input originated from control.\n */\nexport interface NoInputFromControl {\n  control?: undefined;\n}\n\n/**\n * A key of hierarchy context value containing a user input originated from control. Potentially\n * {@link NoInputFromControl absent}.\n */\nexport const InputFromControl: SingleContextUpRef<InputFromControl | NoInputFromControl> = (\n    /*#__PURE__*/ new SingleContextUpKey<InputFromControl | NoInputFromControl>(\n        'input-from-control',\n        {\n          byDefault: () => ({}),\n        },\n    )\n);\n\n/**\n * Initiates user input from the given control for the given root component.\n *\n * Constructs an [[InputFromControl]] instance and makes it available in `root` component's hierarchy.\n *\n * @typeparam Value  Input value type.\n * @param root  Root component context to initiate user input for.\n * @param control  User input control.\n *\n * @returns User input supply. The user input would be stopped once this supply is cut off.\n */\nexport function inputFromControl<Value>(\n    root: ComponentContext,\n    control: InControl<Value>,\n): EventSupply {\n\n  const off = root.get(HierarchyContext).provide({\n    a: InputFromControl,\n    by: () => ({\n      root,\n      control,\n    }),\n  });\n\n  return eventSupply(off).needs(control);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { Class, Component, ComponentClass, ComponentContext, ComponentDecorator } from '@wesib/wesib';\nimport { nextArg, nextArgs, NextCall } from 'call-thru';\nimport { afterAll, EventKeeper, EventSupply, eventSupplyOf, nextAfterEvent, OnEventCallChain } from 'fun-events';\nimport { InControl, InConverter } from 'input-aspects';\nimport { HierarchyContext } from '../hierarchy';\nimport { DefaultInAspects } from './default-in-aspects';\nimport { inputFromControl, InputFromControl, NoInputFromControl } from './input-from-control';\n\n/**\n * Constructs component decorator that converts input control from {@link HierarchyContext.up enclosing component}\n * and uses it as an {@link InputFromControl origin of user input} in decorated component.\n *\n * @param convert  Input control converter definition.\n *\n * @returns New component decorator.\n */\nexport function ConvertInput<T extends ComponentClass = Class>(\n    convert: ConvertInputDef<InstanceType<T>>,\n): ComponentDecorator<T> {\n  return Component({\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const { up } = context.get(HierarchyContext);\n\n        afterAll({\n          parent: up.keep.thru_(\n              upper => upper ? nextAfterEvent(upper.get(InputFromControl)) : nextArg<NoInputFromControl>({}),\n          ),\n          aspects: context.get(DefaultInAspects),\n        }).keep.thru_(\n            ({\n              parent: [control],\n              aspects: [aspects],\n            }): NextCall<OnEventCallChain, [InControl<any>?, EventSupply?]> => {\n              if (control.control) {\n\n                const converted = convert({ control, context, aspects });\n\n                if (converted) {\n                  return converted instanceof InControl\n                      ? nextArgs(converted)\n                      : nextAfterEvent(converted);\n                }\n              }\n\n              return nextArgs();\n            },\n        ).consume(\n            (control?: InControl<any> | null, supply?: EventSupply) => {\n              if (!control) {\n                return;\n              }\n\n              const usageSupply = inputFromControl(context, control);\n\n              (supply || eventSupplyOf(control)).needs(usageSupply);\n\n              return usageSupply;\n            },\n        );\n      });\n    },\n  });\n}\n\n/**\n * Converter definition of enclosing component's user input control.\n *\n * The returned converted control keeper may send an event supply as a second parameter. This supply will be cut off\n * once the input from converted control is no longer needed. Otherwise the control's input supply will be cut off\n * instead, and control would become unusable after that.\n *\n * Configures {@link ConvertInput @ConvertInput} component decorator.\n */\nexport type ConvertInputDef<T extends object = any> =\n/**\n * @param control  Enclosing component's user input to convert.\n * @param context  Decorated component context.\n * @param aspects  Default input aspect converter. This is a value of [[DefaultInputAspect]].\n *\n * @returns Either input control, its keeper, or nothing.\n */\n    (\n        this: void,\n        {\n          control,\n          context,\n          aspects,\n        }: {\n          control: InputFromControl;\n          context: ComponentContext<T>;\n          aspects: InConverter.Aspect<any, any>;\n        },\n    ) => InControl<any> | EventKeeper<[InControl<any>?, EventSupply?]> | null | undefined;\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { ComponentContext } from '@wesib/wesib';\nimport { SingleContextUpKey, SingleContextUpRef } from 'context-values/updatable';\nimport { eventSupply, EventSupply } from 'fun-events';\nimport { InControl, InFormElement } from 'input-aspects';\nimport { HierarchyContext } from '../hierarchy';\nimport { InputFromControl } from './input-from-control';\n\n/**\n * A form control to fill by user input.\n *\n * An [[inputToForm]] function can be used to initiate filling the form.\n *\n * @typeparam Model  Form model type.\n * @typeparam Elt  A type of HTML form element.\n */\nexport interface InputToForm<Model = any, Elt extends HTMLElement = HTMLElement> extends InputFromControl<Model> {\n\n  /**\n   * Input form element control.\n   *\n   * Unlike input form control this one is not supposed to be submitted. But it contains a `<form>` element issuing a\n   * `submit` event.\n   */\n  readonly form: InFormElement<Elt>;\n\n}\n\n/**\n * No user input filling the form.\n */\nexport interface NoInputToForm {\n  control?: undefined;\n  form?: undefined;\n}\n\n/**\n * A key of hierarchy context value containing a form element to fill by user input. Potentially\n * {@link NoInputToForm absent}.\n */\nexport const InputToForm: SingleContextUpRef<InputToForm<any, any> | NoInputToForm> = (\n    /*#__PURE__*/ new SingleContextUpKey<InputToForm<any, any> | NoInputToForm>(\n        'input-to-form',\n        {\n          byDefault: () => ({}),\n        },\n    )\n);\n\n/**\n * Initiates filling the form by user input from.\n *\n * Constructs [[InputToForm]] and [[InputFromControl]] instances and makes them available in `root` component's\n * hierarchy.\n *\n * @typeparam Model  Form model type.\n * @typeparam Elt  A type of HTML form element.\n * @param root  Root component context to initiate user input for.\n * @param control  Input form control.\n * @param form  Form element control.\n *\n * @returns Form fill supply. The form filling would be stopped once this supply is cut off.\n */\nexport function inputToForm<Model, Elt extends HTMLElement>(\n    root: ComponentContext,\n    control: InControl<Model>,\n    form: InFormElement<Elt>,\n): EventSupply {\n\n  const hierarchy = root.get(HierarchyContext);\n  const off = hierarchy.provide({\n    a: InputToForm,\n    by: () => ({\n      root,\n      control,\n      form,\n    }),\n  });\n\n  hierarchy.provide({\n    a: InputFromControl,\n    via: InputToForm,\n  });\n\n  return eventSupply(off)\n      .needs(control)\n      .needs(form);\n}\n\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { Class, Component, ComponentClass, ComponentContext, ComponentDecorator } from '@wesib/wesib';\nimport { nextArgs, NextCall } from 'call-thru';\nimport { afterAll, EventKeeper, EventSupply, eventSupplyOf, nextAfterEvent, OnEventCallChain } from 'fun-events';\nimport { InControl, InConverter, InFormElement } from 'input-aspects';\nimport { ComponentNode, ComponentTreeSupport, ElementNode, ElementPickMode } from '../tree';\nimport { DefaultInAspects } from './default-in-aspects';\nimport { inputToForm } from './input-to-form';\n\n/**\n * Constructs component decorator that finds form element to {@link InputToForm fill by user input}.\n *\n * Enables [[ComponentTreeSupport]] feature.\n *\n * @typeparam T  A type of decorated component class.\n * @param def  Form element fill definition.\n *\n * @returns New component decorator.\n */\nexport function FillInputForm<T extends ComponentClass = Class>(\n    def: FillInputFormDef<InstanceType<T>>,\n): ComponentDecorator<T> {\n\n  const { select = 'form', pick = { deep: true, all: true } } = def;\n\n  return Component({\n    feature: {\n      needs: ComponentTreeSupport,\n    },\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const componentNode = context.get(ComponentNode);\n\n        context.whenOn(connectSupply => {\n          afterAll({\n            node: componentNode.select(select, pick).first,\n            aspects: context.get(DefaultInAspects),\n          }).keep.thru(({\n            node: [node],\n            aspects: [aspects],\n          }): NextCall<OnEventCallChain, [InControl<any>, InFormElement, EventSupply?] | []> => {\n            if (!node) {\n              return nextArgs();\n            }\n\n            const tuple = def.makeForm({ node, context, aspects });\n\n            if (!tuple) {\n              return nextArgs();\n            }\n\n            return Array.isArray(tuple) ? nextArgs(...tuple) : nextAfterEvent(tuple);\n          }).tillOff(connectSupply).consume(\n              (control?, form?, supply?) => {\n                if (!control) {\n                  return;\n                }\n\n                const fillSupply = inputToForm(context, control, form!);\n\n                if (supply) {\n                  supply.needs(fillSupply);\n                } else {\n                  eventSupplyOf(form!).needs(fillSupply);\n                  eventSupplyOf(control).needs(fillSupply);\n                }\n\n                return fillSupply;\n              },\n          );\n        });\n      });\n    },\n  });\n}\n\n/**\n * A definition of form element to {@link InputToForm fill by user input}.\n *\n * Configures {@link FillInputForm @FillInputForm} component decorator.\n *\n * @typeparam T  A type of component.\n */\nexport interface FillInputFormDef<T extends object = any> {\n\n  /**\n   * CSS selector of form element to fill.\n   *\n   * `form` by default.\n   */\n  readonly select?: string;\n\n  /**\n   * A mode of node picking from component tree.\n   *\n   * By default picks any matching element from entire subtree.\n   */\n  readonly pick?: ElementPickMode;\n\n  /**\n   * Constructs form control and form element control for element node found by {@link FillInputForm @FillInputForm}\n   * decorator.\n   *\n   * The returned control keeper may send an event supply as a third parameter. This supply will be cut off once\n   * the form filling is no longer needed. Otherwise the form's control supply will be cut off instead,\n   * and it would become unusable after that.\n   *\n   * @param node  Element node to construct form element control for.\n   * @param context  Component context the {@link FillInputForm @FillInputForm} decorator is applied to.\n   * @param aspects  Default input aspect converter. This is a value of [[DefaultInputAspect]].\n   *\n   * @returns Either form control and form element control tuple, their keeper, or nothing.\n   */\n  makeForm(\n      {\n        node,\n        context,\n        aspects,\n      }: {\n        node: ElementNode;\n        context: ComponentContext<T>;\n        aspects: InConverter.Aspect<any, any>;\n      },\n  ):\n      | [InControl<any>, InFormElement]\n      | EventKeeper<[InControl<any>, InFormElement, EventSupply?] | []>\n      | null\n      | undefined;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { ComponentClass, ComponentProperty, ComponentPropertyDecorator } from '@wesib/wesib';\nimport { eventSupplyOf } from 'fun-events';\nimport { DomEventDispatcher } from 'fun-events/dom';\nimport { HierarchyContext } from '../hierarchy';\nimport { InputToForm, NoInputToForm } from './input-to-form';\n\n/**\n * Creates a decorator for component method to call on input form submit.\n *\n * The decorated method accepts a {@link InputToForm filled input form} and submit event as parameters.\n *\n * @typeparam T  A type of decorated component class.\n * @typeparam M  Submitted value type.\n * @typeparam Elt  A type of HTML form element.\n * @param def  Submit handler definition.\n *\n * @returns New component property decorator.\n */\nexport function OnSubmit<T extends ComponentClass, Model = any, Elt extends HTMLElement = HTMLElement>(\n    def: OnSubmitDef = {},\n): ComponentPropertyDecorator<(form: InputToForm<Model, Elt>, event: Event) => void, T> {\n\n  const { cancel = true } = def;\n\n  return ComponentProperty(({ get }) => ({\n    componentDef: {\n      define(defContext) {\n        defContext.whenComponent(context => {\n          context.whenOn(supply => {\n\n            const hierarchy = context.get(HierarchyContext);\n            const { component } = context;\n\n            hierarchy.get(InputToForm).consume((inputToForm: InputToForm<Model, Elt> | NoInputToForm) => {\n              if (!inputToForm.control) {\n                return;\n              }\n\n              const submitDispatcher = new DomEventDispatcher(inputToForm.form.element);\n\n              eventSupplyOf(submitDispatcher).needs(supply);\n\n              const onSubmit = submitDispatcher.on('submit');\n\n              return (cancel ? onSubmit.instead : onSubmit)(\n                  event => get(component).call(component, inputToForm, event),\n              );\n            });\n          });\n        });\n      },\n    },\n  }));\n}\n\n/**\n * Form submit handler definition.\n *\n * Configures {@link OnSubmit @OnSubmit} component property decorator.\n */\nexport interface OnSubmitDef {\n\n  /**\n   * Whether to cancel default submit handler.\n   *\n   * `true` by default.\n   */\n  cancel?: boolean;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { Class, Component, ComponentClass, ComponentContext, ComponentDecorator } from '@wesib/wesib';\nimport { nextArg, valueProvider } from 'call-thru';\nimport { afterAll, afterThe, EventKeeper, nextAfterEvent } from 'fun-events';\nimport { InGroup } from 'input-aspects';\nimport { HierarchyContext } from '../hierarchy';\nimport { InputFromControl, NoInputFromControl } from './input-from-control';\n\n/**\n * Creates component decorator that adds {@link InputFromControl input control} of decorated component to input control\n * group of enclosing one under the given name.\n *\n * @typeparam T  A type of decorated component class.\n * @param name  A name to assign to component. This could be either a string, or a function returning name as a string\n * or as its keeper.\n *\n * @returns New component decorator.\n */\nexport function SetInputName<T extends ComponentClass = Class>(\n    name: string | ((this: void, context: ComponentContext<InstanceType<T>>) => string | EventKeeper<[string?]>),\n): ComponentDecorator<T> {\n\n  const getName: (context: ComponentContext<InstanceType<T>>) => EventKeeper<[string?]> = typeof name === 'string'\n      ? valueProvider(afterThe(name))\n      : context => {\n        const result = name(context);\n        return typeof result === 'string' ? afterThe(result) : result;\n      };\n\n  return Component({\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const hierarchy = context.get(HierarchyContext);\n\n        afterAll({\n          group: hierarchy.up.keep.thru_(\n              upper => upper ? nextAfterEvent(upper.get(InputFromControl)) : nextArg<NoInputFromControl>({}),\n              ({ control }) => control && control.aspect(InGroup),\n          ),\n          control: hierarchy.get(InputFromControl),\n          name: getName(context),\n        }).consume(\n            ({\n              group: [group],\n              control: [{ control }],\n              name: [name],\n            }) => {\n              if (name == null\n                  || !group\n                  || !control\n                  || group === control) {\n                return;\n              }\n              return group.controls.set(name, control);\n            },\n        );\n      });\n    },\n  });\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { Class, Component, ComponentClass, ComponentContext, ComponentDecorator } from '@wesib/wesib';\nimport { nextArgs, NextCall } from 'call-thru';\nimport { afterAll, EventKeeper, EventSupply, eventSupplyOf, nextAfterEvent, OnEventCallChain } from 'fun-events';\nimport { InControl, InConverter } from 'input-aspects';\nimport { ComponentNode, ComponentTreeSupport, ElementNode, ElementPickMode } from '../tree';\nimport { DefaultInAspects } from './default-in-aspects';\nimport { inputFromControl } from './input-from-control';\n\n/**\n * Constructs component decorator that finds input element and uses it as an {@link InputFromControl origin of user\n * input}.\n *\n * Enables [[ComponentTreeSupport]] feature.\n *\n * @typeparam T  A type of decorated component class.\n * @param def  Input element usage definition.\n *\n * @returns New component decorator.\n */\nexport function UseInputElement<T extends ComponentClass = Class>(\n    def: UseInputElementDef<InstanceType<T>>,\n): ComponentDecorator<T> {\n\n  const { select = 'input', pick = { deep: true, all: true } } = def;\n\n  return Component({\n    feature: {\n      needs: ComponentTreeSupport,\n    },\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const componentNode = context.get(ComponentNode);\n\n        context.whenOn(connectSupply => {\n          afterAll({\n            node: componentNode.select(select, pick).first,\n            aspects: context.get(DefaultInAspects),\n          }).keep.thru(({\n            node: [node],\n            aspects: [aspects],\n          }): NextCall<OnEventCallChain, [InControl<any>?, EventSupply?]> => {\n            if (!node) {\n              return nextArgs();\n            }\n\n            const control = def.makeControl({ node, context, aspects });\n\n            if (!control) {\n              return nextArgs();\n            }\n\n            return control instanceof InControl ? nextArgs(control) : nextAfterEvent(control);\n          }).tillOff(connectSupply).consume(\n              (control?: InControl<any>, supply?: EventSupply) => {\n                if (!control) {\n                  return;\n                }\n\n                const usageSupply = inputFromControl(context, control);\n\n                (supply || eventSupplyOf(control)).needs(usageSupply);\n\n                return usageSupply;\n              },\n          );\n        });\n      });\n    },\n  });\n}\n\n/**\n * A definition of element to use as an {@link InputFromControl origin of user input}.\n *\n * Configures {@link UseInputElement @UseInputElement} component decorator.\n *\n * @typeparam T  A type of component.\n */\nexport interface UseInputElementDef<T extends object = any> {\n\n  /**\n   * CSS selector of input element to use.\n   *\n   * `input` by default.\n   */\n  readonly select?: string;\n\n  /**\n   * A mode of node picking from component tree.\n   *\n   * By default picks any matching element from entire subtree.\n   */\n  readonly pick?: ElementPickMode;\n\n  /**\n   * Constructs input control for element node found by {@link UseInputElement @UseInputElement} decorator.\n   *\n   * The returned control keeper may send an event supply as a second parameter. This supply will be cut off once\n   * the input from control is no longer needed. Otherwise the control's input supply will be cut off instead,\n   * and control would become unusable after that.\n   *\n   * @param node  Element node to construct input control for.\n   * @param context  Component context the {@link UseInputElement @UseInputElement} decorator is applied to.\n   * @param aspects  Default input aspect converter. This is a value of [[DefaultInputAspect]].\n   *\n   * @returns Either input control, its keeper, or nothing.\n   */\n  makeControl(\n      {\n        node,\n        context,\n        aspects,\n      }: {\n        node: ElementNode;\n        context: ComponentContext<T>;\n        aspects: InConverter.Aspect<any, any>;\n      },\n  ):\n      | InControl<any>\n      | EventKeeper<[InControl<any>?, EventSupply?]>\n      | null\n      | undefined;\n\n}\n"],"names":["FetchAgentKey","ContextUpKey","[object Object]","name","super","this","upKey","createUpKey","opts","seed","keep","thru","agents","length","nextArg","next","request","fetch","agentIdx","agentRequest","agent","onSupplied","nextRequest","combineFetchAgents","defaultProvider","afterThe","defaultFetchAgent","nextAfterEvent","byDefault","delegated","context","get","or","undefined","HttpFetchAgent","HttpFetchAborted","HttpFetch","FnContextKey","bootstrapDefault","window","BootstrapWindow","input","init","Request","onEventBy","receiver","responseEmitter","EventEmitter","supply","abortController","AbortController","signal","eventSupply","reason","abort","whenOff","off","needs","on","ctx","response","receive","customSignal","DomEventDispatcher","once","aborted","then","send","catch","HierarchyRoot","SingleContextKey","bsContext","root","BootstrapRoot","HierarchyUpdates","issue","trackValue","HierarchyUpdates__key","ComponentContext","updates","hierarchyRoot","BootstrapContext","parent","findParentContext","it","ContextKey__symbol","of","element","immediate","parentNode","ComponentContext__symbol","HierarchyContext__key","up","afterEventBy","parentHierarchy","rootSupply","parentSupply","updateParent","parentCtx","HierarchyContext","read","connected","consume","newParent","whenOn","_","onSupply","Promise","resolve","share","registry","ContextRegistry","key","upper","nextArgs","newHierarchyRegistry","values","newValues","spec","provide","newHierarchyContext","ContextValues","ComponentNode","ElementNodeList","AIterable","OnEvent__symbol","onUpdate","AfterEvent__symbol","WATCH_DEEP","subtree","elementNodeList","selectorOrType","nodeOf","deep","all","iterable","selector","cache","Set","overNodes","overNodeSubtree","overArray","whenDefined","elementDef","html__naming","DefaultNamespaceAliaser","size","selected","refresh","added","Array","from","filterIt","mapIt","node","isPresent","observer","ElementObserver","mutations","removed","forEach","mutation","itsEach","removedNodes","removeNode","push","addedNodes","addNode","nodeList","firstReceiver","observe","disconnect","onTrackUpdate","track","initialEmitter","first","afterSupplied","list","itsFirst","addEventListener","event","target","has","ElementNodeList_","Symbol","iterator","itsIterator","sel","querySelectorAll","children","item","matches","select","isElement","add","delete","nodes","flatMapIt","childNodes","AttributesObserver","_bs","Map","_observer","Observer","MutationObserver","_update","self","emitter","_emitter","rcv","eventReceiver","_emitters","reconnect","newValue","oldValue","takeRecords","attributes","attributeOldValue","attributeFilter","keys","attributeName","getAttribute","set","AttributeTracker","ValueTracker","_name","observeSupply","noEventSupply","_updates","EventSupply__symbol","eventSupplyOf","value","setAttribute","NodeAttributes","bs","existing","_attrs","created","PropertyTracker","_element","_key","_supply","propertyState","ComponentState","domPropertyPathTo","done","_ctx","_path","NodeProperties","_context","_props","prop","bind","ElementNode__symbol","ElementNode","_bind","elementNodeOf","mode","optional","adapter","ElementAdapter","selectNodes","ComponentTreeSupport__feature","StateSupport","setup","perComponent","a","by","ComponentTreeSupport","FeatureDef__symbol","getHashURL","url","URL","hash","substring","origin","setHashURL","hashURL","username","pathname","search","result","PageParam__symbol","PageParam","_page","PageHashURLValueParam$","page","handle","put","PageHashURLValueParam","PageHashURLParam$","create","PageHashURLParam","NavigationAgentKey","document","when","to","navigate","agentTo","nextURL","title","nextTitle","data","nextData","String","baseURI","visited","current","ref","defaultNavigationAgent","_when","_from","NavigationAgent","Navigation__key","Navigation","go","PageParamContext","NavHistory__key","NavHistory","extractNavData","state","_document","_location","location","_history","history","_uid","btoa","Math","random","entry","newEntry","href","_entries","id","schedule","enter","replaceState","_historyState","PageEntry","_lastId","toEntry","tracker","pushState","_enter","fromEntry","e","_forget","prev","leave","popState","_changeHash","uid","pageId","existingEntry","transfer","oldEntry","forget","wesib:navigation:data","_bsContext","proto","noop","_params","_status","param","newHandle","_newContext","_init","entries","transferred","at","stay","clear","update","EnterPageEvent","Event","type","cancelable","LeavePageEvent","StayOnPageEvent","createNavigation","dispatcher","navHistory","onEnter","onLeave","onStay","onEvent","onAny","nav","nextEntry","apply","readPage","dispatch","hashChange","Navigation_","delta","toURL","withParam","applyParams","with","mergeFunctions","open","replace","targetOrCallback","callback","navTarget","navTargetOf","applyAgent","whenLeave","promise","doNavigate","prepared","leavePage","prepare","navigated","NavigationSupport__feature","NavigationSupport","PageHashURLSupport__feature","is","pageHashURLAgent","PageHashURLSupport","inactiveNavLink","ActivateNavLink","def","pick","Component","feature","defContext","whenComponent","activate","scheduler","DefaultRenderScheduler","active","defaultActiveNavLinkClass","activeClass","css__naming","NavLinkRenderSchedule__symbol","makeActive","classList","remove","assignClass","lastSupply","activateNavLink","weigh","defaultNavLinkWeight","weight","supplier","thru_","navLinkWeight","navigation","componentNode","connectSupply","afterEach","map","weights","maxWeight","selectActiveNavLink","linkURL","ownerDocument","calcNavLinkWeight","pageURL","linkDir","navLinkPath2dir","pageDir","searchParamWeight","navLinkSearchParamsWeight","startsWith","path","endsWith","searchParams","linkParams","pageParams","_value","pageValues","getAll","every","linkValue","Wesib__NS","HandleNavLinks","getHref","defaultNavLinkHref","preventDefault","defaultHandleNavLinks","events","ArraySet","eventType","importNode","beforeOrImport","importContent","importNodeContent","before","doc","elementClone","createElement","tagName","toLowerCase","getAttributeNames","attr","insertBefore","nodeClone","cachingPageLoader","loader","pageUrl","sup","tracked","onLoad","trackSupply","resp","nextSkip","num","requested","PageLoadAbortError","Error","PageLoadRequestsParam","requests","PageLoadRequests","_navigation","_loader","fragments","fragment","_map","pageSupply","loadSupply","_add","_transfer","responseReceiver","error","ok","tag","getElementsByTagName","getElementById","onFragment","req","PageLoadAgent","PageLoadURLModifier","valueProvider","PageLoader","httpFetch","modifyURL","parser","DOMParser","credentials","headers","Headers","Accept","fetchRequest","itsReduction","header","hthvQuote","requestPageFragments","EventNotifier","onAsync","text","batch","nextEach","status","parsePageDocument","parseFromString","hthvParse","v","head","base","querySelector","newBase","appendChild","PageLoadParam$","PageLoadParam","PageCacheBuster__key","PageCacheBuster","rev","appRev","urlModifier","newRev","reload","pageScriptsAgent","allScripts","externalScripts","scripts","src","script","pageStyleAgent","newStyles","oldStyles","oldStylesByHref","firstOldStyle","link","newStyle","oldStyle","nextSibling","style","removeChild","pageTitleAgent","textContent","PageLoadSupport__feature","buster","PageLoadSupport","IncludePage","onResponse","contentKey","defaultPageContentKey","lastPageURL","detectFragment","range","createRange","selectNodeContents","contentRoot","newPageURL","deleteContents","createDocumentFragment","insertNode","handleResponse","DefaultInAspectsKey","nsAlias","afterAll","fns","intoConvertedBy","InRenderScheduler","InNamespaceAliaser","DefaultInAspects","InputFromControl","SingleContextUpKey","inputFromControl","control","ConvertInput","convert","aspects","converted","InControl","usageSupply","InputToForm","FillInputForm","tuple","makeForm","isArray","tillOff","form","fillSupply","hierarchy","via","inputToForm","OnSubmit","cancel","ComponentProperty","componentDef","component","submitDispatcher","onSubmit","instead","call","SetInputName","getName","group","aspect","InGroup","controls","UseInputElement","makeControl"],"mappings":"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"}