{"version":3,"file":"wesib.b26c9eb2.js","sources":["../../../../wesib/src/boot/bootstrap-context.key.impl.ts","../../../../wesib/src/boot/bootstrap-context.ts","../../../../wesib/src/boot/bootstrap-default.ts","../../../../wesib/src/common/types.impl.ts","../../../../wesib/src/common/array-set.ts","../../../../wesib/src/common/classes.ts","../../../../wesib/src/common/decorators.ts","../../../../wesib/src/common/reflect.ts","../../../../wesib/src/common/functions.ts","../../../../wesib/src/common/is-element.ts","../../../../wesib/src/common/meta-accessor.ts","../../../../wesib/src/common/promises.ts","../../../../wesib/src/feature/feature-def.ts","../../../../wesib/src/feature/feature.decorator.ts","../../../../wesib/src/feature/feature-context.ts","../../../../wesib/src/feature/feature-needs-error.ts","../../../../wesib/src/component/component-def.ts","../../../../wesib/src/component/component.decorator.ts","../../../../wesib/src/component/component-context.key.impl.ts","../../../../wesib/src/component/component-event.key.impl.ts","../../../../wesib/src/component/content-root.ts","../../../../wesib/src/component/state-updater.ts","../../../../wesib/src/component/component-context.ts","../../../../wesib/src/component/component-event.ts","../../../../wesib/src/component/component-property.decorator.ts","../../../../wesib/src/boot/impl/bootstrap-context-registry.impl.ts","../../../../wesib/src/boot/impl/component-context-registry.impl.ts","../../../../wesib/src/boot/impl/definition-context-registry.impl.ts","../../../../wesib/src/boot/impl/post-def-setup.impl.ts","../../../../wesib/src/boot/globals/bootstrap-window.ts","../../../../wesib/src/boot/globals/bootstrap-root.ts","../../../../wesib/src/boot/globals/default-namespace-aliaser.ts","../../../../wesib/src/boot/globals/default-render-scheduler.ts","../../../../wesib/src/boot/globals/element-adapter.ts","../../../../wesib/src/boot/globals/element-observer.ts","../../../../wesib/src/boot/impl/definition-context.symbol.impl.ts","../../../../wesib/src/component/definition/custom-elements.ts","../../../../wesib/src/component/definition/definition.context.key.impl.ts","../../../../wesib/src/component/definition/element-def.ts","../../../../wesib/src/component/definition/definition-context.ts","../../../../wesib/src/boot/impl/component-context.impl.ts","../../../../wesib/src/boot/impl/component-mount.impl.ts","../../../../wesib/src/component/component-mount.ts","../../../../wesib/src/boot/impl/custom-element.impl.ts","../../../../wesib/src/boot/impl/when-component.impl.ts","../../../../wesib/src/boot/impl/definition-context.impl.ts","../../../../wesib/src/boot/impl/element-builder.impl.ts","../../../../wesib/src/boot/impl/unloader.impl.ts","../../../../wesib/src/feature/loader/component-registry.impl.ts","../../../../wesib/src/feature/loader/feature-context.impl.ts","../../../../wesib/src/feature/loader/feature-loader.impl.ts","../../../../wesib/src/feature/loader/feature-request.impl.ts","../../../../wesib/src/feature/loader/feature-requester.impl.ts","../../../../wesib/src/boot/impl/when-defined.impl.ts","../../../../wesib/src/boot/bootstrap/bootstrap-components.ts","../../../../wesib/src/feature/feature-ref.ts","../../../../wesib/src/feature/attributes/attribute-descriptor.ts","../../../../wesib/src/feature/attributes/attribute-path.ts","../../../../wesib/src/feature/attributes/attribute-state-update.impl.ts","../../../../wesib/src/feature/attributes/attribute-descriptor.impl.ts","../../../../wesib/src/feature/attributes/attribute-registry.impl.ts","../../../../wesib/src/feature/attributes/attributes-support.feature.ts","../../../../wesib/src/feature/attributes/attribute.decorator.ts","../../../../wesib/src/feature/attributes/attribute-changed.decorator.ts","../../../../wesib/src/feature/attributes/attributes.decorator.ts","../../../../wesib/src/feature/state/component-state.ts","../../../../wesib/src/feature/state/state-property-path.ts","../../../../wesib/src/feature/state/state-property-update.impl.ts","../../../../wesib/src/feature/state/state-support.feature.ts","../../../../wesib/src/feature/state/state-property.decorator.ts","../../../../wesib/src/feature/attributes/track-attribute.ts","../../../../wesib/src/feature/dom-properties/dom-property-descriptor.ts","../../../../wesib/src/feature/dom-properties/dom-property-registry.impl.ts","../../../../wesib/src/feature/dom-properties/dom-properties-support.feature.ts","../../../../wesib/src/feature/dom-properties/dom-property-path.ts","../../../../wesib/src/feature/dom-properties/dom-property-update.impl.ts","../../../../wesib/src/feature/dom-properties/dom-property.decorator.ts","../../../../wesib/src/feature/dom-properties/dom-property-descriptor.impl.ts","../../../../wesib/src/feature/render/element-render-ctl.impl.ts","../../../../wesib/src/feature/render/element-render-ctl.ts","../../../../wesib/src/feature/render/render.decorator.ts","../../../../wesib/src/feature/shadow-dom/shadow-content-root.ts","../../../../wesib/src/feature/shadow-dom/shadow-dom-event.ts","../../../../wesib/src/feature/shadow-dom/shadow-root-builder.ts","../../../../wesib/src/feature/shadow-dom/shadow-dom-support.feature.ts","../../../../wesib/src/feature/shadow-dom/attach-shadow.decorator.ts","../../../../wesib/src/wesib.ns.ts"],"sourcesContent":["import { SingleContextKey } from '@proc7ts/context-values';\nimport { BootstrapContext } from './bootstrap-context';\n\n/**\n * @internal\n */\nexport const BootstrapContext__key = (/*#__PURE__*/ new SingleContextKey<BootstrapContext>('bootstrap-context'));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues } from '@proc7ts/context-values';\nimport { EventReceiver, EventSupply, OnEvent } from '@proc7ts/fun-events';\nimport { Class } from '../common';\nimport { ComponentClass, DefinitionContext } from '../component/definition';\nimport { FeatureRef } from '../feature';\nimport { BootstrapContext__key } from './bootstrap-context.key.impl';\n\n/**\n * Components bootstrap context.\n *\n * An instance of this class is passed to [[FeatureDef.Options.init]] method so that the feature can configure itself.\n *\n * Extends `BootstrapValues` interface. The values could be {@link BootstrapSetup.provide pre-configured} in feature\n * definitions.\n *\n * @category Core\n */\nexport abstract class BootstrapContext extends ContextValues {\n\n  /**\n   * A key of bootstrap context value containing the bootstrap context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<BootstrapContext> {\n    return BootstrapContext__key;\n  }\n\n  /**\n   * Builds an `OnEvent` sender of bootstrap readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete.\n   *\n   * If bootstrap is complete already, the receiver will be notified immediately.\n   *\n   * @returns `OnEvent` sender of ready bootstrap context.\n   */\n  abstract whenReady(): OnEvent<[BootstrapContext]>;\n\n  /**\n   * Registers a `receiver` of bootstrap readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete.\n   *\n   * If bootstrap is complete already, the receiver will be notified immediately.\n   *\n   * @param receiver  Target receiver of reay bootstrap context.\n   *\n   * @returns Bootstrap readiness event supply.\n   */\n  abstract whenReady(receiver: EventReceiver<[BootstrapContext]>): EventSupply;\n\n  /**\n   * Allows to wait for component definition.\n   *\n   * This corresponds to `window.customElements.whenDefined()` method.\n   *\n   * @param componentType  Component class constructor.\n   *\n   * @return An `OnEvent` sender of definition context sent when the given `componentType` is registered.\n   */\n  abstract whenDefined<C extends object>(componentType: ComponentClass<C>): OnEvent<[DefinitionContext<C>]>;\n\n  /**\n   * Allows to loads the given `feature`.\n   *\n   * @param feature  The feature to load.\n   *\n   * @returns  Loaded feature reference.\n   */\n  abstract load(feature: Class): FeatureRef;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKeyDefault } from '@proc7ts/context-values';\nimport { BootstrapContext } from './bootstrap-context';\n\n/**\n * Provides a default value for bootstrap context key.\n *\n * @category Core\n * @param provide  A function accepting bootstrap context and target key as parameters, and returning either a default\n * value, or `null`/`undefined` if unknown.\n *\n * @returns A provider of default value for bootstrap context value key.\n */\nexport function bootstrapDefault<Value, Key extends ContextKey<any, any, any>>(\n    provide: (this: void, context: BootstrapContext, key: Key) => Value | null | undefined,\n): ContextKeyDefault<Value, Key> {\n  return (context, key) => {\n\n    const bootstrapContext = context.get(BootstrapContext);\n\n    return context === bootstrapContext ? provide(bootstrapContext, key) : bootstrapContext.get(key);\n  };\n}\n","/**\n * @internal\n */\nexport function isArray<T>(value: T | T[]): value is T[];\n\n/**\n * @internal\n */\nexport function isArray<T>(value: T | readonly T[]): value is readonly T[];\n\nexport function isArray<T>(value: T | readonly T[]): value is T[] {\n  return Array.isArray(value);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { AIterable } from '@proc7ts/a-iterable';\nimport { isArray } from './types.impl';\n\n/**\n * @category Utility\n */\nexport class ArraySet<T> extends AIterable<T> {\n\n  readonly items: Set<T>;\n\n  constructor(value?: T | readonly T[]) {\n    super();\n    this.items = value == null ? new Set() : isArray(value) ? new Set(value) : new Set([value]);\n  }\n\n  get value(): T | T[] | undefined {\n    switch (this.items.size) {\n    case 0: return;\n    case 1: return this.items[Symbol.iterator]().next().value;\n    default: return [...this.items];\n    }\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.items[Symbol.iterator]();\n  }\n\n  add(...items: T[]): this {\n    items.forEach(item => this.items.add(item));\n    return this;\n  }\n\n  get size(): number {\n    return this.items.size;\n  }\n\n  merge(items: readonly T[] | T | undefined): this {\n    if (items == null) {\n      return this;\n    }\n    if (isArray(items)) {\n      return this.add(...items);\n    }\n    return this.add(items);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Arbitrary class constructor.\n *\n * @category Utility\n * @typeparam T  A type of object.\n */\nexport interface Class<T extends object = any> extends Function {\n  new(...args: any[]): T;\n  prototype: T;\n}\n\n/**\n * Detects super class of the given class optionally satisfying the given criteria.\n *\n * Traverses all class ancestors until reaches the one satisfying the given criteria, or stops when there is no more\n * ancestors.\n *\n * @category Utility\n * @param type  The class constructor to find super class of.\n * @param satisfying  The criteria of super class matching. It is a function accepting a super class constructor\n * as the only parameter and returning `true` if the given super class matches, or `false` otherwise. Always returns\n * `true` by default.\n *\n * @return A super class `satisfying` the given criteria, or `undefined` if there is no such super class, or there is no\n * super class at all (e.g. when `Object` is passed in).\n */\nexport function superClassOf(type: Class, satisfying: (type: Class) => boolean = () => true): Class | undefined {\n\n  const prototype = Object.getPrototypeOf(type.prototype);\n\n  if (prototype == null) {\n    return;\n  }\n\n  const superType = prototype.constructor as Class;\n\n  if (satisfying(superType)) {\n    return superType;\n  }\n\n  return superClassOf(superType, satisfying);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from './classes';\nimport { fieldAccessorDescriptor, PropertyAccessorDescriptor, toPropertyAccessorDescriptor } from './reflect';\n\n/**\n * Typed class decorator.\n *\n * @category Utility\n * @typeparam T  A type of class to decorate.\n */\nexport type TypedClassDecorator<T extends Class> = (type: T) => T | void;\n\n/**\n * Typed property decorator.\n *\n * @category Utility\n * @typeparam T  A type of class the decorated property belongs to.\n */\nexport type TypedPropertyDecorator<T extends Class> =\n    <V>(target: InstanceType<T>, propertyKey: string | symbol, descriptor?: TypedPropertyDescriptor<V>) => any | void;\n\n/**\n * Property decorator helper converting a field or property to the one with accessor (`get` and optionally `set`).\n *\n * @category Utility\n * @typeparam T  A type of target object.\n * @typeparam V  A property value type.\n * @param target  Target object containing the property.\n * @param propertyKey  Target property key.\n * @param desc  Target property descriptor, or `undefined` for object fields.\n * @param updateDescriptor  Descriptor updater. Accepts the accessor descriptor as the only argument. If returns\n * a descriptor, then it is applied to the property. Otherwise the target property descriptor is never updated.\n *\n * @returns Updated property descriptor to return from decorator to apply to the property, or `undefined` if there is\n * nothing to update.\n */\nexport function decoratePropertyAccessor<T, V>(\n    target: T,\n    propertyKey: string | symbol,\n    desc: TypedPropertyDescriptor<V> | undefined,\n    updateDescriptor: (desc: PropertyAccessorDescriptor<V>) => PropertyAccessorDescriptor<V>,\n): PropertyAccessorDescriptor<V> | undefined {\n\n  const isField = !desc;\n  const accessorDesc: PropertyAccessorDescriptor<V> = desc\n      ? toPropertyAccessorDescriptor(desc)\n      : fieldAccessorDescriptor(target, propertyKey as keyof T) as any;\n  const updatedDesc = updateDescriptor(accessorDesc);\n\n  if (isField && updatedDesc) {\n    Object.defineProperty(target, propertyKey, updatedDesc);\n    return;\n  }\n\n  return updatedDesc;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Converts an object field to property accessor.\n *\n * Defines a new property with the given name in the target object and returns its descriptor.\n *\n * The converted descriptor is always configurable, enumerable, and writable.\n *\n * @category Utility\n * @typeparam T  The type of target object.\n * @typeparam K  Target object property keys type.\n * @param target  The object containing target field.\n * @param fieldKey  Target field key.\n *\n * @return New property accessor descriptor.\n */\nexport function field2accessor<T, K extends keyof T>(\n    target: T,\n    fieldKey: K,\n): PropertyAccessorDescriptor<T[K]> {\n\n  const desc = fieldAccessorDescriptor(target, fieldKey);\n\n  Object.defineProperty(target, fieldKey, desc);\n\n  return desc;\n}\n\n/**\n * Creates an property accessor descriptor for the given field.\n *\n * @category Utility\n * @typeparam T  The type of target object.\n * @typeparam K  Target object property keys type.\n * @param target  The object containing target field.\n * @param fieldKey  Target field key.\n */\nexport function fieldAccessorDescriptor<T, K extends keyof T>(\n    target: T,\n    fieldKey: K,\n): PropertyAccessorDescriptor<T[K]> {\n\n  const value__symbol = Symbol(`${String(fieldKey)}:value`);\n  const initial: T[K] = target[fieldKey];\n\n  return {\n    configurable: true,\n    enumerable: true,\n    get(this: any) {\n      return value__symbol in this ? this[value__symbol] : initial;\n    },\n    set(this: any, newValue) {\n      this[value__symbol] = newValue;\n    },\n  };\n}\n\n/**\n * Property accessor descriptor. I.e. the one with `get` and `set` functions.\n *\n * @category Utility\n * @typeparam V  Property value type.\n */\nexport interface PropertyAccessorDescriptor<V> extends TypedPropertyDescriptor<V> {\n  enumerable?: boolean;\n  configurable?: boolean;\n  writable?: undefined;\n  value?: undefined;\n  get?: () => V;\n  set?: (value: V) => void;\n}\n\n/**\n * Detects whether the given property descriptor is the one of property accessor.\n *\n * @category Utility\n * @typeparam V  Property value type.\n * @param desc  Target property descriptor.\n *\n * @return `true` if the descriptor has no `value` or `writable` attributes set.\n */\nexport function isPropertyAccessorDescriptor<V>(\n    desc: TypedPropertyDescriptor<V>,\n): desc is PropertyAccessorDescriptor<V> {\n  return desc.value === undefined && desc.writable === undefined;\n}\n\n/**\n * Converts a property descriptor to property accessor descriptor.\n *\n * @category Utility\n * @typeparam V  Property value type.\n * @param desc  Target property descriptor.\n *\n * @return Either an accessor descriptor constructed from data descriptor, or `desc` if it is an accessor descriptor\n * already.\n */\nexport function toPropertyAccessorDescriptor<V>(\n    desc: TypedPropertyDescriptor<V>,\n): PropertyAccessorDescriptor<V> {\n  if (isPropertyAccessorDescriptor(desc)) {\n    return desc;\n  }\n\n  const value__symbol = Symbol('value');\n  const initial = desc.value as V;\n\n  const accessorDesc: PropertyAccessorDescriptor<V> = {\n    ...desc,\n    writable: undefined,\n    value: undefined,\n    get(this: any) {\n      return value__symbol in this ? this[value__symbol] : initial;\n    },\n  };\n\n  if (desc.writable) {\n    accessorDesc.set = function (this: any, newValue: V) {\n      this[value__symbol] = newValue;\n    };\n  }\n\n  delete accessorDesc.writable;\n  delete accessorDesc.value;\n\n  return accessorDesc;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Merges two functions by calling one after another.\n *\n * Optionally merges function call results.\n *\n * @category Utility\n * @typeparam P  Function parameter types as tuple.\n * @typeparam R  A type of function result.\n * @typeparam T  A type if `this` object expected by function.\n * @param first  The first function to call.\n * @param second  The second function to call.\n * @param merge  Optional function call results merger. Accepts two function results as arguments and returns the final\n * result. When omitted the first function call result is ignored and the second function's call result is returned.\n *\n * @return A function that calls both of the given ones and merges their results. If one of the functions is absent,\n * then just returns another one. If both are absent, then returns `undefined`.\n */\nexport function mergeFunctions<P extends any[], R, T>(\n    first: (this: T, ...args: P) => R,\n    second: ((this: T, ...args: P) => R) | undefined,\n    merge: (first: R, second: R) => R,\n): (this: T, ...args: P) => R;\n\nexport function mergeFunctions<P extends any[], R, T>(\n    first: ((this: T, ...args: P) => R) | undefined,\n    second: (this: T, ...args: P) => R,\n    merge?: (first: R, second: R) => R,\n): (this: T, ...args: P) => R;\n\nexport function mergeFunctions<P extends any[], R, T>(\n    first: ((this: T, ...args: P) => R) | undefined,\n    second: ((this: T, ...args: P) => R) | undefined,\n    merge?: (first: R, second: R) => R,\n): ((this: T, ...args: P) => R) | undefined;\n\nexport function mergeFunctions<P extends any[], R, T>(\n    first: ((this: T, ...args: P) => R) | undefined,\n    second: ((this: T, ...args: P) => R) | undefined,\n    merge: (first: R, second: R) => R = (_f, s) => s,\n): ((this: T, ...args: P) => R) | undefined {\n  if (!first) {\n    return second;\n  }\n  if (!second) {\n    return first;\n  }\n  return function (this: T, ...args: P): R {\n    return merge(\n        first.apply(this, args),\n        second.apply(this, args),\n    );\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Checks whether the given DOM node is element.\n *\n * @category Utility\n * @param node  A DOM node to check.\n *\n * @returns `true` is `node` is element, or `false` otherwise.\n */\nexport function isElement(node: Node): node is Element {\n  return node.nodeType === Node.ELEMENT_NODE;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { flatMapIt, mapIt } from '@proc7ts/a-iterable';\nimport { Class, superClassOf } from './classes';\n\n/**\n * @category Utility\n */\nexport abstract class MetaAccessor<M, S = M> {\n\n  readonly symbol: symbol;\n\n  protected constructor(symbol: symbol) {\n    this.symbol = symbol;\n  }\n\n  own(type: Class): M | undefined {\n    // eslint-disable-next-line no-prototype-builtins\n    return type.hasOwnProperty(this.symbol) ? (type as any)[this.symbol] : undefined;\n  }\n\n  of(type: Class): M | undefined {\n\n    const ownDef: M | undefined = this.own(type);\n    const superType = superClassOf(type);\n    const superDef = superType && this.of(superType);\n\n    return ownDef ? (superDef ? this.merge([superDef, ownDef]) : ownDef) : superDef;\n  }\n\n  define<C extends Class>(type: C, sources: Iterable<S>): C {\n\n    const prevMeta = this.own(type);\n    const updates = mapIt(sources, source => this.meta(source, type));\n    const newMeta: M = this.merge(prevMeta ? flatMapIt([[prevMeta], updates]) : updates);\n\n    Object.defineProperty(\n        type,\n        this.symbol,\n        {\n          configurable: true,\n          value: newMeta,\n        },\n    );\n\n    return type;\n  }\n\n  abstract merge(metas: Iterable<M>): M;\n\n  protected abstract meta(source: S, type: Class): M;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * @category Utility\n */\nexport class PromiseResolver<T = void> {\n\n  readonly promise: Promise<T>;\n  private _resolve!: (value: T) => void;\n  private _reject!: (error: any) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  resolve(value: T): void {\n    this._resolve(value);\n  }\n\n  reject(error: any): void {\n    this._reject(error);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { itsReduction } from '@proc7ts/a-iterable';\nimport { BootstrapSetup } from '../boot';\nimport { ArraySet, Class, mergeFunctions, MetaAccessor } from '../common';\nimport { FeatureContext } from './feature-context';\n\n/**\n * A key of a property holding a feature definition within its class constructor.\n *\n * @category Core\n */\nexport const FeatureDef__symbol = (/*#__PURE__*/ Symbol('feature-def'));\n\n/**\n * Feature definition.\n *\n * This can be one of:\n * - feature definition options object,\n * - feature definition holder, or\n * - feature definition factory.\n *\n * @category Core\n */\nexport type FeatureDef =\n    | FeatureDef.Options\n    | FeatureDef.Holder\n    | FeatureDef.Factory;\n\nexport namespace FeatureDef {\n\n  /**\n   * Feature definition options.\n   */\n  export interface Options {\n\n    readonly [FeatureDef__symbol]?: undefined;\n\n    /**\n     * Features this one requires.\n     */\n    readonly needs?: Class | readonly Class[];\n\n    /**\n     * Features this one provides.\n     *\n     * The feature always provides itself.\n     */\n    readonly has?: Class | readonly Class[];\n\n    /**\n     * Sets up bootstrap.\n     *\n     * This method is called before bootstrap context created.\n     *\n     * @param setup  Bootstrap setup.\n     */\n    setup?(setup: BootstrapSetup): void;\n\n    /**\n     * Bootstraps this feature by calling the given bootstrap context constructed.\n     *\n     * @param context  Feature initialization context.\n     */\n    init?(context: FeatureContext): void;\n\n  }\n\n  /**\n   * Feature definition holder.\n   */\n  export interface Holder {\n\n    /**\n     * The feature definition this holder contains.\n     */\n    readonly [FeatureDef__symbol]: FeatureDef;\n\n  }\n\n  /**\n   * Feature definition factory.\n   */\n  export interface Factory {\n\n    /**\n     * Builds feature definition.\n     *\n     * @param featureType  A feature class constructor to build definition for.\n     *\n     * @returns Built feature definition.\n     */\n    [FeatureDef__symbol](featureType: Class): FeatureDef;\n\n  }\n\n}\n\n/**\n * @internal\n */\nclass FeatureMeta extends MetaAccessor<FeatureDef.Options, FeatureDef> {\n\n  constructor() {\n    super(FeatureDef__symbol);\n  }\n\n  merge(defs: Iterable<FeatureDef.Options>): FeatureDef.Options {\n    return itsReduction<FeatureDef.Options, FeatureDef.Options>(\n        defs,\n        (prev, def) => ({\n          needs: new ArraySet(prev.needs).merge(def.needs).value,\n          has: new ArraySet(prev.has).merge(def.has).value,\n          setup: mergeFunctions<[BootstrapSetup], void, Class>(prev.setup, def.setup),\n          init: mergeFunctions<[FeatureContext], void, Class>(prev.init, def.init),\n        }),\n        {},\n    );\n  }\n\n  meta(source: FeatureDef, type: Class): FeatureDef.Options {\n\n    const def = source[FeatureDef__symbol];\n\n    return def == null\n        ? source as FeatureDef.Options\n        : this.meta(\n            typeof def === 'function' ? (source as FeatureDef.Factory)[FeatureDef__symbol](type) : def,\n            type,\n        );\n  }\n\n}\n\n/**\n * @internal\n */\nconst featureMeta = (/*#__PURE__*/ new FeatureMeta());\n\n/**\n * @internal\n */\nconst noFeatureDef: FeatureDef.Factory = {\n  [FeatureDef__symbol]() {\n    return {};\n  },\n};\n\n/**\n * @category Core\n */\nexport const FeatureDef = {\n\n  /**\n   * Extracts feature definition options from its type.\n   *\n   * @param featureType  Target feature class constructor.\n   *\n   * @returns Feature definition options. May be empty when there is no feature definition found in the given\n   * `featureType`.\n   */\n  of(this: void, featureType: Class): FeatureDef.Options {\n    return featureMeta.of(featureType) || {};\n  },\n\n  /**\n   * Builds feature definition options for the given feature class.\n   *\n   * @param featureType  Target feature class constructor.\n   * @param def  A feature definition.\n   *\n   * @returns Feature definition options.\n   */\n  for(this: void, featureType: Class, def: FeatureDef): FeatureDef.Options {\n    return featureMeta.meta(def, featureType);\n  },\n\n  /**\n   * Merges multiple feature definition options.\n   *\n   * @param defs  Feature definition options to merge.\n   *\n   * @returns Merged feature definition options.\n   */\n  merge(this: void, ...defs: readonly FeatureDef.Options[]): FeatureDef.Options {\n    return featureMeta.merge(defs);\n  },\n\n  /**\n   * Merges multiple feature definitions.\n   *\n   * @param defs  Feature definitions to merge.\n   *\n   * @returns Merged feature definition.\n   */\n  all(this: void, ...defs: readonly FeatureDef[]): FeatureDef {\n    return itsReduction<FeatureDef, FeatureDef.Factory>(\n        defs,\n        (prev, def) => ({\n          [FeatureDef__symbol](featureType: Class) {\n            return FeatureDef.merge(\n                FeatureDef.for(featureType, prev),\n                FeatureDef.for(featureType, def),\n            );\n          },\n        }),\n        noFeatureDef,\n    );\n  },\n\n  /**\n   * Defines a feature.\n   *\n   * Either creates new or extends an existing feature definition and stores it under `[FeatureDef__symbol]` key.\n   *\n   * @typeparam T  Feature type.\n   * @param featureType  Feature class constructor.\n   * @param defs  Feature definitions.\n   *\n   * @returns The `type` instance.\n   */\n  define<T extends Class>(this: void, featureType: T, ...defs: readonly FeatureDef[]): T {\n    return featureMeta.define(featureType, defs);\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class, TypedClassDecorator } from '../common';\nimport { FeatureDef } from './feature-def';\n\n/**\n * Feature class decorator.\n *\n * Decorate a class with this decorator to define it as a feature like this:\n * ```TypeScript\n * @Feature({ needs: [OtherFeature, MyComponent] })\n * class MyFeature {\n *   // ...\n * }\n * ```\n *\n * Such feature can be passed to [[bootstrapComponents]] function or referenced by other features.\n *\n * This is an alternative to direct call to [[FeatureDef.define]] method.\n *\n * @category Core\n * @typeparam T  A type of decorated feature class.\n * @param defs  Feature definitions.\n *\n * @returns A feature class decorator.\n */\nexport function Feature<T extends Class = any>(...defs: FeatureDef[]): TypedClassDecorator<T> {\n  return (type: T) => FeatureDef.define(type, ...defs);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValueSpec, SingleContextKey } from '@proc7ts/context-values';\nimport { EventReceiver, EventSupply, OnEvent } from '@proc7ts/fun-events';\nimport { BootstrapContext, BootstrapSetup } from '../boot';\nimport { Class } from '../common';\nimport { ComponentContext } from '../component';\nimport { ComponentClass, DefinitionContext, DefinitionSetup } from '../component/definition';\nimport { FeatureRef } from './feature-ref';\n\n/**\n * @internal\n */\nconst FeatureContext__key = (/*#__PURE__*/ new SingleContextKey<FeatureContext>('feature-context'));\n\n/**\n * Feature initialization context.\n *\n * @category Core\n */\nexport abstract class FeatureContext extends BootstrapContext implements BootstrapSetup {\n\n  /**\n   * A key of feature context value containing the feature context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<FeatureContext> {\n    return FeatureContext__key;\n  }\n\n  /**\n   * Feature class this context is created for.\n   */\n  abstract readonly feature: Class;\n\n  /**\n   * Builds an `OnEvent` sender of feature readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete and the feature is loaded.\n   *\n   * If the above conditions satisfied already, the receiver will be notified immediately.\n   *\n   * @returns `OnEvent` sender of ready feature context.\n   */\n  abstract whenReady(): OnEvent<[FeatureContext]>;\n\n  /**\n   * Registers a receiver of feature readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete and the feature is loaded.\n   *\n   * If the above conditions satisfied already, the receiver will be notified immediately.\n   *\n   * @param receiver  Target receiver of ready feature context.\n   *\n   * @returns Feature readiness event supply.\n   */\n  abstract whenReady(receiver: EventReceiver<[FeatureContext]>): EventSupply;\n\n  /**\n   * Builds an `OnEvent` sender of component definition events.\n   *\n   * The registered receiver will be notified when new component class is defined, but before its custom element class\n   * constructed.\n   *\n   * @returns `OnEvent` sender of component definition contexts.\n   */\n  abstract onDefinition(): OnEvent<[DefinitionContext]>;\n\n  /**\n   * Starts sending component definition events to the given `receiver`.\n   *\n   * The receiver will be notified when new component class is defined, but before its custom element class\n   * constructed.\n   *\n   * @param receiver  Target receiver of component definition contexts.\n   *\n   * @returns Component definition events supply.\n   */\n  abstract onDefinition(receiver: EventReceiver<[DefinitionContext]>): EventSupply;\n\n  /**\n   * Builds an `OnEvent` sender of component construction events.\n   *\n   * The registered receiver will be notified right before component is constructed.\n   *\n   * @returns `OnEvent` sender of constructed component contexts.\n   */\n  abstract onComponent(): OnEvent<[ComponentContext]>;\n\n  /**\n   * Starts sending component construction events to the given `receiver`.\n   *\n   * @param receiver  Target receiver of constructed component contexts.\n   *\n   * @returns Component construction events supply.\n   */\n  abstract onComponent(receiver: EventReceiver<[ComponentContext]>): EventSupply;\n\n  /**\n   * Provides bootstrap context value.\n   *\n   * Note that this happens when bootstrap context already exists. To provide a value before bootstrap context created\n   * a [[BootstrapSetup.provide]] method can be used.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  abstract provide<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<BootstrapContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract perDefinition<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<DefinitionContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract perComponent<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<ComponentContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract setupDefinition<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionSetup]>;\n\n  /**\n   * Defines a component.\n   *\n   * Creates a custom element according to component definition, and registers it with custom elements registry.\n   *\n   * Note that custom element definition will happen only when all features configuration complete.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Component class constructor.\n   *\n   * @return Custom element class constructor registered as custom element.\n   *\n   * @throws TypeError  If `componentType` does not contain a component definition.\n   */\n  abstract define<T extends object>(componentType: ComponentClass<T>): void;\n\n  whenDefined<C extends object>(componentType: ComponentClass<C>): OnEvent<[DefinitionContext<C>]> {\n    return this.get(BootstrapContext).whenDefined(componentType);\n  }\n\n  load(feature: Class): FeatureRef {\n    return this.get(BootstrapContext).load(feature);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '../common';\n\n/**\n * Feature need.\n *\n * Indicates why one feature needs another one. The reason can be one of:\n *\n * - `needs` when feature {@link FeatureDef.Options.needs depends} on another one, or\n * - `has` when feature {@link FeatureDef.Options.has provides} another one.\n *\n * @category Core\n */\nexport type FeatureNeed = [Class, 'needs' | 'has', Class];\n\n/**\n * An error in feature needs. I.e. circular dependency.\n *\n * @category Core\n */\nexport class FeatureNeedsError extends Error {\n\n  /**\n   * Feature needs causing this error.\n   */\n  readonly needs: readonly FeatureNeed[];\n\n  /**\n   * Constructs feature needs error.\n   *\n   * @param needs  Feature needs causing the error.\n   */\n  constructor(needs: readonly FeatureNeed[]) {\n    super(\n        'Circular feature needs: ' + needs.reduce(\n        (\n            prev,\n            [feature, reason, need],\n        ) => (prev ? prev : feature.name) + ` ${reason} ${need.name}`,\n        '',\n        ),\n    );\n    this.needs = needs;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { itsReduction } from '@proc7ts/a-iterable';\nimport { isQualifiedName, QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { mergeFunctions, MetaAccessor } from '../common';\nimport { FeatureDef, FeatureDef__symbol } from '../feature';\nimport { ComponentClass, DefinitionContext, DefinitionSetup, ElementDef } from './definition';\n\n/**\n * A key of a property holding a component definition within its class constructor.\n *\n * @category Core\n */\nexport const ComponentDef__symbol = (/*#__PURE__*/ Symbol('component-def'));\n\n/**\n * Component definition.\n *\n * A custom element class will be created for each registered component in accordance to this definition.\n *\n * This can be one of:\n * - custom element name (possibly qualified),\n * - component definition options,\n * - component definition holder,\n * - component definition factory,\n * - feature definition holder, or\n * - feature definition factory.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport type ComponentDef<T extends object = any> =\n    | QualifiedName\n    | ComponentDef.Options<T>\n    | ComponentDef.Holder<T>\n    | ComponentDef.Factory<T>\n    | FeatureDef.Holder\n    | FeatureDef.Factory;\n\nexport namespace ComponentDef {\n\n  /**\n   * Component definition options.\n   */\n  export interface Options<T extends object = any> {\n\n    readonly [ComponentDef__symbol]?: undefined;\n\n    /**\n     * Custom element name.\n     *\n     * The name may belong to some namespace to avoid naming conflicts. I.e. it can be either a string, or\n     * name/namespace tuple.\n     *\n     * When omitted an anonymous component will be registered. Such component is not bound to custom element, but it\n     * still can be mounted.\n     */\n    readonly name?: QualifiedName;\n\n    /**\n     * Existing element to extend by custom one.\n     */\n    readonly extend?: ElementDef.Extend;\n\n    /**\n     * Additional feature definition options.\n     */\n    readonly feature?: FeatureDef.Options;\n\n    /**\n     * Sets up component definition.\n     *\n     * This method is called before component definition context constructed.\n     *\n     * @param setup  Component definition setup.\n     */\n    setup?(setup: DefinitionSetup<T>): void;\n\n    /**\n     * Defines this component by calling the given component definition context methods.\n     *\n     * This function is called before the custom element is defined.\n     *\n     * @param context  Component definition context.\n     */\n    define?(context: DefinitionContext<T>): void;\n\n  }\n\n  /**\n   * Component definition holder.\n   *\n   * @typeparam T  A type of component.\n   */\n  export interface Holder<T extends object = any> {\n\n    /**\n     * The component definition this holder contains.\n     */\n    readonly [ComponentDef__symbol]: ComponentDef<T>;\n\n  }\n\n  /**\n   * Component definition factory.\n   *\n   * @typeparam T  A type of component.\n   */\n  export interface Factory<T extends object = any> {\n\n    /**\n     * Builds component definition.\n     *\n     * @param componentType  A component class constructor to build definition for.\n     *\n     * @returns Built component definition.\n     */\n    [ComponentDef__symbol](componentType: ComponentClass<T>): ComponentDef<T>;\n\n  }\n\n}\n\n/**\n * @internal\n */\nclass ComponentMeta extends MetaAccessor<ComponentDef.Options, ComponentDef> {\n\n  constructor() {\n    super(ComponentDef__symbol);\n  }\n\n  merge<T extends object>(defs: Iterable<ComponentDef.Options<T>>): ComponentDef.Options<T> {\n    return itsReduction<ComponentDef.Options<T>, ComponentDef.Options<T>>(\n        defs,\n        (prev, def) => ({\n          ...prev,\n          ...def,\n          setup: mergeFunctions(prev.setup, def.setup),\n          define: mergeFunctions(prev.define, def.define),\n          feature: prev.feature\n              ? def.feature ? FeatureDef.merge(prev.feature, def.feature) : prev.feature\n              : def.feature,\n        }),\n        {},\n    );\n  }\n\n  meta<T extends object>(source: ComponentDef<T>, componentType: ComponentClass<T>): ComponentDef.Options<T> {\n\n    const def = (source as any)[ComponentDef__symbol];\n\n    if (def != null) {\n      return this.meta(\n          typeof def === 'function' ? (source as ComponentDef.Factory<T>)[ComponentDef__symbol](componentType) : def,\n          componentType,\n      );\n    }\n    if ((source as any)[FeatureDef__symbol] != null) {\n      return {\n        feature: FeatureDef.for(componentType, source as FeatureDef),\n      };\n    }\n    if (isQualifiedName(source)) {\n      return { name: source };\n    }\n\n    return source as ComponentDef.Options;\n  }\n\n}\n\n/**\n * @internal\n */\nconst componentMeta = (/*#__PURE__*/ new ComponentMeta());\n\n/**\n * @internal\n */\nconst noComponentDef: ComponentDef.Factory = {\n  [ComponentDef__symbol]() {\n    return {};\n  },\n};\n\n/**\n * @category Core\n */\nexport const ComponentDef = {\n\n  /**\n   * Extracts component definition options from its type.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Target component class constructor.\n   *\n   * @returns Component definition options. May be empty if there is not definition attached to component type.\n   */\n  of<T extends object>(this: void, componentType: ComponentClass<T>): ComponentDef.Options<T> {\n    return componentMeta.of(componentType) as ComponentDef.Options<T> || {};\n  },\n\n  /**\n   * Builds component definition options for the given component class.\n   *\n   * @param componentType  Target component class constructor.\n   * @param source  A source of component definition.\n   *\n   * @returns Component definition.\n   */\n  for<T extends object>(\n      this: void,\n      componentType: ComponentClass<T>,\n      source: ComponentDef<T>,\n  ): ComponentDef.Options<T> {\n    return componentMeta.meta(source, componentType);\n  },\n\n  /**\n   * Merges multiple component definition options.\n   *\n   * @typeparam T  A type of component.\n   * @param defs  Component definition options to merge.\n   *\n   * @returns Merged component definition options.\n   */\n  merge<T extends object>(this: void, ...defs: ComponentDef.Options<T>[]): ComponentDef.Options<T> {\n    return componentMeta.merge(defs);\n  },\n\n  /**\n   * Merges multiple component definitions.\n   *\n   * @typeparam T  A type of component.\n   * @param defs  Component definitions to merge.\n   *\n   * @returns Merged component definition.\n   */\n  all<T extends object>(this: void, ...defs: ComponentDef<T>[]): ComponentDef<T> {\n    return itsReduction<ComponentDef<T>, ComponentDef.Factory<T>>(\n        defs,\n        (prev, def) => ({\n          [ComponentDef__symbol](componentType: ComponentClass<T>) {\n            return ComponentDef.merge(\n                ComponentDef.for(componentType, prev),\n                ComponentDef.for(componentType, def),\n            );\n          },\n        }),\n        noComponentDef,\n    );\n  },\n\n  /**\n   * Defines a component.\n   *\n   * Either assigns new or extends existing component definition and stores it under [[ComponentDef__symbol]] key.\n   *\n   * Each component can be passed directly to [[bootstrapComponents]] function or added as a requirement\n   * of another feature.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Component class constructor.\n   * @param defs  Component definitions.\n   *\n   * @returns The `type` instance.\n   */\n  define<T extends ComponentClass>(\n      this: void,\n      componentType: T,\n      ...defs: ComponentDef<InstanceType<T>>[]\n  ): T {\n    return componentMeta.define(componentType, defs);\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '../common';\nimport { ComponentDef, ComponentDef__symbol } from './component-def';\nimport { ComponentClass } from './definition';\n\n/**\n * Component decorator interface.\n *\n * In addition to being a decorator for component class, it may also serve as {@link ComponentDef component definition}.\n * Thus it can be added as parameter to {@link Component @Component} decorator, or used as class decorator by itself.\n *\n * Constructed by [[Component]] function.\n *\n * @category Core\n * @typeparam T  A type of decorated component class.\n */\nexport type ComponentDecorator<T extends ComponentClass = Class> =\n    & ((this: void, type: T) => T | void)\n    & ComponentDef<InstanceType<T>>;\n\n/**\n * Decorator of component class.\n *\n * Decorated class becomes component:\n * ```TypeScript\n * @Component({ name: 'my-element' })\n * class MyComponent {\n *   // ...\n * }\n * ```\n *\n * Such component can be registered with [[FeatureContext.define]] method or used as a feature, e.g. passed to\n * [[bootstrapComponents]] function, or added to [[FeatureDef.Options.needs]] property of another feature.\n *\n * This is an alternative to direct call to [[ComponentDef.Options.define]] method.\n *\n * @category Core\n * @typeparam T  A type of decorated component class.\n * @param defs  Component definitions.\n *\n * @returns A component class decorator.\n */\nexport function Component<T extends ComponentClass = Class>(\n    ...defs: ComponentDef<InstanceType<T>>[]\n): ComponentDecorator<T> {\n\n  const decorator = ((type: T) => ComponentDef.define(type, ...defs)) as ComponentDecorator<T>;\n  const def = decorator as ComponentDef.Factory<InstanceType<T>>;\n\n  def[ComponentDef__symbol] = () => ComponentDef.all(...defs);\n\n  return decorator;\n}\n","import { SingleContextKey } from '@proc7ts/context-values';\nimport { ComponentContext } from './component-context';\n\n/**\n * @internal\n */\nexport const ComponentContext__key = (/*#__PURE__*/ new SingleContextKey<ComponentContext>('component-context'));\n","import { SingleContextKey } from '@proc7ts/context-values';\nimport { eventSupplyOf } from '@proc7ts/fun-events';\nimport { DomEventDispatcher, OnDomEvent } from '@proc7ts/fun-events/dom';\nimport { ComponentContext__key } from './component-context.key.impl';\nimport { ComponentEventDispatcher } from './component-event';\n\n/**\n * @internal\n */\nexport const ComponentEventDispatcher__key = (/*#__PURE__*/ new SingleContextKey<ComponentEventDispatcher>(\n    'component-event-dispatcher',\n    {\n      byDefault(values) {\n\n        const context = values.get(ComponentContext__key);\n        const dispatcher = new DomEventDispatcher(context.element);\n\n        eventSupplyOf(dispatcher).needs(context);\n\n        return {\n          dispatch(event: Event): boolean {\n            return dispatcher.dispatch(event);\n          },\n          on<E extends Event>(type: string): OnDomEvent<E> {\n            return dispatcher.on(type);\n          },\n        };\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { ComponentContext__key } from './component-context.key.impl';\n\n/**\n * Component content root node.\n *\n * @category Core\n */\nexport type ContentRoot = any;\n\n/**\n * A key of component context value containing a component root element.\n *\n * This is an element itself by default. But can be overridden e.g. by {@link AttachShadow @AttachShadow} decorator.\n *\n * @category Core\n */\nexport const ContentRoot: SingleContextRef<ContentRoot> = (/*#__PURE__*/ new SingleContextKey<ContentRoot>(\n    'content-root',\n    {\n      byDefault(ctx) {\n        return ctx.get(ComponentContext__key).element;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { noop, valueProvider } from '@proc7ts/call-thru';\nimport { FnContextKey, FnContextRef } from '@proc7ts/context-values/updatable';\nimport { StatePath } from '@proc7ts/fun-events';\n\n/**\n * Component state updater function.\n *\n * @category Core\n */\nexport type StateUpdater =\n/**\n * @typeparam V  Updated value type\n * @param path  Updated state node path.\n * @param newValue  New value.\n * @param oldValue  Replaced value.\n */\n    <V>(this: void, path: StatePath, newValue: V, oldValue: V) => void;\n\n/**\n * A key of component context value containing a component state updates receiver function.\n *\n * Features are calling this function by default when component state changes, e.g. attribute value or DOM property\n * modified.\n *\n * Note that this value is not provided, unless the `StateSupport` feature is enabled.\n *\n * @category Core\n */\nexport const StateUpdater: FnContextRef<Parameters<StateUpdater>> = (/*#__PURE__*/ new FnContextKey(\n    'state-updater',\n    {\n      byDefault: valueProvider(noop),\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues } from '@proc7ts/context-values';\nimport {\n  EventReceiver,\n  EventSupply,\n  EventSupply__symbol,\n  EventSupplyPeer,\n  OnEvent,\n  StatePath,\n} from '@proc7ts/fun-events';\nimport { OnDomEvent } from '@proc7ts/fun-events/dom';\nimport { ComponentContext__key } from './component-context.key.impl';\nimport { ComponentEventDispatcher__key } from './component-event.key.impl';\nimport { ComponentMount } from './component-mount';\nimport { ContentRoot } from './content-root';\nimport { ComponentClass } from './definition';\nimport { StateUpdater } from './state-updater';\n\n/**\n * A key of a custom element and component properties containing a reference to component context.\n *\n * @category Core\n */\nexport const ComponentContext__symbol = (/*#__PURE__*/ Symbol('component-context'));\n\n/**\n * Component context.\n *\n * Passed to component constructor as its only parameter.\n *\n * Extends `ContextValues` interface. The values are provided by corresponding providers registered with\n * [[BootstrapSetup.perComponent]] and [[DefinitionSetup.perComponent]] methods.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class ComponentContext<T extends object = any> extends ContextValues implements EventSupplyPeer {\n\n  /**\n   * A key of component context value containing the component context instance itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<ComponentContext> {\n    return ComponentContext__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element constructed for the component according to its type.\n   *\n   * E.g. `HTMLElement` instance.\n   */\n  abstract readonly element: any;\n\n  /**\n   * A component instance.\n   *\n   * It is an error accessing this property before the component is created, e.g. from inside of component constructor\n   * or {@link DefinitionContext.whenComponent component instantiation event} receiver. A [[whenReady]] callback could\n   * be utilized to work this around.\n   */\n  abstract readonly component: T;\n\n  /**\n   * Component mount.\n   *\n   * This is defined when component is mounted to arbitrary element by [[ComponentFactory.mountTo]]. Ot is `undefined`\n   * for components created in standard way.\n   */\n  abstract readonly mount: ComponentMount<T> | undefined;\n\n  /**\n   * Whether the custom element is connected.\n   *\n   * This becomes `true` right before [[whenOn]] event is sent, and becomes `false` right before [[whenOff]] event is\n   * sent.\n   */\n  abstract readonly connected: boolean;\n\n  /**\n   * An event supply that {@link destroy destroys} component when cut off.\n   */\n  abstract readonly [EventSupply__symbol]: EventSupply;\n\n  /**\n   * Updates component's state.\n   *\n   * This is a shorthand for invoking a component {@link StateUpdater state updater} .\n   *\n   * Note that state update has no effect unless [[StateSupport]] feature is enabled or [[StateUpdater]] context value\n   * is provided by other means.\n   *\n   * @typeparam V  A type of changed value.\n   * @param key  Changed value key.\n   * @param newValue  New value.\n   * @param oldValue  Previous value.\n   */\n  readonly updateState: StateUpdater = updateComponentState.bind(this);\n\n  /**\n   * Extracts component context from its custom element or from component itself.\n   *\n   * @param element  Custom element instance created for the component or the component itself.\n   *\n   * @return Component context reference stored under [[ComponentContext__symbol]] key.\n   *\n   * @throws TypeError  When the given `element` does not contain component context reference.\n   */\n  static of<T extends object>(element: any): ComponentContext<T> {\n\n    const context = element[ComponentContext__symbol];\n\n    if (!context) {\n      throw TypeError(`No component context found in ${element}`);\n    }\n\n    return context;\n  }\n\n  /**\n   * Component content root.\n   *\n   * This is a shorthand for requesting a {@link ContentRoot content root} from component context.\n   */\n  get contentRoot(): any {\n    return this.get(ContentRoot);\n  }\n\n  /**\n   * Builds an `OnEvent` sender of component readiness event.\n   *\n   * The component is constructed shortly after custom element. So the component may not exist when requested\n   * e.g. inside component constructor or {@link DefinitionContext.whenComponent component instantiation event}\n   * receiver. The registered receiver will be notified when the component is constructed.\n   *\n   * If the component is constructed already, the receiver will be notified immediately.\n   *\n   * @returns An `OnEvent` sender of this context upon component readiness.\n   */\n  abstract whenReady(): OnEvent<[this]>;\n\n  /**\n   * Registers a receiver of component readiness event.\n   *\n   * The component is constructed shortly after custom element. So the component may not exist when requested\n   * e.g. inside component constructor or {@link DefinitionContext.whenComponent component instantiation event}\n   * receiver. The registered receiver will be notified when the component is constructed.\n   *\n   * @param receiver  Target receiver of this component upon component readiness.\n   *\n   * @returns Component readiness event supply.\n   */\n  abstract whenReady(receiver: EventReceiver<[this]>): EventSupply;\n\n  /**\n   * Builds an `OnEvent` sender of custom element connection events.\n   *\n   * The registered receiver is called when custom element is connected, i.e. its `connectedCallback()` method is\n   * called. If component is connected already the receiver is called immediately.\n   *\n   * @returns An `OnEvent` sender of this component context when connected.\n   */\n  abstract whenConnected(): OnEvent<[this]>;\n\n  /**\n   * Registers a receiver of custom element connection events.\n   *\n   * The registered receiver is called when custom element is connected, i.e. its `connectedCallback()` method is\n   * called. If component is connected already the receiver is called immediately.\n   *\n   * @param receiver  Target receiver of this component context when connected.\n   *\n   * @returns Custom element connection events supply.\n   */\n  abstract whenConnected(receiver: EventReceiver<[this]>): EventSupply;\n\n  /**\n   * Returns a `super` property value inherited from custom element parent.\n   *\n   * @param key  Target property key.\n   */\n  abstract elementSuper(key: PropertyKey): any;\n\n  /**\n   * Returns a DOM event producer for the given event type.\n   *\n   * This is a shorthand for invoking a component event producer function available under\n   * `[ComponentEventProducer.key]` key.\n   *\n   * @param type  An event type to listen for.\n   *\n   * @returns A producer of DOM event events of the given type.\n   */\n  on<E extends Event>(type: string): OnDomEvent<E> {\n    return this.get(ComponentEventDispatcher__key).on(type);\n  }\n\n  /**\n   * Dispatches an event to component element.\n   *\n   * This is a shorthand for invoking a component {@link ComponentEventDispatcher event dispatcher}.\n   *\n   * @param event  An event to dispatch.\n   */\n  dispatchEvent(event: Event): void {\n    this.get(ComponentEventDispatcher__key).dispatch(event);\n  }\n\n  /**\n   * Destroys the component.\n   *\n   * Removes element from the DOM tree. I.e. disconnects custom element first.\n   *\n   * After this method call the component should no longer be used.\n   *\n   * Note that component destruction is virtual. It is up to developer to decide when component is no longer needed.\n   * However the component is destroyed automatically once disconnected, i.e. when custom element's\n   * `disconnectedCallback()` method is called.\n   *\n   * @param reason  Optional reason of destruction.\n   */\n  abstract destroy(reason?: any): void;\n\n}\n\n/**\n * @internal\n */\nfunction updateComponentState<V>(this: ComponentContext<any>, key: StatePath, newValue: V, oldValue: V): void {\n  this.get(StateUpdater)(key, newValue, oldValue);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextRef } from '@proc7ts/context-values';\nimport { OnDomEvent } from '@proc7ts/fun-events/dom';\nimport { ComponentContext } from './component-context';\nimport { ComponentEventDispatcher__key } from './component-event.key.impl';\n\n/**\n * Component event.\n *\n * Events of this type are thrown by various services to inform on component status changes.\n *\n * It is illegal to dispatch such events for elements not bound to components. It is reasonable to dispatch events\n * using [[ComponentEventDispatcher]] available in component context.\n *\n * The following event types supported:\n * - `wesib:component` is dispatched when component is bound to element. I.e. when HTML element is upgraded to custom\n *   one defined by component, or component is mounted to element. The event is dispatched when component is connected\n *   for the first time. I.e. when element is added to the document.\n *   This event bubbles and is not cancelable.\n *\n * @category Core\n * @event ComponentEvent#wesib:component\n */\nexport class ComponentEvent extends Event {\n\n  /**\n   * Target component context.\n   */\n  get context(): ComponentContext {\n    return ComponentContext.of(this.target);\n  }\n\n}\n\n/**\n * Component event dispatcher is used to listen for and dispatch component events.\n *\n * It is available in bootstrap context context.\n *\n * By default treats a component element as event target.\n *\n * @category Core\n */\nexport interface ComponentEventDispatcher {\n\n  /**\n   * Dispatches the DOM event for the given component.\n   *\n   * @param event  An event to dispatch.\n   *\n   * @returns `true` if either event's `cancelable` attribute value is `false` or its `preventDefault()` method was not\n   * invoked, or `false` otherwise.\n   */\n  dispatch(event: Event): boolean;\n\n  /**\n   * Returns an `OnDomEvent` sender of DOM events of the given type.\n   *\n   * @param type  An event type to listen for.\n   *\n   * @returns A producer of DOM event events of the given type.\n   */\n  on<E extends Event>(type: string): OnDomEvent<E>;\n\n}\n\n/**\n * A key of component context value containing component event dispatcher.\n *\n * @category Core\n */\nexport const ComponentEventDispatcher: SingleContextRef<ComponentEventDispatcher> = ComponentEventDispatcher__key;\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { valueProvider } from '@proc7ts/call-thru';\nimport { Class, decoratePropertyAccessor, PropertyAccessorDescriptor } from '../common';\nimport { ComponentDef, ComponentDef__symbol } from './component-def';\nimport { Component, ComponentDecorator } from './component.decorator';\nimport { ComponentClass } from './definition';\n\n/**\n * Component property decorator interface.\n *\n * Allows to construct a {@link ComponentDecorator component decorator} by declaring a virtual property to use instead\n * of decorated one.\n *\n * Constructed by [[ComponentProperty]] function.\n *\n * @category Core\n * @typeparam V  Property value type.\n * @typeparam T  A type of decorated component class.\n */\nexport interface ComponentPropertyDecorator<V, T extends ComponentClass = Class> {\n\n  /**\n   * Decorates component method.\n   *\n   * @typeparam P  Property value type.\n   * @param proto  Decorated class prototype.\n   * @param propertyKey  Decorated property key.\n   * @param descriptor  Decorated property descriptor.\n   *\n   * @returns  Either updated property descriptor, or nothing.\n   */\n  // eslint-disable-next-line\n  <P extends V>(\n      this: void,\n      proto: InstanceType<T>,\n      propertyKey: string | symbol,\n      descriptor?: TypedPropertyDescriptor<P>,\n  ): any | void;\n\n  /**\n   * Builds component decorator assuming the virtual property has the given value.\n   *\n   * @param value  Virtual property value.\n   * @param key  Virtual property key. Defaults to [[AnonymousComponentProperty__symbol]].\n   *\n   * @returns New component decorator.\n   */\n  As(\n      this: void,\n      value: V,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n  /**\n   * Builds component decorator assuming the virtual property value is provided by the given `provider`.\n   *\n   * @param provider  Virtual property read-only value provider.\n   * @param key  Virtual property key. Defaults to [[AnonymousComponentProperty__symbol]].\n   *\n   * @returns New component decorator.\n   */\n  By(\n      this: void,\n      provider: ComponentProperty.Provider<V, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n  /**\n   * Builds component decorator assuming the decorated property is available via the given `accessor`.\n   *\n   * @param accessor  Virtual property accessor.\n   * @param key  Virtual property key. Defaults to [[AnonymousComponentProperty__symbol]].\n   *\n   * @returns New component decorator.\n   */\n  With(\n      this: void,\n      accessor: ComponentProperty.Accessor<V, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n  /**\n   * Builds component decorator assuming the decorated property is bound to component with by the given `binder`.\n   *\n   * @param binder  A binder of virtual property accessor\n   * @param key  Virtual property key. Defaults to [[AnonymousComponentProperty__symbol]]..\n   *\n   * @returns New component decorator.\n   */\n  Bind(\n      this: void,\n      binder: ComponentProperty.Binder<V, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n}\n\nexport namespace ComponentProperty {\n\n  /**\n   * Component property value provider signature.\n   *\n   * This function will be called each time the property value is requested.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component.\n   */\n  export type Provider<V, T extends object = any> =\n  /**\n   * @param component  Component instance.\n   * @param key  Target property key.\n   *\n   * @returns Property value.\n   */\n      (\n          this: void,\n          component: T,\n          key: string | symbol,\n      ) => V;\n\n  /**\n   * Component property accessor.\n   *\n   * Allows to read and write property value.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component.\n   */\n  export interface Accessor<V, T extends object = any> {\n\n    /**\n     * Reads property value.\n     *\n     * May throw if the property is not readable.\n     *\n     * @param component  Target component instance.\n     * @param key  Property key.\n     *\n     * @returns Property value.\n     */\n    get(this: void, component: T, key: string | symbol): V;\n\n    /**\n     * Assigns new property value.\n     *\n     * May throw is the property is not writable.\n     *\n     * @param component  Target component instance.\n     * @param value  New property value.\n     * @param key  Property key.\n     */\n    set(this: void, component: T, value: V, key: string | symbol): void;\n\n  }\n\n  /**\n   * Property accessor binder signature.\n   *\n   * This is a function that binds a {@link BoundAccessor property accessor} to target component.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component.\n   */\n  export type Binder<V, T extends object = any> =\n  /**\n   * @param component  Target component to bind property accessor to.\n   * @param key  Property key.\n   *\n   * @returns Property accessor bound to `component`.\n   */\n      (\n          this: void,\n          component: T,\n          key: string | symbol,\n      ) => BoundAccessor<V>;\n\n  export interface BoundAccessor<V> {\n\n    /**\n     * Reads bound component's property value.\n     *\n     * An attempt to read the value would throw when omitted.\n     *\n     * @returns Property value.\n     */\n    get?(): V;\n\n    /**\n     * Assigns bound component's new property value.\n     *\n     * An attempt to assign the value would throw when omitted.\n     *\n     * @param value  New property value.\n     */\n    set?(value: V): void;\n\n  }\n\n  /**\n   * Component property descriptor.\n   *\n   * Passed to {@link Definer property definer} by [[ComponentProperty]] function to construct a {@link Definition\n   * property definition}.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component class.\n   */\n  export interface Descriptor<V, T extends ComponentClass = Class> {\n\n    /**\n     * Component class constructor.\n     */\n    readonly type: T;\n\n    /**\n     * Component property key.\n     */\n    readonly key: string | symbol;\n\n    /**\n     * Whether the property is initially writable.\n     *\n     * This can be changed by {@link Definition.get property read definition}.\n     */\n    readonly readable: boolean;\n\n    /**\n     * Whether the property is initially writable.\n     *\n     * This can be changed by {@link Definition.set property assignment definition}.\n     */\n    readonly writable: boolean;\n\n    /**\n     * Whether the property is initially enumerable.\n     *\n     * This can be changed by {@link Definition.enumerable property definition}.\n     */\n    readonly enumerable: boolean;\n\n    /**\n     * Whether the property is initially configurable.\n     *\n     * This can be changed by {@link Definition.configurable property definition}.\n     */\n    readonly configurable: boolean;\n\n    /**\n     * Reads property value.\n     *\n     * May throw if the property is not readable.\n     *\n     * @param component  Target component instance.\n     *\n     * @returns Property value.\n     */\n    get(this: void, component: InstanceType<T>): V;\n\n    /**\n     * Assigns new property value.\n     *\n     * May throw is the property is not writable.\n     *\n     * @param component  Target component instance.\n     * @param value  New property value.\n     */\n    set(this: void, component: InstanceType<T>, value: V): void;\n\n  }\n\n  /**\n   * Component property definition builder signature.\n   *\n   * This is a function called by [[ComponentProperty]] to define the property.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component class.\n   */\n  export type Definer<V, T extends ComponentClass = Class> =\n  /**\n   * @param descriptor  Component property descriptor.\n   *\n   * @returns Component property definition. Or nothing if the property definition is not to be changed.\n   */\n      (\n          this: void,\n          descriptor: Descriptor<V, T>,\n      ) => Definition<V, T> | void;\n\n  /**\n   * Property definition to apply to existing property.\n   *\n   * When applying to decorated property, this definition updates its definition.\n   *\n   * When applying to virtual property assumed by one of [[ComponentPropertyDescriptor]] methods, most of returned\n   * values ignored. Except for {@link Definition.componentDef component definition}, {@link Definition.get value\n   * reader}, and {@link Definition.set value setter}.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component class.\n   */\n  export interface Definition<V, T extends ComponentClass = Class> {\n\n    /**\n     * Component definition to apply to component.\n     *\n     * When specified, it is used to enable certain functionality for decorated (or virtual) property.\n     */\n    readonly componentDef?: ComponentDef<InstanceType<T>>;\n\n    /**\n     * Whether to make the property enumerable.\n     *\n     * When specified, it is used as `enumerable` attribute value of decorated property descriptor.\n     */\n    readonly enumerable?: boolean;\n\n    /**\n     * Whether to make the property configurable.\n     *\n     * When specified, it is used as `configurable` attribute value of decorated property descriptor.\n     */\n    readonly configurable?: boolean;\n\n    /**\n     * Reads property value.\n     *\n     * When specified it changes how the property value is read.\n     *\n     * When neither [[get]], nor [[set]] specified, the property access does not change.\n     *\n     * @param component  Target component instance.\n     * @param key  Property key.\n     *\n     * @returns Property value.\n     */\n    get?(this: void, component: InstanceType<T>, key: string | symbol): V;\n\n    /**\n     * Assigns new property value.\n     *\n     * When specified it changes how the property value is assigned.\n     *\n     * When neither [[get]], nor [[set]] specified, the property access does not change.\n     *\n     * @param component  Target component instance.\n     * @param value  New property value.\n     * @param key  Property key.\n     */\n    set?(this: void, component: InstanceType<T>, value: V, key: string | symbol): void;\n\n  }\n\n}\n\n/**\n * Anonymous component property key.\n *\n * Used as a default virtual property key.\n *\n * @category Core\n */\nexport const AnonymousComponentProperty__symbol = (/*#__PURE__*/ Symbol('anonymous-component-property'));\n\n/**\n * Decorator of component property.\n *\n * Updates decorated property and component definition. Can be converted to {@link ComponentDecorator component\n * decorator} by calling appropriate method of returned decorator instance.\n *\n * @category Core\n * @typeparam V  Decorated property value type.\n * @typeparam T  A type of decorated component class.\n * @param define  Component property definition builder.\n *\n * @returns Component property decorator.\n */\nexport function ComponentProperty<V, T extends ComponentClass = Class>(\n    define: ComponentProperty.Definer<V, T>,\n): ComponentPropertyDecorator<V, T> {\n\n  const decorator = (\n      proto: InstanceType<T>,\n      propertyKey: string | symbol,\n      descriptor?: TypedPropertyDescriptor<V>,\n  ): any | void => decoratePropertyAccessor(\n      proto,\n      propertyKey,\n      descriptor,\n      desc => {\n\n        const { get: getValue, set: setValue } = desc;\n        const type = proto.constructor;\n        const { get, set, configurable, enumerable, componentDef = {} } = define({\n          type,\n          key: propertyKey,\n          readable: !!desc.get,\n          writable: !!desc.set,\n          enumerable: !!desc.enumerable,\n          configurable: !!desc.configurable,\n          get: getValue\n              ? ((component: InstanceType<T>) => getValue.call(component))\n              : notReadableAccessor(propertyKey),\n          set: setValue\n              ? ((component, value) => setValue.call(component, value))\n              : notWritableAccessor(propertyKey),\n        }) || {};\n\n        ComponentDef.define(type, componentDef);\n\n        const updated: PropertyAccessorDescriptor<V> = {\n          ...desc,\n          configurable: configurable ?? desc.configurable,\n          enumerable: enumerable ?? desc.enumerable,\n        };\n\n        if (get || set) {\n          updated.get = get && function (this: InstanceType<T>) {\n            return get(this, propertyKey);\n          };\n          updated.set = set && function (this: InstanceType<T>, value: V) {\n            set(this, value, propertyKey);\n          };\n        }\n\n        return updated;\n      },\n  );\n  const decorateWith = (\n      { get, set }: ComponentProperty.Accessor<V, InstanceType<T>>,\n      key: string | symbol = AnonymousComponentProperty__symbol,\n      writable: boolean,\n  ): ComponentDecorator<T> => Component({\n    [ComponentDef__symbol](type: InstanceType<T>) {\n\n      const def = define({\n        type,\n        key,\n        readable: true,\n        writable,\n        enumerable: false,\n        configurable: false,\n        get: component => get(component, key),\n        set: (component, value) => set(component, value, key),\n      });\n\n      return (def && def.componentDef) || {};\n    },\n  });\n  const By = (\n      provider: ComponentProperty.Provider<V, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T> => decorateWith(\n      {\n        get(component, key) {\n          return provider(component, key);\n        },\n      } as ComponentProperty.Accessor<V>,\n      key,\n      false,\n  );\n\n  const result = decorator as ComponentPropertyDecorator<V, T>;\n\n  result.With = (access, key) => decorateWith(access, key, true);\n  result.By = By;\n  result.As = (value, key?) => By(valueProvider(value), key);\n  result.Bind = (binder, key = AnonymousComponentProperty__symbol) => {\n\n    const accessor__symbol = Symbol(`${String(key)}:accessor`);\n    const accessor = (component: any): {\n      get(): V;\n      set(value: V): void;\n    } => {\n\n      const existing = component[accessor__symbol];\n\n      if (existing) {\n        return existing;\n      }\n\n      const accessor = binder(component, key);\n\n      return component[accessor__symbol] = {\n        get: accessor.get ? accessor.get.bind(accessor) : notReadableAccessor(key),\n        set: accessor.set ? accessor.set.bind(accessor) : notWritableAccessor(key),\n      };\n    };\n\n    return decorateWith(\n        {\n          get(component) {\n            return accessor(component).get();\n          },\n          set(component, value) {\n            return accessor(component).set(value);\n          },\n        },\n        key,\n        true,\n    );\n  };\n\n  return result;\n}\n\n/**\n * @internal\n */\nfunction notReadableAccessor(propertyKey: string | symbol): () => never {\n  return () => { throw new TypeError(`\"${String(propertyKey)}\" is not readable`); };\n}\n\n/**\n * @internal\n */\nfunction notWritableAccessor(propertyKey: string | symbol): () => never {\n  return () => { throw new TypeError(`\"${String(propertyKey)}\" is not writable`); };\n}\n","import {\n  ContextKey,\n  ContextKey__symbol,\n  ContextRegistry,\n  ContextValues,\n  SingleContextKey,\n} from '@proc7ts/context-values';\nimport { BootstrapContext } from '../bootstrap-context';\n\nconst BootstrapContextRegistry__key = (\n    /*#__PURE__*/ new SingleContextKey<BootstrapContextRegistry>('bootstrap-context-registry')\n);\n\n/**\n * @internal\n */\nexport class BootstrapContextRegistry extends ContextRegistry<BootstrapContext> {\n\n  static get [ContextKey__symbol](): ContextKey<BootstrapContextRegistry> {\n    return BootstrapContextRegistry__key;\n  }\n\n  readonly values: ContextValues;\n\n  static create(): BootstrapContextRegistry {\n    return new BootstrapContextRegistry();\n  }\n\n  private constructor() {\n    super();\n    this.provide({ a: BootstrapContextRegistry, is: this });\n    this.values = this.newValues();\n  }\n\n}\n","import { ContextKey, ContextKey__symbol, ContextRegistry, SingleContextKey } from '@proc7ts/context-values';\nimport { ComponentContext } from '../../component';\nimport { bootstrapDefault } from '../bootstrap-default';\n\nconst ComponentContextRegistry__key = (/*#__PURE__*/ new SingleContextKey<ComponentContextRegistry>(\n    'component-context-registry',\n    {\n      byDefault: bootstrapDefault(() => new ComponentContextRegistry()),\n    },\n));\n\n/**\n * @internal\n */\nexport class ComponentContextRegistry extends ContextRegistry<ComponentContext> {\n\n  static get [ContextKey__symbol](): ContextKey<ComponentContextRegistry> {\n    return ComponentContextRegistry__key;\n  }\n\n}\n","import { ContextKey, ContextKey__symbol, ContextRegistry, SingleContextKey } from '@proc7ts/context-values';\nimport { DefinitionContext } from '../../component/definition';\nimport { bootstrapDefault } from '../bootstrap-default';\n\nconst DefinitionContextRegistry__key = (/*#__PURE__*/ new SingleContextKey<DefinitionContextRegistry>(\n    'definition-context-registry',\n    {\n      byDefault: bootstrapDefault(context => new DefinitionContextRegistry(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport class DefinitionContextRegistry extends ContextRegistry<DefinitionContext> {\n\n  static get [ContextKey__symbol](): ContextKey<DefinitionContextRegistry> {\n    return DefinitionContextRegistry__key;\n  }\n\n}\n","import { nextArgs, nextSkip } from '@proc7ts/call-thru';\nimport { EventEmitter, onAny, OnEvent, onEventBy, trackValue } from '@proc7ts/fun-events';\nimport { superClassOf } from '../../common';\nimport { ComponentDef__symbol } from '../../component';\nimport { ComponentClass, DefinitionSetup } from '../../component/definition';\nimport { Unloader } from './unloader.impl';\n\n/**\n * @internal\n */\nexport function onPostDefSetup(\n    componentType: ComponentClass,\n    unloader: Unloader,\n): OnEvent<[DefinitionSetup]> {\n\n  const { on } = postDefSetup(componentType);\n\n  return onEventBy(receiver => {\n    on.to({\n      supply: receiver.supply.needs(unloader.supply),\n      receive(ctx, setup) {\n\n        const whenReady = setup.whenReady().tillOff(unloader.supply).F;\n        const whenComponent = setup.whenComponent().tillOff(unloader.supply).F;\n\n        receiver.receive(ctx, {\n          get componentType() {\n            return setup.componentType;\n          },\n          get whenReady() {\n            return whenReady;\n          },\n          get whenComponent() {\n            return whenComponent;\n          },\n          perDefinition(spec) {\n            return unloader.add(() => setup.perDefinition(spec));\n          },\n          perComponent(spec) {\n            return unloader.add(() => setup.perComponent(spec));\n          },\n        });\n      },\n    });\n  });\n}\n\n/**\n * @internal\n */\nexport interface PostDefSetup<T extends object = any> {\n  readonly on: OnEvent<[DefinitionSetup<T>]>;\n  send(setup: DefinitionSetup): void;\n  setup(setup: DefinitionSetup<T>): void;\n}\n\nconst PostDefSetup__symbol = (/*#__PURE__*/ Symbol('post-def-setup'));\n\n/**\n * @internal\n */\nexport function postDefSetup<T extends object>(componentType: ComponentClass<T>): PostDefSetup<T> {\n  // eslint-disable-next-line no-prototype-builtins\n  if (componentType.hasOwnProperty(PostDefSetup__symbol)) {\n    return (componentType as any)[PostDefSetup__symbol];\n  }\n\n  const tracker = trackValue<DefinitionSetup<T>>();\n  const emitter = new EventEmitter<[DefinitionSetup]>();\n  const onSetup: OnEvent<[DefinitionSetup<T>]> = tracker.read().thru(setup => setup ? nextArgs(setup) : nextSkip());\n  const on = onAny(onSetup, emitter);\n  const superType = superClassOf(componentType, type => ComponentDef__symbol in type);\n\n  if (superType) {\n\n    const superPostDefSetup = postDefSetup(superType);\n\n    on.to(setup => superPostDefSetup.send(setup));\n  }\n\n  const result: PostDefSetup<T> = {\n    on,\n    send(setup) {\n      emitter.send(setup);\n    },\n    setup(setup) {\n      tracker.it = setup;\n    },\n  };\n\n  Object.defineProperty(componentType, PostDefSetup__symbol, { value: result });\n\n  return result;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\n\n/**\n * A window the components bootstrap is performed against.\n *\n * @category Core\n */\nexport type BootstrapWindow = Window & typeof globalThis;\n\n/**\n * A key of bootstrap context value containing a window instance the bootstrap is performed against.\n *\n * Target value defaults to current window.\n *\n * @category Core\n */\nexport const BootstrapWindow: SingleContextRef<BootstrapWindow> = (/*#__PURE__*/ new SingleContextKey(\n    'window',\n    {\n      byDefault() {\n        return window;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { BootstrapWindow } from './bootstrap-window';\n\n/**\n * A window (e.g. DOM) element all bootstrapped components belong to.\n *\n * @category Core\n */\nexport type BootstrapRoot = any;\n\n/**\n * A key of bootstrap context value containing a bootstrap root.\n *\n * Target value defaults to document body of [[BootstrapWindow]].\n *\n * @category Core\n */\nexport const BootstrapRoot: SingleContextRef<BootstrapRoot> = (/*#__PURE__*/ new SingleContextKey(\n    'bootstrap-root',\n    {\n      byDefault(ctx) {\n        return ctx.get(BootstrapWindow).document.body;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { NamespaceAliaser } from '@proc7ts/namespace-aliaser';\n\n/**\n * Namespace aliaser used by default.\n *\n * Maps namespaces to their unique aliases.\n *\n * @category Core\n */\nexport type DefaultNamespaceAliaser = NamespaceAliaser;\n\n/**\n * A key of bootstrap context value containing the default namespace aliaser.\n *\n * @category Core\n */\nexport const DefaultNamespaceAliaser: SingleContextRef<DefaultNamespaceAliaser> = (\n    /*#__PURE__*/ new SingleContextKey<DefaultNamespaceAliaser>('default-namespace-aliaser')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextValueOpts, ContextValues } from '@proc7ts/context-values';\nimport { ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, EventKeeper, nextAfterEvent } from '@proc7ts/fun-events';\nimport { newRenderSchedule, RenderScheduler } from '@proc7ts/render-scheduler';\nimport { BootstrapWindow } from './bootstrap-window';\n\n/**\n * Default rendering tasks scheduler.\n *\n * @category Core\n */\nexport type DefaultRenderScheduler = RenderScheduler;\n\nclass DefaultRenderSchedulerKey extends ContextUpKey<DefaultRenderScheduler, RenderScheduler> {\n\n  readonly upKey: ContextUpKey.UpKey<DefaultRenderScheduler, RenderScheduler>;\n\n  constructor() {\n    super('default-render-scheduler');\n    this.upKey = this.createUpKey(\n        opts => opts.seed.keepThru(\n            (...fns) => {\n              if (fns.length) {\n                return toDefaultRenderScheduler(opts.context, fns[fns.length - 1]);\n              }\n\n              const defaultProvider = (): AfterEvent<[DefaultRenderScheduler]> => afterThe(\n                  toDefaultRenderScheduler(opts.context, newRenderSchedule),\n              );\n\n              return nextAfterEvent(opts.byDefault(defaultProvider) || defaultProvider());\n            },\n        ),\n    );\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          DefaultRenderScheduler,\n          EventKeeper<RenderScheduler[]> | RenderScheduler,\n          AfterEvent<RenderScheduler[]>>,\n      ): DefaultRenderScheduler {\n\n    let delegated!: DefaultRenderScheduler;\n\n    opts.context.get(\n        this.upKey,\n        'or' in opts ? { or: opts.or != null ? afterThe(opts.or) : opts.or } : undefined,\n    )!.to(scheduler => delegated = toDefaultRenderScheduler(opts.context, scheduler));\n\n    return (...args) => delegated(...args);\n  }\n\n}\n\nfunction toDefaultRenderScheduler(\n    context: ContextValues,\n    scheduler: RenderScheduler,\n): DefaultRenderScheduler {\n  return (options = {}) => scheduler({\n    ...options,\n    window: options.window || context.get(BootstrapWindow),\n  });\n}\n\n/**\n * A key of bootstrap, definition, or component context value containing [[DefaultRenderScheduler]] instance.\n *\n * Uses the default `RenderScheduler` (`newRenderSchedule()`) for {@link BootstrapWindow bootstrap window}.\n *\n * @category Core\n */\nexport const DefaultRenderScheduler: ContextUpRef<DefaultRenderScheduler, RenderScheduler> = (\n    /*#__PURE__*/ new DefaultRenderSchedulerKey()\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextValueOpts, ContextValues } from '@proc7ts/context-values';\nimport { ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, EventKeeper, nextAfterEvent } from '@proc7ts/fun-events';\nimport { ComponentContext, ComponentContext__symbol } from '../../component';\n\n/**\n * Element adapter is a function able to convert a raw element to component. E.g. mount a component to it.\n *\n * Features may use it internally. E.g. an `AutoConnectSupport` applies it to each added DOM element.\n *\n * Multiple element adapters can be registered in bootstrap context.\n *\n * @category Core\n */\nexport type ElementAdapter =\n/**\n * @param element  Target raw element to adapt.\n *\n * @returns An adapted component's context, or `undefined` if element can not be adapted.\n */\n    (this: void, element: any) => ComponentContext | undefined;\n\n/**\n * @internal\n */\nclass ElementAdapterKey extends ContextUpKey<ElementAdapter, ElementAdapter> {\n\n  readonly upKey: ContextUpKey.UpKey<ElementAdapter, ElementAdapter>;\n\n  constructor() {\n    super('element-adapter');\n    this.upKey = this.createUpKey(\n        opts => opts.seed.keepThru((...adapters) => {\n\n          const combined: ElementAdapter = adapters.reduce(\n              (prev, adapter) => element => prev(element) || adapter(element),\n              defaultElementAdapter,\n          );\n\n          const defaultProvider = (): AfterEvent<[ElementAdapter]> => afterThe(defaultElementAdapter);\n\n          return combined !== defaultElementAdapter\n              ? combined\n              : nextAfterEvent(opts.byDefault(defaultProvider) || defaultProvider());\n        }),\n    );\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          ElementAdapter,\n          EventKeeper<ElementAdapter[]> | ElementAdapter,\n          AfterEvent<ElementAdapter[]>>,\n  ): ElementAdapter {\n\n    let delegated: ElementAdapter;\n\n    opts.context.get(\n        this.upKey,\n        'or' in opts ? { or: opts.or != null ? afterThe(opts.or) : opts.or } : undefined,\n    )!.to(adapter => delegated = adapter);\n\n    return element => delegated(element);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultElementAdapter(element: any): ComponentContext {\n  return element[ComponentContext__symbol];\n}\n\n/**\n * A key of bootstrap context value containing combined [[ElementAdapter]] instance.\n *\n * @category Core\n */\nexport const ElementAdapter: ContextUpRef<ElementAdapter, ElementAdapter> = (/*#__PURE__*/ new ElementAdapterKey());\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { filterIt, itsEach, overArray } from '@proc7ts/a-iterable';\nimport { FnContextKey } from '@proc7ts/context-values/updatable';\nimport { isElement } from '../../common';\nimport { ComponentContext__symbol, ComponentMount } from '../../component';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { ElementAdapter } from './element-adapter';\n\n/**\n * Element mutations observer.\n *\n * It is a `MutationObserver` implementation that:\n * - always observes target's children,\n * - applies {@link ElementAdapter element adapter} to added elements,\n * - tracks mounted components {@link ComponentMount.connected connection state}.\n *\n * A function constructing element observer instance could be obtained from bootstrap context.\n *\n * @category Core\n */\nexport interface ElementObserver extends MutationObserver {\n\n  /**\n   * Configures the observer callback to begin receiving notifications of changes to the DOM that match the given\n   * options.\n   * To stop the MutationObserver (so that none of its callbacks will be triggered any longer), call\n   * [[disconnect]].\n   *\n   * @param target  A DOM node within the DOM tree to watch for changes, and to be the root of a subtree of nodes\n   * to be watched.\n   * @param options  An options that describe what DOM mutations should be reported to the observer's callback.\n   */\n  observe(target: Node, options?: ElementObserverInit): void;\n\n}\n\n/**\n * A key of bootstrap context value containing a function constructing a new [[ElementObserver]] instance.\n *\n * @category Core\n */\nexport const ElementObserver: FnContextKey<[MutationCallback], ElementObserver> = (/*#__PURE__*/ new FnContextKey(\n    'element-observer',\n    {\n      byDefault: bootstrapDefault(bsContext => {\n\n        const adapter = bsContext.get(ElementAdapter);\n        class DefaultElementObserver extends MutationObserver implements ElementObserver {\n\n          constructor(callback: MutationCallback) {\n            super(mutations => {\n              mutations.forEach(mutation => {\n                itsEach(\n                    overArray(mutation.removedNodes),\n                    node => mountOf(node)?.checkConnected(),\n                );\n                itsEach(\n                    filterIt(\n                        overArray(mutation.addedNodes),\n                        isElement,\n                    ),\n                    element => adapter(element)?.mount?.checkConnected(),\n                );\n              });\n              callback(mutations, this);\n            });\n          }\n\n          observe(target: Node, options?: ElementObserverInit): void {\n            super.observe(target, { ...options, childList: true });\n          }\n\n        }\n\n        return callback => new DefaultElementObserver(callback);\n      }),\n    },\n));\n\n/**\n * Element observer initialization options.\n *\n * @category Core\n */\nexport interface ElementObserverInit extends MutationObserverInit {\n\n  /**\n   * Whether mutations to target's children are to be observed.\n   *\n   * Always `true`.\n   */\n  childList?: true;\n\n}\n\n/**\n * @internal\n */\nfunction mountOf(node: any): ComponentMount | undefined {\n  return node[ComponentContext__symbol]?.mount;\n}\n","import { ComponentClass, DefinitionContext } from '../../component/definition';\n\n/**\n * @internal\n */\nexport const DefinitionContext__symbol = (/*#__PURE__*/ Symbol('definition-context'));\n\n/**\n * @internal\n */\nexport function definitionContextOf<T extends object>(componentType: ComponentClass<T>): DefinitionContext<T> {\n  // eslint-disable-next-line no-prototype-builtins\n  if (!componentType.hasOwnProperty(DefinitionContext__symbol)) {\n    throw new TypeError(`Component is not defined: ${componentType}`);\n  }\n  return (componentType as any)[DefinitionContext__symbol];\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { html__naming, isQualifiedName, QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { BootstrapContext, bootstrapDefault } from '../../boot';\nimport { BootstrapWindow, DefaultNamespaceAliaser } from '../../boot/globals';\nimport { definitionContextOf } from '../../boot/impl/definition-context.symbol.impl';\nimport { Class, PromiseResolver } from '../../common';\nimport { ComponentClass } from './component-class';\n\n/**\n * @internal\n */\nconst CustomElements__key = (/*#__PURE__*/ new SingleContextKey<CustomElements>(\n    'custom-elements',\n    {\n      byDefault: bootstrapDefault(createCustomElements),\n    },\n));\n\n/**\n * Custom elements registry.\n *\n * This is used to register custom elements.\n *\n * Typically implemented by `window.customElements`.\n *\n * @category Core\n */\nexport abstract class CustomElements {\n\n  /**\n   * A key of bootstrap context value containing a `CustomElements` instance used to register custom\n   * elements.\n   *\n   * Target value defaults to `window.customElements` from the window provided under `[BootstrapWindow.key]`.\n   */\n  static get [ContextKey__symbol](): ContextKey<CustomElements> {\n    return CustomElements__key;\n  }\n\n  /**\n   * Defines custom element.\n   *\n   * @param componentTypeOrName  A component class constructor or custom element name. The latter may belong to\n   * namespace to avoid naming conflicts.\n   * @param elementType  A constructor of custom element to define.\n   */\n  abstract define(componentTypeOrName: ComponentClass | QualifiedName, elementType: Class): void;\n\n  /**\n   * Allows to wait for component definition.\n   *\n   * This corresponds to `window.customElements.whenDefined()` method.\n   *\n   * @param componentTypeOrName  Component class constructor or custom element name possibly belonging to some\n   * namespace.\n   *\n   * @return A promise that is resolved when custom element is registered.\n   *\n   * @throws TypeError If `componentType` does not contain a component definition.\n   */\n  abstract whenDefined(componentTypeOrName: ComponentClass | QualifiedName): Promise<void>;\n\n}\n\n/**\n * @internal\n */\nfunction createCustomElements(bsContext: BootstrapContext): CustomElements {\n\n  const customElements: CustomElementRegistry = bsContext.get(BootstrapWindow).customElements;\n  const nsAlias = bsContext.get(DefaultNamespaceAliaser);\n\n  class CustomElements$ extends CustomElements {\n\n    define(componentTypeOrName: ComponentClass | string, elementType: Class): void {\n      if (isQualifiedName(componentTypeOrName)) {\n        customElements.define(html__naming.name(componentTypeOrName, nsAlias), elementType);\n        return;\n      }\n\n      const defContext = definitionContextOf(componentTypeOrName);\n      const { name, extend } = defContext.elementDef;\n\n      if (!name) {\n        componentResolver(componentTypeOrName).resolve(undefined);\n        return; // Anonymous component.\n      }\n      if (extend && extend.name) {\n        customElements.define(\n            html__naming.name(name, nsAlias),\n            elementType,\n            {\n              extends: extend.name,\n            },\n        );\n      } else {\n        customElements.define(html__naming.name(name, nsAlias), elementType);\n      }\n    }\n\n    whenDefined(componentTypeOrName: ComponentClass | string): Promise<void> {\n      if (isQualifiedName(componentTypeOrName)) {\n        return customElements.whenDefined(html__naming.name(componentTypeOrName, nsAlias));\n      }\n\n      const defContext = definitionContextOf(componentTypeOrName);\n      const { name } = defContext.elementDef;\n\n      if (!name) {\n        return componentResolver(componentTypeOrName).promise;\n      }\n\n      return customElements.whenDefined(html__naming.name(name, nsAlias));\n    }\n\n  }\n\n  return new CustomElements$();\n}\n\n/**\n * @internal\n */\nconst ComponentResolver__symbol = (/*#__PURE__*/ Symbol('component-resolver'));\n\n/**\n * @internal\n */\nfunction componentResolver(componentType: any): PromiseResolver {\n  // eslint-disable-next-line no-prototype-builtins\n  if (componentType.hasOwnProperty(ComponentResolver__symbol)) {\n    return componentType[ComponentResolver__symbol];\n  }\n  return componentType[ComponentResolver__symbol] = new PromiseResolver();\n}\n","import { SingleContextKey } from '@proc7ts/context-values';\nimport { DefinitionContext } from './definition-context';\n\n/**\n * @internal\n */\nexport const DefinitionContext__key = (/*#__PURE__*/ new SingleContextKey<DefinitionContext>('definition-context'));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { BootstrapWindow } from '../../boot/globals';\nimport { Class } from '../../common';\nimport { ComponentDef } from '../component-def';\nimport { DefinitionContext__key } from './definition.context.key.impl';\n\n/**\n * Custom element definition meta.\n *\n * @category Core\n */\nexport interface ElementDef {\n\n  /**\n   * Custom element name.\n   *\n   * The name may belong to some namespace to avoid naming conflicts. I.e. it can be either a string, or\n   * name/namespace tuple.\n   *\n   * When omitted an anonymous component will be registered. Such component is not bound to custom element, but it\n   * still can be mounted.\n   */\n  readonly name?: QualifiedName;\n\n  /**\n   * Existing element to extend by custom one.\n   */\n  readonly extend: ElementDef.Extend;\n\n}\n\n/**\n * A key of definition context value containing a custom element definition.\n *\n * Target value defaults to `HTMLElement` from the window provided under `[BootstrapWindow.key]`,\n * unless `ComponentDef.extend.type` is specified.\n */\nexport const ElementDef: SingleContextRef<ElementDef> = (/*#__PURE__*/ new SingleContextKey<ElementDef>(\n    'element-def',\n    {\n      byDefault(values) {\n\n        const componentType = values.get(DefinitionContext__key).componentType;\n        const { name, extend } = ComponentDef.of(componentType);\n\n        const elementExtend: ElementDef.Extend = {\n          get type() {\n            return extend && extend.type || values.get(BootstrapWindow).HTMLElement;\n          },\n          get name() {\n            return extend && extend.name;\n          },\n        };\n\n        return {\n          get name() {\n            return name;\n          },\n          get extend() {\n            return elementExtend;\n          },\n        };\n      },\n    },\n));\n\n/**\n * @category Core\n */\nexport namespace ElementDef {\n\n  /**\n   * The definition of element to extend by custom one.\n   */\n  export interface Extend {\n\n    /**\n     * The class constructor of element to extend.\n     */\n    readonly type: Class;\n\n    /**\n     * The name of element to extend.\n     *\n     * This is to support `as` attribute of standard HTML element. Note that this is not supported by polyfills.\n     */\n    readonly name?: string;\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues, ContextValueSpec } from '@proc7ts/context-values';\nimport { EventReceiver, EventSupply, OnEvent } from '@proc7ts/fun-events';\nimport { Class } from '../../common';\nimport { ComponentContext } from '../component-context';\nimport { ComponentMount } from '../component-mount';\nimport { ComponentClass } from './component-class';\nimport { DefinitionContext__key } from './definition.context.key.impl';\nimport { ElementDef } from './element-def';\n\n/**\n * Component definition context.\n *\n * Extends `ContextValues` interface. The values are provided by corresponding providers registered with\n * [[BootstrapSetup.perDefinition]] and [[DefinitionSetup.perDefinition]] methods. All [[BootstrapContext]] values\n * are available too.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class DefinitionContext<T extends object = any> extends ContextValues {\n\n  /**\n   * A key of definition context value containing the definition context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<DefinitionContext> {\n    return DefinitionContext__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element class constructor.\n   *\n   * It is an error accessing this property before the element class is created, e.g. from inside of\n   * `DefinitionListener` or `ComponentDef.define()` function. In these cases you may wish to add a `whenReady()`\n   * callback.\n   */\n  abstract readonly elementType: Class;\n\n  /**\n   * Custom element definition.\n   */\n  get elementDef(): ElementDef {\n    return this.get(ElementDef);\n  }\n\n  /**\n   * Builds an `OnEvent` sender of component definition context upon its readiness.\n   *\n   * The custom element class is not constructed until component definition is complete.\n   * The registered receiver will be notified when the custom element class is constructed.\n   *\n   * If the custom element class is constructed already, the receiver will be notified immediately.\n   *\n   * @returns `OnEvent` sender of this component definition context upon its readiness.\n   */\n  abstract whenReady(): OnEvent<[this]>;\n\n  /**\n   * Registers a receiver of component definition readiness event.\n   *\n   * The custom element class is not constructed until component definition is complete.\n   * The registered receiver will be notified when the custom element class is constructed.\n   *\n   * If the custom element class is constructed already, the receiver will be notified immediately.\n   *\n   * @param receiver  Target receiver of this component definition context upon its readiness.\n   *\n   * @returns Component definition readiness event supply.\n   */\n  abstract whenReady(receiver: EventReceiver<[this]>): EventSupply;\n\n  /**\n   * Mounts a component to arbitrary element.\n   *\n   * This method creates a component, but instead of creating a custom element for, it mounts it to the target\n   * `element`.\n   *\n   * It is up to the features to update the target element. They can use a `ComponentContext.mount` property to check\n   * whether the component is mounted or is constructed in standard way.\n   *\n   * The constructed component will be in disconnected state. To update its connection state either update a\n   * `ComponentMount.connected` property, or use a `connectTo()` method.\n   *\n   * @param element  Target element to mount new component to.\n   *\n   * @returns New component mount.\n   *\n   * @throws Error If target element is already bound to some component.\n   */\n  abstract mountTo(element: any): ComponentMount<T>;\n\n  /**\n   * Connects a component to arbitrary element.\n   *\n   * This method does the same as `mountTo()`, but also marks the mounted component as connected.\n   *\n   * @param element  Target element to mount new component to.\n   *\n   * @returns New component mount.\n   *\n   * @throws Error If target element is already bound to some component.\n   */\n  connectTo(element: any): ComponentMount<T> {\n\n    const mount = this.mountTo(element);\n\n    mount.connect();\n\n    return mount;\n  }\n\n  /**\n   * Builds an `OnEvent` sender of component context upon its instantiation.\n   *\n   * If component instantiated after the receiver is registered, that receiver would receive an instantiated component's\n   * context immediately.\n   *\n   * If component already exists when the receiver is registered, that receiver would receive instantiated component's\n   * context only when/if component is {@link ComponentContext.whenConnected connected}. This is to prevent resource\n   * leaks on destroyed components.\n   *\n   * @returns `OnEvent` sender of instantiated component context.\n   */\n  abstract whenComponent(): OnEvent<[ComponentContext<T>]>;\n\n  /**\n   * Starts sending component instantiation events to the given `receiver`.\n   *\n   * If component instantiated after the receiver is registered, that receiver would receive an instantiated component's\n   * context immediately.\n   *\n   * If component already exists when the receiver is registered, that receiver would receive instantiated component's\n   * context only when/if component is {@link ComponentContext.whenConnected connected}. This is to prevent resource\n   * leaks on destroyed components.\n   *\n   * @param receiver  Target receiver of instantiate component contexts.\n   *\n   * @returns Component instantiation events supply.\n   */\n  abstract whenComponent(receiver: EventReceiver<[ComponentContext<T>]>): EventSupply;\n\n  /**\n   * Provides a value available in the context of each component of the defined component type.\n   *\n   * @typeparam Deps  A type of dependencies.\n   * @typeparam Src  The type of context value sources.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Component context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  abstract perComponent<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<ComponentContext<T>, any, Deps, Src, Seed>,\n  ): () => void;\n\n}\n","import { nextArg, nextArgs, nextSkip, valueProvider } from '@proc7ts/call-thru';\nimport {\n  EventReceiver,\n  eventSupply,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  OnEvent,\n  trackValue,\n} from '@proc7ts/fun-events';\nimport { ComponentContext, ComponentContext__symbol, ComponentEvent } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { DefinitionContext$ } from './definition-context.impl';\n\nconst enum ComponentStatus {\n  Building,\n  Ready,\n  Connected,\n}\n\n/**\n * @internal\n */\nexport abstract class ComponentContext$<T extends object> extends ComponentContext<T> {\n\n  readonly get: ComponentContext<T>['get'];\n  private _status = trackValue<ComponentStatus>(ComponentStatus.Building);\n\n  constructor(\n      readonly _definitionContext: DefinitionContext$<T>,\n      readonly element: any,\n      readonly elementSuper: (name: PropertyKey) => any,\n  ) {\n    super();\n\n    const registry = _definitionContext._newComponentRegistry();\n\n    registry.provide({ a: ComponentContext, is: this });\n    this.get = registry.newValues().get;\n  }\n\n  get componentType(): ComponentClass<T> {\n    return this._definitionContext.componentType;\n  }\n\n  get component(): T {\n    return this._component();\n  }\n\n  get connected(): boolean {\n    return this._status.it === ComponentStatus.Connected && !eventSupplyOf(this).isOff;\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this._status);\n  }\n\n  _component(): T {\n    throw new TypeError('Component is not constructed yet. Consider to use a `whenReady()` callback');\n  }\n\n  whenReady(): OnEvent<[this]>;\n  whenReady(receiver: EventReceiver<[this]>): EventSupply;\n  whenReady(receiver?: EventReceiver<[this]>): OnEvent<[this]> | EventSupply {\n    return (this.whenReady = this._status.read().thru(sts => sts ? nextArgs(this) : nextSkip()).once().F)(receiver);\n  }\n\n  whenConnected(): OnEvent<[this]>;\n  whenConnected(receiver: EventReceiver<[this]>): EventSupply;\n  whenConnected(receiver?: EventReceiver<[this]>): OnEvent<[this]> | EventSupply {\n    return (this.whenConnected = this._status.read().thru_(\n        status => status === ComponentStatus.Connected ? nextArg(this) : nextSkip(),\n    ).once().F)(receiver);\n  }\n\n  destroy(reason?: any): void {\n    try {\n      this._status.done(reason);\n    } finally {\n      delete (this.component as any)[ComponentContext__symbol];\n      delete this.element[ComponentContext__symbol];\n      this._component = componentDestroyed;\n      removeElement(this.element);\n    }\n  }\n\n  _createComponent(): this {\n\n    const whenComponent = this._definitionContext._whenComponent;\n\n    let lastRev = 0;\n\n    this.element[ComponentContext__symbol] = this;\n    whenComponent.readNotifier.once(notifier => lastRev = notifier(this, lastRev));\n    this.whenConnected(() => {\n      whenComponent.readNotifier.to({\n        supply: eventSupply().needs(this),\n        receive: (_, notifier) => {\n          lastRev = notifier(this, lastRev);\n        },\n      });\n    });\n    this._definitionContext._elementBuilder.components.send(this);\n\n    const component = newComponent(this);\n\n    this._component = valueProvider(component);\n    this._status.it = ComponentStatus.Ready;\n\n    return this;\n  }\n\n  _connect(): void {\n    this._status.it = ComponentStatus.Connected;\n  }\n\n  _created(): void {\n    this.whenConnected(\n        () => this.dispatchEvent(new ComponentEvent('wesib:component', { bubbles: true })),\n    );\n  }\n\n}\n\nfunction newComponent<T extends object>(context: ComponentContext<T>): T {\n\n  const type = context.componentType;\n  const proto = type.prototype as any;\n  const prevContext = proto[ComponentContext__symbol];\n\n  proto[ComponentContext__symbol] = context;\n  try {\n\n    const component = new type(context);\n\n    (component as any)[ComponentContext__symbol] = context;\n\n    return component;\n  } finally {\n    proto[ComponentContext__symbol] = prevContext;\n  }\n}\n\nfunction removeElement(element: Element): void {\n\n  const { parentNode } = element;\n\n  if (parentNode) {\n    parentNode.removeChild(element);\n  }\n}\n\nfunction componentDestroyed(): never {\n  throw new TypeError('Component destroyed already');\n}\n","import { ComponentMount } from '../../component';\nimport { ComponentContext$ } from './component-context.impl';\nimport { DefinitionContext$ } from './definition-context.impl';\n\nclass ComponentMount$<T extends object> extends ComponentMount<T> {\n\n  constructor(readonly context: ComponentContext$<T>) {\n    super();\n  }\n\n  get connected(): boolean {\n    return this.context.connected;\n  }\n\n  connect(): void {\n    this.context._connect();\n  }\n\n  checkConnected(): boolean {\n\n    const el: Element = this.context.element;\n    const doc = el.ownerDocument;\n    const connected = doc != null && doc.contains(el);\n\n    if (connected !== this.connected) {\n      if (connected) {\n        this.connect();\n      } else {\n        this.context.destroy();\n      }\n    }\n\n    return connected;\n  }\n\n}\n\n/**\n * @internal\n */\nexport class MountComponentContext$<T extends object> extends ComponentContext$<T> {\n\n  readonly mount: ComponentMount<T>;\n\n  constructor(\n      definitionContext: DefinitionContext$<T>,\n      element: any,\n  ) {\n    super(definitionContext, element, key => element[key]);\n    this.mount = new ComponentMount$<T>(this);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentContext } from './component-context';\n\n/**\n * A mount of the component to an element.\n *\n * This is constructed when a component is mounted to arbitrary element by [[ComponentFactory.mountTo]] method.\n *\n * Mounted components do not maintain their connection state automatically. It is a calling code responsibility to set\n * their connection state by updating [[ComponentMount.connected]] property. E.g. by calling a\n * [[ComponentMount.checkConnected]] method. An [[ElementObserver]] and [[AutoConnectSupport]] feature could be used to\n * do it automatically.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class ComponentMount<T extends object = any> {\n\n  /**\n   * Mounted component context.\n   */\n  abstract readonly context: ComponentContext<T>;\n\n  /**\n   * Component connection state.\n   *\n   * The initial state is set by [[checkConnected]] method.\n   */\n  abstract readonly connected: boolean;\n\n  /**\n   * Mounted component.\n   */\n  get component(): T {\n    return this.context.component;\n  }\n\n  /**\n   * An element the component is mounted to.\n   */\n  get element(): any {\n    return this.context.element;\n  }\n\n  /**\n   * Forcibly connects mounted component element to the document.\n   */\n  abstract connect(): void;\n\n  /**\n   * Checks whether the mounted component element is actually connected to its owning document.\n   *\n   * Updates the `connected` property and returns its value.\n   *\n   * When component is disconnected after it has been connected, the component is {@link ComponentContext.destroy\n   * destroyed}.\n   *\n   * @returns `true` if the component element is connected, or `false` otherwise.\n   */\n  abstract checkConnected(): boolean;\n\n}\n","import { Class } from '../../common';\nimport { ComponentContext__symbol } from '../../component';\nimport { ElementDef } from '../../component/definition';\nimport { ComponentContext$ } from './component-context.impl';\nimport { DefinitionContext$ } from './definition-context.impl';\n\nclass CustomComponentContext$<T extends object> extends ComponentContext$<T> {\n\n  get mount(): undefined {\n    return;\n  }\n\n}\n\n/**\n * @internal\n */\nexport function customElementType<T extends object>(\n    definitionContext: DefinitionContext$<T>,\n): Class {\n\n  const elementDef = definitionContext.get(ElementDef);\n\n  class CustomElement$ extends elementDef.extend.type {\n\n    // Component context reference\n    [ComponentContext__symbol]: CustomComponentContext$<T>;\n\n    constructor() {\n      super();\n\n      const context = new CustomComponentContext$(\n          definitionContext,\n          this,\n          key => super[key],\n      );\n\n      context._createComponent();\n      context._created();\n    }\n\n    connectedCallback(): void {\n      this[ComponentContext__symbol]._connect();\n    }\n\n    disconnectedCallback(): void {\n      this[ComponentContext__symbol].destroy();\n    }\n\n  }\n\n  return CustomElement$;\n}\n","import { AfterEvent, EventEmitter, OnEvent, onEventBy, trackValue } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\n\nexport class WhenComponent<T extends object> {\n\n  readonly onCreated: OnEvent<[ComponentContext<T>]>;\n  readonly readNotifier: AfterEvent<[ComponentNotifier<T>]>;\n\n  constructor() {\n\n    const currentRev = trackValue(0);\n    const created = new EventEmitter<[ComponentContext<T>, number]>();\n\n    this.onCreated = onEventBy(receiver => {\n\n      const receiverRev = currentRev.it + 1;\n\n      created.on({\n        supply: receiver.supply,\n        receive: (eventContext, componentContext, notifiedRev) => {\n          if (notifiedRev < receiverRev) {\n            // Notify only receivers added after the last notification\n            receiver.receive(\n                {\n                  onRecurrent(recurrentReceiver) {\n                    eventContext.onRecurrent(recurrentContext => recurrentReceiver(recurrentContext));\n                  },\n                },\n                componentContext,\n            );\n          }\n        },\n      });\n\n      ++currentRev.it;\n    });\n    this.readNotifier = currentRev.read().keepThru_(\n        rev => (context, notifiedRev) => {\n          created.send(context, notifiedRev);\n          return rev;\n        },\n    );\n  }\n\n}\n\nexport type ComponentNotifier<T extends object> = (\n    this: void,\n    context: ComponentContext<T>,\n    notifiedRev: number,\n) => number;\n","import { nextArgs, nextSkip, valueProvider } from '@proc7ts/call-thru';\nimport { ContextValues, ContextValueSpec } from '@proc7ts/context-values';\nimport { EventReceiver, EventSupply, OnEvent, trackValue } from '@proc7ts/fun-events';\nimport { Class } from '../../common';\nimport { ComponentContext, ComponentContext__symbol, ComponentDef, ComponentMount } from '../../component';\nimport { ComponentClass, DefinitionContext, DefinitionSetup } from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { ComponentContextRegistry } from './component-context-registry.impl';\nimport { MountComponentContext$ } from './component-mount.impl';\nimport { customElementType } from './custom-element.impl';\nimport { DefinitionContextRegistry } from './definition-context-registry.impl';\nimport { DefinitionContext__symbol } from './definition-context.symbol.impl';\nimport { ElementBuilder } from './element-builder.impl';\nimport { postDefSetup } from './post-def-setup.impl';\nimport { WhenComponent } from './when-component.impl';\n\n/**\n * @internal\n */\nexport class DefinitionContext$<T extends object> extends DefinitionContext<T> {\n\n  readonly get: ContextValues['get'];\n  private readonly _def: ComponentDef.Options<T>;\n  readonly _whenComponent = new WhenComponent<T>();\n  private readonly _ready = trackValue(false);\n  private readonly _whenReady: OnEvent<[]> = this._ready.read().thru(ready => ready ? nextArgs() : nextSkip());\n  private readonly _perTypeRegistry: ComponentContextRegistry;\n\n  constructor(\n      readonly _bsContext: BootstrapContext,\n      readonly _elementBuilder: ElementBuilder,\n      readonly componentType: ComponentClass<T>,\n  ) {\n    super();\n    this._def = ComponentDef.of(componentType);\n\n    const definitionContextRegistry = new DefinitionContextRegistry(\n        _bsContext.get(DefinitionContextRegistry).seedIn(this),\n    );\n\n    definitionContextRegistry.provide({ a: DefinitionContext, is: this });\n    this.get = definitionContextRegistry.newValues().get;\n    this._perTypeRegistry = new ComponentContextRegistry(definitionContextRegistry.seedIn(this));\n\n    const whenReady$ = this.whenReady().F;\n    const whenComponent$ = this.whenComponent().F;\n\n    const definitionSetup: DefinitionSetup<T> = {\n      get componentType() {\n        return componentType;\n      },\n      get whenReady() {\n        return whenReady$;\n      },\n      get whenComponent() {\n        return whenComponent$;\n      },\n      perDefinition: spec => definitionContextRegistry.provide(spec),\n      perComponent: spec => this._perTypeRegistry.provide(spec),\n    };\n\n    this._def.setup?.(definitionSetup);\n    postDefSetup(componentType).setup(definitionSetup);\n  }\n\n  get elementType(): Class {\n    return this._elementType();\n  }\n\n  whenReady(): OnEvent<[this]>;\n  whenReady(receiver: EventReceiver<[this]>): EventSupply;\n  whenReady(receiver?: EventReceiver<[this]>): EventSupply | OnEvent<[this]> {\n    return (this.whenReady = (this._whenReady.thru_(valueProvider(this)).once() as OnEvent<[this]>).F)(receiver);\n  }\n\n  mountTo(element: any): ComponentMount<T> {\n    if (element[ComponentContext__symbol]) {\n      throw new Error(`Element ${element} already bound to component`);\n    }\n\n    const context = new MountComponentContext$(this, element);\n\n    context._createComponent();\n\n    const { mount } = context;\n\n    mount.checkConnected();\n    context._created();\n\n    return mount;\n  }\n\n  whenComponent(): OnEvent<[ComponentContext<T>]>;\n  whenComponent(receiver: EventReceiver<[ComponentContext<T>]>): EventSupply;\n  whenComponent(receiver?: EventReceiver<[ComponentContext<T>]>): OnEvent<[ComponentContext<T>]> | EventSupply {\n    return (this.whenComponent = this._whenComponent.onCreated.F)(receiver);\n  }\n\n  perComponent<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<ComponentContext<T>, any, Deps, Src, Seed>,\n  ): () => void {\n    return this._perTypeRegistry.provide(spec);\n  }\n\n  _newComponentRegistry(): ComponentContextRegistry {\n    return this._bsContext.get(ComponentContextRegistry).append(this._perTypeRegistry);\n  }\n\n  _elementType(): Class {\n    throw new Error('Custom element class is not constructed yet. Consider to use a `whenReady()` callback');\n  }\n\n  _define(): void {\n    this._def.define?.(this);\n    this._elementBuilder.definitions.send(this);\n    this._elementType = valueProvider(customElementType(this));\n    (this.componentType as any)[DefinitionContext__symbol] = this;\n    this._ready.it = true;\n  }\n\n}\n","import { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { EventEmitter } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\nimport { ComponentClass, DefinitionContext } from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { DefinitionContext$ } from './definition-context.impl';\n\n/**\n * @internal\n */\nexport interface ElementBuilder {\n  readonly definitions: EventEmitter<[DefinitionContext]>;\n  readonly components: EventEmitter<[ComponentContext]>;\n  buildElement<T extends object>(this: void, componentType: ComponentClass<T>): DefinitionContext<T>;\n}\n\n/**\n * @internal\n */\nexport const ElementBuilder: SingleContextRef<ElementBuilder> = (/*#__PURE__*/ new SingleContextKey<ElementBuilder>(\n    'element-builder',\n    {\n      byDefault: bootstrapDefault(newElementBuilder),\n    },\n));\n\nfunction newElementBuilder(bsContext: BootstrapContext): ElementBuilder {\n  return {\n    definitions: new EventEmitter<[DefinitionContext]>(),\n    components: new EventEmitter<[ComponentContext]>(),\n    buildElement<T extends object>(componentType: ComponentClass<T>) {\n\n      const definitionContext = new DefinitionContext$(bsContext, this, componentType);\n\n      definitionContext._define();\n\n      return definitionContext;\n    },\n  };\n\n}\n","import { itsEach, overArray } from '@proc7ts/a-iterable';\nimport { noop, valueProvider } from '@proc7ts/call-thru';\nimport { EventSupply, eventSupply } from '@proc7ts/fun-events';\n\n/**\n * @internal\n */\nexport interface Unloader {\n  readonly supply: EventSupply;\n  add(adder: () => () => void): () => void;\n}\n\nconst doNotAdd = valueProvider(noop);\n\n/**\n * @internal\n */\nexport function newUnloader(): Unloader {\n\n  const unloads: (() => void)[] = [];\n  let add = (adder: () => () => void): () => void => {\n\n    const unload = adder();\n\n    unloads.push(unload);\n\n    return unload;\n  };\n  const supply = eventSupply(() => {\n    add = doNotAdd;\n    itsEach(\n        overArray(unloads).reverse(),\n        unload => unload(),\n    );\n    unloads.length = 0;\n  });\n\n  return {\n    supply,\n    add(adder) {\n      return add(adder);\n    },\n  };\n}\n","import { ElementBuilder } from '../../boot/impl';\nimport { ComponentClass, CustomElements } from '../../component/definition';\nimport { FeatureContext } from '../feature-context';\n\n/**\n * @internal\n */\nexport class ComponentRegistry {\n\n  private _definitionQueue: (() => void)[] = [];\n\n  constructor(private readonly _context: FeatureContext) {\n    _context.whenReady(() => {\n      this._definitionQueue.forEach(definition => definition());\n      delete this._definitionQueue;\n    });\n  }\n\n  get customElements(): CustomElements {\n    return this._context.get(CustomElements);\n  }\n\n  define<T extends object>(componentType: ComponentClass<T>): void {\n    this._definitionQueue.push(() => {\n\n      const elementBuilder = this._context.get(ElementBuilder);\n      const defContext = elementBuilder.buildElement(componentType);\n\n      this.customElements.define(componentType, defContext.elementType);\n    });\n  }\n\n}\n","import { nextArg, nextSkip } from '@proc7ts/call-thru';\nimport { ContextRegistry, ContextValueSpec } from '@proc7ts/context-values';\nimport { afterAll, EventReceiver, EventSupply, OnEvent, trackValue } from '@proc7ts/fun-events';\nimport { BootstrapContext } from '../../boot';\nimport {\n  BootstrapContextRegistry,\n  ComponentContextRegistry,\n  DefinitionContextRegistry,\n  ElementBuilder,\n  newUnloader,\n  onPostDefSetup,\n} from '../../boot/impl';\nimport { Class } from '../../common';\nimport { ComponentContext } from '../../component';\nimport { ComponentClass, DefinitionContext, DefinitionSetup } from '../../component/definition';\nimport { FeatureContext } from '../feature-context';\nimport { ComponentRegistry } from './component-registry.impl';\nimport { FeatureLoader } from './feature-loader.impl';\n\n/**\n * @internal\n */\nexport class FeatureContext$ extends FeatureContext {\n\n  readonly _unloader = newUnloader();\n  readonly get: FeatureContext['get'];\n  private readonly _componentRegistry: ComponentRegistry;\n\n  constructor(\n      private readonly _bsContext: BootstrapContext,\n      private readonly _loader: FeatureLoader,\n  ) {\n    super();\n\n    const registry = new ContextRegistry<FeatureContext>(_bsContext);\n\n    registry.provide({ a: FeatureContext, is: this });\n    this.get = registry.newValues().get;\n    this._componentRegistry = new ComponentRegistry(this);\n  }\n\n  get feature(): Class {\n    return this._loader.request.feature;\n  }\n\n  whenReady(): OnEvent<[FeatureContext]>;\n  whenReady(receiver: EventReceiver<[FeatureContext]>): EventSupply;\n  whenReady(receiver?: EventReceiver<[FeatureContext]>): OnEvent<[FeatureContext]> | EventSupply {\n    return (this.whenReady = afterAll({\n      st: this._loader.state,\n      bs: trackValue<BootstrapContext>().by(this._bsContext.whenReady()),\n    }).thru(\n        ({\n          st: [ready],\n          bs: [bs],\n        }) => bs && ready ? nextArg(this) : nextSkip(),\n    ).once().F)(receiver);\n  }\n\n  onDefinition(): OnEvent<[DefinitionContext]>;\n  onDefinition(receiver: EventReceiver<[DefinitionContext]>): EventSupply;\n  onDefinition(receiver?: EventReceiver<[DefinitionContext]>): OnEvent<[DefinitionContext]> | EventSupply {\n    return (this.onDefinition = this._bsContext.get(ElementBuilder).definitions.on()\n        .tillOff(this._unloader.supply).F)(receiver);\n  }\n\n  onComponent(): OnEvent<[ComponentContext]>;\n  onComponent(receiver: EventReceiver<[ComponentContext]>): EventSupply;\n  onComponent(receiver?: EventReceiver<[ComponentContext]>): EventSupply | OnEvent<[ComponentContext]> {\n    return (this.onComponent = this._bsContext.get(ElementBuilder).components.on()\n        .tillOff(this._unloader.supply).F)(receiver);\n  }\n\n  provide<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<BootstrapContext, any, Deps, Src, Seed>,\n  ): () => void {\n    return this._unloader.add(() => this._bsContext.get(BootstrapContextRegistry).provide(spec));\n  }\n\n  perDefinition<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<DefinitionContext, any, Deps, Src, Seed>,\n  ): () => void {\n    return this._unloader.add(() => this._bsContext.get(DefinitionContextRegistry).provide(spec));\n  }\n\n  perComponent<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<ComponentContext, any, Deps, Src, Seed>,\n  ): () => void {\n    return this._unloader.add(() => this._bsContext.get(ComponentContextRegistry).provide(spec));\n  }\n\n  setupDefinition<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionSetup]> {\n    return onPostDefSetup(componentType, this._unloader);\n  }\n\n  define<T extends object>(componentType: ComponentClass<T>): void {\n    this._componentRegistry.define(componentType);\n  }\n\n}\n","import { filterIt, mapIt } from '@proc7ts/a-iterable';\nimport { isPresent, nextArgs, NextCall, NextSkip, nextSkip } from '@proc7ts/call-thru';\nimport { ContextValueOpts, ContextValues } from '@proc7ts/context-values';\nimport { ContextUpKey } from '@proc7ts/context-values/updatable';\nimport {\n  afterAll,\n  afterEach,\n  AfterEvent,\n  afterEventBy,\n  afterThe,\n  EventKeeper,\n  nextAfterEvent,\n  OnEventCallChain,\n  trackValue,\n} from '@proc7ts/fun-events';\nimport { BootstrapContext } from '../../boot';\nimport { ArraySet, Class } from '../../common';\nimport { FeatureContext } from '../feature-context';\nimport { FeatureContext$ } from './feature-context.impl';\nimport { FeatureClause, FeatureRequest } from './feature-request.impl';\n\nconst FeatureKey__symbol = (/*#__PURE__*/ Symbol('feature-key'));\n\n/**\n * @internal\n */\nexport class FeatureKey extends ContextUpKey<AfterEvent<[FeatureLoader?]>, FeatureClause> {\n\n  static of(feature: Class): FeatureKey {\n    // eslint-disable-next-line no-prototype-builtins\n    return feature.hasOwnProperty(FeatureKey__symbol)\n        ? (feature as any)[FeatureKey__symbol]\n        : ((feature as any)[FeatureKey__symbol] = new FeatureKey(feature));\n  }\n\n  get upKey(): this {\n    return this;\n  }\n\n  private constructor(feature: Class) {\n    super(`feature:${feature.name}`);\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          AfterEvent<[FeatureLoader?]>,\n          EventKeeper<FeatureClause[]> | FeatureClause,\n          AfterEvent<FeatureClause[]>>,\n  ): AfterEvent<[FeatureLoader?]> | null | undefined {\n    return loadFeature(\n        opts.context.get(BootstrapContext),\n        opts.seed.keepThru(preferredFeatureClause),\n    );\n  }\n\n}\n\nfunction preferredFeatureClause(...clauses: FeatureClause[]): FeatureClause | undefined {\n\n  let required = false;\n  let preferred: FeatureClause | undefined;\n\n  for (const clause of clauses) {\n    switch (clause[1]) {\n      case 'is':\n        required = true;\n        if (!preferred) {\n          preferred = clause;\n        }\n        break;\n      case 'has':\n        preferred = clause;\n        break;\n      case 'needs':\n        required = true;\n    }\n  }\n\n  return required ? preferred : undefined;\n}\n\nfunction loadFeature(\n    bsContext: BootstrapContext,\n    from: AfterEvent<[FeatureClause?]>,\n): AfterEvent<[FeatureLoader?]> {\n  return afterEventBy<[FeatureLoader?]>(receiver => {\n\n    let origin: Class | undefined;\n    let source: AfterEvent<[FeatureLoader?]> = afterThe();\n    let stageId: Promise<FeatureStageId> = Promise.resolve('idle');\n\n    return afterAll({\n      clause: from,\n      deps: loadFeatureDeps(bsContext, from),\n    }).keepThru_(({ clause: [clause], deps }): NextCall<OnEventCallChain, [FeatureLoader?]> => {\n      if (!clause) {\n        return nextArgs();\n      }\n\n      const [request, , target] = clause;\n\n      if (request.feature === origin) {\n        return nextAfterEvent(source); // Origin didn't change. Reuse the source.\n      }\n\n      origin = request.feature;\n\n      if (target !== origin) {\n        // Originated from replacement feature provider. Reuse its loader.\n        return nextAfterEvent(source = bsContext.get(FeatureKey.of(origin)).keepThru_(\n            loader => {\n              loader!.to(stageId);\n              stageId = loader!.stage;\n              return loader;\n            },\n        ));\n      }\n\n      // Create feature's own loader\n      const ownLoader = new FeatureLoader(bsContext, request, deps).to(stageId);\n      const ownSource = afterThe(ownLoader);\n\n      return nextAfterEvent(source = afterEventBy<[FeatureLoader]>(\n          rcv => ownSource.to(rcv).whenOff(() => {\n            stageId = ownLoader.unload();\n          }),\n      ).share()); // Can be accessed again when reused\n    }).to(receiver);\n  }).keepThru(\n      preventDuplicateLoader(),\n  );\n}\n\nfunction preventDuplicateLoader():\n    (\n        loader?: FeatureLoader,\n    ) => NextCall<OnEventCallChain, [FeatureLoader?]> | NextSkip {\n\n  let lastLoader: FeatureLoader | null | undefined = null; // Initially `null` to differ from `undefined`\n\n  return (loader?: FeatureLoader) => {\n    if (lastLoader === loader) {\n      return nextSkip();\n    }\n    lastLoader = loader;\n\n    if (!loader) {\n      return nextArgs<[FeatureLoader?]>();\n    }\n\n    return nextArgs<[FeatureLoader?]>(loader);\n  };\n}\n\nfunction loadFeatureDeps(\n    bsContext: BootstrapContext,\n    from: AfterEvent<[FeatureClause?]>,\n): AfterEvent<FeatureLoader[]> {\n  return from.keepThru_(clause => {\n    if (!clause) {\n      return nextArgs();\n    }\n\n    const [{ def }] = clause;\n    const needs = new ArraySet(def.needs);\n\n    if (!needs.size) {\n      return nextArgs();\n    }\n\n    return nextAfterEvent(\n        afterEach(\n            ...mapIt(\n                needs,\n                dep => bsContext.get(FeatureKey.of(dep)),\n            ),\n        ).keepThru_(presentFeatureDeps),\n    );\n  });\n}\n\nfunction presentFeatureDeps(...deps: [FeatureLoader?][]): NextCall<OnEventCallChain, FeatureLoader[]> {\n  return nextArgs<FeatureLoader[]>(\n      ...filterIt<FeatureLoader | undefined, FeatureLoader>(\n          mapIt(deps, dep => dep[0]),\n          isPresent,\n      ),\n  );\n}\n\n/**\n * @internal\n */\nexport class FeatureLoader {\n\n  readonly down: Promise<void>;\n  private _stage: Promise<FeatureStage>;\n  private _down!: () => void;\n  readonly state = trackValue(false);\n\n  constructor(\n      readonly bsContext: BootstrapContext,\n      readonly request: FeatureRequest,\n      readonly deps: FeatureLoader[],\n  ) {\n    this.down = new Promise(resolve => this._down = resolve);\n    this._stage = Promise.resolve(new SetupFeatureStage(this));\n  }\n\n  get stage(): Promise<FeatureStageId> {\n    return this._stage.then(stage => stage.after);\n  }\n\n  get ready(): boolean {\n    return this.state.it;\n  }\n\n  to(stageId: Promise<FeatureStageId>): this {\n\n    const lastStage = this._stage;\n\n    this._stage = stageId.then(id => lastStage.then(stage => stage[id]()));\n\n    return this;\n  }\n\n  async setup(): Promise<void> {\n    await (this._stage = this._stage.then(stage => stage.setup()));\n  }\n\n  async init(): Promise<void> {\n    await (this._stage = this._stage.then(stage => stage.init()));\n  }\n\n  async unload(): Promise<FeatureStageId> {\n\n    const prevStage = this._stage;\n\n    delete this._stage; // Unloaded feature should never be accessed again.\n\n    const stage = await prevStage;\n    const stageId = await stage.stop();\n\n    this._down();\n\n    return stageId;\n  }\n\n}\n\ntype FeatureStageId = 'idle' | 'setup' | 'init';\ntype FeatureStageStop = (this: void) => Promise<any>;\n\nabstract class FeatureStage {\n\n  abstract readonly after: FeatureStageId;\n\n  constructor(\n      readonly loader: FeatureLoader,\n      private readonly _stop: FeatureStageStop = () => Promise.resolve(),\n  ) {}\n\n  idle(): Promise<this> {\n    return Promise.resolve(this);\n  }\n\n  abstract setup(): Promise<FeatureStage>;\n\n  abstract init(): Promise<FeatureStage>;\n\n  stop(): Promise<FeatureStageId> {\n    return this._stop().then(() => this.after);\n  }\n\n  protected perDep(action: (dep: FeatureLoader) => Promise<void>): Promise<any> {\n\n    const { deps } = this.loader;\n\n    return Promise.all(deps.map(dep => action(dep)));\n  }\n\n}\n\nclass SetupFeatureStage extends FeatureStage {\n\n  get after(): 'idle' {\n    return 'idle';\n  }\n\n  async setup(): Promise<FeatureStage> {\n    await this.perDep(loader => loader.setup());\n\n    const { bsContext, request: { def } } = this.loader;\n    const context = new FeatureContext$(bsContext, this.loader);\n    const supply = context._unloader.supply;\n\n    def.setup?.(context);\n\n    return new InitFeatureStage(\n        this.loader,\n        context,\n        () => Promise.resolve(supply.off()),\n    );\n  }\n\n  init(): Promise<FeatureStage> {\n    return this.setup().then(stage => stage.init());\n  }\n\n}\n\nclass InitFeatureStage extends FeatureStage {\n\n  get after(): 'setup' {\n    return 'setup';\n  }\n\n  constructor(\n      state: FeatureLoader,\n      private readonly _context: FeatureContext,\n      stop: FeatureStageStop,\n  ) {\n    super(state, stop);\n  }\n\n  setup(): Promise<FeatureStage> {\n    return Promise.resolve(this);\n  }\n\n  async init(): Promise<FeatureStage> {\n    await this.perDep(loader => loader.init());\n\n    const { request: { def } } = this.loader;\n\n    def.init?.(this._context);\n\n    return new ActiveFeatureStage(this);\n  }\n\n}\n\nclass ActiveFeatureStage extends FeatureStage {\n\n  get after(): 'init' {\n    return 'init';\n  }\n\n  constructor(prev: InitFeatureStage) {\n    super(prev.loader, () => prev.stop());\n    prev.loader.state.it = true;\n  }\n\n  setup(): Promise<FeatureStage> {\n    return Promise.resolve(this);\n  }\n\n  init(): Promise<FeatureStage> {\n    return Promise.resolve(this);\n  }\n\n}\n","import { ArraySet, Class, mergeFunctions } from '../../common';\nimport { ComponentDef, ComponentDef__symbol } from '../../component';\nimport { FeatureDef } from '../feature-def';\nimport { FeatureNeedsError } from '../feature-needs-error';\nimport { FeatureKey } from './feature-loader.impl';\nimport { FeatureRequester } from './feature-requester.impl';\n\n/**\n * @internal\n */\nexport type FeatureClause = [FeatureRequest, 'is' | 'needs' | 'has', Class];\n\n/**\n * @internal\n */\nexport type FeatureNeedClause = [FeatureRequest, 'needs' | 'has', Class];\n\n/**\n * @internal\n */\nexport class FeatureRequest {\n\n  readonly def: FeatureDef.Options;\n  private _uses = 0;\n\n  constructor(\n      private readonly _requester: FeatureRequester,\n      readonly feature: Class,\n      private _revoke: () => void,\n  ) {\n    this.def = featureDef(feature);\n  }\n\n  request(clauses: readonly FeatureNeedClause[]): this {\n\n    const requester = this._requester;\n    const { registry } = requester;\n    const isClause: FeatureClause = [this, 'is', this.feature];\n\n    this._revokeBy(registry.provide({\n      a: FeatureKey.of(this.feature),\n      is: isClause,\n    }));\n\n    new ArraySet(this.def.has).forEach(feature => {\n\n      const clause: FeatureNeedClause = [this, 'has', feature];\n\n      this._revokeBy(registry.provide({ a: FeatureKey.of(feature), is: clause }));\n\n      // Request the provided feature _after_ provider\n      const request = requester.request(feature, [...clauses, clause]);\n\n      this._revokeBy(() => request.unuse());\n    });\n\n    new ArraySet(this.def.needs).forEach(feature => {\n\n      const clause: FeatureNeedClause = [this, 'needs', feature];\n\n      const request = requester.request(feature, [...clauses, clause]);\n\n      this._revokeBy(() => request.unuse());\n      this._revokeBy(registry.provide({ a: FeatureKey.of(feature), is: clause }));\n    });\n\n    this._uses = 1;\n\n    return this;\n  }\n\n  reuse(clauses: readonly FeatureNeedClause[]): this {\n    if (!this._uses) {\n      throw new FeatureNeedsError(clauses.map(([{ feature }, reason, need]) => [feature, reason, need]));\n    }\n\n    ++this._uses;\n\n    return this;\n  }\n\n  unuse(): void {\n    if (!--this._uses) {\n      this._revoke();\n    }\n  }\n\n  private _revokeBy(revoke: () => void): void {\n    this._revoke = mergeFunctions(revoke, this._revoke);\n  }\n\n}\n\nfunction featureDef(featureType: Class): FeatureDef.Options {\n\n  let def = FeatureDef.of(featureType);\n\n  if (ComponentDef__symbol in featureType) {\n    def = FeatureDef.merge(\n        def,\n        {\n          init(context) {\n            context.define(featureType);\n          },\n        },\n    );\n\n    const { feature } = ComponentDef.of(featureType);\n\n    if (feature) {\n      def = FeatureDef.merge(def, feature);\n    }\n\n  }\n\n  return def;\n}\n\n","import { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { BootstrapContext, bootstrapDefault } from '../../boot';\nimport { BootstrapContextRegistry } from '../../boot/impl';\nimport { Class } from '../../common';\nimport { FeatureNeedClause, FeatureRequest } from './feature-request.impl';\n\nconst FeatureRequester__key = (/*#__PURE__*/ new SingleContextKey<FeatureRequester>(\n    'feature-requester',\n    {\n      byDefault: bootstrapDefault(context => new FeatureRequester(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport class FeatureRequester {\n\n  static get [ContextKey__symbol](): ContextKey<FeatureRequester> {\n    return FeatureRequester__key;\n  }\n\n  readonly registry: BootstrapContextRegistry;\n  private readonly _map = new Map<Class, FeatureRequest>();\n\n  constructor(context: BootstrapContext) {\n    this.registry = context.get(BootstrapContextRegistry);\n  }\n\n  request(feature: Class, clauses: readonly FeatureNeedClause[] = []): FeatureRequest {\n\n    const existing = this._map.get(feature);\n\n    if (existing) {\n      return existing.reuse(clauses);\n    }\n\n    const request = new FeatureRequest(this, feature, () => this._map.delete(feature));\n\n    this._map.set(feature, request);\n\n    return request.request(clauses);\n  }\n\n}\n","import { OnEvent, onPromise } from '@proc7ts/fun-events';\nimport { ComponentClass, CustomElements, DefinitionContext } from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { definitionContextOf } from './definition-context.symbol.impl';\n\n/**\n * @internal\n */\nexport const WhenDefined__symbol = (/*#__PURE__*/ Symbol('when-defined'));\n\n/**\n * @internal\n */\nexport function whenDefined<T extends object>(\n    bsContext: BootstrapContext,\n    componentType: ComponentClass<T>,\n): OnEvent<[DefinitionContext<T>]> {\n  // eslint-disable-next-line no-prototype-builtins\n  if (componentType.hasOwnProperty(WhenDefined__symbol)) {\n    return (componentType as any)[WhenDefined__symbol];\n  }\n\n  const result: OnEvent<[DefinitionContext<T>]> = onPromise(\n      Promise.resolve(bsContext.whenReady())\n          .then(() => bsContext.get(CustomElements).whenDefined(componentType))\n          .then(() => definitionContextOf(componentType)),\n  );\n\n  return (componentType as any)[WhenDefined__symbol] = result;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { nextArgs, nextSkip } from '@proc7ts/call-thru';\nimport { AfterEvent, afterEventBy, EventReceiver, EventSupply, OnEvent, trackValue } from '@proc7ts/fun-events';\nimport { newNamespaceAliaser } from '@proc7ts/namespace-aliaser';\nimport { Class } from '../../common';\nimport { ComponentClass, DefinitionContext } from '../../component/definition';\nimport { FeatureDef, FeatureRef, FeatureStatus } from '../../feature';\nimport { FeatureKey, FeatureLoader, FeatureRequester } from '../../feature/loader';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { DefaultNamespaceAliaser } from '../globals';\nimport { BootstrapContextRegistry } from '../impl';\nimport { whenDefined } from '../impl/when-defined.impl';\n\n/**\n * Bootstraps components.\n *\n * Both features and components can be passed as parameters to this function.\n *\n * @category Core\n * @param features  Features and components to enable.\n *\n * @returns Bootstrap context instance.\n */\nexport function bootstrapComponents(...features: Class[]): BootstrapContext {\n\n  const bootstrapContextRegistry = BootstrapContextRegistry.create();\n  const { bootstrapContext, complete } = initBootstrap(bootstrapContextRegistry);\n  const feature = features.length === 1 ? features[0] : bootstrapFeature(features);\n\n  bootstrapContext.get(FeatureRequester).request(feature);\n  bootstrapContext.get(FeatureKey.of(feature)).to(loader => {\n    loader!.init().then(complete);\n  });\n\n  return bootstrapContext;\n}\n\n/**\n * @internal\n */\nfunction bootstrapFeature(needs: Class[]): Class {\n  return FeatureDef.define(class BootstrapFeature {}, { needs });\n}\n\n/**\n * @internal\n */\nconst enum BootstrapStage {\n  Init,\n  Ready,\n}\n\n/**\n * @internal\n */\nfunction initBootstrap(\n    bootstrapContextRegistry: BootstrapContextRegistry,\n): {\n  bootstrapContext: BootstrapContext;\n  complete(): void;\n} {\n\n  const stage = trackValue<BootstrapStage>(BootstrapStage.Init);\n  const values = bootstrapContextRegistry.values;\n\n  class BootstrapContext$ extends BootstrapContext {\n\n    readonly get = values.get;\n\n    constructor() {\n      super();\n      bootstrapContextRegistry.provide({ a: DefaultNamespaceAliaser, by: newNamespaceAliaser });\n      bootstrapContextRegistry.provide({ a: BootstrapContext, is: this });\n    }\n\n    whenDefined<C extends object>(componentType: ComponentClass<C>): OnEvent<[DefinitionContext<C>]> {\n      return whenDefined(this, componentType);\n    }\n\n    whenReady(): OnEvent<[BootstrapContext]>;\n    whenReady(receiver: EventReceiver<[BootstrapContext]>): EventSupply;\n    whenReady(receiver?: EventReceiver<[BootstrapContext]>): OnEvent<[BootstrapContext]> | EventSupply {\n      return (this.whenReady = stage.read().thru(\n          s => s ? nextArgs(this) : nextSkip(),\n      ).once().F)(receiver);\n    }\n\n    load(feature: Class<any>): FeatureRef {\n\n      interface FeatureInfo {\n        status: FeatureStatus;\n        down?: Promise<void>;\n      }\n\n      const status = afterEventBy<[FeatureInfo]>(receiver => {\n\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const request = bootstrapContext.get(FeatureRequester).request(feature);\n        const info = trackValue<FeatureInfo>({\n          status: {\n            feature,\n            ready: false,\n          },\n        });\n\n        this.get(FeatureKey.of(feature)).to({\n          supply: receiver.supply,\n          receive(_ctx, ldr) {\n\n            // Present until `request` revoked\n            // But that happens only when supply is cut off.\n            const loader = ldr as FeatureLoader;\n\n            info.it = {\n              status: {\n                feature: loader.request.feature,\n                ready: loader.ready,\n              },\n              down: loader.down,\n            };\n            if (!loader.ready) {\n              loader.init().then(() => {\n                info.it = {\n                  status: {\n                    feature: loader.request.feature,\n                    ready: true,\n                  },\n                  down: loader.down,\n                };\n              });\n            }\n          },\n        }).whenOff(() => {\n          request.unuse(); // Apply this callback _after_ registration complete,\n                           // to prevent receiver call.\n        });\n\n        info.read(receiver);\n      }).share();\n\n      let whenDown: Promise<void>;\n      const supply = status.to(({ down }) => {\n        whenDown = down!;\n      });\n\n      class Ref extends FeatureRef {\n\n        get down(): Promise<void> {\n          return whenDown;\n        }\n\n        read(): AfterEvent<[FeatureStatus]>;\n        read(receiver: EventReceiver<[FeatureStatus]>): EventSupply;\n        read(receiver?: EventReceiver<[FeatureStatus]>): AfterEvent<[FeatureStatus]> | EventSupply {\n          return (this.read = status.tillOff(supply).keepThru(\n              info => info.status,\n          ).F)(receiver);\n        }\n\n        dismiss(reason?: any): Promise<void> {\n          supply.off(reason);\n          return whenDown;\n        }\n\n      }\n\n      return new Ref();\n    }\n\n  }\n\n  const bootstrapContext = new BootstrapContext$();\n\n  return {\n    bootstrapContext,\n    complete(): void {\n      stage.it = BootstrapStage.Ready;\n    },\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { AfterEvent, AfterEvent__symbol, EventKeeper, EventReceiver, EventSupply } from '@proc7ts/fun-events';\nimport { FeatureStatus } from './feature-status';\n\n/**\n * Dynamically loaded feature reference.\n *\n * It is returned from [[BootstrapContext.load]] and can be used to read feature load status and unload it.\n *\n * Implements an `EventKeeper` interface by sending a feature load status updates.\n *\n * @category Core\n */\nexport abstract class FeatureRef implements EventKeeper<[FeatureStatus]> {\n\n  /**\n   * A promise resolved when feature is unloaded.\n   *\n   * This happens after all feature references dismissed.\n   */\n  abstract readonly down: Promise<void>;\n\n  /**\n   * Builds an `AfterEvent` keeper of feature load status.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `AfterEvent` sender of feature load status.\n   */\n  abstract read(): AfterEvent<[FeatureStatus]>;\n\n  /**\n   * Starts sending feature load status and updates to the given `receiver`.\n   *\n   * @param receiver  Target receiver of feature load status.\n   *\n   * @returns Feature load status supply.\n   */\n  abstract read(receiver: EventReceiver<[FeatureStatus]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[FeatureStatus]> {\n    return this.read();\n  }\n\n  /**\n   * Dismisses feature reference.\n   *\n   * When all feature references dismissed, then unloads the feature. This removes everything set up by the\n   * feature via [[BootstrapSetup]] and [[DefinitionSetup]].\n   *\n   * @param reason  Arbitrary reason of feature reference dismiss. This will be reported by load status supplies\n   * as their cut off reason.\n   *\n   * @returns A promise resolved when feature is unloaded. This happens only after all feature references dismissed.\n   */\n  abstract dismiss(reason?: any): Promise<void>;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { MultiContextKey, MultiContextRef } from '@proc7ts/context-values';\n\n/**\n * Custom element attribute change callback signature.\n *\n * This function is called whenever a new attribute value assigned.\n *\n * @category Feature\n * @typeparam T  A type of component.\n */\nexport type AttributeChangedCallback<T extends object> =\n/**\n * @param component  Component instance.\n * @param newValue  New attribute value, or `null` when attribute removed.\n * @param oldValue  Previous attribute value, or `null` if attribute did not exist.\n */\n    (this: void, component: T, newValue: string | null, oldValue: string | null) => void;\n\n/**\n * Custom element attribute descriptor.\n *\n * Descriptors are to be registered in component's definition context in order to make them available to component.\n * The {@link Attribute @Attribute}, {@link Attributes @Attributes}, and {@link AttributeChanged @AttributeChanged}\n * decorators are doing so.\n *\n * @category Feature\n */\nexport interface AttributeDescriptor<T extends object = any> {\n\n  /**\n   * Attribute name.\n   */\n  readonly name: string;\n\n  /**\n   * Attribute change callback that will be called each time attribute value changes.\n   */\n  readonly change: AttributeChangedCallback<T>;\n\n}\n\n/**\n * A key of component definition context value containing attribute descriptors.\n *\n * @category Feature\n */\nexport const AttributeDescriptor: MultiContextRef<AttributeDescriptor> = (\n    /*#__PURE__*/ new MultiContextKey<AttributeDescriptor>('attribute-descriptor')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing element an attributes.\n *\n * Thus, an attribute state path is always something like `[AttributePath__root, 'attribute-name']`.\n *\n * @category Feature\n */\nexport const AttributePath__root = (/*#__PURE__*/ Symbol('attribute'));\n\n/**\n * A path to the named attribute state.\n *\n * @category Feature\n */\nexport type AttributePath = readonly [keyof AttributePath__rootKeys, string];\n\n/**\n * Constructs a named attribute state path.\n *\n * @category Feature\n * @param name  Target attribute name.\n *\n * @return Attribute state path.\n */\nexport function attributePathTo(name: string): AttributePath {\n  return [AttributePath__root, name];\n}\n\n/**\n * @category Feature\n */\n// eslint-disable-next-line @typescript-eslint/class-name-casing\nexport interface AttributePath__rootKeys {\n  [AttributePath__root]: true;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { noop } from '@proc7ts/call-thru';\nimport { StatePath } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\nimport { AttributeUpdateReceiver } from './attribute-def';\nimport { AttributeChangedCallback } from './attribute-descriptor';\nimport { attributePathTo } from './attribute-path';\n\n/**\n * @internal\n */\nexport function attributeStateUpdate<T extends object>(\n    name: string,\n    updateState: boolean | AttributeUpdateReceiver<T> | StatePath = true,\n): AttributeChangedCallback<T> {\n  if (updateState === false) {\n    return noop;\n  }\n  if (updateState === true || typeof updateState === 'function') {\n\n    const path = attributePathTo(name);\n    const update: AttributeUpdateReceiver<T> = updateState === true ? updateAttributeState : updateState;\n\n    return (component: T, newValue, oldValue) => update(component, path, newValue, oldValue);\n  }\n\n  return (component: T, newValue, oldValue) => updateAttributeState(component, updateState, newValue, oldValue);\n}\n\nfunction updateAttributeState<T extends object>(\n    component: T,\n    path: StatePath,\n    newValue: string | null,\n    oldValue: string | null,\n): void {\n  ComponentContext.of(component).updateState(path, newValue, oldValue);\n}\n","import { ComponentClass } from '../../component/definition';\nimport { AttributeDef } from './attribute-def';\nimport { AttributeChangedCallback, AttributeDescriptor } from './attribute-descriptor';\nimport { attributeStateUpdate } from './attribute-state-update.impl';\n\n/**\n * @internal\n */\nexport function parseAttributeDescriptor<T extends ComponentClass>(\n    target: InstanceType<T>,\n    propertyKey: string | symbol,\n    opts?: AttributeDef<InstanceType<T>> | string,\n): AttributeDescriptor<InstanceType<T>> {\n\n  let name: string;\n  let change: AttributeChangedCallback<InstanceType<T>>;\n\n  if (typeof opts === 'string') {\n    name = opts;\n    change = attributeStateUpdate(name);\n  } else {\n    if (opts && opts.name) {\n      name = opts.name;\n    } else if (typeof propertyKey !== 'string') {\n      throw new TypeError(\n          'Attribute name is required as property key is not a string: '\n          + `${target.constructor.name}.prototype.${String(propertyKey)}`,\n      );\n    } else {\n      name = propertyKey;\n    }\n\n    change = attributeStateUpdate(name, opts && opts.updateState);\n  }\n\n  return { name, change };\n}\n","import { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { BootstrapWindow } from '../../boot/globals';\nimport { Class, mergeFunctions } from '../../common';\nimport { ComponentContext, ComponentMount } from '../../component';\nimport { DefinitionContext } from '../../component/definition';\nimport { AttributeChangedCallback, AttributeDescriptor } from './attribute-descriptor';\n\nconst AttributeRegistry__key = (/*#__PURE__*/ new SingleContextKey<AttributeRegistry>('attribute-registry'));\n\n/**\n * @internal\n */\nexport class AttributeRegistry<T extends object = any> {\n\n  static get [ContextKey__symbol](): ContextKey<AttributeRegistry> {\n    return AttributeRegistry__key;\n  }\n\n  private _attrs?: Map<string, AttributeChangedCallback<T>>;\n\n  constructor(private readonly _context: DefinitionContext) {\n  }\n\n  get attrs(): Map<string, AttributeChangedCallback<T>> {\n    if (this._attrs) {\n      return this._attrs;\n    }\n\n    const attrs = new Map<string, AttributeChangedCallback<T>>();\n\n    this._context.get(AttributeDescriptor).forEach(desc => {\n\n      const { name, change } = desc;\n\n      attrs.set(name, mergeFunctions(attrs.get(name), change));\n    });\n\n    return this._attrs = attrs;\n  }\n\n  define(elementType: Class): void {\n\n    const attrs = this.attrs;\n    const observedAttributes = Array.from(attrs.keys());\n\n    if (!observedAttributes.length) {\n      return; // No attributes defined\n    }\n\n    Object.defineProperty(elementType, 'observedAttributes', {\n      configurable: true,\n      enumerable: true,\n      value: observedAttributes,\n    });\n    Object.defineProperty(elementType.prototype, 'attributeChangedCallback', {\n      configurable: true,\n      enumerable: true,\n      value: function (name: string, oldValue: string | null, newValue: string) {\n        attrs.get(name)!(ComponentContext.of<T>(this).component, newValue, oldValue);\n      },\n    });\n  }\n\n  mount(mount: ComponentMount<T>): void {\n\n    const element = mount.element;\n    const attrs = this.attrs;\n    const attributeFilter = Array.from(attrs.keys());\n\n    if (!attributeFilter.length) {\n      return; // No attributes defined\n    }\n\n    const MutationObserver = this._context.get(BootstrapWindow).MutationObserver;\n    const observer = new MutationObserver(\n        records => records.forEach(\n            record => {\n\n              const attributeName = record.attributeName as string;\n\n              return attrs.get(attributeName)!(\n                  ComponentContext.of<T>(element).component,\n                  element.getAttribute(attributeName),\n                  record.oldValue,\n              );\n            },\n        ),\n    );\n\n    observer.observe(element, {\n      attributes: true,\n      attributeFilter,\n      attributeOldValue: true,\n    });\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { FeatureDef, FeatureDef__symbol } from '../feature-def';\nimport { AttributeRegistry } from './attribute-registry.impl';\n\n/**\n * @internal\n */\nconst AttributesSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.perDefinition({ as: AttributeRegistry });\n    setup.onDefinition(definitionContext => {\n      // Define element prototype attributes\n      definitionContext.whenReady(\n          ({ elementType }) => definitionContext.get(AttributeRegistry).define(elementType),\n      );\n    });\n    setup.onComponent(componentContext => {\n\n      const mount = componentContext.mount;\n\n      if (mount) {\n        // Mount element attributes\n        componentContext.get(AttributeRegistry).mount(mount);\n      }\n    });\n  },\n};\n\n/**\n * A feature adding attributes to custom elements.\n *\n * This feature is enabled automatically whenever an `@Attribute`, `@Attributes`, or `@AttributeChanged` decorator\n * applied to component.\n *\n * @category Feature\n */\nexport class AttributesSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return AttributesSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentContext, ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { AttributeDef } from './attribute-def';\nimport { AttributeDescriptor } from './attribute-descriptor';\nimport { parseAttributeDescriptor } from './attribute-descriptor.impl';\nimport { AttributesSupport } from './attributes-support.feature';\n\n/**\n * Creates a decorator for component's property that accesses custom element's attribute.\n *\n * The decorated property accesses corresponding attribute on read, and updates it on setting. `null` value corresponds\n * to absent attribute. Setting to `null` removes corresponding attribute.\n *\n * This decorator automatically enables [[AttributesSupport]] feature.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Attribute definition or just an attribute name.\n *\n * @return Component property decorator.\n */\nexport function Attribute<T extends ComponentClass>(\n    def?: AttributeDef<InstanceType<T>> | string,\n): ComponentPropertyDecorator<string | null, T> {\n  return ComponentProperty(({ type, key }) => {\n\n    const descriptor = parseAttributeDescriptor(type.prototype, key, def);\n    const { name } = descriptor;\n\n    return {\n      componentDef: {\n        feature: {\n          needs: AttributesSupport,\n        },\n        setup(setup) {\n          setup.perDefinition({ a: AttributeDescriptor, is: descriptor });\n        },\n      },\n      get(component: InstanceType<T>): string | null {\n        return ComponentContext.of(component).element.getAttribute(name);\n      },\n      set(component: InstanceType<T>, newValue: string | null) {\n\n        const { element }: { element: Element } = ComponentContext.of(component);\n\n        if (newValue != null) {\n          element.setAttribute(name, newValue);\n        } else {\n          element.removeAttribute(name);\n        }\n      },\n    };\n  });\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { AttributeDef } from './attribute-def';\nimport { AttributeDescriptor } from './attribute-descriptor';\nimport { parseAttributeDescriptor } from './attribute-descriptor.impl';\nimport { AttributesSupport } from './attributes-support.feature';\n\n/**\n * Creates a component method decorator for custom element attribute change callback.\n *\n * The decorated method should have up to two parameters:\n *\n * - the first one accepts new attribute value.\n * - the second one accepts old attribute value (or `null`),\n *\n * Example:\n * ```TypeScript\n * @Component('my-component')\n * class MyComponent {\n *\n *   @AttributeChanged('my-attribute')\n *   myAttributeChanged(newValue: string, oldValue: string | null) {\n *     console.log(`my-attribute value changed from ${oldValue} to ${newValue}`);\n *   }\n *\n * }\n * ```\n *\n * This decorator automatically enables [[AttributesSupport]] feature.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Attribute definition or just an attribute name.\n *\n * @return Component method decorator.\n */\nexport function AttributeChanged<T extends ComponentClass>(\n    def?: AttributeDef<InstanceType<T>> | string,\n): ComponentPropertyDecorator<(newValue: string | null, oldValue: string | null) => void, T> {\n  return ComponentProperty(({ type, get, key }) => {\n\n    const { name, change } = parseAttributeDescriptor(type.prototype, key, def);\n\n    return {\n      componentDef: {\n        feature: {\n          needs: AttributesSupport,\n        },\n        setup(setup) {\n          setup.perDefinition({\n            a: AttributeDescriptor,\n            is: {\n              name,\n              change(\n                  component: InstanceType<T>,\n                  newValue: string | null,\n                  oldValue: string | null,\n              ) {\n\n                const callback = get(component);\n\n                callback.call(component, newValue, oldValue);\n                change(component, newValue, oldValue);\n              },\n            },\n          });\n        },\n      },\n    };\n  });\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { StatePath } from '@proc7ts/fun-events';\nimport { Class } from '../../common';\nimport { isArray } from '../../common/types.impl';\nimport { Component, ComponentDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { AttributeUpdateReceiver } from './attribute-def';\nimport { AttributeDescriptor } from './attribute-descriptor';\nimport { attributeStateUpdate } from './attribute-state-update.impl';\nimport { AttributesSupport } from './attributes-support.feature';\n\n/**\n * Creates a component decorator declaring supported custom element's attributes.\n *\n * This decorator automatically enables [[AttributesSupport]] feature.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param items  Attributes definition options. Either an attribute definition item, or an array of such items.\n *\n * @return New component decorator.\n */\nexport function Attributes<T extends ComponentClass = Class>(\n    items: Attributes.Item<InstanceType<T>> | readonly Attributes.Item<InstanceType<T>>[],\n): ComponentDecorator<T> {\n  return Component({\n    feature: { needs: AttributesSupport },\n    setup(setup) {\n\n      const defineByItem = (item: Attributes.Item<InstanceType<T>>): void => {\n        if (typeof item === 'string') {\n          setup.perDefinition({\n            a: AttributeDescriptor,\n            is: {\n              name: item,\n              change: attributeStateUpdate(item),\n            },\n          });\n        } else {\n          Object.keys(item).forEach(name => {\n            setup.perDefinition({\n              a: AttributeDescriptor,\n              is: {\n                name,\n                change: attributeStateUpdate(name, item[name]),\n              },\n            });\n          });\n        }\n      };\n\n      if (isArray<Attributes.Item<InstanceType<T>>>(items)) {\n        items.forEach(defineByItem);\n      } else {\n        defineByItem(items);\n      }\n    },\n  });\n}\n\nexport namespace Attributes {\n\n  /**\n   * Attribute definition item.\n   *\n   * This is either an attribute name, or a per-attribute options map.\n   *\n   * @typeparam T  A type of component.\n   */\n  export type Item<T extends object> = Map<T> | string;\n\n  /**\n   * Per-attribute definition options.\n   *\n   * This is a map with attribute names as keys and their state update instructions as values.\n   *\n   * The state update instruction can be one of:\n   * - `false` to not update the component state,\n   * - `true` to update the component state with changed attribute key,\n   * - a state value key to update, or\n   * - an attribute update receiver function with custom state update logic.\n   *\n   * @typeparam T  A type of component.\n   */\n  export interface Map<T extends object> {\n    readonly [name: string]: boolean | StatePath | AttributeUpdateReceiver<T>;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { StateTracker } from '@proc7ts/fun-events';\n\n/**\n * @internal\n */\nconst ComponentState__key = (/*#__PURE__*/ new SingleContextKey<ComponentState>('component-state'));\n\n/**\n * Component state tracker.\n *\n * @category Feature\n */\nexport class ComponentState extends StateTracker {\n\n  static get [ContextKey__symbol](): ContextKey<ComponentState> {\n    return ComponentState__key;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing component state properties.\n *\n * Thus a property state path is always something like `[StatePropertyPath__root, 'property-name']`.\n *\n * @category Feature\n */\nexport const StatePropertyPath__root = (/*#__PURE__*/ Symbol('state-property'));\n\n/**\n * A path to the named component property state.\n *\n * @category Feature\n */\nexport type StatePropertyPath<K extends PropertyKey = PropertyKey> = readonly [keyof StatePropertyPath__rootKeys, K];\n\n/**\n * Constructs a named component property state path.\n *\n * @category Feature\n * @param key  Target property key.\n *\n * @return DOM property state path.\n */\nexport function statePropertyPathTo<K extends PropertyKey = PropertyKey>(key: K): StatePropertyPath<K> {\n  return [StatePropertyPath__root, key];\n}\n\n/**\n * @category Feature\n */\n// eslint-disable-next-line @typescript-eslint/class-name-casing\nexport interface StatePropertyPath__rootKeys {\n  [StatePropertyPath__root]: true;\n}\n","import { StatePath } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\nimport { StatePropertyPath, statePropertyPathTo } from './state-property-path';\nimport { StatePropertyUpdateReceiver } from './state-property.decorator';\n\n/**\n * @internal\n */\nexport type StatePropertyUpdateCallback<T extends object> = <K extends keyof T>(\n    this: void,\n    component: T,\n    newValue: T[K],\n    oldValue: T[K],\n) => void;\n\n/**\n * @internal\n */\nexport function statePropertyUpdate<T extends object>(\n    propertyKey: PropertyKey,\n    updateState: true | StatePropertyUpdateReceiver<T> | StatePath = true,\n): StatePropertyUpdateCallback<T> {\n  if (updateState === true || typeof updateState === 'function') {\n\n    const path = statePropertyPathTo(propertyKey as keyof T);\n    const update = updateState === true ? updateStatePropertyState : updateState;\n\n    return (component, newValue, oldValue) => update(component, path, newValue, oldValue);\n  }\n\n  return (component, newValue, oldValue) => {\n    if (newValue !== oldValue) {\n      ComponentContext.of(component).updateState(updateState, newValue, oldValue);\n    }\n  };\n}\n\nfunction updateStatePropertyState<T extends object, K extends keyof T>(\n    component: T,\n    path: StatePropertyPath<K>,\n    newValue: T[K],\n    oldValue: T[K],\n): void {\n  if (newValue !== oldValue) {\n    ComponentContext.of(component).updateState(path, newValue, oldValue);\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { eventSupplyOf } from '@proc7ts/fun-events';\nimport { ComponentContext, StateUpdater } from '../../component';\nimport { FeatureDef, FeatureDef__symbol } from '../feature-def';\nimport { ComponentState } from './component-state';\n\n/**\n * @internal\n */\nconst StateSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.perComponent({\n      a: ComponentState,\n      by(context: ComponentContext) {\n\n        const state = new ComponentState();\n\n        eventSupplyOf(context).whenOff(reason => state.done(reason));\n\n        return state;\n      },\n    });\n    setup.perComponent({\n      a: StateUpdater,\n      by(state: ComponentState) {\n        return state.update;\n      },\n      with: [ComponentState],\n    });\n  },\n};\n\n/**\n * Component state support feature.\n *\n * When enabled, it registers the following component context values:\n *\n * - [[StateUpdater]] that allows to update the component state, and\n * - [[ComponentState]] that allows to track component state changes.\n *\n * Other features would use this to notify when the state changes. E.g. [[DomPropertiesSupport]]\n * and [[AttributesSupport]] features issue state updates when needed.\n *\n * @category Feature\n */\nexport class StateSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return StateSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { StatePath } from '@proc7ts/fun-events';\nimport { Class } from '../../common';\nimport { ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { StatePropertyPath } from './state-property-path';\nimport { statePropertyUpdate } from './state-property-update.impl';\nimport { StateSupport } from './state-support.feature';\n\n/**\n * Creates a decorator of component property containing part of component state.\n *\n * Once such property updated, the component state is {@link ComponentContext.updateState also updated}.\n *\n * Enables [[StateSupport]] feature when applied.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Custom element property definition.\n *\n * @returns Component property decorator.\n */\nexport function StateProperty<V = any, T extends ComponentClass = Class>(\n    { updateState }: StatePropertyDef = {},\n): ComponentPropertyDecorator<V, T> {\n  return ComponentProperty(({ get, set, key }) => {\n    if (updateState !== false) {\n\n      const setValue = set;\n      const update = statePropertyUpdate<InstanceType<T>>(key, updateState);\n\n      set = (component, newValue) => {\n\n        const oldValue = get(component);\n\n        setValue(component, newValue);\n        update(component, newValue, oldValue);\n      };\n    }\n\n    return {\n      componentDef: {\n        feature: {\n          needs: StateSupport,\n        },\n      },\n      get,\n      set,\n    };\n  });\n}\n\n/**\n * Component state property definition.\n *\n * This is a parameter to {@link StateProperty @StateProperty} decorator applied to component property.\n *\n * @category Feature\n */\nexport interface StatePropertyDef<T extends object = any> {\n\n  /**\n   * Whether to update the component state after this property changed.\n   *\n   * Can be one of:\n   * - `false` to not update the component state,\n   * - `true` (the default value) to update the component state with changed property key,\n   * - a state value key to update, or\n   * - an state property update receiver function with custom state update logic.\n   *\n   * By default does not update component state if property value didn't change.\n   */\n  readonly updateState?: boolean | StatePath | StatePropertyUpdateReceiver<T>;\n\n}\n\n/**\n * Component state property updates receiver invoked when its value changed.\n *\n * @category Feature\n * @typeparam T  A type of component.\n */\nexport type StatePropertyUpdateReceiver<T extends object> =\n/**\n * @typeparam K  A type of component property keys.\n * @param component  Component instance.\n * @param path  The changed property state path in the form of `[StatePropertyPath__root, propertyKey]`.\n * @param newValue  New property value.\n * @param oldValue  Previous property value.\n */\n    <K extends keyof T>(\n        this: void,\n        component: T,\n        path: StatePropertyPath<K>,\n        newValue: T[K],\n        oldValue: T[K],\n    ) => void;\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { nextArgs } from '@proc7ts/call-thru';\nimport {\n  EventReceiver,\n  EventSupply,\n  eventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  OnEvent,\n  StatePath,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\nimport { ComponentState } from '../state';\nimport { attributePathTo } from './attribute-path';\n\nclass AttributeTracker extends ValueTracker<string | null> {\n\n  readonly [EventSupply__symbol] = eventSupply();\n\n  constructor(\n      private readonly _context: ComponentContext,\n      private readonly _name: string,\n      private readonly _path: StatePath,\n  ) {\n    super();\n  }\n\n  get it(): string | null {\n    return this._context.element.getAttribute(this._name);\n  }\n\n  set it(value: string | null) {\n    if (!eventSupplyOf(this).isOff) {\n      if (value == null) {\n        this._context.element.removeAttribute(this._name);\n      } else {\n        this._context.element.setAttribute(this._name, value);\n      }\n    }\n  }\n\n  on(): OnEvent<[string | null, string | null]>;\n  on(receiver: EventReceiver<[string | null, string | null]>): EventSupply;\n  on(\n      receiver?: EventReceiver<[string | null, string | null]>,\n  ): OnEvent<[string | null, string | null]> | EventSupply {\n    return (this.on = this._context.get(ComponentState).track(this._path).onUpdate().thru(\n        (_path, newValue, oldValue) => nextArgs(newValue, oldValue),\n    ).tillOff(this).F)(receiver);\n  }\n\n}\n\n/**\n * Creates a tracker of custom element's attribute value.\n *\n * Requires [[AttributesSupport]] feature to be enabled and attribute to be defined. E.g. with {@link Attribute\n * @Attribute}, {@link AttributeChanged @AttributeChanged}, or {@link Attributes @Attributes} decorator.\n *\n * @category Feature\n * @param context  Target component context.\n * @param name  Attribute name.\n * @param path  Custom attribute state path.\n *\n * @returns New attribute value tracker.\n */\nexport function trackAttribute(\n    context: ComponentContext,\n    name: string,\n    path: StatePath = attributePathTo(name),\n): ValueTracker<string | null> {\n  return new AttributeTracker(context, name, path);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { MultiContextKey, MultiContextRef } from '@proc7ts/context-values';\n\n/**\n * Custom element property descriptor.\n *\n * Descriptors are to be registered in component's definition context in order to make them available to component.\n * The {@link DomProperty @DomProperty} decorator is doing so.\n *\n * @category Feature\n */\nexport interface DomPropertyDescriptor {\n\n  /**\n   * Custom element property key.\n   */\n  readonly key: PropertyKey;\n\n  /**\n   * Custom element property descriptor.\n   */\n  readonly descriptor: PropertyDescriptor;\n\n}\n\n/**\n * A key of component definition context value containing custom element property descriptors.\n *\n * @category Feature\n */\nexport const DomPropertyDescriptor: MultiContextRef<DomPropertyDescriptor> = (\n    /*#__PURE__*/ new MultiContextKey<DomPropertyDescriptor>('dom-property-descriptor')\n);\n","import { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { Class } from '../../common';\nimport { ComponentMount } from '../../component';\nimport { DefinitionContext } from '../../component/definition';\nimport { DomPropertyDescriptor } from './dom-property-descriptor';\n\nconst DomPropertyRegistry__key = (/*#__PURE__*/ new SingleContextKey<DomPropertyRegistry>('dom-property-registry'));\n\n/**\n * @internal\n */\nexport class DomPropertyRegistry {\n\n  static get [ContextKey__symbol](): ContextKey<DomPropertyRegistry> {\n    return DomPropertyRegistry__key;\n  }\n\n  private _props?: Map<PropertyKey, PropertyDescriptor>;\n\n  constructor(private readonly _context: DefinitionContext) {\n  }\n\n  get props(): Map<PropertyKey, PropertyDescriptor> {\n    if (this._props) {\n      return this._props;\n    }\n\n    return this._props = new Map<PropertyKey, PropertyDescriptor>(\n        this._context.get(DomPropertyDescriptor)\n            .map(({ key, descriptor }) => [key, descriptor]),\n    );\n  }\n\n  define<T extends object>(elementType: Class<T>): void {\n\n    const prototype = elementType.prototype;\n\n    this.props.forEach((desc, key) => {\n      Object.defineProperty(prototype, key, desc);\n    });\n  }\n\n  mount<T extends object>(mount: ComponentMount<T>): void {\n\n    const element = mount.element;\n\n    this.props.forEach((desc, key) => {\n      Object.defineProperty(element, key, desc);\n    });\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { FeatureDef, FeatureDef__symbol } from '../feature-def';\nimport { DomPropertyRegistry } from './dom-property-registry.impl';\n\n/**\n * @internal\n */\nconst DomPropertiesSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.perDefinition({ as: DomPropertyRegistry });\n    setup.onDefinition(definitionContext => {\n      // Define element prototype properties\n      definitionContext.whenReady(\n          ({ elementType }) => definitionContext.get(DomPropertyRegistry).define(elementType),\n      );\n    });\n    setup.onComponent(componentContext => {\n\n      const mount = componentContext.mount;\n\n      if (mount) {\n        // Mount element properties\n        componentContext.get(DomPropertyRegistry).mount(mount);\n      }\n    });\n  },\n};\n\n/**\n * A feature adding properties to custom elements.\n *\n * This feature is enabled automatically whenever a {@link DomProperty @DomProperty} decorator applied to component.\n *\n * @category Feature\n */\nexport class DomPropertiesSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return DomPropertiesSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing DOM properties.\n *\n * Thus a property state path is always something like `[DomPropertyPath__root, 'property-name']`.\n *\n * @category Feature\n */\nexport const DomPropertyPath__root = (/*#__PURE__*/ Symbol('dom-property'));\n\n/**\n * A path to the named DOM property state.\n *\n * @category Feature\n */\nexport type DomPropertyPath<K extends PropertyKey = PropertyKey> = readonly [keyof DomPropertyPath__rootKeys, K];\n\n/**\n * Constructs a named DOM property state path.\n *\n * @category Feature\n * @param key  Target property key.\n *\n * @return DOM property state path.\n */\nexport function domPropertyPathTo<K extends PropertyKey = PropertyKey>(key: K): DomPropertyPath<K> {\n  return [DomPropertyPath__root, key];\n}\n\n/**\n * @category Feature\n */\n// eslint-disable-next-line @typescript-eslint/class-name-casing\nexport interface DomPropertyPath__rootKeys {\n  [DomPropertyPath__root]: true;\n}\n","import { StatePath } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\nimport { DomPropertyUpdateReceiver } from './dom-property-def';\nimport { DomPropertyPath, domPropertyPathTo } from './dom-property-path';\n\n/**\n * @internal\n */\nexport type DomPropertyUpdateCallback<T extends object> = <K extends keyof T>(\n    this: void,\n    component: T,\n    newValue: T[K],\n    oldValue: T[K],\n) => void;\n\n/**\n * @internal\n */\nexport function domPropertyUpdate<T extends object>(\n    propertyKey: PropertyKey,\n    updateState: true | DomPropertyUpdateReceiver<T> | StatePath = true,\n): DomPropertyUpdateCallback<T> {\n  if (updateState === true || typeof updateState === 'function') {\n\n    const path = domPropertyPathTo(propertyKey as keyof T);\n    const update = updateState === true ? updateDomPropertyState : updateState;\n\n    return (component, newValue, oldValue) => update(component, path, newValue, oldValue);\n  }\n  return (component, newValue, oldValue) => {\n    if (newValue !== oldValue) {\n      ComponentContext.of(component).updateState(updateState, newValue, oldValue);\n    }\n  };\n}\n\nfunction updateDomPropertyState<T extends object, K extends keyof T>(\n    component: T,\n    path: DomPropertyPath<K>,\n    newValue: T[K],\n    oldValue: T[K],\n): void {\n  if (newValue !== oldValue) {\n    ComponentContext.of(component).updateState(path, newValue, oldValue);\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '../../common';\nimport { ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { DomPropertiesSupport } from './dom-properties-support.feature';\nimport { DomPropertyDef } from './dom-property-def';\nimport { DomPropertyDescriptor } from './dom-property-descriptor';\nimport { domPropertyDescriptor } from './dom-property-descriptor.impl';\nimport { domPropertyUpdate } from './dom-property-update.impl';\n\n/**\n * Creates component property decorator that declares a property to add to custom element created for this component.\n *\n * The value of declared element's property will be read from and written to decorated one.\n *\n * By default does not update component state if property value didn't change.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Custom element property definition.\n *\n * @returns Component property decorator.\n */\nexport function DomProperty<V = any, T extends ComponentClass = Class>(\n    def: DomPropertyDef<T> = {},\n): ComponentPropertyDecorator<V, T> {\n  return ComponentProperty(descriptor => {\n\n    const { key, get } = descriptor;\n    let { set } = descriptor;\n    const domDescriptor = domPropertyDescriptor(descriptor, def);\n\n    if (def.updateState !== false) {\n\n      const updateState = domPropertyUpdate<InstanceType<T>>(key, def.updateState);\n      const setValue = set;\n\n      set = (component, newValue) => {\n\n        const oldValue = get(component);\n\n        setValue(component, newValue);\n        updateState(component, newValue, oldValue);\n      };\n    }\n\n    return {\n      componentDef: {\n        feature: {\n          needs: DomPropertiesSupport,\n        },\n        setup(setup) {\n          setup.perDefinition({ a: DomPropertyDescriptor, is: domDescriptor });\n        },\n      },\n      get,\n      set,\n    };\n  });\n}\n\n/**\n * Component method decorator that declares a method to add to custom element created for this component.\n *\n * This is just an alias of {@link DomProperty @DomProperty} decorator.\n *\n * @category Feature\n */\nexport { DomProperty as DomMethod };\n","import { PropertyAccessorDescriptor } from '../../common';\nimport { ComponentContext, ComponentProperty } from '../../component';\nimport { DomPropertyDef } from './dom-property-def';\nimport { DomPropertyDescriptor } from './dom-property-descriptor';\n\n/**\n * @internal\n */\nexport function domPropertyDescriptor<V>(\n    propertyDesc: ComponentProperty.Descriptor<V>,\n    {\n      propertyKey: key = propertyDesc.key,\n      configurable = propertyDesc.configurable,\n      enumerable = propertyDesc.enumerable,\n      writable = propertyDesc.writable,\n    }: DomPropertyDef,\n): DomPropertyDescriptor {\n\n  const componentPropertyKey = propertyDesc.key;\n  const descriptor: PropertyAccessorDescriptor<V> = {\n    configurable,\n    enumerable,\n    get: function (this: any) {\n      return (ComponentContext.of(this).component as any)[componentPropertyKey];\n    },\n    set: writable\n        ? function (this: any, value: any) {\n          (ComponentContext.of(this).component as any)[componentPropertyKey] = value;\n        }\n        : undefined,\n  };\n\n  return { key, descriptor };\n}\n","import { noop } from '@proc7ts/call-thru';\nimport { EventSupply } from '@proc7ts/fun-events';\nimport { immediateRenderScheduler, RenderExecution } from '@proc7ts/render-scheduler';\nimport { DefaultRenderScheduler } from '../../boot/globals';\nimport { ComponentContext } from '../../component';\nimport { ComponentState } from '../state';\nimport { ElementRenderCtl } from './element-render-ctl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * @internal\n */\nconst enum RenderStatus {\n  Cancelled = -1,\n  Complete = 0,\n  Pending = 1,\n  Scheduled = 2,\n}\n\n/**\n * @internal\n */\nexport class ElementRenderCtl$ implements ElementRenderCtl {\n\n  private readonly _renders = new Set<() => void>();\n\n  constructor(private readonly _context: ComponentContext) {\n  }\n\n  renderBy(\n      renderer: ElementRenderer,\n      def: RenderDef = {},\n  ): EventSupply {\n\n    const { path = [] } = def;\n    const stateTracker = this._context.get(ComponentState).track(path);\n    const schedule = this._context.get(DefaultRenderScheduler)();\n\n    let status = RenderStatus.Pending;\n    const supply = stateTracker.onUpdate(() => {\n      if (this._context.connected) {\n        scheduleRenderer();\n      }\n    })\n        .needs(this._context)\n        .whenOff(cancelRenderer);\n\n    this._context.whenConnected(() => {\n      if (status) { // There is a pending update to render.\n        scheduleRenderer();\n      }\n    });\n\n    const immediateSchedule = immediateRenderScheduler();\n\n    this._renders.add(renderNow);\n\n    return supply.whenOff(() => this._renders.delete(renderNow));\n\n    function scheduleRenderer(): void {\n      status = RenderStatus.Scheduled;\n      schedule(renderElement);\n    }\n\n    function renderNow(): void {\n      immediateSchedule(renderElement);\n    }\n\n    function cancelRenderer(): void {\n      if (status === RenderStatus.Scheduled) { // Scheduled, but not rendered yet\n        schedule(noop);\n      }\n      status = RenderStatus.Cancelled;\n    }\n\n    function renderElement(execution: RenderExecution): void {\n      if (status > RenderStatus.Complete) { // Prevent excessive rendering\n        status = RenderStatus.Complete;\n        for (; ;) {\n\n          const newRenderer = renderer(execution);\n\n          if (newRenderer === renderer || typeof newRenderer !== 'function') {\n            break;\n          }\n\n          renderer = newRenderer;\n        }\n      }\n    }\n  }\n\n  renderNow(): void {\n    this._renders.forEach(render => render());\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextRef, SingleContextKey } from '@proc7ts/context-values';\nimport { EventSupply } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\nimport { ElementRenderCtl$ } from './element-render-ctl.impl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * A render control of component's element.\n *\n * Controls rendering by {@link ElementRenderer element renderers}.\n *\n * @category Feature\n */\nexport interface ElementRenderCtl {\n\n  /**\n   * Enables component element rendering by the given `renderer`.\n   *\n   * A `renderer` call will be scheduled by [[DefaultRenderScheduler]] once component state updated.\n   *\n   * @param renderer  Element renderer function.\n   * @param def  Optional element rendering definition.\n   *\n   * @returns Render shots supply. Element `renderer` will stop rendering once this supply is cut off.\n   */\n  renderBy(\n      renderer: ElementRenderer,\n      def?: RenderDef,\n  ): EventSupply;\n\n  /**\n   * Executes scheduled element render shots immediately.\n   *\n   * Uses `immediateRenderScheduler` for that.\n   *\n   * Does not execute element renderers that are not scheduled. I.e. if no corresponding state updates happened.\n   */\n  renderNow(): void;\n\n}\n\n/**\n * A key of component context value containing {@link ElementRenderCtl element render control}.\n */\nexport const ElementRenderCtl: ContextRef<ElementRenderCtl> = (\n    /*#__PURE__*/ new SingleContextKey<ElementRenderCtl>(\n        'element-render-ctl',\n        {\n          byDefault(values) {\n            return new ElementRenderCtl$(values.get(ComponentContext));\n          },\n        },\n    )\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { RenderExecution } from '@proc7ts/render-scheduler';\nimport { ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { StateSupport } from '../state';\nimport { ElementRenderCtl } from './element-render-ctl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * Component property decorator that declares a rendering method for the component.\n *\n * The decorated method call will be scheduled by [[DefaultRenderScheduler]] once component state updated.\n *\n * The decorated method should have no arguments. It may return either nothing, or a function. In the latter case the\n * returned function will be called immediately to render the element. It may, in turn, return a renderer function,\n * and so on.\n *\n * This decorator automatically enables [[StateSupport]] feature.\n *\n * Enables rendering with {@link ElementRenderCtl.renderBy element render control}.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Non-mandatory render definition.\n *\n * @returns Component method decorator.\n */\nexport function Render<T extends ComponentClass>(\n    def?: RenderDef,\n): ComponentPropertyDecorator<(execution: RenderExecution) => ElementRenderer | void, T> {\n  return ComponentProperty(({ get }) => ({\n    componentDef: {\n      feature: {\n        needs: StateSupport,\n      },\n      define(defContext) {\n        defContext.whenComponent(context => {\n          context.whenReady(() => {\n\n            const { component } = context;\n            const renderer = get(component).bind(component);\n\n            context.get(ElementRenderCtl).renderBy(renderer, def);\n          });\n        });\n      },\n    },\n  }));\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\n\n/**\n * Component shadow content root.\n *\n * @category Feature\n */\nexport type ShadowContentRoot = ShadowRoot;\n\n/**\n * A key of component context value containing a shadow content root instance.\n *\n * This is only available when the component is decorated with {@link AttachShadow @AttachShadow} decorator.\n *\n * @category Feature\n */\nexport const ShadowContentRoot: SingleContextRef<ShadowContentRoot> = (\n    /*#__PURE__*/ new SingleContextKey<ShadowContentRoot>('shadow-content-root')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * An event related to element's shadow DOM.\n *\n * The following event types supported:\n * - `wesib:shadowAttached` is dispatched when a shadow root is attached to element.\n *   In particular, it is dispatched for components decorated with {@link AttachShadow @AttachShadow}.\n *   The event is dispatched when component is connected for the first time. I.e. when element is added to the document.\n *   This event bubbles and is not cancelable.\n *\n * @category Feature\n */\nexport class ShadowDomEvent extends Event {\n\n  /**\n   * Shadow root this event relates to.\n   */\n  get shadowRoot(): ShadowRoot {\n    return (this.target as Element).shadowRoot as ShadowRoot;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { FnContextKey, FnContextRef } from '@proc7ts/context-values/updatable';\nimport { ComponentContext } from '../../component';\nimport { ShadowContentDef } from './attach-shadow.decorator';\n\n/**\n * Shadow root builder function type.\n *\n * An instance of this function is available in component context and is used by {@link AttachShadow @AttachShadow}\n * decorator to attach shadow root to decorated component's custom element.\n *\n * By default, if shadow root already exists for the component's element, it uses it.\n *\n * Dispatches a `wesib:shadowAttached` event for the found or attached shadow root.\n *\n * @category Feature\n */\nexport type ShadowRootBuilder =\n/**\n * @param context  Target component context.\n * @param init  Shadow root initialization options.\n *\n * @returns A shadow root instance for target component, or `null`/`undefined` if one can not be attached.\n */\n    (context: ComponentContext, init: ShadowContentDef) => ShadowRoot | null | undefined;\n\n/**\n * A key of component context value containing a shadow root builder instance.\n *\n * @category Feature\n */\nexport const ShadowRootBuilder: FnContextRef<Parameters<ShadowRootBuilder>, ReturnType<ShadowRootBuilder>> = (\n    /*#__PURE__*/ new FnContextKey<Parameters<ShadowRootBuilder>, ReturnType<ShadowRootBuilder>>(\n        'shadow-root-builder',\n    )\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentContext, ComponentContext__symbol } from '../../component';\nimport { FeatureDef, FeatureDef__symbol } from '../feature-def';\nimport { ShadowDomEvent } from './shadow-dom-event';\nimport { ShadowRootBuilder } from './shadow-root-builder';\n\n/**\n * @internal\n */\nconst ShadowDomSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.provide({ a: ShadowRootBuilder, is: attachShadow });\n  },\n};\n\n/**\n * Shadow root support feature.\n *\n * This feature is automatically enabled when {@link AttachShadow @AttachShadow} decorator is used.\n *\n * @category Feature\n */\nexport class ShadowDomSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return ShadowDomSupport__feature;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction attachShadow(context: ComponentContext, init: ShadowRootInit): ShadowRoot | undefined {\n\n  const element = context.element;\n  const shadowRoot = shadowRootOf(element, init);\n\n  if (shadowRoot) {\n    (shadowRoot as any)[ComponentContext__symbol] = context;\n    context.whenConnected(() => context.dispatchEvent(new ShadowDomEvent(\n        'wesib:shadowAttached',\n        { bubbles: true },\n    )));\n  }\n\n  return shadowRoot;\n}\n\n/**\n * @internal\n */\nfunction shadowRootOf(element: Element, init: ShadowRootInit): ShadowRoot | undefined {\n\n  const existing = element.shadowRoot;\n\n  if (existing) {\n    // Shadow root already attached. Using it.\n    return existing;\n  }\n  if ('attachShadow' in element) {\n    return element.attachShadow(init);\n  }\n\n  return; // Unable to attach shadow root.\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '../../common';\nimport { Component, ComponentContext, ComponentDecorator, ContentRoot } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { ShadowContentRoot } from './shadow-content-root';\nimport { ShadowDomSupport } from './shadow-dom-support.feature';\nimport { ShadowRootBuilder } from './shadow-root-builder';\n\n/**\n * @internal\n */\nconst defaultShadowContentDef: ShadowContentDef = { mode: 'open' };\n\n/**\n * Shadow content root definition.\n *\n * This is a readonly component shadow root initialization options.\n *\n * @category Feature\n */\nexport type ShadowContentDef = Readonly<ShadowRootInit>;\n\n/**\n * Creates a component decorator that attaches shadow root to decorated component instance.\n *\n * The returned component decorator enables [[ShadowDomSupport]] feature and attaches shadow content root to the\n * component.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Shadow content root definition. Uses `mode: 'open'` by default.\n *\n * @returns New component decorator.\n */\nexport function AttachShadow<T extends ComponentClass = Class>(\n    def: ShadowContentDef = defaultShadowContentDef,\n): ComponentDecorator<T> {\n  return Component({\n    setup(setup) {\n      setup.perComponent(\n          {\n            a: ShadowContentRoot,\n            by(ctx: ComponentContext<InstanceType<T>>) {\n              return ctx.get(ShadowRootBuilder)(ctx, def);\n            },\n          },\n      );\n      setup.perComponent({ // Content root is an alias of shadow root when present.\n        a: ContentRoot,\n        by(context: ComponentContext<InstanceType<T>>) {\n          return context.get(ShadowContentRoot, { or: null });\n        },\n      });\n    },\n    feature: { needs: ShadowDomSupport },\n  });\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { NamespaceDef } from '@proc7ts/namespace-aliaser';\n\n/**\n * Default Wesib namespace definition.\n *\n * @category Core\n */\nexport const Wesib__NS: NamespaceDef = (/*#__PURE__*/ new NamespaceDef(\n    'https://wesib.github.io/ns',\n    'b',\n    'wesib',\n));\n"],"names":["BootstrapContext__key","SingleContextKey","BootstrapContext","ContextValues","ContextKey__symbol","bootstrapDefault","provide","context","key","bootstrapContext","get","isArray","value","Array","ArraySet","AIterable","[object Object]","super","this","items","Set","size","Symbol","iterator","next","forEach","item","add","superClassOf","type","satisfying","prototype","Object","getPrototypeOf","superType","constructor","decoratePropertyAccessor","target","propertyKey","desc","updateDescriptor","isField","updatedDesc","undefined","writable","isPropertyAccessorDescriptor","value__symbol","initial","accessorDesc","set","newValue","toPropertyAccessorDescriptor","fieldKey","String","configurable","enumerable","fieldAccessorDescriptor","defineProperty","mergeFunctions","first","second","merge","_f","s","args","apply","isElement","node","nodeType","Node","ELEMENT_NODE","MetaAccessor","symbol","hasOwnProperty","ownDef","own","superDef","of","sources","prevMeta","updates","mapIt","source","meta","newMeta","flatMapIt","PromiseResolver","promise","Promise","resolve","reject","_resolve","_reject","error","FeatureDef__symbol","FeatureMeta","defs","itsReduction","prev","def","needs","has","setup","init","featureMeta","noFeatureDef","FeatureDef","featureType","for","all","define","Feature","FeatureContext__key","FeatureContext","componentType","whenDefined","feature","load","FeatureNeedsError","Error","reduce","reason","need","name","ComponentDef__symbol","ComponentMeta","isQualifiedName","componentMeta","noComponentDef","ComponentDef","Component","decorator","ComponentContext__key","ComponentEventDispatcher__key","values","dispatcher","DomEventDispatcher","element","eventSupplyOf","dispatch","event","on","ContentRoot","byDefault","ctx","StateUpdater","FnContextKey","valueProvider","noop","ComponentContext__symbol","ComponentContext","updateComponentState","bind","TypeError","contentRoot","oldValue","ComponentEvent","Event","AnonymousComponentProperty__symbol","ComponentProperty","decorateWith","readable","component","componentDef","By","provider","result","proto","descriptor","getValue","setValue","call","notReadableAccessor","notWritableAccessor","updated","With","access","As","Bind","binder","accessor__symbol","accessor","existing","BootstrapContextRegistry__key","BootstrapContextRegistry","ContextRegistry","a","is","newValues","ComponentContextRegistry__key","ComponentContextRegistry","DefinitionContextRegistry__key","DefinitionContextRegistry","PostDefSetup__symbol","postDefSetup","tracker","trackValue","emitter","EventEmitter","onSetup","read","thru","nextArgs","nextSkip","onAny","superPostDefSetup","to","send","it","BootstrapWindow","window","BootstrapRoot","document","body","DefaultNamespaceAliaser","DefaultRenderSchedulerKey","ContextUpKey","upKey","createUpKey","opts","seed","keepThru","fns","length","toDefaultRenderScheduler","defaultProvider","afterThe","newRenderSchedule","nextAfterEvent","delegated","or","scheduler","options","DefaultRenderScheduler","ElementAdapterKey","adapters","combined","adapter","defaultElementAdapter","ElementAdapter","ElementObserver","bsContext","DefaultElementObserver","MutationObserver","callback","mutations","mutation","itsEach","overArray","removedNodes","mount","mountOf","checkConnected","filterIt","addedNodes","observe","childList","DefinitionContext__symbol","definitionContextOf","CustomElements__key","customElements","nsAlias","CustomElements","componentTypeOrName","elementType","html__naming","defContext","extend","elementDef","extends","componentResolver","ComponentResolver__symbol","DefinitionContext__key","ElementDef","elementExtend","HTMLElement","DefinitionContext","mountTo","connect","ComponentContext$","_definitionContext","elementSuper","registry","_newComponentRegistry","_component","connected","_status","isOff","EventSupply__symbol","receiver","whenReady","sts","once","F","whenConnected","thru_","status","nextArg","done","componentDestroyed","parentNode","removeChild","removeElement","whenComponent","_whenComponent","lastRev","readNotifier","notifier","supply","eventSupply","receive","_","_elementBuilder","components","prevContext","newComponent","dispatchEvent","bubbles","ComponentMount$","_connect","el","doc","ownerDocument","contains","destroy","MountComponentContext$","definitionContext","CustomComponentContext$","WhenComponent","currentRev","created","onCreated","onEventBy","receiverRev","eventContext","componentContext","notifiedRev","recurrentReceiver","onRecurrent","recurrentContext","keepThru_","rev","DefinitionContext$","_bsContext","_ready","ready","_def","definitionContextRegistry","seedIn","_perTypeRegistry","whenReady$","whenComponent$","definitionSetup","perDefinition","spec","perComponent","_elementType","_whenReady","_createComponent","_created","append","definitions","CustomElement$","customElementType","ElementBuilder","_define","doNotAdd","ComponentRegistry","_context","_definitionQueue","definition","push","buildElement","FeatureContext$","_loader","unloads","adder","unload","reverse","newUnloader","_componentRegistry","request","afterAll","st","state","bs","by","onDefinition","tillOff","_unloader","onComponent","unloader","onPostDefSetup","FeatureKey__symbol","FeatureKey","from","preferredFeatureClause","afterEventBy","origin","stageId","clause","deps","loadFeatureDeps","loader","stage","ownLoader","FeatureLoader","ownSource","rcv","whenOff","share","lastLoader","preventDuplicateLoader","clauses","preferred","required","afterEach","dep","presentFeatureDeps","isPresent","down","_down","_stage","SetupFeatureStage","then","after","lastStage","id","prevStage","stop","FeatureStage","_stop","action","map","perDep","InitFeatureStage","off","ActiveFeatureStage","FeatureRequest","_requester","_revoke","featureDef","requester","isClause","_revokeBy","unuse","_uses","revoke","FeatureRequester__key","FeatureRequester","Map","_map","reuse","delete","WhenDefined__symbol","bootstrapComponents","features","bootstrapContextRegistry","create","complete","newNamespaceAliaser","onPromise","info","_ctx","ldr","whenDown","AfterEvent__symbol","initBootstrap","AttributeDescriptor","MultiContextKey","AttributePath__root","attributePathTo","attributeStateUpdate","updateState","path","update","updateAttributeState","parseAttributeDescriptor","change","AttributeRegistry__key","AttributeRegistry","attrs","_attrs","observedAttributes","keys","attributeFilter","records","record","attributeName","getAttribute","attributes","attributeOldValue","AttributesSupport__feature","as","AttributesSupport","Attribute","setAttribute","removeAttribute","AttributeChanged","Attributes","defineByItem","ComponentState__key","ComponentState","StateTracker","StatePropertyPath__root","statePropertyPathTo","updateStatePropertyState","StateSupport__feature","with","StateSupport","StateProperty","statePropertyUpdate","AttributeTracker","ValueTracker","_name","_path","track","onUpdate","trackAttribute","DomPropertyDescriptor","DomPropertyRegistry__key","DomPropertyRegistry","props","_props","DomPropertiesSupport__feature","DomPropertiesSupport","DomPropertyPath__root","domPropertyPathTo","updateDomPropertyState","DomProperty","domDescriptor","propertyDesc","componentPropertyKey","domPropertyDescriptor","domPropertyUpdate","ElementRenderCtl$","renderer","stateTracker","schedule","scheduleRenderer","immediateSchedule","immediateRenderScheduler","_renders","renderNow","renderElement","execution","newRenderer","render","ElementRenderCtl","Render","renderBy","ShadowContentRoot","ShadowDomEvent","shadowRoot","ShadowRootBuilder","ShadowDomSupport__feature","attachShadow","ShadowDomSupport","shadowRootOf","defaultShadowContentDef","mode","AttachShadow","Wesib__NS","NamespaceDef"],"mappings":"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"}