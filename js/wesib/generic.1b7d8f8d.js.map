{"version":3,"file":"generic.1b7d8f8d.js","sources":["../../../../generic/src/fetch/fetch-agent-key.impl.ts","../../../../generic/src/fetch/http-fetch-agent.ts","../../../../generic/src/fetch/http-fetch.impl.ts","../../../../generic/src/fetch/http-fetch.ts","../../../../generic/src/hierarchy/hierarchy-updates.impl.ts","../../../../generic/src/hierarchy/hierarchy-context.ts","../../../../generic/src/hierarchy/hierarchy-registry.impl.ts","../../../../generic/src/tree/element-node-list.ts","../../../../generic/src/tree/element-node-list.impl.ts","../../../../generic/src/tree/node-attributes.impl.ts","../../../../generic/src/tree/node-properties.impl.ts","../../../../generic/src/tree/element-node.impl.ts","../../../../generic/src/tree/element-node.ts","../../../../generic/src/navigation/hash-url/hash-url.ts","../../../../generic/src/navigation/page-param.ts","../../../../generic/src/navigation/hash-url/page-hash-url-param.impl.ts","../../../../generic/src/navigation/hash-url/page-hash-url-param.ts","../../../../generic/src/navigation/navigation-agent.ts","../../../../generic/src/navigation/hash-url/page-hash-url-support.feature.ts","../../../../generic/src/navigation/page-param-context.ts","../../../../generic/src/navigation/nav-history.impl.ts","../../../../generic/src/navigation/navigation.event.ts","../../../../generic/src/navigation/navigation.ts","../../../../generic/src/navigation/activate-nav-link.decorator.ts","../../../../generic/src/navigation/handle-nav-links.decorator.ts","../../../../generic/src/util/import-node.ts","../../../../generic/src/navigation/page-load/caching-page-loader.impl.ts","../../../../generic/src/navigation/page-load/page-load-requests.impl.ts","../../../../generic/src/navigation/page-load/page-load-agent.ts","../../../../generic/src/navigation/page-load/page-load-url-modifier.ts","../../../../generic/src/navigation/page-load/page-loader.impl.ts","../../../../generic/src/navigation/page-load/page-load-param.ts","../../../../generic/src/navigation/page-load/page-cache-buster.impl.ts","../../../../generic/src/navigation/page-load/page-scripts-agent.impl.ts","../../../../generic/src/navigation/page-load/page-style-agent.impl.ts","../../../../generic/src/navigation/page-load/page-title-agent.impl.ts","../../../../generic/src/navigation/page-load/page-load-support.feature.ts","../../../../generic/src/navigation/page-load/include-page.decorator.ts","../../../../generic/src/input/default-in-aspects.ts","../../../../generic/src/input/input-from-control.ts","../../../../generic/src/input/convert-input.decorator.ts","../../../../generic/src/input/input-to-form.ts","../../../../generic/src/input/fill-input-form.decorator.ts","../../../../generic/src/input/on-submit.decorator.ts","../../../../generic/src/input/set-input-name.decorator.ts","../../../../generic/src/input/use-input-element.decorator.ts"],"sourcesContent":["import { ContextValueSlot } from '@proc7ts/context-values';\nimport { contextDestroyed, ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, digAfter, EventKeeper, EventSender, OnEvent, onSupplied } from '@proc7ts/fun-events';\n\n/**\n * @internal\n */\ntype FetchAgent<TResponse extends any[]> = (\n    this: void,\n    next: (this: void, request?: Request) => OnEvent<TResponse>,\n    request: Request,\n) => EventSender<TResponse>;\n\n/**\n * @internal\n */\ntype CombinedFetchAgent<TResponse extends any[]> = (\n    this: void,\n    next: (this: void, request: Request) => OnEvent<TResponse>,\n    request: Request,\n) => OnEvent<TResponse>;\n\n/**\n * @internal\n */\nexport class FetchAgentKey<TResponse extends any[]>\n    extends ContextUpKey<CombinedFetchAgent<TResponse>, FetchAgent<TResponse>>\n    implements ContextUpRef<CombinedFetchAgent<TResponse>, FetchAgent<TResponse>> {\n\n  readonly upKey: ContextUpKey.UpKey<CombinedFetchAgent<TResponse>, FetchAgent<TResponse>>;\n\n  constructor(name: string) {\n    super(name);\n    this.upKey = this.createUpKey(\n        slot => slot.insert(slot.seed.do(digAfter(\n            (...agents) => {\n              if (agents.length) {\n                return afterThe(combineFetchAgents(agents));\n              }\n              if (slot.hasFallback && slot.or) {\n                return slot.or;\n              }\n\n              return afterThe(defaultFetchAgent);\n            },\n        ))),\n    );\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          CombinedFetchAgent<TResponse>,\n          EventKeeper<FetchAgent<TResponse>[]> | FetchAgent<TResponse>,\n          AfterEvent<FetchAgent<TResponse>[]>>,\n  ): void {\n\n    let delegated: CombinedFetchAgent<TResponse>;\n\n    slot.context.get(\n        this.upKey,\n        slot.hasFallback ? { or: slot.or != null ? afterThe(slot.or) : slot.or } : undefined,\n    )!(\n        agent => delegated = agent,\n    ).whenOff(\n        reason => delegated = contextDestroyed(reason),\n    );\n\n    slot.insert((next, request) => delegated(next, request));\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultFetchAgent<TResponse extends any[]>(\n    next: (this: void, request: Request) => OnEvent<TResponse>,\n    request: Request,\n): OnEvent<TResponse> {\n  return next(request);\n}\n\n/**\n * @internal\n */\nexport function combineFetchAgents<TResponse extends any[]>(\n    agents: FetchAgent<TResponse>[],\n): CombinedFetchAgent<TResponse> {\n  return (next, request) => {\n\n    const fetch: (agentIdx: number, agentRequest: Request) => OnEvent<TResponse> = (\n        agentIdx,\n        agentRequest,\n    ) => {\n\n      const agent = agents[agentIdx];\n\n      if (!agent) {\n        return next(agentRequest);\n      }\n\n      return onSupplied(\n          agent(\n              (nextRequest = agentRequest) => fetch(agentIdx + 1, nextRequest),\n              agentRequest,\n          ),\n      );\n    };\n\n    return fetch(0, request);\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { EventSender, OnEvent } from '@proc7ts/fun-events';\nimport { FetchAgentKey } from './fetch-agent-key.impl';\n\n/**\n * HTTP fetch agent signature.\n *\n * The agent can be used to alter {@link HttpFetch} processing. For that it should be registered in appropriate context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by {@link HttpFetch}.\n */\nexport type HttpFetchAgent =\n/**\n * @param next - Either calls the next agent in chain, or actually fetches the data if this agent is the last one.\n * Accepts an optional `Request` parameter. The original request will be used instead when omitted.\n * @param request - HTTP request.\n *\n * @returns An `EventSender` of response object(s). It is returned either to preceding agent in chain, or as a result of\n * {@link HttpFetch} call.\n */\n    (\n        this: void,\n        next: (this: void, request?: Request) => OnEvent<[Response]>,\n        request: Request,\n    ) => EventSender<[Response]>;\n\nexport namespace HttpFetchAgent {\n\n  /**\n   * Combined HTTP fetch agent signature.\n   *\n   * This is what is available under {@link HttpFetchAgent} key.\n   */\n  export type Combined =\n  /**\n   * @param next - Either calls the next agent in chain, or actually fetches the data if this agent is the last one.\n   * Accepts `Request` parameter.\n   * @param request - HTTP request.\n   *\n   * @returns An `OnEvent` sender of response object(s) receivers. It is returned as a result of {@link HttpFetch} call.\n   */\n      (\n          this: void,\n          next: (this: void, request: Request) => OnEvent<[Response]>,\n          request: Request,\n      ) => OnEvent<[Response]>;\n\n}\n\n/**\n * A key of context value containing an {@link HttpFetchAgent} instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the fetch.\n */\nexport const HttpFetchAgent: ContextUpRef<HttpFetchAgent.Combined, HttpFetchAgent> = (\n    /*#__PURE__*/ new FetchAgentKey<[Response]>('http-fetch-agent')\n);\n","import { DomEventDispatcher } from '@frontmeans/dom-events';\nimport { EventEmitter, onceOn, OnEvent, onEventBy } from '@proc7ts/fun-events';\nimport { Supply } from '@proc7ts/primitives';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { HttpFetch } from './http-fetch';\nimport { HttpFetchAgent } from './http-fetch-agent';\n\nconst HttpFetchAborted = {};\n\n/**\n * @internal\n */\nexport function newHttpFetch(context: BootstrapContext): HttpFetch {\n\n  const window = context.get(BootstrapWindow);\n  const agent = context.get(HttpFetchAgent);\n\n  return (input, init) => agent(fetch, new Request(input, init));\n\n  function fetch(request: Request): OnEvent<[Response]> {\n    return onEventBy(receiver => {\n\n      const responseEmitter = new EventEmitter<[Response]>();\n      let supply: Supply;\n\n      if ('AbortController' in window) {\n\n        const abortController = new window.AbortController();\n        const { signal } = abortController;\n\n        supply = new Supply(reason => {\n          if (reason === HttpFetchAborted) {\n            abortController.abort();\n          }\n        });\n        receiver.supply.whenOff(() => supply.off(HttpFetchAborted)).needs(supply);\n        responseEmitter.on({\n          supply,\n          receive(ctx, response) {\n            receiver.receive(ctx, response);\n          },\n        });\n\n        const customSignal = request.signal;\n\n        if (customSignal) {\n          new DomEventDispatcher(customSignal)\n              .on('abort')\n              .do(onceOn)(\n                  () => abortController.abort(),\n              );\n          if (customSignal.aborted) {\n            abortController.abort();\n          }\n        }\n\n        request = new Request(request, { signal });\n      } else {\n        supply = responseEmitter.on(receiver);\n      }\n\n      window.fetch(request)\n          .then(response => {\n            responseEmitter.send(response);\n            supply.off();\n          })\n          .catch(reason => supply.off(reason));\n    });\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { FnContextKey, FnContextRef } from '@proc7ts/context-values/updatable';\nimport { OnEvent } from '@proc7ts/fun-events';\nimport { bootstrapDefault } from '@wesib/wesib';\nimport { newHttpFetch } from './http-fetch.impl';\n\n/**\n * HTTP fetch function signature.\n *\n * This is a function that wraps browser's\n * [fetch()](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch) function and provides\n * additional functionality. E.g. request interception.\n *\n * This function returns an `OnEvent` sender instead of a `Promise`. This allows to report multiple responses.\n * E.g. when the resource refresh requested and delivered. The request is sent whenever a receiver is registered\n * in this sender. When the fetch completes the response supply is cut off, and callbacks registered with its\n * `whenOff()` method are notified. When fetch fails for whatever reason, this reason is passed to these callbacks.\n * The fetch can be aborted by cutting off the response supply. I.e. by calling its `off()` method.\n *\n * An instance of {@link HttpFetch} is available from bootstrap context.\n */\nexport type HttpFetch =\n/**\n * @param input - The resource to fetch. This can either an URL string, or a `Request` object.\n * @param init - Custom settings to apply to the request.\n *\n * @returns An `OnEvent` sender of responses.\n */\n    (this: void, input: RequestInfo, init?: RequestInit) => OnEvent<[Response]>;\n\n/**\n * A key of bootstrap context value containing an {@link HttpFetch} instance.\n */\nexport const HttpFetch: FnContextRef<Parameters<HttpFetch>, ReturnType<HttpFetch>> = (\n    /*#__PURE__*/ new FnContextKey<Parameters<HttpFetch>, ReturnType<HttpFetch>>(\n        'http-fetch',\n        {\n          byDefault: bootstrapDefault(newHttpFetch),\n        },\n    )\n);\n","import { DomEventDispatcher } from '@frontmeans/dom-events';\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { EventEmitter, OnEvent, trackValue, ValueTracker } from '@proc7ts/fun-events';\nimport {\n  BootstrapContext,\n  BootstrapRoot,\n  ComponentContext,\n  ComponentContextHolder,\n  ComponentEvent,\n} from '@wesib/wesib';\n\n/**\n * @internal\n */\nexport type HierarchyRoot = ValueTracker<ComponentContext | undefined>;\n\n/**\n * @internal\n */\nexport const HierarchyRoot = (/*#__PURE__*/ new SingleContextKey<HierarchyRoot>(\n    'hierarchy-root',\n    {\n      byDefault: bsContext => {\n\n        const root = bsContext.get(BootstrapRoot);\n\n        new DomEventDispatcher(root).on<ComponentEvent>('wesib:component')(\n            ({ context }: ComponentEvent) => context.get(HierarchyUpdates).issue(),\n        );\n\n        return trackValue();\n      },\n    },\n));\n\nconst HierarchyUpdates__key = (/*#__PURE__*/ new SingleContextKey<HierarchyUpdates>(\n    'hierarchy-updates',\n    {\n      byDefault: context => new HierarchyUpdates(context.get(ComponentContext)),\n    },\n));\n\n/**\n * @internal\n */\nexport class HierarchyUpdates {\n\n  static get [ContextKey__symbol](): ContextKey<HierarchyUpdates> {\n    return HierarchyUpdates__key;\n  }\n\n  readonly on: OnEvent<[ComponentContext]>;\n  readonly send: (this: void) => void;\n  readonly issue: () => void;\n\n  constructor(context: ComponentContext) {\n\n    const updates = new EventEmitter<[ComponentContext]>();\n    const hierarchyRoot = context.get(BootstrapContext).get(HierarchyRoot);\n\n    this.on = updates.on;\n    this.send = () => updates.send(context);\n    this.issue = () => {\n\n      const parent = findParentContext(context);\n\n      if (parent) {\n        parent[0].get(HierarchyUpdates).send();\n      } else {\n        hierarchyRoot.it = context;\n      }\n    };\n  }\n\n}\n\n/**\n * @internal\n */\nexport function findParentContext(of: ComponentContext): [ComponentContext, boolean] | undefined {\n\n  const root = of.get(BootstrapContext).get(BootstrapRoot);\n  let { element } = of as { element: Node };\n  let immediate = true;\n\n  if (element === root) {\n    return;\n  }\n  for (;;) {\n\n    const parent = element.parentNode as (Node & ComponentContextHolder) | null;\n\n    if (!parent) {\n      return;\n    }\n\n    const ctx = ComponentContext.findIn(parent);\n\n    if (ctx) {\n      return [ctx, immediate];\n    }\n    if (parent === root) {\n      return;\n    }\n\n    immediate = false;\n    element = parent;\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport {\n  ContextKey,\n  ContextKey__symbol,\n  ContextRegistry,\n  ContextValues,\n  ContextValueSpec,\n  SingleContextKey,\n} from '@proc7ts/context-values';\nimport {\n  AfterEvent,\n  afterEventBy,\n  consumeEvents,\n  shareAfter,\n  supplyAfter,\n  trackValue,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { noop, Supply, SupplyPeer } from '@proc7ts/primitives';\nimport { BootstrapContext, ComponentContext } from '@wesib/wesib';\nimport { newHierarchyRegistry } from './hierarchy-registry.impl';\nimport { findParentContext, HierarchyRoot, HierarchyUpdates } from './hierarchy-updates.impl';\n\n/**\n * @internal\n */\nconst HierarchyContext__key = (/*#__PURE__*/ new SingleContextKey<HierarchyContext>(\n    'hierarchy-context',\n    {\n      byDefault: context => new HierarchyContext$(context.get(ComponentContext)),\n    },\n));\n\n/**\n * Component's hierarchy context.\n *\n * Passes provided values to hierarchy contexts of nested components.\n *\n * Available as component context value.\n *\n * @typeParam T - A type of component.\n */\nexport abstract class HierarchyContext<T extends object = any> extends ContextValues implements SupplyPeer {\n\n  /**\n   * A key of component context value containing its hierarchy context instance.\n   */\n  static get [ContextKey__symbol](): ContextKey<HierarchyContext> {\n    return HierarchyContext__key;\n  }\n\n  /**\n   * Component context.\n   */\n  abstract readonly context: ComponentContext<T>;\n\n  /**\n   * An `AfterEvent` keeper of enclosing component's hierarchy context.\n   *\n   * May send `undefined` when component is outside of hierarchy. E.g. when it is disconnected.\n   */\n  abstract readonly up: AfterEvent<[HierarchyContext?]>;\n\n  get supply(): Supply {\n    return this.context.supply;\n  }\n\n  /**\n   * Assigns enclosing component to use by default.\n   *\n   * The provided component will be treated as enclosing one until component element connected. After that the real\n   * enclosing component will be used instead.\n   *\n   * @param enclosing - Enclosing component's context to assign, or nothing to remove one.\n   *\n   * @returns `this` instance.\n   */\n  abstract inside(enclosing?: ComponentContext): this;\n\n  /**\n   * Provides hierarchy context value.\n   *\n   * If provided value is updatable (i.e. its key implements `ContextUpKey`), then it will be available in this context,\n   * as well as in all nested hierarchy contexts. Otherwise the value will be available in this context only.\n   *\n   * @typeParam TDeps - Dependencies tuple type.\n   * @typeParam TSrc - Source value type.\n   * @typeParam TSeed - Value seed type.\n   * @param spec - Context value specifier.\n   *\n   * @returns A value supply that that removes the given context value specifier once cut off.\n   */\n  abstract provide<TDeps extends any[], TSrc, TSeed>(\n      spec: ContextValueSpec<HierarchyContext<T>, any, TDeps, TSrc, TSeed>,\n  ): Supply;\n\n}\n\nclass HierarchyContext$<T extends object> extends HierarchyContext<T> {\n\n  private readonly _parent: ValueTracker<HierarchyContext | undefined>;\n  private readonly _registry: ContextRegistry<HierarchyContext<T>>;\n  readonly get: HierarchyContext<T>['get'];\n  readonly up: AfterEvent<[HierarchyContext?]>;\n\n  constructor(readonly context: ComponentContext<T>) {\n    super();\n\n    this.up = afterEventBy<[HierarchyContext?]>(\n        receiver => {\n\n          const { supply } = receiver;\n\n          supply.needs(this);\n\n          const parentHierarchy = trackValue<HierarchyContext>();\n\n          parentHierarchy.by(this._parent);\n          supply.cuts(parentHierarchy);\n\n          const rootSupply = new Supply().needs(supply);\n          const parentSupply = new Supply().needs(supply);\n          const updateParent = (): void => {\n\n            const parent = findParentContext(this.context);\n\n            if (parent) {\n\n              const [parentCtx, immediate] = parent;\n\n              parentHierarchy.it = parentCtx.get(HierarchyContext);\n              rootSupply.off();\n              if (immediate) {\n                parentSupply.off();\n              }\n            } else {\n              parentHierarchy.it = undefined;\n            }\n          };\n\n          this.context.get(BootstrapContext).get(HierarchyRoot).read({\n            supply: rootSupply,\n            receive: () => this.context.connected && updateParent(),\n          });\n          parentHierarchy.read.do(\n              supplyAfter(parentSupply),\n              consumeEvents(newParent => newParent && newParent.context.get(HierarchyUpdates).on(updateParent)),\n          );\n          parentHierarchy.read(receiver);\n          this.context.whenConnected({\n            supply: new Supply().needs(supply),\n            receive: updateParent,\n          });\n        },\n    ).do(shareAfter);\n\n    const parent = this._parent = trackValue<HierarchyContext>();\n\n    context.whenConnected(noop).cuts(parent);\n\n    const registry = this._registry = newHierarchyRegistry<T>(this.up);\n\n    this.get = registry.newValues().get;\n  }\n\n  provide<TDeps extends any[], TSrc, TSeed>(\n      spec: ContextValueSpec<HierarchyContext<T>, any, TDeps, TSrc, TSeed>,\n  ): Supply {\n    return this._registry.provide(spec).needs(this);\n  }\n\n  inside(enclosing?: ComponentContext): this {\n    this._parent.it = enclosing && enclosing.get(HierarchyContext);\n    return this;\n  }\n\n}\n","import { ContextRegistry, ContextSeedKey } from '@proc7ts/context-values';\nimport { ContextUpKey } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, digAfter, EventKeeper } from '@proc7ts/fun-events';\nimport { HierarchyContext } from './hierarchy-context';\n\n/**\n * @internal\n */\nexport function newHierarchyRegistry<T extends object>(\n    up: AfterEvent<[HierarchyContext?]>,\n): ContextRegistry<HierarchyContext<T>> {\n  return new ContextRegistry(\n      <TSrc, TSeed>(key: ContextSeedKey<TSrc, TSeed>) => isContextSeedUpKey(key)\n          ? up.do(digAfter(\n              upper => upper ? upper.get(key) : afterThe(),\n          )) as unknown as TSeed\n          : undefined,\n  );\n}\n\n/**\n * @internal\n */\nfunction isContextSeedUpKey<TSrc>(\n    key: ContextSeedKey<TSrc | EventKeeper<TSrc[]>, any>,\n): key is ContextUpKey.SeedKey<TSrc> {\n  return 'upKey' in key;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  EventKeeper,\n  EventSender,\n  OnEvent,\n  OnEvent__symbol,\n} from '@proc7ts/fun-events';\nimport { ElementNode } from './element-node';\n\n/**\n * Dynamically updatable list of selected element nodes.\n *\n * It is an iterable of nodes.\n *\n * Implements an `EventSender` interface by sending added and removed nodes arrays.\n *\n * Implements an `EventKeeper` interface by sending updated node list.\n *\n * @typeParam TNode - A type of element nodes.\n */\nexport abstract class ElementNodeList<TNode extends ElementNode = ElementNode>\n    implements Iterable<TNode>, EventSender<[TNode[], TNode[]]>, EventKeeper<[ElementNodeList<TNode>]> {\n\n  /**\n   * An `OnEvent` sender of this list changes.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly onUpdate: OnEvent<[TNode[], TNode[]]>;\n\n  /**\n   * An `AfterEvent` keeper of current node list.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[ElementNodeList<TNode>]>;\n\n  /**\n   * An `AfterEvent` keeper of tracked list changes.\n   *\n   * Sends current nodes immediately upon receiver registration as added ones.\n   */\n  abstract readonly track: AfterEvent<[readonly TNode[], readonly TNode[]]>;\n\n  /**\n   * An `AfterEvent` keeper of either the first node in this list, or `undefined` when the list is empty.\n   */\n  abstract readonly first: AfterEvent<[TNode?]>;\n\n  abstract [Symbol.iterator](): Iterator<TNode>;\n\n  [OnEvent__symbol](): OnEvent<[TNode[], TNode[]]> {\n    return this.onUpdate;\n  }\n\n  [AfterEvent__symbol](): AfterEvent<[ElementNodeList<TNode>]> {\n    return this.read;\n  }\n\n}\n","import { html__naming } from '@frontmeans/namespace-aliaser';\nimport {\n  AfterEvent,\n  afterEventBy,\n  afterSupplied,\n  EventEmitter,\n  mapAfter,\n  OnEvent,\n  onEventBy,\n  translateAfter,\n} from '@proc7ts/fun-events';\nimport { isPresent, valueProvider } from '@proc7ts/primitives';\nimport {\n  filterArray,\n  filterIt,\n  flatMapArray,\n  iteratorOf,\n  itsEach,\n  itsElements,\n  itsFirst,\n  mapIt,\n  overArray,\n  overIterator,\n  PushIterable,\n  PushIterator,\n  PushIterator__symbol,\n} from '@proc7ts/push-iterator';\nimport {\n  BootstrapContext,\n  ComponentClass,\n  DefaultNamespaceAliaser,\n  ElementObserver,\n  ElementObserverInit,\n  isElement,\n} from '@wesib/wesib';\nimport { ElementNode, ElementPickMode } from './element-node';\nimport { ElementNodeList } from './element-node-list';\n\n/**\n * @internal\n */\nconst WATCH_DEEP: ElementObserverInit = { subtree: true };\n\n/**\n * @internal\n */\nexport function elementNodeList<TNode extends ElementNode>(\n    bsContext: BootstrapContext,\n    root: Element,\n    selectorOrType: string | ComponentClass<any>,\n    nodeOf: (node: Element, optional?: boolean) => TNode | undefined,\n    { deep, all }: ElementPickMode,\n): ElementNodeList<TNode> {\n\n  const updates = new EventEmitter<[TNode[], TNode[]]>();\n  const init = deep ? WATCH_DEEP : undefined;\n  let cache = new Set<Element>();\n  let selector: string | undefined;\n  const overNodes: (nodes: NodeList) => Iterable<Node> = deep ? overNodeSubtree : overArray;\n\n  if (typeof selectorOrType === 'string') {\n    selector = selectorOrType;\n  } else {\n    bsContext.whenDefined(selectorOrType).then(({ elementDef: { name } }) => {\n      if (name) {\n        selector = html__naming.name(name, bsContext.get(DefaultNamespaceAliaser));\n        if (updates.size) {\n          // Refresh selection after component name resolution.\n          // This is needed  when new document loaded.\n\n          const selected = refresh();\n\n          if (selected.size) {\n\n            const added = itsElements(\n                filterIt<TNode | undefined, TNode>(\n                    mapIt(selected, node => nodeOf(node)),\n                    isPresent,\n                ),\n            );\n\n            /* istanbul ignore if. Can not test native custom element */\n            if (added.length) {\n              updates.send(added, []);\n            }\n          }\n        }\n      }\n    }).catch(console.error);\n  }\n\n  if (!all) {\n    root.addEventListener('wesib:component', event => {\n\n      const element = event.target as Element;\n\n      if (cache.has(element)) {\n\n        const node = nodeOf(element) as TNode;\n\n        updates.send([node], []);\n      }\n    });\n  }\n\n  const iterable: PushIterable<TNode> = filterIt<TNode | undefined, TNode>(\n      mapIt(\n          overIterator(elements),\n          element => nodeOf(element),\n      ),\n      isPresent,\n  );\n\n  class ElementNodeList$ extends ElementNodeList<TNode> implements PushIterable<TNode> {\n\n    readonly onUpdate: OnEvent<[TNode[], TNode[]]>;\n    readonly read: AfterEvent<[ElementNodeList<TNode>]>;\n    readonly track: AfterEvent<[readonly TNode[], readonly TNode[]]>;\n    readonly first: AfterEvent<[TNode?]>;\n\n    constructor() {\n      super();\n\n      const observer = bsContext.get(ElementObserver)(update);\n\n      this.onUpdate = onEventBy<[TNode[], TNode[]]>(receiver => {\n\n        const firstReceiver = !updates.size;\n        const supply = updates.on(receiver);\n\n        if (firstReceiver) {\n          refresh();\n          observer.observe(root, init);\n        }\n\n        supply.whenOff(() => {\n          if (!updates.size) {\n            observer.disconnect();\n            clearCache(); // clear cache as there is no more receivers\n          }\n        }).needs(receiver.supply);\n      });\n\n      const returnSelf = valueProvider(this);\n\n      this.read = this.onUpdate.do(mapAfter(returnSelf, returnSelf));\n\n      this.track = afterEventBy<[readonly TNode[], readonly TNode[]]>(receiver => {\n\n        const initialEmitter = new EventEmitter<[readonly TNode[], readonly TNode[]]>();\n\n        initialEmitter.on(receiver);\n        initialEmitter.send(itsElements(this), []);\n\n        this.onUpdate(receiver);\n      });\n\n      this.first = afterSupplied(this.read).do(translateAfter(\n          (send, list) => send(itsFirst(list)),\n      ));\n    }\n\n    [Symbol.iterator](): PushIterator<TNode> {\n      return this[PushIterator__symbol]();\n    }\n\n    [PushIterator__symbol](accept?: PushIterator.Acceptor<TNode>): PushIterator<TNode> {\n      return iterable[PushIterator__symbol](accept);\n    }\n\n  }\n\n  return new ElementNodeList$();\n\n  function elements(): Iterator<Element> {\n    return iteratorOf(updates.size ? cache : refresh());\n  }\n\n  function clearCache(): void {\n    cache.clear();\n  }\n\n  function refresh(): Set<Element> {\n\n    const list = select();\n\n    if (updates.size) {\n      cache = list; // cache is for receivers only\n    }\n\n    return list;\n  }\n\n  function select(): Set<Element> {\n\n    const sel = selector;\n\n    if (!sel) {\n      return new Set();\n    }\n    if (deep) {\n      return new Set(overArray(root.querySelectorAll(sel)));\n    }\n\n    return new Set(filterArray(root.children, item => item.matches(sel)));\n  }\n\n  function update(mutations: MutationRecord[]): void {\n\n    const added: TNode[] = [];\n    const removed: TNode[] = [];\n\n    mutations.forEach(mutation => {\n      itsEach(\n          filterIt<TNode | undefined, TNode>(\n              mapIt(overNodes(mutation.removedNodes), removeNode),\n              isPresent,\n          ),\n          node => removed.push(node),\n      );\n      itsEach(\n          filterIt<TNode | undefined, TNode>(\n              mapIt(overNodes(mutation.addedNodes), addNode),\n              isPresent,\n          ),\n          node => added.push(node),\n      );\n    });\n    if (added.length || removed.length) {\n      updates.send(added, removed);\n    }\n  }\n\n  function addNode(node: Node): TNode | undefined {\n    if (!isElement(node)) {\n      return;\n    }\n    if (selector && node.matches(selector) && !cache.has(node)) {\n      cache.add(node);\n      return nodeOf(node);\n    }\n    return;\n  }\n\n  function removeNode(node: Node): TNode | undefined {\n    if (!isElement(node)) {\n      return;\n    }\n    if (!cache.delete(node)) {\n      return;\n    }\n    return nodeOf(node, true);\n  }\n\n}\n\nfunction overNodeSubtree(nodes: NodeList): Iterable<Node> {\n  return flatMapArray(\n      nodes,\n      node => overArray([node, ...overNodeSubtree(node.childNodes)]),\n  );\n}\n","import { EventEmitter, eventReceiver, EventReceiver, OnEvent, onEventBy, ValueTracker } from '@proc7ts/fun-events';\nimport { neverSupply, Supply } from '@proc7ts/primitives';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\n\n/**\n * @internal\n */\nclass AttributesObserver {\n\n  private readonly _emitters = new Map<string, EventEmitter<[string | null, string | null]>>();\n  private _observer?: MutationObserver;\n\n  constructor(private readonly _bs: BootstrapContext, readonly element: Element) {\n  }\n\n  private get observer(): MutationObserver {\n    if (this._observer) {\n      return this._observer;\n    }\n\n    const Observer = this._bs.get(BootstrapWindow).MutationObserver;\n\n    return this._observer = new Observer(mutations => this._update(mutations));\n  }\n\n  observe(name: string, receiver: EventReceiver<[string | null, string | null]>): Supply {\n\n    const self = this;\n    const observer = this.observer;\n    const emitter = this._emitter(name);\n    const rcv = eventReceiver(receiver);\n    const supply = emitter.on({\n      supply: new Supply(() => {\n        this._emitters.delete(name);\n        observer.disconnect();\n        if (this._emitters.size) {\n          reconnect();\n        } else {\n          this._observer = undefined;\n        }\n      }).needs(rcv.supply),\n      receive: (ctx, newValue, oldValue) => rcv.receive(ctx, newValue, oldValue),\n    });\n\n    observer.disconnect();\n    reconnect();\n\n    return supply;\n\n    function reconnect(): void {\n      self._update(observer.takeRecords());\n      observer.observe(self.element, {\n        attributes: true,\n        attributeOldValue: true,\n        attributeFilter: [...self._emitters.keys()],\n      });\n    }\n  }\n\n  private _update(mutations: MutationRecord[]): void {\n    mutations.forEach(mutation => {\n\n      const attributeName = mutation.attributeName as string;\n      const emitter = this._emitters.get(attributeName);\n\n      if (emitter) {\n        emitter.send(this.element.getAttribute(attributeName) as string, mutation.oldValue);\n      }\n    });\n  }\n\n  private _emitter(name: string): EventEmitter<[string | null, string | null]> {\n\n    const emitter = new EventEmitter<[string | null, string | null]>();\n\n    this._emitters.set(name, emitter);\n\n    return emitter;\n  }\n\n}\n\n/**\n * @internal\n */\nclass AttributeTracker extends ValueTracker<string | null> {\n\n  readonly on: OnEvent<[string | null, string | null]>;\n  private readonly _updates = new EventEmitter<[string | null, string | null]>();\n\n  constructor(\n      private readonly _observer: AttributesObserver,\n      private readonly _name: string,\n  ) {\n    super();\n\n    let observeSupply = neverSupply();\n\n    this.on = onEventBy(receiver => {\n      if (!this._updates.size) {\n        observeSupply = this._observer.observe(\n            this._name,\n            (newValue, oldValue) => this._updates.send(newValue, oldValue),\n        );\n      }\n      receiver.supply.needs(observeSupply);\n      this._updates.on(receiver).whenOff(reason => {\n        if (!this._updates.size) {\n          observeSupply.off(reason);\n        }\n      });\n    });\n  }\n\n  get supply(): Supply {\n    return this._updates.supply;\n  }\n\n  get it(): string | null {\n    return this._observer.element.getAttribute(this._name);\n  }\n\n  set it(value: string | null) {\n    if (value != null) {\n      this._observer.element.setAttribute(this._name, value);\n    } else {\n      this._observer.element.removeAttribute(this._name);\n    }\n  }\n\n}\n\n/**\n * @internal\n */\nexport class NodeAttributes {\n\n  private readonly _attrs = new Map<string, AttributeTracker>();\n  private readonly _observer: AttributesObserver;\n\n  constructor(bs: BootstrapContext, element: any) {\n    this._observer = new AttributesObserver(bs, element);\n  }\n\n  get(name: string): ValueTracker<string | null> {\n\n    const existing = this._attrs.get(name);\n\n    if (existing) {\n      return existing;\n    }\n\n    const created = new AttributeTracker(this._observer, name);\n\n    this._attrs.set(name, created);\n\n    return created;\n  }\n\n}\n","import { EventEmitter, OnEvent, ValueTracker } from '@proc7ts/fun-events';\nimport { Supply } from '@proc7ts/primitives';\nimport { ComponentContext, ComponentState, domPropertyPathTo } from '@wesib/wesib';\n\n/**\n * @internal\n */\ntype ElementWithProperty<T> = {\n  [key in PropertyKey]: T;\n};\n\n/**\n * @internal\n */\nclass PropertyTracker<T> extends ValueTracker<T> {\n\n  private readonly _updates = new EventEmitter<[T, T]>();\n  private readonly _key: string;\n  constructor(\n      private readonly _element: ElementWithProperty<T>,\n      key: PropertyKey,\n  ) {\n    super();\n    this._key = key as string;\n  }\n\n  get supply(): Supply {\n    return this._updates.supply;\n  }\n\n  get it(): T {\n    return this._element[this._key];\n  }\n\n  set it(value: T) {\n    this._element[this._key] = value;\n  }\n\n  get on(): OnEvent<[T, T]> {\n    return this._updates.on;\n  }\n\n  bind(context: ComponentContext): void {\n\n    const propertyState = context.get(ComponentState).track(domPropertyPathTo(this._key));\n\n    propertyState.onUpdate({\n      supply: this.supply,\n      receive: (_ctx, _path, newValue: any, oldValue: any) => this._updates.send(newValue, oldValue),\n    });\n  }\n\n}\n\n/**\n * @internal\n */\nexport class NodeProperties {\n\n  private readonly _props = new Map<PropertyKey, PropertyTracker<any>>();\n  private _context?: ComponentContext<any>;\n\n  constructor(private readonly _element: any) {\n  }\n\n  bind(context: ComponentContext): void {\n    this._context = context;\n    this._props.forEach(prop => prop.bind(context));\n  }\n\n  get<T>(key: PropertyKey): ValueTracker<T> {\n\n    const existing = this._props.get(key);\n\n    if (existing) {\n      return existing;\n    }\n\n    const created = new PropertyTracker<any>(this._element, key);\n\n    if (this._context) {\n      created.bind(this._context);\n    }\n    this._props.set(key, created);\n\n    return created;\n  }\n\n}\n","import { ValueTracker } from '@proc7ts/fun-events';\nimport {\n  BootstrapContext,\n  ComponentClass,\n  ComponentContext,\n  ComponentContextHolder,\n  ComponentEvent,\n  ElementAdapter,\n} from '@wesib/wesib';\nimport { ComponentNode, ComponentTreeNode, ElementNode, ElementPickMode } from './element-node';\nimport { ElementNodeList } from './element-node-list';\nimport { elementNodeList } from './element-node-list.impl';\nimport { NodeAttributes } from './node-attributes.impl';\nimport { NodeProperties } from './node-properties.impl';\n\n/**\n * @internal\n */\nconst ElementNode__symbol = (/*#__PURE__*/ Symbol('element-node'));\n\n/**\n * @internal\n */\ntype TreeElement = Element & ComponentContextHolder & {\n  [ElementNode__symbol]?: ComponentTreeNode;\n};\n\n/**\n * @internal\n */\nclass ElementNode$ implements ComponentTreeNode {\n\n  private readonly _attrs: NodeAttributes;\n  private readonly _props: NodeProperties;\n\n  constructor(private readonly _bs: BootstrapContext, readonly element: TreeElement) {\n    this._attrs = new NodeAttributes(_bs, element);\n    this._props = new NodeProperties(element);\n    element[ElementNode__symbol] = this;\n\n    const context = this.context;\n\n    if (context) {\n      this._bind(context);\n    } else {\n      element.addEventListener('wesib:component', event => this._bind((event as ComponentEvent).context));\n    }\n  }\n\n  get context(): ComponentContext | undefined {\n    return ComponentContext.findIn(this.element);\n  }\n\n  get parent(): ElementNode | null {\n\n    const parent = this.element.parentNode;\n\n    return parent && elementNodeOf(this._bs, parent as Element);\n  }\n\n  select(selector: string | ComponentClass<any>, mode?: ElementPickMode): ElementNodeList<any> {\n    return selectNodes(this._bs, this.element, selector, mode);\n  }\n\n  attribute(name: string): ValueTracker<string | null> {\n    return this._attrs.get(name);\n  }\n\n  property<TValue>(key: PropertyKey): ValueTracker<TValue> {\n    return this._props.get(key);\n  }\n\n  private _bind(context: ComponentContext): void {\n    this._props.bind(context);\n  }\n\n}\n\n/**\n * @internal\n */\nexport function elementNodeOf(\n    bsContext: BootstrapContext,\n    element: TreeElement,\n    optional: true,\n): ElementNode | undefined;\n\n/**\n * @internal\n */\nexport function elementNodeOf(\n    bsContext: BootstrapContext,\n    element: TreeElement,\n    optional?: false,\n): ElementNode;\n\n/**\n * @internal\n */\nexport function elementNodeOf(\n    bsContext: BootstrapContext,\n    element: TreeElement,\n    optional?: boolean,\n): ElementNode | undefined;\n\n\nexport function elementNodeOf(\n    bsContext: BootstrapContext,\n    element: TreeElement,\n    optional?: boolean,\n): ElementNode | undefined {\n\n  const existing = element[ElementNode__symbol];\n\n  return (existing || optional) ? existing : new ElementNode$(bsContext, element);\n}\n\n/**\n * @internal\n */\nfunction selectNodes(\n    bsContext: BootstrapContext,\n    root: Element,\n    selector: string | ComponentClass<any>,\n    mode: ElementPickMode = {},\n): ElementNodeList<any> {\n  if (mode.all) {\n    return elementNodeList<ElementNode>(\n        bsContext,\n        root,\n        selector,\n        (element, optional) => elementNodeOf(bsContext, element, optional),\n        mode,\n    );\n  }\n\n  const adapter = bsContext.get(ElementAdapter);\n\n  return elementNodeList<ComponentNode>(\n      bsContext,\n      root,\n      selector,\n      (element, optional) => adapter(element) && elementNodeOf(bsContext, element, optional) as ComponentNode,\n      mode,\n  );\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { ValueTracker } from '@proc7ts/fun-events';\nimport { BootstrapContext, ComponentClass, ComponentContext } from '@wesib/wesib';\nimport { ElementNodeList } from './element-node-list';\nimport { elementNodeOf } from './element-node.impl';\n\n/**\n * Arbitrary element node within component tree. Either bound to some component or not.\n */\nexport type ElementNode =\n    | RawElementNode\n    | ComponentNode;\n\n/**\n * Component tree node representing arbitrary element.\n *\n * This is a base interface of all element node implementations.\n */\nexport interface ComponentTreeNode {\n\n  /**\n   * The element itself.\n   */\n  readonly element: any;\n\n  /**\n   * A context of component bound to this element, if any.\n   */\n  readonly context?: ComponentContext<any>;\n\n  /**\n   * Parent element node, or `null` if element has no parent.\n   */\n  readonly parent: ElementNode | null;\n\n  /**\n   * Selects component nodes matching the given selector.\n   *\n   * @param selector - Simple CSS selector of nested components.\n   * @param mode - Component nodes pick mode.\n   *\n   * @returns Dynamically updatable list of matching component nodes.\n   */\n  select(\n      selector: string,\n      mode?: ComponentPickMode,\n  ): ElementNodeList<ComponentNode>;\n\n  /**\n   * Selects component nodes of the given type.\n   *\n   * @param componentType - Nested component type with custom element name.\n   * @param mode - Component nodes pick mode.\n   *\n   * @returns Dynamically updatable list of matching component nodes.\n   */\n  select<T extends object>(\n      componentType: ComponentClass<T>,\n      mode?: ComponentPickMode,\n  ): ElementNodeList<ComponentNode<T>>;\n\n  /**\n   * Selects element nodes matching the given selector.\n   *\n   * @param selector - Simple CSS selector of nested elements. E.g. CSS class selector.\n   * @param mode - A mode of node picking from component tree.\n   *\n   * @returns Dynamically updatable list of matching element nodes.\n   */\n  select(\n      selector: string,\n      mode: ElementPickMode,\n  ): ElementNodeList;\n\n  /**\n   * Tracks element attribute.\n   *\n   * `null` attribute value corresponds to its absence. Setting it to `null` removes attribute.\n   *\n   * @param name - Target attribute name.\n   *\n   * @returns Target attribute's value tracker.\n   */\n  attribute(name: string): ValueTracker<string | null>;\n\n  /**\n   * Tracks element element property.\n   *\n   * The changes are tracked with `StateTracker`. So it is expected that the target property notifies on its changes\n   * with state updater. E.g. when it is defined by `@DomProperty` decorator.\n   *\n   * @typeParam TValue - Property value type.\n   * @param key - Target property key.\n   *\n   * @returns Target property's value tracker.\n   */\n  property<TValue>(key: PropertyKey): ValueTracker<TValue>;\n\n}\n\n/**\n * Element node representing raw element not bound to any component.\n */\nexport interface RawElementNode extends ComponentTreeNode {\n\n  readonly context?: undefined;\n\n}\n\n/**\n * Element node representing an element bound to some component.\n */\nexport interface ComponentNode<T extends object = any> extends ComponentTreeNode {\n\n  readonly context: ComponentContext<T>;\n\n}\n\n/**\n * A key of component context value containing a component node instance.\n */\nexport const ComponentNode: SingleContextRef<ComponentNode> = (\n    /*#__PURE__*/ new SingleContextKey<ComponentNode>(\n        'component-node',\n        {\n          byDefault(context) {\n            return elementNodeOf(\n                context.get(BootstrapContext),\n                context.get(ComponentContext).element,\n            ) as ComponentNode;\n          },\n        },\n    )\n);\n\n/**\n * A mode of node picking from component tree.\n */\nexport interface ElementPickMode {\n\n  /**\n   * Set to `true` to select arbitrary nodes. Otherwise - select only component nodes.\n   */\n  all?: boolean;\n\n  /**\n   * Set to `true` to select from entire subtree. Otherwise - select from element child nodes only.\n   */\n  deep?: boolean;\n\n}\n\n/**\n * A mode that picks component nodes from component tree.\n */\nexport interface ComponentPickMode extends ElementPickMode {\n\n  all?: false;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\n/**\n * Extracts URL contained in the hash of another URL.\n *\n * Extracted hash URL is based on origin of the original URL. Still, it may be absolute one.\n *\n * Input URL is never altered.\n *\n * @param url - An URL to extract hash from.\n *\n * @returns URL extracted from hash.\n */\nexport function getHashURL(url: URL): URL {\n  return new URL(url.hash.substring(1), url.origin);\n}\n\n/**\n * Creates an URL based on original one, but with hash substituted by the given hash URL.\n *\n * The hash URL is substituted as following:\n *\n * 1. If the hash URL's origin is not the same as the one of the base one, or if it contains a username,\n *    then absolute hash URL is substituted:\n * 2. Otherwise:\n *    - pathname is substituted, unless it is equal to `/` and no hash and search parameters present,\n *    - search parameters are substituted when at least one present,\n *    - hash is substituted only when present.\n *\n * Input URLs are never altered.\n *\n * @param url - Base URL.\n * @param hashURL - Hash URL to substitute.\n *\n * @returns URL with updated hash.\n */\nexport function setHashURL(url: URL, hashURL: URL): URL {\n  if (hashURL.origin !== url.origin || hashURL.username) {\n    return new URL(`#${hashURL}`, url);\n  }\n\n  const { pathname, search, hash } = hashURL;\n  const result = new URL('', url);\n\n  result.hash = (search || hash || pathname.length > 1) ? (pathname + search + hash) : (search + hash);\n\n  return result;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { Page } from './page';\nimport { PageParamContext } from './page-param-context';\n\n/**\n * A key of {@link PageParam.Ref page parameter request} property containing requested page parameter.\n */\nexport const PageParam__symbol = (/*#__PURE__*/ Symbol('page-param'));\n\n/**\n * Page navigation parameter.\n *\n * Can applied before navigation happened (i.e. to {@link LeavePageEvent}). Then it will be available to the target page\n * both before and after navigation.\n *\n * @typeParam T - Parameter value type.\n * @typeParam TInput - Parameter input type.\n */\nexport abstract class PageParam<T, TInput> implements PageParam.Ref<T, TInput> {\n\n  get [PageParam__symbol](): this {\n    return this;\n  }\n\n  /**\n   * Creates page parameter handle.\n   *\n   * This method is called when {@link Page.put assigning new page parameter}. It is called at most once per request,\n   * unless this parameter is assigned already. A {@link PageParam.Handle.put} method will be called instead\n   * in the latter case.\n   *\n   * @param page - A page to assign navigation parameter to.\n   * @param input - Parameter input used to construct its initial value.\n   * @param context - Page parameter context.\n   *\n   * @returns New page parameter value handle.\n   */\n  abstract create(page: Page, input: TInput, context: PageParamContext): PageParam.Handle<T, TInput>;\n\n  /**\n   * Creates default page parameter handle.\n   *\n   * This method is called when {@link Page.get requesting page parameter} which value is not present in the page.\n   * The value handle returned is assigned to the page.\n   *\n   * Returns nothing by default.\n   *\n   * @param _page - A page to assign navigation parameter to.\n   * @param _context - Page parameter context.\n   *\n   * @returns New page parameter value handle or nothing if there is no default value.\n   */\n  byDefault(_page: Page, _context: PageParamContext): PageParam.Handle<T, TInput> | undefined {\n    return;\n  }\n\n}\n\nexport namespace PageParam {\n\n  /**\n   * Page navigation parameter reference.\n   *\n   * @typeParam T - Parameter value type.\n   * @typeParam TInput - Parameter input type.\n   */\n  export interface Ref<T, TInput> {\n\n    /**\n     * Referred page navigation parameter instance.\n     */\n    readonly [PageParam__symbol]: PageParam<T, TInput>;\n\n  }\n\n  /**\n   * Page navigation parameter that has default value.\n   *\n   * @typeParam T - Parameter value type.\n   * @typeParam TInput - Parameter input type.\n   */\n  export interface WithDefaults<T, TInput> extends PageParam<T, TInput> {\n\n    byDefault(page: Page, context: PageParamContext): PageParam.Handle<T, TInput>;\n\n  }\n\n  export namespace WithDefaults {\n\n    /**\n     * A reference to page navigation parameter that has default value.\n     *\n     * @typeParam T - Parameter value type.\n     * @typeParam TInput - Parameter input type.\n     */\n    export interface Ref<T, TInput> {\n\n      /**\n       * Referred page navigation parameter instance.\n       */\n      readonly [PageParam__symbol]: WithDefaults<T, TInput>;\n\n    }\n\n  }\n\n  /**\n   * Page navigation parameter value handle.\n   *\n   * Holds and maintains parameter value.\n   *\n   * Created by {@link PageParam.create} method.\n   *\n   * @typeParam T - Parameter value type.\n   * @typeParam TInput - Parameter input type.\n   */\n  export interface Handle<T, TInput> {\n\n    /**\n     * Returns current parameter value.\n     *\n     * @returns Parameter value.\n     */\n    get(): T;\n\n    /**\n     * Puts page parameter value.\n     *\n     * This method is called when {@link Page.put re-assigning page parameter}. It is called when page parameter\n     * is assigned already and can be used to update it. The update logic is up to the implementation.\n     *\n     * @param input - Parameter input to use when updating its value.\n     */\n    put(input: TInput): void;\n\n    /**\n     * Transfers parameter to target page.\n     *\n     * This is called right before {@link LeavePageEvent} is fired for each parameter handle of current page.\n     *\n     * @param to - A page to transfer parameter to.\n     * @param when - When the transfer happens. Either `pretend`, `pre-open`, `pre-replace`, `open`, or `return`.\n     * `return` is used when return to page generated by another app version. E.g. from the page that has been\n     * reloaded.\n     *\n     * @returns New parameter handle instance for target page, or `undefined` if nothing to transfer.\n     */\n    transfer?(\n        to: Page, when: 'pretend' | 'pre-open' | 'pre-replace' | 'enter' | 'return',\n    ): Handle<T, TInput> | undefined;\n\n    /**\n     * This method is called when the page this parameter created for is entered.\n     *\n     * @param page - Entered page.\n     * @param when - When the page is entered. Either `init`, `open`, `replace`, `enter`, or `return`.\n     */\n    enter?(page: Page, when: 'init' | 'open' | 'replace' | 'enter' | 'return'): void;\n\n    /**\n     * This method is called when the page this parameter created for is left.\n     */\n    leave?(): void;\n\n    /**\n     * This method is called when page navigation aborted and target page won't be reached.\n     *\n     * The handle won't be accessed after this method call.\n     *\n     * @param at - The page the browser remains at.\n     */\n    stay?(at: Page): void;\n\n    /**\n     * This method is called when the page this parameter is created for is removed from navigation history.\n     *\n     * The handle won't be accessed after this method call.\n     */\n    forget?(): void;\n\n  }\n\n}\n","import { Page } from '../page';\nimport { PageParam } from '../page-param';\n\nclass PageHashURLValueParam$ extends PageParam<URL | undefined | null, URL | string | null | undefined> {\n\n  create(\n      page: Page,\n      input: URL | null | undefined,\n  ): PageParam.Handle<URL | null | undefined, URL | string | null | undefined> {\n\n    let hashURL: URL | null | undefined;\n    const handle: PageParam.Handle<URL | null | undefined, URL | string | null | undefined> = {\n      get() {\n        return hashURL;\n      },\n      put(value) {\n        hashURL = typeof value === 'string' ? new URL(value, page.url.origin) : value;\n      },\n    };\n\n    handle.put(input);\n\n    return handle;\n  }\n\n}\n\n/**\n * @internal\n */\nexport const PageHashURLValueParam: PageParam<URL | null | undefined, URL | string | null | undefined> = (\n    /*#__PURE__*/ new PageHashURLValueParam$()\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { getHashURL } from './hash-url';\nimport { PageHashURLValueParam } from './page-hash-url-param.impl';\n\n/**\n * @internal\n */\nclass PageHashURLParam$ extends PageParam<URL, URL | string | null | undefined> {\n\n  create(page: Page, input: URL | string | null | undefined): PageParam.Handle<URL, URL | string | null | undefined> {\n\n    const handle: PageParam.Handle<URL, URL | string | null | undefined> = {\n      get() {\n        return page.get(PageHashURLValueParam) || getHashURL(page.url);\n      },\n      put(value) {\n        page.put(PageHashURLValueParam, value);\n      },\n    };\n\n    handle.put(input);\n\n    return handle;\n  }\n\n  byDefault(page: Page): PageParam.Handle<URL, URL> {\n    return this.create(page, null);\n  }\n\n}\n\n/**\n * Page parameter representing its {@link getHashURL hash URL}.\n *\n * When {@link Navigation.with set} to another value while navigating, the hash of target URL is updated, unless set to\n * `null` or `undefined`.\n *\n * Requires {@link PageHashURLSupport} for above to function properly.\n */\nexport const PageHashURLParam: PageParam.WithDefaults<URL, URL | string | null | undefined> = (\n    /*#__PURE__*/ new PageHashURLParam$()\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextValueSlot } from '@proc7ts/context-values';\nimport { contextDestroyed, ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, digAfter, EventKeeper } from '@proc7ts/fun-events';\nimport { BootstrapWindow } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\nimport { PageParam } from './page-param';\nimport Target = Navigation.Target;\n\n/**\n * Navigation agent signature.\n *\n * The agent is called by navigation methods when leaving current page and may alter navigation processing.\n * E.g. change navigation target. For that it should be registered in appropriate context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by navigation method.\n */\nexport type NavigationAgent =\n/**\n * @param next - Either calls the next agent in chain, or applies the final navigation target if this agent is the last\n * one. Not calling this function effectively prevents navigation.\n * Accepts an optional {@link Navigation.Target} parameter. The original target will be used instead when omitted.\n * @param when - When navigation occurred. Either `pretend`, `pre-open`, or `pre-replace`.\n * @param from - The page to leave.\n * @param to - Navigation target page.\n */\n    (\n        this: void,\n        next: (this: void, target?: Target) => void,\n        when: 'pretend' | 'pre-open' | 'pre-replace',\n        from: Page,\n        to: Page,\n    ) => void;\n\n/**\n * @internal\n */\nclass NavigationAgentKey\n    extends ContextUpKey<NavigationAgent.Combined, NavigationAgent>\n    implements ContextUpRef<NavigationAgent.Combined, NavigationAgent> {\n\n  readonly upKey: ContextUpKey.UpKey<NavigationAgent.Combined, NavigationAgent>;\n\n  constructor(name: string) {\n    super(name);\n    this.upKey = this.createUpKey(\n        slot => {\n\n          const { document } = slot.context.get(BootstrapWindow);\n\n          slot.insert(slot.seed.do(\n              digAfter((...agents) => {\n                if (agents.length) {\n                  return afterThe(combinedAgent);\n                }\n                if (slot.hasFallback && slot.or) {\n                  return slot.or;\n                }\n\n                return afterThe(defaultNavigationAgent);\n\n                function combinedAgent(\n                    next: (this: void, target: Navigation.URLTarget) => void,\n                    when: 'pretend' | 'pre-open' | 'pre-replace',\n                    from: Page,\n                    to: Page,\n                ): void {\n\n                  return navigate(0, to);\n\n                  function navigate(agentIdx: number, agentTo: Page): void {\n\n                    const agent = agents[agentIdx];\n\n                    if (!agent) {\n                      return next(agentTo);\n                    }\n\n                    agent(\n                        (\n                            {\n                              url: nextURL = agentTo.url,\n                              title: nextTitle = agentTo.title,\n                              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                              data: nextData = agentTo.data,\n                            }: Navigation.Target = agentTo,\n                        ) => navigate(\n                            agentIdx + 1,\n                            {\n                              url: new URL(String(nextURL), document.baseURI),\n                              title: nextTitle,\n                              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                              data: nextData,\n                              get visited() {\n                                return agentTo.visited;\n                              },\n                              get current() {\n                                return agentTo.current;\n                              },\n                              get<T>(ref: PageParam.Ref<T, unknown>): T | undefined {\n                                return agentTo.get(ref);\n                              },\n                              put(ref, input) {\n                                agentTo.put(ref, input);\n                              },\n                            },\n                        ),\n                        when,\n                        from,\n                        agentTo,\n                    );\n                  }\n                }\n              }),\n          ));\n        },\n    );\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          NavigationAgent.Combined,\n          EventKeeper<NavigationAgent[]> | NavigationAgent,\n          AfterEvent<NavigationAgent[]>>,\n  ): void {\n\n    let delegated: NavigationAgent.Combined;\n\n    slot.context.get(\n        this.upKey,\n        slot.hasFallback ? { or: slot.or != null ? afterThe(slot.or) : slot.or } : undefined,\n    )!(\n        agent => delegated = agent,\n    ).whenOff(\n        reason => delegated = contextDestroyed(reason),\n    );\n\n    slot.insert((next, when, from, to) => delegated(next, when, from, to));\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultNavigationAgent(\n    next: (this: void, target: Navigation.URLTarget) => void,\n    _when: 'pretend' | 'pre-open' | 'pre-replace',\n    _from: Page,\n    to: Page,\n): void {\n  next(to);\n}\n\nexport namespace NavigationAgent {\n\n  /**\n   * Combined navigation agent signature.\n   *\n   * This is what is available under {@link NavigationAgent} key.\n   */\n  export type Combined =\n  /**\n   * @param next - Either calls the next agent in chain, or applies the final navigation target if this agent is the\n   * last one. Not calling this function effectively prevents navigation.\n   * Accepts an optional {@link Navigation.Target} parameter. The original target will be used instead when omitted.\n   * @param when - When navigation occurred. Either `pretend`, `pre-open`, or `pre-replace`.\n   * @param from - The page to leave.\n   * @param to - Navigation target page.\n   */\n      (\n          this: void,\n          next: (this: void, target: Navigation.URLTarget) => void,\n          when: 'pretend' | 'pre-open' | 'pre-replace',\n          from: Page,\n          to: Page,\n      ) => void;\n\n}\n\n/**\n * A key of context value containing an {@link NavigationAgent} instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the navigation.\n */\nexport const NavigationAgent: ContextUpRef<NavigationAgent.Combined, NavigationAgent> = (\n    /*#__PURE__*/ new NavigationAgentKey('navigation-agent')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { Navigation } from '../navigation';\nimport { NavigationAgent } from '../navigation-agent';\nimport { Page } from '../page';\nimport { setHashURL } from './hash-url';\nimport { PageHashURLValueParam } from './page-hash-url-param.impl';\n\nconst PageHashURLSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.provide({ a: NavigationAgent, is: pageHashURLAgent });\n  },\n};\n\n/**\n * {@link PageHashURLParam Page hash URL parameter} support feature.\n */\nexport class PageHashURLSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return PageHashURLSupport__feature;\n  }\n\n}\n\nfunction pageHashURLAgent(\n    next: (this: void, target?: Navigation.Target) => void,\n    _when: 'pretend' | 'pre-open' | 'pre-replace',\n    _from: Page,\n    to: Page,\n): void {\n\n  const hashURL = to.get(PageHashURLValueParam);\n\n  if (hashURL) {\n    next({ url: setHashURL(to.url, hashURL) });\n  } else {\n    next();\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextValues } from '@proc7ts/context-values';\n\n/**\n * Page parameter context.\n *\n * Provides values available in bootstrap context.\n */\nexport abstract class PageParamContext extends ContextValues {\n}\n","import { ContextKey, ContextKey__symbol, ContextRegistry, SingleContextKey } from '@proc7ts/context-values';\nimport { ValueTracker } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { itsEach } from '@proc7ts/push-iterator';\nimport { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\nimport { PageParam, PageParam__symbol } from './page-param';\nimport { PageParamContext } from './page-param-context';\n\n/**\n * @internal\n */\nconst NavHistory__key = (/*#__PURE__*/ new SingleContextKey<NavHistory>(\n    'nav-history',\n    {\n      byDefault: bootstrapDefault(ctx => new NavHistory(ctx)),\n    },\n));\n\n/**\n * @internal\n */\nexport const NAV_DATA_KEY = 'wesib:navigation:data' as const;\n\n/**\n * @internal\n */\nexport interface PartialNavData {\n  readonly uid?: string;\n  readonly id?: number;\n  readonly data: any;\n}\n\n/**\n * @internal\n */\nexport interface NavData extends PartialNavData {\n  readonly uid: string;\n  readonly id: number;\n}\n\n/**\n * @internal\n */\nexport interface NavDataEnvelope {\n  readonly [NAV_DATA_KEY]: NavData;\n}\n\n/**\n * @internal\n */\nfunction extractNavData(state: any): PartialNavData {\n  return state == null || typeof state !== 'object'\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      ? { data: state }\n      : (state as NavDataEnvelope)[NAV_DATA_KEY] as PartialNavData;\n}\n\n/**\n * @internal\n */\nexport class NavHistory {\n\n  static get [ContextKey__symbol](): ContextKey<NavHistory> {\n    return NavHistory__key;\n  }\n\n  private readonly _document: Document;\n  private readonly _location: Location;\n  private readonly _history: History;\n  private readonly _entries = new Map<number, PageEntry>();\n  private readonly _uid: string;\n  private _lastId = 0;\n\n  constructor(private readonly _context: BootstrapContext) {\n    const window = _context.get(BootstrapWindow);\n\n    this._document = window.document;\n    this._location = window.location;\n    this._history = window.history;\n    this._uid = btoa(String(Math.random()));\n  }\n\n  init(): PageEntry {\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const { data } = extractNavData(this._history.state);\n    const entry = this.newEntry({\n      url: new URL(this._location.href),\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      data,\n      title: this._document.title,\n    });\n\n    this._entries.set(entry.id, entry);\n    entry.schedule(() => {\n      entry.enter('init');\n      this._history.replaceState(this._historyState(entry), '');\n    });\n\n    return entry;\n  }\n\n  newEntry(target: Navigation.URLTarget): PageEntry {\n    return new PageEntry(this._context, ++this._lastId, target);\n  }\n\n  open(\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const { page: { title = '', url } } = toEntry;\n\n    this._history.pushState(\n        this._historyState(toEntry),\n        title,\n        url.href,\n    );\n\n    this._enter('open', toEntry, tracker);\n  }\n\n  private _enter(\n      when: 'open' | 'enter',\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const fromEntry = tracker.it;\n\n    this._entries.set(toEntry.id, toEntry);\n\n    try {\n      // Forget all entries starting from next one\n      for (let e = fromEntry.next; e; e = e.next) {\n        this._forget(e);\n      }\n    } finally {\n      toEntry.prev = fromEntry;\n      fromEntry.next = toEntry;\n      toEntry.schedule(() => {\n        try {\n          fromEntry.leave();\n        } finally {\n          toEntry.enter(when);\n        }\n      });\n      tracker.it = toEntry;\n    }\n  }\n\n  replace(\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const fromEntry = tracker.it;\n    const { page: { title = '', url } } = toEntry;\n\n    this._history.replaceState(\n        this._historyState(toEntry),\n        title,\n        url.href,\n    );\n\n    this._entries.set(toEntry.id, toEntry);\n\n    const prev = fromEntry.prev;\n\n    if (prev) {\n      toEntry.prev = prev;\n      prev.next = toEntry;\n    }\n\n    toEntry.schedule(() => {\n      try {\n        fromEntry.leave();\n      } finally {\n        try {\n          this._forget(fromEntry);\n        } finally {\n          toEntry.enter('replace');\n        }\n      }\n    });\n    tracker.it = toEntry;\n  }\n\n  popState(\n      popState: PopStateEvent,\n      tracker: ValueTracker<PageEntry>,\n  ): PageEntry | undefined {\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const { state } = popState;\n\n    if (state == null) {\n      // Hash change\n      if (this._history.state == null) {\n        // Not a return\n        return this._changeHash(tracker);\n      }\n      return; // Already handled by `hashchange` handler\n    }\n\n    const fromEntry = tracker.it;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const { uid, data, id: pageId } = extractNavData(state);\n    let toEntry: PageEntry;\n\n    const existingEntry = uid === this._uid && pageId != null ? this._entries.get(pageId) : undefined;\n\n    if (existingEntry) {\n      toEntry = existingEntry;\n    } else {\n      // Returning to page existed in previous app version\n      toEntry = this.newEntry({\n        url: new URL(this._location.href),\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        data,\n        title: this._document.title,\n      });\n      fromEntry.transfer(toEntry, 'return');\n      this._entries.set(toEntry.id, toEntry);\n      this._history.replaceState(this._historyState(toEntry), '');\n    }\n\n    toEntry.schedule(() => {\n      try {\n        fromEntry.leave();\n      } finally {\n        toEntry.enter('return');\n      }\n    });\n\n    tracker.it = toEntry;\n\n    return toEntry;\n  }\n\n  public hashChange(tracker: ValueTracker<PageEntry>): PageEntry | void {\n    if (this._history.state == null) {\n      // Not a return\n      return this._changeHash(tracker);\n    }\n    // Otherwise, a `popstate` event is also triggered,\n    // and its handler would do the job (or already did).\n  }\n\n  public update(tracker: ValueTracker<PageEntry>, url: URL): PageEntry {\n\n    const oldEntry = tracker.it;\n    const newEntry = new PageEntry(this._context, ++this._lastId, { ...oldEntry.page, url }, oldEntry);\n\n    this._entries.set(newEntry.id, newEntry);\n    this._history.replaceState(this._historyState(newEntry), '', url.href);\n    this._entries.delete(oldEntry.id);\n\n    return tracker.it = newEntry;\n  }\n\n  private _changeHash(tracker: ValueTracker<PageEntry>): PageEntry {\n\n    const fromEntry = tracker.it;\n    const toEntry = this.newEntry({\n      url: new URL(this._location.href),\n      data: null,\n      title: this._document.title,\n    });\n\n    try {\n      fromEntry.transfer(toEntry, 'enter');\n    } finally {\n      this._history.replaceState(this._historyState(toEntry), '');\n      this._enter('enter', toEntry, tracker);\n    }\n\n    return toEntry;\n  }\n\n  private _forget(entry: PageEntry): void {\n    this._entries.delete(entry.id);\n    entry.forget();\n  }\n\n  private _historyState({ id, page: { data } }: PageEntry): NavDataEnvelope {\n    return {\n      [NAV_DATA_KEY]: {\n        uid: this._uid,\n        id,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        data,\n      },\n    };\n  }\n\n}\n\nconst enum PageStatus {\n  New,\n  Visited,\n  Current,\n}\n\n/**\n * @internal\n */\nexport class PageEntry {\n\n  next?: PageEntry;\n  prev?: PageEntry;\n  private _status: PageStatus = PageStatus.New;\n  readonly page: Page;\n  private readonly _params: Map<PageParam<any, any>, PageParam.Handle<any, any>>;\n  private _update: () => void = noop;\n\n  constructor(\n      private readonly _bsContext: BootstrapContext,\n      readonly id: number,\n      target: Navigation.URLTarget,\n      proto?: PageEntry,\n  ) {\n    this._params = proto ? proto._params : new Map<PageParam<any, any>, PageParam.Handle<any, any>>();\n\n    const entry = this;\n\n    this.page = {\n      get url() {\n        return target.url;\n      },\n      get title() {\n        return target.title;\n      },\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      get data(): any {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return target.data;\n      },\n      get visited() {\n        return !!entry._status;\n      },\n      get current() {\n        return entry._status === PageStatus.Current;\n      },\n      get<T>(ref: PageParam.Ref<T, unknown>): T | undefined {\n        return entry.get(ref);\n      },\n      put(ref, input) {\n        entry.put(ref, input);\n      },\n    };\n  }\n\n  get<T>(ref: PageParam.Ref<T, unknown>): T | undefined {\n\n    const param = ref[PageParam__symbol];\n    const handle: PageParam.Handle<T, unknown> | undefined = this._params.get(param);\n\n    if (handle) {\n      return handle.get();\n    }\n\n    const newHandle = param.byDefault(this.page, this._newContext());\n\n    return newHandle && this._init(param, newHandle);\n  }\n\n  put<T, TInput>(ref: PageParam.Ref<T, TInput>, input: TInput): T {\n\n    const param = ref[PageParam__symbol];\n    const handle: PageParam.Handle<T, TInput> | undefined = this._params.get(param);\n\n    if (handle) {\n      handle.put(input);\n      return handle.get();\n    }\n\n    return this._init(param, param.create(this.page, input, this._newContext()));\n  }\n\n  private _newContext(): PageParamContext {\n\n    const registry = new ContextRegistry<ParamContext>(this._bsContext);\n\n    class ParamContext extends PageParamContext {\n\n      readonly get: PageParamContext['get'] = registry.newValues().get;\n\n    }\n\n    return new ParamContext();\n  }\n\n  private _init<T, TInput>(param: PageParam<T, TInput>, handle: PageParam.Handle<T, TInput>): T {\n    this._params.set(param, handle);\n\n    if (this.page.current && handle.enter) {\n      handle.enter(this.page, 'init');\n    }\n\n    return handle.get();\n  }\n\n  transfer(to: PageEntry, when: 'pretend' | 'pre-open' | 'pre-replace' | 'enter' | 'return'): void {\n    itsEach(this._params.entries(), ([param, handle]) => {\n      if (handle.transfer) {\n\n        const transferred = handle.transfer(to.page, when);\n\n        if (transferred) {\n          to._params.set(param, transferred);\n        }\n      }\n    });\n  }\n\n  stay(at: Page): void {\n    itsEach(this._params.values(), handle => handle.stay && handle.stay(at));\n  }\n\n  enter(when: 'init' | 'open' | 'replace' | 'enter' | 'return'): void {\n    this._status = PageStatus.Current;\n    itsEach(this._params.values(), handle => handle.enter && handle.enter(this.page, when));\n  }\n\n  leave(): void {\n    this._status = PageStatus.Visited;\n    itsEach(this._params.values(), handle => handle.leave && handle.leave());\n  }\n\n  forget(): void {\n    itsEach(this._params.values(), handle => handle.forget && handle.forget());\n    this._params.clear();\n  }\n\n  schedule(update: () => void): void {\n    this._update = update;\n  }\n\n  apply(): void {\n\n    const update = this._update;\n\n    this._update = noop;\n    update();\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { Navigation } from './navigation';\nimport { Page } from './page';\n\n/**\n * Navigation event.\n */\nexport type NavigationEvent = LeavePageEvent | EnterPageEvent | StayOnPageEvent;\n\n/**\n * Navigation event type.\n */\nexport const enum NavigationEventType {\n\n  /**\n   * {@link EnterPageEvent Enter page event} type.\n   */\n  EnterPage = 'wesib:enterPage',\n\n  /**\n   * {@link LeavePageEvent Leave page event} type.\n   */\n  LeavePage = 'wesib:leavePage',\n\n  /**\n   * {@link StayOnPageEvent Stay on page event} type.\n   */\n  StayOnPage = 'wesib:stayOnPage',\n\n}\n\n/**\n * An event fired when navigation target reached by entering destination page.\n *\n * @event EnterPageEvent#wesib:enterPage\n */\nexport class EnterPageEvent extends Event {\n\n  /**\n   * When navigation event occurred.\n   *\n   * Can be one of:\n   * - `open` when opening a new page,\n   * - `replace` when replacing navigation history entry,\n   * - `enter` when entering new page by user action (e.g. hashchange event),\n   * - `return` when navigated to previously visited entry in navigation history.\n   */\n  readonly when: 'open' | 'replace' | 'enter' | 'return';\n\n  /**\n   * Entered page.\n   */\n  readonly to: Page;\n\n  /**\n   * Constructs enter page event.\n   *\n   * @param type - Event type.\n   * @param init - Initialization options.\n   */\n  constructor(type: string, init: EnterPageEventInit) {\n    super(type, { ...init, cancelable: false });\n    this.when = init.when;\n    this.to = init.to;\n  }\n\n}\n\n/**\n * {@link EnterPageEvent Enter page event} initialization options.\n */\nexport interface EnterPageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * When navigation event occurred.\n   *\n   * Can be one of:\n   * - `open` when opening a new page,\n   * - `replace` when replacing navigation history entry,\n   * - `enter` when entering new page by user action (e.g. hashchange event),\n   * - `return` when navigated to previously visited entry in navigation history.\n   */\n  readonly when: 'open' | 'replace' | 'enter' | 'return';\n\n  /**\n   * Entered page.\n   */\n  readonly to: Page;\n\n}\n\n/**\n * An event fired right before leaving the page in order to navigate to another one.\n *\n * This event can be cancelled in order to prevent actual navigation or history update. The navigation is also\n * cancelled when another navigation initiated by one of the handlers of this event.\n *\n * @event LeavePageEvent#wesib:leavePage\n */\nexport class LeavePageEvent extends Event {\n\n  /**\n   * When navigation event occurred. Either `pre-open` when leaving a page to open a new one, or `pre-replace` when\n   * leaving a page to replace it with another history entry.\n   */\n  readonly when: 'pre-open' | 'pre-replace';\n\n  /**\n   * The page to leave.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target page.\n   */\n  readonly to: Page;\n\n  /**\n   * Constructs leave page event.\n   *\n   * @param type - Event type.\n   * @param init - Initialization options.\n   */\n  constructor(type: string, init: LeavePageEventInit) {\n    super(type, { ...init, cancelable: true });\n    this.when = init.when;\n    this.from = init.from;\n    this.to = init.to;\n  }\n\n}\n\n/**\n * {@link LeavePageEvent Leave page event} initialization options.\n */\nexport interface LeavePageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * When navigation event occurred. Either `pre-open` when leaving a page to open a new one, or `pre-replace` when\n   * leaving a page to replace it with another history entry.\n   */\n  readonly when: 'pre-open' | 'pre-replace';\n\n  /**\n   * The page to leave.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target page.\n   */\n  readonly to: Page;\n\n}\n\n/**\n * An event fired when navigation cancelled or failed.\n *\n * @event StayOnPageEvent#wesib:stayOnPage\n */\nexport class StayOnPageEvent extends Event {\n\n  /**\n   * When navigation event occurred. Always `stay`.\n   */\n  get when(): 'stay' {\n    return 'stay';\n  }\n\n  /**\n   * The page to stay at.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target.\n   */\n  readonly to: Navigation.URLTarget;\n\n  /**\n   * A reason of navigation failure. This is set when navigation failed due to some error.\n   */\n  readonly reason?: any;\n\n  /**\n   * Constructs stay on page event.\n   *\n   * @param type - Event type.\n   * @param init - Initialization options.\n   */\n  constructor(type: string, init: StayOnPageEventInit) {\n    super(type, { ...init, cancelable: true });\n    this.from = init.from;\n    this.to = init.to;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this.reason = init.reason;\n  }\n\n}\n\n/**\n * {@link StayOnPageEvent Stay on page event} initialization options.\n */\nexport interface StayOnPageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * The page to stay at.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target.\n   */\n  readonly to: Navigation.URLTarget;\n\n  /**\n   * A reason of navigation failure. This is set when navigation failed due to some error.\n   */\n  readonly reason?: any;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { DomEventDispatcher, OnDomEvent } from '@frontmeans/dom-events';\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  EventKeeper,\n  EventSender,\n  mapAfter,\n  onAny,\n  OnEvent,\n  OnEvent__symbol,\n  onSupplied,\n  trackValue,\n} from '@proc7ts/fun-events';\nimport { mergeFunctions, noop } from '@proc7ts/primitives';\nimport { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { NavHistory, PageEntry } from './nav-history.impl';\nimport { NavigationAgent } from './navigation-agent';\nimport {\n  EnterPageEvent,\n  LeavePageEvent,\n  NavigationEvent,\n  NavigationEventType,\n  StayOnPageEvent,\n} from './navigation.event';\nimport { Page } from './page';\nimport { PageParam } from './page-param';\n\n/**\n * @internal\n */\nconst Navigation__key = (/*#__PURE__*/ new SingleContextKey<Navigation>(\n    'navigation',\n    {\n      byDefault: bootstrapDefault(createNavigation),\n    },\n));\n\n/**\n * Browser navigation service.\n *\n * Expected to be used as a [History] and [Location] APIs replacement.\n *\n * Fires additional navigation events the browser does not support natively.\n *\n * Implements an `EventSender` interface by sending {@link NavigationEvent navigation events} to registered receivers.\n *\n * Implements an `EventKeeper` interface by sending current {@link Page page} to registered receivers.\n *\n * Available as bootstrap context value.\n *\n * [History]: https://developer.mozilla.org/en-US/docs/Web/API/History\n * [Location]: https://developer.mozilla.org/en-US/docs/Web/API/Location\n */\nexport abstract class Navigation implements EventSender<[NavigationEvent]>, EventKeeper<[Page]> {\n\n  static get [ContextKey__symbol](): ContextKey<Navigation> {\n    return Navigation__key;\n  }\n\n  /**\n   * Current page.\n   */\n  abstract readonly page: Page;\n\n  /**\n   * The number of element in navigation history.\n   */\n  abstract readonly length: number;\n\n  /**\n   * An `OnDomEvent` sender of {@link EnterPageEvent enter page events}.\n   */\n  abstract readonly onEnter: OnDomEvent<EnterPageEvent>;\n\n  /**\n   * An `OnDomEvent` sender of {@link LeavePageEvent leave page events}.\n   *\n   * The registered listener may cancel navigation by calling `preventDefault()` method of received event.\n   */\n  abstract readonly onLeave: OnDomEvent<LeavePageEvent>;\n\n  /**\n   * An `OnDomEvent` {@link StayOnPageEvent stay on page events}.\n   *\n   * The registered listener is informed when navigation has been cancelled by one of leave page event receivers,\n   * navigation failed due to e.g. invalid URL, or when another navigation request initiated before the page left.\n   *\n   * @returns `OnDomEvent` sender of {@link StayOnPageEvent stay on page events}.\n   */\n  abstract readonly onStay: OnDomEvent<StayOnPageEvent>;\n\n  /**\n   * An `OnEvent` sender of {@link NavigationEvent navigation events}.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly on: OnEvent<[NavigationEvent]>;\n\n  [OnEvent__symbol](): OnEvent<[NavigationEvent]> {\n    return this.on;\n  }\n\n  /**\n   * An `AfterEvent` keeper of {@link page current page}.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[Page]>;\n\n  [AfterEvent__symbol](): AfterEvent<[Page]> {\n    return this.read;\n  }\n\n  /**\n   * Goes to the previous page in navigation history.\n   *\n   * Calling this method is the same as calling `go(-1)`.\n   */\n  back(): void {\n    this.go(-1);\n  }\n\n  /**\n   * Goes to the next page in navigation history.\n   *\n   * Calling this method is the same as calling `go(1)`.\n   */\n  forward(): void {\n    this.go(1);\n  }\n\n  /**\n   * Loads a page from navigation history, identified by its relative location to the current page.\n   *\n   * For example `-1` navigates to previous page, while `1` navigates to the next one. If you specify an out-of-bounds\n   * value (for instance, specifying -1 when there are no previously-visited pages in navigation history), this method\n   * silently has no effect.\n   *\n   * @param delta - Relative location in navigation history to navigate to. The absent value or value of `0` reloads\n   * the current page.\n   */\n  abstract go(delta?: number): void;\n\n  /**\n   * Reloads current page.\n   *\n   * Calling this method is the same as calling `go()`.\n   */\n  reload(): void {\n    this.go();\n  }\n\n  /**\n   * Opens a page by navigating to the given `target`.\n   *\n   * Appends an entry to navigation history.\n   *\n   * @param target - Either navigation target or URL to navigate to.\n   * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually navigate.\n   * Then navigates to the `target`, unless the event cancelled.\n   * @fires NavigateEvent@wesib:navigate  On window object when navigation succeed.\n   *\n   * @returns A promise resolved to navigated page, or to `null` otherwise.\n   */\n  abstract open(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  /**\n   * Replaces current navigation history entry with the given `target`.\n   *\n   * @param target - Either navigation target or URL to replace current history entry with.\n   * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually update the history.\n   * Then navigates to the `target`, unless the event cancelled.\n   * @fires NavigateEvent@wesib:navigate  On window object when history updated.\n   *\n   * @returns A promise resolved to navigated page, or to `null` otherwise.\n   */\n  abstract replace(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  /**\n   * Replaces current page URL with the given one.\n   *\n   * Does not alter current page state, and does not trigger any events.\n   *\n   * @param url - An URL to replace the the current one with.\n   *\n   * @returns Current page with updated URL.\n   */\n  abstract update(url: string | URL): Page;\n\n  /**\n   * Creates parameterized navigation instance and assigns a page parameter to apply to target page.\n   *\n   * @typeParam T - Parameter value type.\n   * @typeParam TInput - Parameter input type.\n   * @param ref - A reference to page navigation parameter to apply.\n   * @param input - Parameter input to use when constructing its value.\n   *\n   * @returns New parameterized navigation instance.\n   */\n  abstract with<T, TInput>(ref: PageParam.Ref<T, TInput>, input: TInput): Navigation.Parameterized;\n\n}\n\nexport namespace Navigation {\n\n  /**\n   * Parameterized navigation.\n   *\n   * Allows to assign target page parameters prior to navigating to it.\n   */\n  export interface Parameterized {\n\n    /**\n     * Applies parameter to navigation target page.\n     *\n     * @typeParam T - Parameter value type.\n     * @typeParam TInput - Parameter input type.\n     * @param ref - A reference to page navigation parameter to apply.\n     * @param input - Parameter input to use when constructing its value.\n     *\n     * @returns New parameterized navigation instance.\n     */\n    with<T, TInput>(ref: PageParam.Ref<T, TInput>, input: TInput): Parameterized;\n\n    /**\n     * Opens a page by navigating to the given `target` with provided page parameters.\n     *\n     * Appends an entry to navigation history.\n     *\n     * @param target - Either navigation target or URL to navigate to. Navigates to current page URL when omitted.\n     * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually navigate.\n     * Then navigates to the `target`, unless the event cancelled.\n     * @fires NavigateEvent@wesib:navigate  On window object when navigation succeed.\n     *\n     * @returns A promise resolved to navigated page, or to `null` otherwise.\n     */\n    open(target?: Navigation.Target | string | URL): Promise<Page | null>;\n\n    /**\n     * Replaces the most recent entry in navigation history with the given `target` and provided page parameters.\n     *\n     * @param target - Either navigation target or URL to replace the latest history entry with. Navigates to current\n     * page URL when omitted.\n     * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually update the history.\n     * Then navigates to the `target`, unless the event cancelled.\n     * @fires NavigateEvent@wesib:navigate  On window object when history updated.\n     *\n     * @returns A promise resolved to navigated page, or to `null` otherwise.\n     */\n    replace(target?: Navigation.Target | string | URL): Promise<Page | null>;\n\n    /**\n     * Pretends navigation.\n     *\n     * Prepares navigation and parameters, but does not actually navigate. Instead it calls the provided callback\n     * function.\n     *\n     * This is useful e.g. to build target URL or evaluate target page parameter.\n     *\n     * @param target - Either navigation target or URL to pretend navigation to.\n     * @param callback - A callback function receiving two pages as parameters: the page to leave, and the page to open.\n     * The latter one is valid only inside callback, as its parameters will be cleaned up right after callback returns.\n     * The value returned from callback is then returned from this method call. It may be used to collect some data\n     * from target page.\n     *\n     * @returns Either the value returned by callback, or `undefined` when navigation failed.\n     */\n    pretend<T>(\n        target: Navigation.Target | string | URL,\n        callback: (this: void, from: Page, to: Page) => T,\n    ): T | undefined;\n\n    /**\n     * Pretends navigation to the same page.\n     *\n     * Prepares navigation and parameters, but does not actually navigate. Instead it calls the provided callback\n     * function.\n     *\n     * This is useful e.g. to build target URL or evaluate target page parameter.\n     *\n     * @param callback - A callback function receiving two pages as parameters: the page to leave, and the page to open.\n     * The latter one is valid only inside callback, as its parameters will be cleaned up right after callback returns.\n     * The value returned from callback is then returned from this method call. It may be used to collect some data\n     * from target page.\n     *\n     * @returns Either the value returned by callback, or `undefined` when navigation failed.\n     */\n    pretend<T>(\n        callback: (this: void, from: Page, to: Page) => T,\n    ): T | undefined;\n\n    /**\n     * Pretends navigation and builds navigation target.\n     *\n     * Prepares navigation and parameters, but does not actually navigate. Instead it calls the provided callback\n     * function.\n     *\n     * This is useful e.g. to build target URL or evaluate target page parameter.\n     *\n     * @param target - Either navigation target or URL to pretend navigation to. Prepends navigation to current page\n     * when omitted.\n     *\n     * @returns Either Navigation target with URL value, or `undefined` when navigation failed.\n     */\n    pretend(\n        target?: Navigation.Target | string | URL,\n    ): URLTarget | undefined;\n\n  }\n\n  /**\n   * Navigation target.\n   *\n   * This is passed to {@link Navigation.open} and {@link Navigation.replace} methods.\n   */\n  export interface Target {\n\n    /**\n     * An URL to update the browser location string to.\n     */\n    readonly url?: string | URL;\n\n    /**\n     * Opaque data to apply to session history. I.e. either push or replace.\n     */\n    readonly data?: any;\n\n    /**\n     * New window title.\n     */\n    readonly title?: string;\n\n  }\n\n  /**\n   * Navigation target with URL value.\n   */\n  export interface URLTarget extends Target {\n\n    readonly url: URL;\n\n  }\n\n}\n\nfunction createNavigation(context: BootstrapContext): Navigation {\n\n  const window = context.get(BootstrapWindow);\n  const { document, history } = window;\n  const dispatcher = new DomEventDispatcher(window);\n  const navHistory = context.get(NavHistory);\n  const agent = context.get(NavigationAgent);\n  const nav = trackValue<PageEntry>(navHistory.init());\n\n  nav.read(nextEntry => nextEntry.apply()); // The very first page entry receiver applies scheduled updates to page\n\n  let next: Promise<any> = Promise.resolve();\n\n  dispatcher.on<PopStateEvent>('popstate')(popState => {\n\n    const entry = navHistory.popState(popState, nav);\n\n    if (entry) {\n      dispatcher.dispatch(new EnterPageEvent(\n          NavigationEventType.EnterPage,\n          {\n            when: popState.state != null ? 'return' : 'enter',\n            to: entry.page,\n          },\n      ));\n    }\n  });\n\n  dispatcher.on('hashchange')(() => {\n\n    const entry = navHistory.hashChange(nav);\n\n    if (entry) {\n      dispatcher.dispatch(new EnterPageEvent(\n          NavigationEventType.EnterPage,\n          {\n            when: 'enter',\n            to: entry.page,\n          },\n      ));\n    }\n  });\n\n  type NavTarget = { -readonly [K in keyof Navigation.URLTarget]: Navigation.URLTarget[K] };\n\n  class Navigation$ extends Navigation {\n\n    readonly onEnter: OnDomEvent<EnterPageEvent>;\n    readonly onLeave: OnDomEvent<LeavePageEvent>;\n    readonly onStay: OnDomEvent<StayOnPageEvent>;\n    readonly on: OnEvent<[NavigationEvent]>;\n    readonly read: AfterEvent<[Page]>;\n\n    constructor() {\n      super();\n      this.onEnter = dispatcher.on<EnterPageEvent>(NavigationEventType.EnterPage);\n      this.onLeave = dispatcher.on<LeavePageEvent>(NavigationEventType.LeavePage);\n      this.onStay = dispatcher.on<StayOnPageEvent>(NavigationEventType.StayOnPage);\n      this.on = onAny<[NavigationEvent]>(\n          onSupplied(this.onEnter),\n          onSupplied(this.onLeave),\n          onSupplied(this.onStay),\n      );\n      this.read = nav.read.do(\n          mapAfter(({ page }) => page),\n      );\n    }\n\n    get page(): Page {\n      return nav.it.page;\n    }\n\n    get length(): number {\n      return history.length;\n    }\n\n    go(delta?: number): void {\n      history.go(delta);\n    }\n\n    open(target: Navigation.Target | string | URL): Promise<Page | null> {\n      return navigate('pre-open', 'open', target);\n    }\n\n    replace(target: Navigation.Target | string | URL): Promise<Page | null> {\n      return navigate('pre-replace', 'replace', target);\n    }\n\n    update(url: string | URL): Page {\n      return navHistory.update(nav, toURL(url)).page;\n    }\n\n    with<T, TInput>(ref: PageParam.Ref<T, TInput>, input: TInput): Navigation.Parameterized {\n      return withParam(page => page.put(ref, input));\n    }\n\n  }\n\n  return new Navigation$();\n\n  function withParam(applyParams: (page: Page) => void): Navigation.Parameterized {\n    return {\n      with<T, TInput>(ref: PageParam.Ref<T, TInput>, input: TInput): Navigation.Parameterized {\n        return withParam(mergeFunctions(applyParams, page => page.put(ref, input)));\n      },\n      open(target?: Navigation.Target | string | URL) {\n        return navigate('pre-open', 'open', target, applyParams);\n      },\n      replace(target?: Navigation.Target | string | URL) {\n        return navigate('pre-replace', 'replace', target, applyParams);\n      },\n      pretend<T>(\n          targetOrCallback?: Navigation.Target | string | URL | ((this: void, from: Page, to: Page) => T),\n          callback: (this: void, from: Page, to: Page) => T = (_from, to) => to as unknown as T,\n      ): T | undefined {\n\n        let target: Navigation.Target | string | URL | undefined;\n\n        if (typeof targetOrCallback === 'function') {\n          callback = targetOrCallback;\n          target = undefined;\n        } else {\n          target = targetOrCallback;\n        }\n\n        const navTarget = navTargetOf(target);\n        const fromEntry = nav.it;\n        const toEntry = newEntry('pretend', fromEntry, navTarget, applyParams);\n\n        try {\n          return applyAgent('pretend', fromEntry, navTarget, toEntry)\n              ? callback(fromEntry.page, toEntry.page)\n              : undefined;\n        } finally {\n          toEntry.stay(nav.it.page);\n        }\n      },\n    };\n  }\n\n  function toURL(url: string | URL | undefined): URL {\n    if (typeof url === 'string') {\n      return new URL(url, document.baseURI);\n    }\n    return url || nav.it.page.url;\n  }\n\n  function navTargetOf(target?: Navigation.Target | string | URL): NavTarget {\n    if (target == null || typeof target === 'string' || target instanceof URL) {\n      return { url: toURL(target) };\n    }\n    if (target.url instanceof URL) {\n      return target as Navigation.URLTarget;\n    }\n    return { ...target, url: toURL(target.url) };\n  }\n\n  function navigate(\n      whenLeave: 'pre-open' | 'pre-replace',\n      when: 'open' | 'replace',\n      target?: Navigation.Target | string | URL,\n      applyParams: (page: Page) => void = noop,\n  ): Promise<Page | null> {\n\n    const navTarget = navTargetOf(target);\n    const promise = next = next.then(doNavigate, doNavigate);\n\n    return promise;\n\n    function doNavigate(): Page | null {\n\n      let toEntry: PageEntry | undefined = undefined;\n\n      try {\n\n        const prepared = prepare();\n\n        if (!prepared) {\n          return prepared; // Navigation cancelled\n        }\n\n        toEntry = prepared;\n        navHistory[when](toEntry, nav);\n        dispatcher.dispatch(new EnterPageEvent(\n            NavigationEventType.EnterPage,\n            {\n              when,\n              to: toEntry.page,\n            },\n        ));\n\n        return toEntry.page;\n      } catch (e) {\n        stay(toEntry, e);\n        throw e;\n      }\n    }\n\n    function prepare(): PageEntry | null {\n      if (next !== promise) {\n        return stay();\n      }\n\n      const fromEntry = nav.it;\n      const toEntry = newEntry(whenLeave, fromEntry, navTarget, applyParams);\n      const leavePage = new LeavePageEvent(\n          NavigationEventType.LeavePage,\n          {\n            when: whenLeave,\n            from: fromEntry.page,\n            to: toEntry.page,\n          },\n      );\n\n      if (!dispatcher.dispatch(leavePage)\n          || next !== promise\n          || !applyAgent(whenLeave, fromEntry, navTarget, toEntry)) {\n        return stay(toEntry);\n      }\n\n      return toEntry;\n    }\n\n    function stay(toEntry?: PageEntry, reason?: any): null {\n      if (toEntry) {\n        toEntry.stay(nav.it.page);\n      }\n\n      dispatcher.dispatch(new StayOnPageEvent(\n          NavigationEventType.StayOnPage,\n          {\n            from: nav.it.page,\n            to: navTarget,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            reason,\n          },\n      ));\n\n      return null;\n    }\n\n  }\n\n  function newEntry(\n      whenLeave: 'pretend' | 'pre-open' | 'pre-replace',\n      fromEntry: PageEntry,\n      navTarget: NavTarget,\n      applyParams: (page: Page) => void,\n  ): PageEntry {\n\n    const toEntry = navHistory.newEntry(navTarget);\n\n    try {\n      fromEntry.transfer(toEntry, whenLeave);\n      applyParams(toEntry.page);\n    } catch (e) {\n      toEntry.stay(nav.it.page);\n      throw e;\n    }\n\n    return toEntry;\n  }\n\n  function applyAgent(\n      whenLeave: 'pretend' | 'pre-open' | 'pre-replace',\n      fromEntry: PageEntry,\n      navTarget: NavTarget,\n      toEntry: PageEntry,\n  ): boolean {\n\n    let navigated = false;\n\n    agent(\n        ({ url, data, title }) => {\n          navigated = true;\n          navTarget.url = url;\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          navTarget.data = data;\n          navTarget.title = title;\n        },\n        whenLeave,\n        fromEntry.page,\n        toEntry.page,\n    );\n\n    return navigated;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { css__naming, QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { RenderSchedule } from '@frontmeans/render-scheduler';\nimport {\n  afterEach,\n  AfterEvent,\n  afterEventBy,\n  afterSupplied,\n  afterThe,\n  consumeEvents,\n  digAfter_,\n  EventKeeper,\n  supplyAfter,\n  translateAfter_,\n} from '@proc7ts/fun-events';\nimport { Class, noop, Supply } from '@proc7ts/primitives';\nimport { mapIt } from '@proc7ts/push-iterator';\nimport {\n  Component,\n  ComponentClass,\n  ComponentContext,\n  ComponentDecorator,\n  DefaultNamespaceAliaser,\n  ElementRenderScheduler,\n  RenderDef,\n  Wesib__NS,\n} from '@wesib/wesib';\nimport { ComponentNode, ElementNode, ElementPickMode } from '../tree';\nimport { getHashURL } from './hash-url';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\n\n/**\n * @internal\n */\ninterface ActiveNavLink {\n  supply(): Supply;\n}\n\n/**\n * Creates component decorator that marks navigation link(s) inside decorated component active.\n *\n * Marks navigation links with highest weight.\n *\n * @typeParam T - A type of decorated component class.\n * @param def - Navigation link activation definition.\n *\n * @returns New component decorator.\n */\nexport function ActivateNavLink<T extends ComponentClass = Class>(\n    def: ActivateNavLinkDef<InstanceType<T>> = {},\n): ComponentDecorator<T> {\n\n  const { select = 'a', pick = { all: true, deep: true } } = def;\n\n  return Component({\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const activate = activateNavLink(context, def);\n        const weigh = navLinkWeight(def);\n        const navigation = context.get(Navigation);\n        const componentNode = context.get(ComponentNode);\n\n        context.whenConnected(() => {\n\n          let active = new Map<ElementNode, ActiveNavLink>();\n\n          navigation.read.do(\n              supplyAfter(context),\n              consumeEvents(\n                  page => componentNode.select(select, pick).read.do(\n                      digAfter_(nodes => afterEach(\n                          ...mapIt(nodes, node => weigh({ node, context, page })),\n                      )),\n                      consumeEvents((...weights: NavLinkWeight[]) => {\n\n                        const selected = selectActiveNavLinks(weights);\n                        const newActive = new Map<ElementNode, ActiveNavLink>();\n                        const result = new Supply();\n\n                        selected.forEach(node => {\n\n                          let activeLink: ActiveNavLink;\n                          const existing = active.get(node);\n\n                          if (existing) {\n                            newActive.set(node, existing);\n                            activeLink = existing;\n                          } else {\n                            activeLink = activate({ node, context, page });\n                            newActive.set(node, activeLink);\n                          }\n\n                          activeLink.supply().needs(result);\n                        });\n\n                        active = newActive;\n\n                        return result;\n                      }),\n                  ),\n              ),\n          );\n        });\n      });\n    },\n  });\n}\n\n/**\n * Navigation link activation definition.\n *\n * Defines a set of element nodes considered to be navigation links. Each matching node is {@link weigh weighed}\n * against {@link Navigation.read current page}, and the link with highest weight is marked {@link active}.\n *\n * @typeParam T - A type of component.\n */\nexport interface ActivateNavLinkDef<T extends object = any> {\n\n  /**\n   * Navigation links CSS selector.\n   *\n   * `a` by default.\n   */\n  readonly select?: string;\n\n  /**\n   * A mode of navigation link node picking from component tree.\n   *\n   * By default picks any matching element from entire subtree.\n   */\n  readonly pick?: ElementPickMode;\n\n  /**\n   * Qualified name of CSS class to mark the active element with.\n   *\n   * The `active` class in Wesib namespace is used by default.\n   */\n  readonly active?: QualifiedName;\n\n  /**\n   * Rendering definition options to pass to nav links render scheduler.\n   */\n  readonly render?: RenderDef.Options;\n\n  /**\n   * Weighs matching navigation link.\n   *\n   * This method will be called for each navigation link on each current page update.\n   *\n   * By default:\n   * 1. If the link path has neither hash, nor search parameters, then:\n   * 1.1. Checks whether page URL path starts with the link's one.\n   * 1.2. If so, then uses link path length as weight.\n   * 2. If the link path has search parameters, but has no hash, then requires the page path to be the same as link's\n   *    one, and page search parameters include all of the link's ones. The number of link search parameters plus the\n   *    link path length is used as weight.\n   * 3. If the link path has a hash, then requires the page path and search parameters to be the same as link's ones,\n   *    and their hashes are treated as {@link getHashURL URLs}. The weight is calculated by applying steps 1, 2, and 3\n   *    to hash URLs increased by the link path length and the number of search parameters.\n   *\n   * Ignores search parameters with names starting and ending with double underscores. Like `__wesib_app_rev__`.\n   *\n   * @param node - Navigation link node to weigh.\n   * @param page - Current navigation page.\n   * @param context - Decorated component context.\n   *\n   * @returns Either navigation link weight, or its keeper. Non-positive wights means the page URL doesn't match\n   * the link at all.\n   */\n  weigh?(\n      {\n        node,\n        page,\n        context,\n      }: {\n        node: ElementNode;\n        page: Page;\n        context: ComponentContext<T>;\n      },\n  ): number | EventKeeper<[number]>;\n\n  /**\n   * Changes navigation link activity state.\n   *\n   * This method is called each time the active link changed.\n   *\n   * @param active - Whether to make target link active (`true`), or inactive (`false`).\n   * @param node - Navigation link node to update activity state of.\n   * @param page - Current navigation page.\n   * @param context - Decorated component context.\n   */\n  activate?(\n      active: boolean,\n      {\n        node,\n        page,\n        context,\n      }: {\n        node: ElementNode;\n        page: Page;\n        context: ComponentContext<T>;\n      },\n  ): void;\n\n}\n\n/**\n * @internal\n */\ntype NavLinkWeight = [ElementNode, number];\n\n/**\n * @internal\n */\ninterface NavLinkOpts {\n  node: ElementNode;\n  page: Page;\n  context: ComponentContext;\n}\n\n/**\n * @internal\n */\nfunction selectActiveNavLinks(weights: NavLinkWeight[]): ElementNode[] {\n\n  let maxWeight = 0;\n  let active: ElementNode[] = [];\n\n  weights.forEach(([node, weight]) => {\n    if (weight > maxWeight) {\n      maxWeight = weight;\n      active = [node];\n    } else if (weight === maxWeight) {\n      active.push(node);\n    }\n  });\n\n  return active;\n}\n\n/**\n * @internal\n */\nfunction navLinkWeight(\n    def: ActivateNavLinkDef,\n): (opts: NavLinkOpts) => AfterEvent<NavLinkWeight> {\n  if (!def.weigh) {\n    return defaultNavLinkWeight;\n  }\n\n  return opts => {\n\n    const weight = def.weigh!(opts);\n\n    if (typeof weight === 'number') {\n      return afterThe(opts.node, weight);\n    }\n\n    let supplier: AfterEvent<NavLinkWeight> = afterSupplied(weight).do(translateAfter_(\n        (send, weight) => send(opts.node, weight),\n    ));\n\n    return afterEventBy<NavLinkWeight>(receiver => {\n      supplier({\n        supply: new Supply()\n            .needs(receiver.supply)\n            .whenOff(() => {\n              // Fall back to zero weight once the weight supply cut off\n              supplier = afterThe(opts.node, 0);\n              supplier(receiver);\n            }),\n        receive: receiver.receive.bind(receiver),\n      });\n    });\n  };\n}\n\n/**\n * @internal\n */\nfunction defaultNavLinkWeight(\n    {\n      node,\n      page,\n    }: NavLinkOpts,\n): AfterEvent<NavLinkWeight> {\n\n  const { element } = node as { element: Element };\n  const href = element.getAttribute('href');\n\n  if (href == null) {\n    return afterThe(node, -1);\n  }\n\n  const linkURL = new URL(href, element.ownerDocument.baseURI);\n\n  return afterThe(node, calcNavLinkWeight(linkURL, page.url));\n}\n\n/**\n * @internal\n */\nfunction calcNavLinkWeight(linkURL: URL, pageURL: URL): number {\n  if (linkURL.origin !== pageURL.origin) {\n    return -1;\n  }\n\n  const linkDir = navLinkPath2dir(linkURL);\n  const pageDir = navLinkPath2dir(pageURL);\n\n  if (linkURL.hash) {\n    if (linkDir !== pageDir) {\n      return -1;\n    }\n    // Require search parameters to be equal\n\n    const searchParamWeight = navLinkSearchParamsWeight(linkURL, pageURL);\n\n    if (searchParamWeight < 0 || navLinkSearchParamsWeight(pageURL, linkURL) < 0) {\n      return -1;\n    }\n\n    return linkURL.pathname.length\n        + searchParamWeight\n        + calcNavLinkWeight(getHashURL(linkURL), getHashURL(pageURL));\n  }\n\n  const searchParamWeight = navLinkSearchParamsWeight(linkURL, pageURL);\n\n  if (searchParamWeight) {\n    if (searchParamWeight < 0) {\n      return -1;\n    }\n    if (linkDir !== pageDir) {\n      return -1;\n    }\n    return linkURL.pathname.length + searchParamWeight;\n  }\n\n  if (!pageDir.startsWith(linkDir)) {\n    return -1;\n  }\n\n  return linkURL.pathname.length;\n}\n\n/**\n * @internal\n */\nfunction navLinkPath2dir(url: URL): string {\n\n  const path = url.pathname;\n\n  return path.endsWith('/') ? path : path + '/';\n}\n\n/**\n * @internal\n */\nfunction navLinkSearchParamsWeight(\n    { searchParams: linkParams }: URL,\n    { searchParams: pageParams }: URL,\n): number {\n\n  let weight = 0;\n\n  linkParams.forEach((value, key) => {\n    if (!isIgnoredSearchParam(key)) {\n      if (weight >= 0) {\n        if (pageParams.getAll(key).includes(value)) {\n          weight += 1;\n        } else {\n          weight = -1;\n        }\n      }\n    }\n  });\n\n  return weight;\n}\n\n/**\n * @internal\n */\nfunction isIgnoredSearchParam(key: string): boolean {\n  return key.startsWith('__') && key.endsWith('__');\n}\n\n/**\n * @internal\n */\nconst NavLinkRenderSchedule__symbol = (/*#__PURE__*/ Symbol('nav-link-render-schedule'));\n\n/**\n * @internal\n */\nconst defaultActiveNavLinkClass: QualifiedName = ['active', Wesib__NS];\n\n/**\n * @internal\n */\ninterface RenderedElement extends Element {\n\n  [NavLinkRenderSchedule__symbol]?: RenderSchedule;\n\n}\n\n/**\n * @internal\n */\nfunction activateNavLink(\n    context: ComponentContext,\n    def: ActivateNavLinkDef,\n): (opts: NavLinkOpts) => ActiveNavLink {\n\n  const scheduler = context.get(ElementRenderScheduler);\n  const { render, active = defaultActiveNavLinkClass } = def;\n  const activeClass = css__naming.name(active, context.get(DefaultNamespaceAliaser));\n  const activate = def.activate ? def.activate.bind(def) : noop;\n  const assignClass = (active: boolean, { node }: { node: ElementNode }): void => {\n\n    const { element } = node as { element: Element };\n    const { classList } = element;\n\n    if (active) {\n      classList.add(activeClass);\n    } else {\n      classList.remove(activeClass);\n    }\n  };\n\n  return opts => {\n\n    const { element } = opts.node as { element: RenderedElement };\n    const schedule = element[NavLinkRenderSchedule__symbol]\n        || (element[NavLinkRenderSchedule__symbol] = scheduler(render));\n    const makeActive = (active: boolean): void => {\n      schedule(() => assignClass(active, opts));\n      activate(active, opts);\n    };\n\n    makeActive(true);\n\n    let lastSupply: Supply | undefined;\n\n    return {\n      supply(): Supply {\n\n        const supply = lastSupply = new Supply(() => {\n          if (lastSupply === supply) {\n            makeActive(false);\n          }\n        });\n\n        return supply;\n      },\n    };\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { onceAfter } from '@proc7ts/fun-events';\nimport { Class, setOfElements } from '@proc7ts/primitives';\nimport { Component, ComponentClass, ComponentContext, ComponentDecorator } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\n\n/**\n * Creates component decorator that handles events (e.g. clicks) on navigation links.\n *\n * Such events would lead to {@link Navigation navigation actions} instead of default ones.\n *\n * @typeParam T - A type of decorated component class.\n * @param def - Navigation links handler definition.\n *\n * @returns New component decorator.\n */\nexport function HandleNavLinks<T extends ComponentClass = Class>(\n    def: HandleNavLinksDef<InstanceType<T>> = {},\n): ComponentDecorator<T> {\n\n  const handle = def.handle ? def.handle.bind(def) : defaultHandleNavLinks(def);\n  const events = setOfElements(def.event || 'click');\n\n  return Component({\n    define(defContext) {\n      defContext.whenComponent(context => {\n        context.whenConnected(() => {\n\n          const navigation = context.get(Navigation);\n\n          for (const eventType of events) {\n            context.on(eventType)(event => {\n              navigation.read.do(onceAfter)(\n                  page => handle({\n                    event,\n                    page,\n                    context,\n                    navigation,\n                  }),\n              );\n            });\n          }\n        });\n      });\n    },\n  });\n}\n\n/**\n * Navigation links handler definition.\n *\n * @typeParam T - A type of component.\n */\nexport interface HandleNavLinksDef<T extends object = any> {\n\n  /**\n   * Type or types of events to handle.\n   *\n   * `click` by default.\n   */\n  readonly event?: string | readonly string[];\n\n  /**\n   * Handles event by performing navigation action.\n   *\n   * Every {@link event} sent by one of elements inside decorated component is passed to this function. In response\n   * it may perform a navigation event.\n   *\n   * By default handles events on anchor tags. When such tag contains an `href` attribute containing same-origin URL\n   * it {@link Navigation.open opens} a page at this URL instead of default action. It also prevents navigation\n   * if URL didn't change.\n   *\n   * @param event - A click event to handle.\n   * @param page - Current navigation page.\n   * @param navigation - Navigation service to use.\n   * @param context - Component context.\n   */\n  handle?(\n      {\n        event,\n        page,\n        navigation,\n        context,\n      }: {\n        event: Event;\n        page: Page;\n        navigation: Navigation;\n        context: ComponentContext<T>;\n      },\n  ): void;\n\n  /**\n   * Extracts hyper-reference of clicked element.\n   *\n   * Extracts hyper-reference from `href` attribute of event target.\n   *\n   * @param event - A click event to handle.\n   *\n   * @returns Extracted hyper-reference, or nothing if it can not be extracted. Event will be ignored in this case.\n   */\n  href?(event: Event): string | undefined | null;\n\n}\n\n/**\n * @internal\n */\nfunction defaultNavLinkHref(event: Event): string | null {\n\n  const target = event.target as Element;\n\n  return target.getAttribute('href');\n}\n\n/**\n * @internal\n */\nfunction defaultHandleNavLinks(\n    def: HandleNavLinksDef,\n): (\n    opts: {\n      event: Event;\n      page: Page;\n      navigation: Navigation;\n    },\n) => void {\n\n  const getHref = def.href ? def.href.bind(def) : defaultNavLinkHref;\n\n  return ({\n    event,\n    page,\n    navigation,\n  }) => {\n\n    const href = getHref(event);\n\n    if (href == null) {\n      return;\n    }\n\n    const target = event.target as Element;\n    const pageURL = page.url;\n    const url = new URL(href, target.ownerDocument.baseURI);\n\n    if (url.origin !== pageURL.origin) {\n      return; // External link\n    }\n\n    event.preventDefault();\n    if (pageURL.href !== url.href) {\n      navigation.open(href).catch(console.error);\n    }\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { itsEach, overArray } from '@proc7ts/push-iterator';\nimport { isElement } from '@wesib/wesib';\n\n/**\n * Imports DOM node from one document to another.\n *\n * @typeParam TNode - DOM node type.\n * @param from - The node to import.\n * @param to - The node to append imported node to.\n * @param importContent - A function that imports nodes nested in parent element. {@link importNodeContent} by default.\n *\n * @returns Imported node.\n */\nexport function importNode<TNode extends Node>(\n    from: TNode,\n    to: Node,\n    importContent?: (this: void, from: TNode, to: TNode) => void,\n): TNode;\n\n/**\n * Imports DOM node from one document to another and inserts it before the given node.\n *\n * @typeParam TNode - DOM node type.\n * @param from - The node to import.\n * @param to - The node to append imported node to.\n * @param before - The node to insert imported node before, or `null` to append it to the end of target one.\n * @param importContent - A function that imports nodes nested in parent element. {@link importNodeContent} by default.\n *\n * @returns Imported node.\n */\nexport function importNode<TNode extends Node>(\n    from: TNode,\n    to: Node,\n    before?: Node | null,\n    importContent?: (this: void, from: TNode, to: TNode) => void,\n): TNode;\n\nexport function importNode<TNode extends Node>(\n    from: TNode,\n    to: Node,\n    beforeOrImport?: Node | null | ((this: void, from: TNode, to: TNode) => void),\n    importContent: (this: void, from: TNode, to: TNode) => void = importNodeContent,\n): TNode {\n\n  let before: Node | null;\n\n  if (typeof beforeOrImport === 'function') {\n    importContent = beforeOrImport;\n    before = null;\n  } else {\n    before = beforeOrImport || null;\n  }\n\n  const doc = to.ownerDocument!;\n\n  if (isElement(from)) {\n\n    const elementClone = doc.createElement(from.tagName.toLowerCase()) as Node as (Element & TNode);\n\n    from.getAttributeNames().forEach(attr => elementClone.setAttribute(attr, from.getAttribute(attr)!));\n    importContent(from, elementClone);\n    to.insertBefore(elementClone, before);\n\n    return elementClone;\n  }\n\n  const nodeClone = doc.importNode(from, false);\n\n  to.insertBefore(nodeClone, before);\n\n  return nodeClone;\n}\n\n/**\n * Imports DOM node contents from one document to another.\n *\n * @param from - The node which contents to import.\n * @param to - The node to append imported nodes to.\n */\nexport function importNodeContent(from: Node, to: Node): void {\n  itsEach(\n      overArray(from.childNodes),\n      node => importNode(node, to),\n  );\n}\n","import { OnEvent, onEventBy, supplyOn, trackValue, valueOn_ } from '@proc7ts/fun-events';\nimport { asis, Supply } from '@proc7ts/primitives';\nimport { Page } from '../page';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nexport function cachingPageLoader(loader: PageLoader): PageLoader {\n\n  let state: {\n    readonly url: string;\n    readonly on: OnEvent<[PageLoadResponse]>;\n    readonly sup: Supply;\n  } | undefined;\n\n  return page => {\n\n    const url = pageUrl(page);\n\n    if (state) {\n      if (state.url === url) {\n        return state.on;\n      }\n      state.sup.off();\n    }\n\n    let tracked: {\n      readonly on: OnEvent<[PageLoadResponse]>;\n      num: number;\n    } | undefined;\n    const supply = new Supply(() => {\n      state = undefined;\n      tracked = undefined;\n    });\n\n    const on = onEventBy<[PageLoadResponse]>(receiver => {\n      if (!tracked) {\n\n        const onLoad = loader(page);\n        const tracker = trackValue<PageLoadResponse>();\n        const trackSupply = onLoad(resp => {\n          tracker.it = resp;\n        }).whenOff(reason => {\n          // Error drops page cache, unlike successful page load.\n          if (reason != null) {\n            supply.off(reason);\n          }\n        });\n\n        supply.cuts(trackSupply).cuts(tracker);\n\n        tracked = {\n          on: tracker.read.do(valueOn_(asis)),\n          num: 0,\n        };\n      }\n\n      const requested = tracked;\n\n      ++requested.num;\n\n      return requested.on.do(supplyOn(supply))(receiver).whenOff(reason => {\n        if (!--requested.num) {\n          // Allow to request the same page again\n          Promise.resolve().then(() => {\n            if (!requested.num && requested === tracked) {\n              supply.off(reason);\n            }\n          }).catch(console.error);\n        }\n      });\n    });\n\n    state = { url, on, sup: supply };\n\n    return on;\n  };\n}\n\nfunction pageUrl(page: Page): string {\n  return new URL('', page.url).href;\n}\n","import {\n  EventEmitter,\n  eventReceiver,\n  EventReceiver,\n  mapOn_,\n  OnEvent,\n  onEventBy,\n  shareOn,\n  supplyOn,\n} from '@proc7ts/fun-events';\nimport { neverSupply, noop, Supply } from '@proc7ts/primitives';\nimport { flatMapIt, itsEach, itsEvery, overIterator, PushIterable } from '@proc7ts/push-iterator';\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { PageFragmentRequest, PageLoadRequest } from './page-load-request';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nexport interface PageLoadReq extends PageLoadRequest {\n\n  readonly receiver: EventReceiver.Generic<[PageLoadResponse]>;\n\n}\n\nclass PageLoadAbortError extends Error {}\n\nclass PageLoadRequestsParam$ extends PageParam<PageLoadRequests, PageLoadRequests> {\n\n  create(\n      _page: Page,\n      requests: PageLoadRequests,\n  ): PageParam.Handle<PageLoadRequests, PageLoadRequests> {\n    return {\n      get() {\n        return requests;\n      },\n      put: noop,\n    };\n  }\n\n}\n\n/**\n * @internal\n */\nexport const PageLoadRequestsParam: PageParam<PageLoadRequests, PageLoadRequests> = new PageLoadRequestsParam$();\n\n/**\n * @internal\n */\nexport class PageLoadRequests {\n\n  private readonly _map = new Map<Supply, PageLoadReq[]>();\n  private readonly _requests: PushIterable<PageLoadReq>;\n\n  constructor(\n      private readonly _navigation: Navigation,\n      private readonly _loader: PageLoader,\n  ) {\n    this._requests = flatMapIt(overIterator(() => this._map.values()));\n  }\n\n  get fragments(): readonly PageFragmentRequest[] {\n\n    const result: PageFragmentRequest[] = [];\n\n    if (!itsEvery(\n        this._requests,\n        request => {\n          if (!request.fragment) {\n            return false;\n          }\n          result.push(request.fragment);\n          return true;\n        },\n    )) {\n      return [];\n    }\n\n    return result;\n  }\n\n  handle(): PageParam.Handle<void, PageLoadRequest> {\n\n    const self = this;\n    const pageSupply = new Supply();\n    let loadSupply = neverSupply();\n\n    return {\n      get() {/* void */},\n      put(request: PageLoadRequest): void {\n        self._add(request);\n      },\n      transfer(to: Page, when) {\n        if (when === 'pretend') {\n          return;\n        }\n\n        const transferred = self._transfer();\n\n        to.put(PageLoadRequestsParam, transferred);\n\n        return transferred.handle();\n      },\n      enter(page: Page, when: 'init' | 'open' | 'replace' | 'return'): void {\n        if (when === 'init') {\n          // The page is loaded already. No need to fetch it.\n          return;\n        }\n\n        loadSupply = new Supply().needs(pageSupply);\n\n        const onLoad = onEventBy<[PageLoadResponse]>(responseReceiver => {\n\n          const emitter = new EventEmitter<[PageLoadResponse]>();\n          const supply = emitter.on(responseReceiver);\n\n          self._loader(page).do(supplyOn(loadSupply))(\n              response => emitter.send(response),\n          ).whenOff(error => {\n            if (error !== undefined && !(error instanceof PageLoadAbortError)) {\n              // Report current page load error as failed load response\n              emitter.send({\n                ok: false as const,\n                page,\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                error,\n              });\n            }\n          });\n\n          return supply;\n        }).do(shareOn);\n\n        itsEach(\n            self._requests,\n            ({ fragment, receiver }) => onFragment(onLoad, fragment)({\n              supply: new Supply().needs(receiver.supply),\n              receive(context, response): void {\n                receiver.receive(context, response);\n              },\n            }),\n        );\n      },\n      leave(): void {\n        loadSupply.off(new PageLoadAbortError('page left'));\n      },\n      stay() {\n        pageSupply.off(new PageLoadAbortError('navigation cancelled'));\n      },\n      forget() {\n        pageSupply.off(new PageLoadAbortError('page forgotten'));\n      },\n    };\n\n  }\n\n  private _add(request: PageLoadRequest): void {\n\n    const req = { ...request, receiver: eventReceiver(request.receiver) };\n    const { supply } = req.receiver;\n    const list = this._map.get(supply);\n\n    if (list) {\n      list.push(req);\n    } else {\n      this._map.set(supply, [req]);\n      supply.whenOff(() => this._map.delete(supply));\n    }\n  }\n\n  private _transfer(): PageLoadRequests {\n\n    const transferred = new PageLoadRequests(this._navigation, this._loader);\n\n    for (const [supply, list] of this._map.entries()) {\n      transferred._map.set(supply, list.slice());\n    }\n\n    return transferred;\n  }\n\n}\n\nfunction onFragment(\n    onLoad: OnEvent<[PageLoadResponse]>,\n    fragment?: PageFragmentRequest,\n): OnEvent<[PageLoadResponse]> {\n  return fragment\n      ? onLoad.do(\n          mapOn_(\n              response => response.ok\n                  ? {\n                    ...response,\n                    fragment: (\n                        fragment.tag != null\n                            ? response.document.getElementsByTagName(fragment.tag)[0]\n                            : response.document.getElementById(fragment.id)\n                    ) || undefined,\n                  }\n                  : response,\n          ),\n      )\n      : onLoad;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { EventSender, OnEvent } from '@proc7ts/fun-events';\nimport { FetchAgentKey } from '../../fetch/fetch-agent-key.impl';\nimport { PageLoadResponse } from './page-load-response';\n\n/**\n * Page load agent signature.\n *\n * The agent can be used to alter loaded page document processing. For that it should be registered in appropriate\n * context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by page loader.\n */\nexport type PageLoadAgent =\n/**\n * @param next - Either calls the next agent in chain, or actually loads page document if this agent is the last one.\n * Accepts an optional `Request` parameter. The original request will be used instead when omitted.\n * @param request - HTTP request.\n *\n * @returns An `EventSender` of page load response. It is returned either to preceding agent in chain, or as a loaded\n * document.\n */\n    (\n        this: void,\n        next: (this: void, request?: Request) => OnEvent<[PageLoadResponse]>,\n        request: Request,\n    ) => EventSender<[PageLoadResponse]>;\n\nexport namespace PageLoadAgent {\n\n  /**\n   * Combined page load agent signature.\n   *\n   * This is what is available under {@link PageLoadAgent} key.\n   */\n  export type Combined =\n  /**\n   * @param next - Either calls the next agent in chain, or actually loads page document if this agent is the last one.\n   * Accepts `Request` parameter.\n   * @param request - HTTP request.\n   *\n   * @returns An `OnEvent` sender of page load response.\n   */\n      (\n          this: void,\n          next: (this: void, request: Request) => OnEvent<[PageLoadResponse]>,\n          request: Request,\n      ) => OnEvent<[PageLoadResponse]>;\n\n}\n\n/**\n * A key of context value containing an {@link PageLoadAgent} instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the fetch.\n */\nexport const PageLoadAgent: ContextUpRef<PageLoadAgent.Combined, PageLoadAgent> = (\n    /*#__PURE__*/ new FetchAgentKey<[PageLoadResponse]>('page-load-agent')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextUpRef, FnContextKey } from '@proc7ts/context-values/updatable';\nimport { noop, valueProvider } from '@proc7ts/primitives';\n\n/**\n * A signature of page load URL modifier function.\n *\n * All such functions registered in bootstrap context are called in order of their registration with current page URL.\n * They are able to modify it, e.g. by applying additional URL search parameters. The modified URL is used then to load\n * the page.\n */\nexport type PageLoadURLModifier =\n/**\n * @param url - An URL of page to load.\n */\n    (this: void, url: URL) => void;\n\n/**\n * A key of bootstrap context value containing a page load URL modifier.\n *\n * Does not modify URL by default.\n */\nexport const PageLoadURLModifier: ContextUpRef<PageLoadURLModifier, PageLoadURLModifier> = (\n    /*#__PURE__*/ new FnContextKey('page-load-url', { byDefault: valueProvider(noop) })\n);\n","import { hthvParse, hthvQuote } from '@hatsy/http-header-value';\nimport { SingleContextKey } from '@proc7ts/context-values';\nimport { afterThe, digOn_, EventNotifier, mapOn_, OnEvent, onEventBy, resolveOnOrdered } from '@proc7ts/fun-events';\nimport { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { HttpFetch } from '../../fetch';\nimport { Page } from '../page';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadRequestsParam } from './page-load-requests.impl';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\n\n/**\n * @internal\n */\nexport type PageLoader = (this: void, page: Page) => OnEvent<[PageLoadResponse]>;\n\n/**\n * @internal\n */\nexport const PageLoader = (/*#__PURE__*/ new SingleContextKey<PageLoader>(\n    'page-loader',\n    {\n      byDefault: bootstrapDefault(newPageLoader),\n    },\n));\n\nfunction newPageLoader(context: BootstrapContext): PageLoader {\n\n  const window = context.get(BootstrapWindow);\n  const httpFetch = context.get(HttpFetch);\n  const modifyURL = context.get(PageLoadURLModifier);\n  const agent = context.get(PageLoadAgent);\n  const parser = new window.DOMParser();\n\n  return page => {\n\n    const url = new URL(page.url.href);\n\n    modifyURL(url);\n\n    const request = new Request(\n        url.href,\n        {\n          mode: 'same-origin',\n          credentials: 'same-origin',\n          headers: new Headers({ Accept: 'text/html' }),\n        },\n    );\n\n    return onEventBy(receiver => agent(fetch, request)(receiver));\n\n    function fetch(fetchRequest: Request): OnEvent<[PageLoadResponse]> {\n      requestPageFragments(page, fetchRequest);\n\n      return onEventBy<[PageLoadResponse]>(receiver => {\n\n        const dispatcher = new EventNotifier<[PageLoadResponse]>();\n\n        dispatcher.on(receiver);\n        dispatcher.send({ page });\n\n        httpFetch(fetchRequest).do(\n            mapOn_(response => Promise.all([response, response.text()])),\n            resolveOnOrdered,\n            digOn_((...batch: [Response, string][]) => afterThe<[Response, string][]>(...batch)),\n            mapOn_(([response, text]): PageLoadResponse => {\n              if (!response.ok) {\n                return {\n                  ok: false as const,\n                  page,\n                  response,\n                  error: response.status,\n                };\n              }\n              try {\n                return {\n                  ok: true as const,\n                  page,\n                  response,\n                  document: parsePageDocument(parser, url, response, text),\n                };\n              } catch (error) {\n                return {\n                  ok: false as const,\n                  page,\n                  response,\n                  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                  error,\n                };\n              }\n            }),\n        )(receiver);\n      });\n    }\n  };\n}\n\nfunction requestPageFragments(page: Page, request: Request): void {\n\n  const fragments = page.get(PageLoadRequestsParam)?.fragments;\n\n  if (fragments && fragments.length) {\n    request.headers.set(\n        'Accept-Fragment',\n        fragments.reduce(\n            (header, fragment) => (header ? header + ', ' : '') + (\n                fragment.tag != null\n                    ? 'tag=' + hthvQuote(fragment.tag)\n                    : 'id=' + hthvQuote(fragment.id)\n            ),\n            '',\n        ),\n    );\n  }\n}\n\nfunction parsePageDocument(parser: DOMParser, url: URL, response: Response, text: string): Document {\n\n  const doc = parser.parseFromString(\n      text,\n      hthvParse(response.headers.get('Content-Type') || 'text/html')[0].v as DOMParserSupportedType,\n  );\n\n  if (doc.head) {\n\n    const base = doc.head.querySelector('base');\n\n    if (base) {\n      base.href = new URL(base.getAttribute('href')!, url).href;\n    } else {\n\n      const newBase = doc.createElement('base');\n\n      newBase.href = url.href;\n\n      doc.head.appendChild(newBase);\n    }\n  }\n\n  return doc;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { PageParamContext } from '../page-param-context';\nimport { cachingPageLoader } from './caching-page-loader.impl';\nimport { PageLoadRequest } from './page-load-request';\nimport { PageLoadRequests, PageLoadRequestsParam } from './page-load-requests.impl';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nclass PageLoadParam$ extends PageParam<void, PageLoadRequest> {\n\n  create(page: Page, request: PageLoadRequest, context: PageParamContext): PageParam.Handle<void, PageLoadRequest> {\n\n    const requests = new PageLoadRequests(context.get(Navigation), cachingPageLoader(context.get(PageLoader)));\n    const handle = requests.handle();\n\n    page.put(PageLoadRequestsParam, requests);\n    handle.put(request);\n\n    return handle;\n  }\n\n}\n\n/**\n * Page load parameter.\n *\n * Accepts a {@link PageLoadRequest page load request} as input.\n *\n * A page load is initiated whenever a page with new address is {@link Navigation.onEnter entered}.\n *\n * Page load won't be initiated if:\n * - page load parameter is not {@link Page.put} added,\n * - all added {@link PageLoadRequest.receiver response receiver}s supplies are cut off, or\n * - the entered page address is the the same one as previous one, except the hash,\n */\nexport const PageLoadParam: PageParam<void, PageLoadRequest> = (/*#__PURE__*/ new PageLoadParam$());\n","import { ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { AfterEvent, afterThe, mapOn_ } from '@proc7ts/fun-events';\nimport { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { Navigation } from '../navigation';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\n\nconst PageCacheBuster__key = (/*#__PURE__*/ new SingleContextKey<PageCacheBuster>(\n    'page-cache-buster',\n    {\n      byDefault: bootstrapDefault(context => new PageCacheBuster(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport const appRevSearchParam = '__wesib_app_rev__';\n\n/**\n * @internal\n */\nexport class PageCacheBuster {\n\n  static get [ContextKey__symbol](): SingleContextKey<PageCacheBuster> {\n    return PageCacheBuster__key;\n  }\n\n  readonly urlModifier: AfterEvent<PageLoadURLModifier[]>;\n  readonly agent: AfterEvent<PageLoadAgent[]>;\n\n  constructor(context: BootstrapContext) {\n\n    const rev = appRev(context.get(BootstrapWindow).document);\n\n    if (!rev) {\n      this.urlModifier = afterThe();\n      this.agent = afterThe();\n    } else {\n\n      const navigation = context.get(Navigation);\n\n      this.urlModifier = afterThe(url => url.searchParams.set(appRevSearchParam, rev));\n      this.agent = afterThe(\n          (next, request) => next(new Request(request.url, request)).do(\n              mapOn_(response => {\n                    if (response.ok) {\n\n                      const newRev = appRev(response.document);\n\n                      if (newRev && newRev !== rev) {\n\n                        const url = new URL(response.page.url.href);\n\n                        url.searchParams.set(appRevSearchParam, newRev);\n                        navigation.update(url);\n                        navigation.reload();\n                      }\n                    }\n\n                    return response;\n                  }),\n          ),\n      );\n    }\n  }\n\n}\n\nfunction appRev(doc: Document): string | null | undefined {\n  return doc.querySelector('meta[name=wesib-app-rev]')?.getAttribute('content');\n}\n","import { mapOn_ } from '@proc7ts/fun-events';\nimport { filterArray, filterIt, itsEach, mapIt, PushIterable } from '@proc7ts/push-iterator';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { importNode } from '../../util';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageScriptsAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().do(\n      mapOn_(response => {\n        if (response.ok) {\n\n          const allScripts = new Set<string>(mapIt(\n              externalScripts(doc, doc.scripts),\n              ([src]) => src,\n          ));\n\n          itsEach(\n              filterIt(\n                  externalScripts(response.document, response.document.querySelectorAll('script')),\n                  ([src]) => !allScripts.has(src),\n              ),\n              ([src, script]) => {\n                importNode(script, doc.head, (_from, to) => to.src = src);\n                allScripts.add(src);\n              },\n          );\n        }\n        return response;\n      }),\n  );\n}\n\nfunction externalScripts(\n    doc: Document,\n    scripts: ArrayLike<HTMLScriptElement>,\n): PushIterable<readonly [string, HTMLScriptElement]> {\n  return mapIt(\n      filterArray(scripts, ({ src }) => !!src),\n      script => [new URL(script.src, doc.baseURI).href, script] as const,\n  );\n}\n","import { mapOn_ } from '@proc7ts/fun-events';\nimport { itsEach, itsFirst, overArray } from '@proc7ts/push-iterator';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { importNode } from '../../util';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageStyleAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().do(\n      mapOn_(response => {\n        if (!response.ok) {\n          return response;\n        }\n\n        const newStyles = response.document.querySelectorAll<HTMLLinkElement>('link[rel=stylesheet]');\n\n        if (!newStyles.length) {\n          return response;\n        }\n\n        let target: Node = doc.head;\n        let before: Node | null = null;\n        const oldStyles = doc.querySelectorAll<HTMLLinkElement>('link[rel=stylesheet]');\n        const oldStylesByHref = new Map<string, HTMLLinkElement>();\n        const firstOldStyle = oldStyles.item(0);\n\n        if (firstOldStyle) {\n          target = firstOldStyle.parentNode!;\n          before = firstOldStyle;\n          itsEach(\n              overArray(oldStyles),\n              link => oldStylesByHref.set(new URL(link.href, doc.baseURI).href, link),\n          );\n        }\n\n        itsEach(\n            overArray(newStyles),\n            newStyle => {\n\n              const href = new URL(newStyle.href, doc.baseURI).href;\n              const oldStyle = oldStylesByHref.get(href);\n\n              if (oldStyle) {\n                // Style already exists.\n                if (itsFirst(oldStylesByHref.keys()) === href) {\n                  // In proper position already.\n                  // Insert the remaining styles after it.\n                  target = oldStyle.parentNode!;\n                  before = oldStyle.nextSibling;\n                } else {\n                  // Move to proper position.\n                  target.insertBefore(oldStyle, before);\n                }\n                oldStylesByHref.delete(href);\n              } else {\n                // Import new style\n                importNode(newStyle, target, before, (_from, to) => to.href = href);\n              }\n            },\n        );\n\n        // Remove remaining old styles\n        itsEach(oldStylesByHref.values(), style => style.parentNode!.removeChild(style));\n\n        return response;\n      }),\n  );\n}\n","import { mapOn_ } from '@proc7ts/fun-events';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageTitleAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().do(mapOn_(response => {\n    if (response.ok) {\n\n      const title = response.document.getElementsByTagName('title').item(0);\n\n      if (title && title.textContent) {\n        doc.title = title.textContent;\n      }\n    }\n\n    return response;\n  }));\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { PageCacheBuster } from './page-cache-buster.impl';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\nimport { pageScriptsAgent } from './page-scripts-agent.impl';\nimport { pageStyleAgent } from './page-style-agent.impl';\nimport { pageTitleAgent } from './page-title-agent.impl';\n\n/**\n * @internal\n */\nconst PageLoadSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.provide({\n      a: PageLoadURLModifier,\n      by: (buster: PageCacheBuster) => buster.urlModifier,\n      with: [PageCacheBuster],\n    });\n    setup.provide({\n      a: PageLoadAgent,\n      by: (buster: PageCacheBuster) => buster.agent,\n      with: [PageCacheBuster],\n    });\n    setup.provide({ a: PageLoadAgent, by: pageScriptsAgent });\n    setup.provide({ a: PageLoadAgent, by: pageStyleAgent });\n    setup.provide({ a: PageLoadAgent, by: pageTitleAgent });\n  },\n};\n\n/**\n * Page load support feature.\n *\n * Enables default {@link PageLoadAgent page load agents}:\n * 1. Page cache busting agent.\n *    If `<meta name=\"wesib-app-rev\">` tag is present in initial page, then sends this tag's content with each page load\n *    request as `__wesib_app_rev__` search parameter. If the loaded page contains the same named meta tag with\n *    different content, then reloads the page.\n *    This serves both as cache busting technique, and as server-side application updates handler.\n * 2. Scripts agent.\n *    Includes external scripts from loaded page into main document.\n * 3. Style agent.\n *    Replaces external styles of main document styles with the ones from loaded page.\n *    Unless loaded page has no external styles.\n * 4. Title agent.\n *    Applies loaded page title to bootstrap window. If there is one.\n */\nexport class PageLoadSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return PageLoadSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { onceAfter } from '@proc7ts/fun-events';\nimport { Class, noop, Supply, valueProvider } from '@proc7ts/primitives';\nimport {\n  BootstrapWindow,\n  Component,\n  ComponentClass,\n  ComponentContext,\n  ComponentDecorator,\n  ElementRenderScheduler,\n  RenderDef,\n} from '@wesib/wesib';\nimport { importNodeContent } from '../../util';\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageLoadParam } from './page-load-param';\nimport { PageFragmentRequest } from './page-load-request';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoadSupport } from './page-load-support.feature';\n\n/**\n * Creates component decorator that includes page contents into decorated component's element.\n *\n * The page is loaded and included whenever it is {@link Navigation.onEnter entered}.\n *\n * Utilizes {@link PageLoadParam} navigation parameter.\n *\n * Enables {@link PageLoadSupport} feature.\n *\n * @typeParam T - A type of decorated component class.\n * @param def - Page inclusion definition.\n *\n * @returns New component decorator.\n */\nexport function IncludePage<T extends ComponentClass = Class>(\n    def: IncludePageDef<InstanceType<T>> = {},\n): ComponentDecorator<T> {\n\n  const onResponse = def.onResponse ? def.onResponse.bind(def) : noop;\n  const contentKey: (page: Page) => string | undefined = def.contentKey\n      ? def.contentKey.bind(def)\n      : defaultPageContentKey;\n\n  return Component({\n    feature: {\n      needs: [PageLoadSupport],\n    },\n    define(context) {\n      context.whenComponent(context => {\n\n        const { fragment, render } = def;\n        const document = context.get(BootstrapWindow).document;\n        const schedule = context.get(ElementRenderScheduler)(render);\n        const navigation = context.get(Navigation);\n        let lastPageURL = contentKey(navigation.page);\n        let detectFragment: () => PageFragmentRequest;\n\n        if (fragment) {\n          detectFragment = valueProvider(fragment);\n        } else {\n          detectFragment = () => {\n\n            const { element: { id, tagName: tag } } = context as { element: Element };\n\n            return id ? { id } : { tag };\n          };\n        }\n\n        context.whenConnected(() => {\n\n          const range = document.createRange();\n\n          range.selectNodeContents(context.contentRoot);\n\n          navigation.read.do(onceAfter)(page => {\n            page.put(\n                PageLoadParam,\n                {\n                  fragment: detectFragment(),\n                  receiver: {\n                    supply: new Supply().needs(context),\n                    receive: (_ctx, response) => handleResponse(response),\n                  },\n                },\n            );\n          });\n\n          function handleResponse(response: PageLoadResponse): void {\n\n            const newPageURL = contentKey(response.page);\n\n            if (newPageURL === lastPageURL) {\n              return; // Only hash changed. Do not refresh the page.\n            }\n\n            if (!response.ok) {\n              schedule(() => onResponse({ context, range, response }));\n              return;\n            }\n\n            lastPageURL = newPageURL;\n            schedule(() => {\n              range.deleteContents();\n\n              const target = document.createDocumentFragment();\n              const { fragment } = response;\n\n              if (fragment) {\n                importNodeContent(fragment, target);\n                range.insertNode(target);\n              }\n\n              onResponse({ context, range, response });\n            });\n          }\n        });\n      });\n    },\n  });\n}\n\n/**\n * @internal\n */\nfunction defaultPageContentKey({ url }: Page): string {\n  return new URL('', url).href;\n}\n\n/**\n * Page inclusion definition.\n *\n * Configures {@link IncludePage @LoadPage} decorator.\n *\n * @typeParam T - A type of component.\n */\nexport interface IncludePageDef<T extends object = any> {\n\n  /**\n   * Page fragment to include.\n   *\n   * By default uses custom element identifier if present, or element tag name otherwise.\n   */\n  readonly fragment?: PageFragmentRequest;\n\n  /**\n   * Rendering options.\n   */\n  readonly render?: RenderDef.Options;\n\n  /**\n   * Builds content key for the given page.\n   *\n   * The loaded content will replace already included one only when their content key differ.\n   *\n   * By default uses page URL without hash part as a key. This prevents content refresh when only URL hash changes.\n   *\n   * @param page - Target page. Either loaded or not.\n   *\n   * @returns Content key.\n   */\n  contentKey?(page: Page): any;\n\n  /**\n   * Performs additional actions during page load.\n   *\n   * This method is called inside page contents render schedule for {@link PageLoadResponse each stage} of page\n   * load. At the final stage it is called after loaded page contents included.\n   *\n   * This method can be used e.g. to indicate the page load progress.\n   *\n   * @param context - Decorated component context.\n   * @param response - Page load response.\n   * @param range - Document range the loaded page contents going to replace.\n   */\n  onResponse?(\n      {\n        context,\n        response,\n        range,\n      }: {\n        context: ComponentContext<T>;\n        response: PageLoadResponse;\n        range: Range;\n      },\n  ): void;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { InConverter, InNamespaceAliaser, InRenderScheduler, intoConvertedBy } from '@frontmeans/input-aspects';\nimport { ContextSupply, ContextValueSlot } from '@proc7ts/context-values';\nimport { ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, EventKeeper, mapAfter, supplyAfter } from '@proc7ts/fun-events';\nimport { DefaultNamespaceAliaser, ElementRenderScheduler } from '@wesib/wesib';\n\n/**\n * Default input aspects.\n *\n * This is an `AfterEvent` keeper of aspect converter meant to be applied to controls.\n *\n * As a bare minimum it assigns the following aspects to converted controls:\n * - `InRenderScheduler` set to `ElementRenderScheduler`,\n * - `InNamespaceAliaser` set to `DefaultNamespaceAliaser.\n *\n * More input aspect converters may be registered in context. They may override the default ones.\n */\nexport type DefaultInAspects = AfterEvent<[InConverter.Aspect<any, any>]>;\n\n/**\n * @internal\n */\nclass DefaultInAspectsKey\n    extends ContextUpKey<AfterEvent<[InConverter.Aspect<any, any>]>, InConverter.Aspect<any, any>> {\n\n  get upKey(): this {\n    return this;\n  }\n\n  constructor() {\n    super('default-in-aspects');\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          AfterEvent<[InConverter.Aspect<any, any>]>,\n          EventKeeper<InConverter.Aspect<any, any>[]> | InConverter.Aspect<any, any>,\n          AfterEvent<InConverter.Aspect<any, any>[]>>,\n  ): void {\n\n    const nsAlias = slot.context.get(DefaultNamespaceAliaser);\n    const scheduler = slot.context.get(ElementRenderScheduler);\n\n    slot.insert(\n        slot.seed.do(\n            mapAfter((...fns) => intoConvertedBy(\n                ...fns,\n                InRenderScheduler.to(scheduler),\n                InNamespaceAliaser.to(nsAlias),\n            )),\n            supplyAfter(slot.context.get(ContextSupply)),\n        ),\n    );\n  }\n\n}\n\n/**\n * A key of component context containing default input aspects.\n */\nexport const DefaultInAspects: ContextUpRef<DefaultInAspects, InConverter.Aspect<any, any>> = (\n    /*#__PURE__*/ new DefaultInAspectsKey()\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { InControl } from '@frontmeans/input-aspects';\nimport { SingleContextUpKey, SingleContextUpRef } from '@proc7ts/context-values/updatable';\nimport { Supply } from '@proc7ts/primitives';\nimport { ComponentContext } from '@wesib/wesib';\nimport { HierarchyContext } from '../hierarchy';\n\n/**\n * A user input originated from control.\n *\n * It is meant to be present in root {@link HierarchyContext hierarchy context}. Nested components may access it from\n * their hierarchy contexts to participate in user input.\n *\n * An {@link inputFromControl} function can be used to initiate user input.\n *\n * @typeParam TValue - Input value type.\n */\nexport interface InputFromControl<TValue = any> {\n\n  /**\n   * Root component context the input is initiated for.\n   */\n  readonly root: ComponentContext;\n\n  /**\n   * User input control.\n   */\n  readonly control: InControl<TValue>;\n\n}\n\n/**\n * No user input originated from control.\n */\nexport interface NoInputFromControl {\n  control?: undefined;\n}\n\n/**\n * A key of hierarchy context value containing a user input originated from control. Potentially\n * {@link NoInputFromControl absent}.\n */\nexport const InputFromControl: SingleContextUpRef<InputFromControl | NoInputFromControl> = (\n    /*#__PURE__*/ new SingleContextUpKey<InputFromControl | NoInputFromControl>(\n        'input-from-control',\n        {\n          byDefault: () => ({}),\n        },\n    )\n);\n\n/**\n * Initiates user input from the given control for the given root component.\n *\n * Constructs an {@link InputFromControl} instance and makes it available in `root` component's hierarchy.\n *\n * @typeParam TValue - Input value type.\n * @param root - Root component context to initiate user input for.\n * @param control - User input control.\n *\n * @returns User input supply. The user input would be stopped once this supply is cut off.\n */\nexport function inputFromControl<TValue>(\n    root: ComponentContext,\n    control: InControl<TValue>,\n): Supply {\n  return root.get(HierarchyContext)\n      .provide({\n        a: InputFromControl,\n        by: () => ({\n          root,\n          control,\n        }),\n      })\n      .needs(root)\n      .needs(control);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { InControl, InConverter } from '@frontmeans/input-aspects';\nimport { afterAll, AfterEvent, afterThe, consumeEvents, digAfter_, EventKeeper } from '@proc7ts/fun-events';\nimport { Class, Supply } from '@proc7ts/primitives';\nimport { Component, ComponentClass, ComponentContext, ComponentDecorator } from '@wesib/wesib';\nimport { HierarchyContext } from '../hierarchy';\nimport { DefaultInAspects } from './default-in-aspects';\nimport { inputFromControl, InputFromControl, NoInputFromControl } from './input-from-control';\n\n/**\n * Constructs component decorator that converts input control from {@link HierarchyContext.up enclosing component}\n * and uses it as an {@link InputFromControl origin of user input} in decorated component.\n *\n * @param convert - Input control converter definition.\n *\n * @returns New component decorator.\n */\nexport function ConvertInput<T extends ComponentClass = Class>(\n    convert: ConvertInputDef<InstanceType<T>>,\n): ComponentDecorator<T> {\n  return Component({\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const { up } = context.get(HierarchyContext);\n\n        afterAll({\n          parent: up.do(\n              digAfter_((upper): AfterEvent<[InputFromControl | NoInputFromControl]> => upper\n                  ? upper.get(InputFromControl)\n                  : afterThe<[NoInputFromControl]>({})),\n          ),\n          aspects: context.get(DefaultInAspects),\n        }).do(\n            digAfter_(({\n              parent: [control],\n              aspects: [aspects],\n            }): EventKeeper<[InControl<any>?, Supply?]> => {\n              if (control.control) {\n\n                const converted = convert({ control, context, aspects });\n\n                if (converted) {\n                  return converted instanceof InControl ? afterThe(converted) : converted;\n                }\n              }\n\n              return afterThe();\n            }),\n            consumeEvents((control?: InControl<any> | null, supply?: Supply) => {\n              if (!control) {\n                return;\n              }\n\n              const usageSupply = inputFromControl(context, control);\n\n              (supply || control.supply).needs(usageSupply);\n\n              return usageSupply;\n            }),\n        );\n      });\n    },\n  });\n}\n\n/**\n * Converter definition of enclosing component's user input control.\n *\n * The returned converted control keeper may send an event supply as a second parameter. This supply will be cut off\n * once the input from converted control is no longer needed. Otherwise the control's input supply will be cut off\n * instead, and control would become unusable after that.\n *\n * Configures {@link ConvertInput @ConvertInput} component decorator.\n */\nexport type ConvertInputDef<T extends object = any> =\n/**\n * @param control - Enclosing component's user input to convert.\n * @param context - Decorated component context.\n * @param aspects - Default input aspect converter. This is a value of {@link DefaultInAspects}.\n *\n * @returns Either input control, its keeper, or nothing.\n */\n    (\n        this: void,\n        {\n          control,\n          context,\n          aspects,\n        }: {\n          control: InputFromControl;\n          context: ComponentContext<T>;\n          aspects: InConverter.Aspect<any, any>;\n        },\n    ) => InControl<any> | EventKeeper<[InControl<any>?, Supply?]> | null | undefined;\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { InControl, InFormElement } from '@frontmeans/input-aspects';\nimport { SingleContextUpKey, SingleContextUpRef } from '@proc7ts/context-values/updatable';\nimport { Supply } from '@proc7ts/primitives';\nimport { ComponentContext } from '@wesib/wesib';\nimport { HierarchyContext } from '../hierarchy';\nimport { InputFromControl } from './input-from-control';\n\n/**\n * A form control to fill by user input.\n *\n * An {@link inputToForm} function can be used to initiate filling the form.\n *\n * @typeParam TModel - Form model type.\n * @typeParam TElt - A type of HTML form element.\n */\nexport interface InputToForm<TModel = any, TElt extends HTMLElement = HTMLElement> extends InputFromControl<TModel> {\n\n  /**\n   * Input form element control.\n   *\n   * Unlike input form control this one is not supposed to be submitted. But it contains a `<form>` element issuing a\n   * `submit` event.\n   */\n  readonly form: InFormElement<TElt>;\n\n}\n\n/**\n * No user input filling the form.\n */\nexport interface NoInputToForm {\n  control?: undefined;\n  form?: undefined;\n}\n\n/**\n * A key of hierarchy context value containing a form element to fill by user input. Potentially\n * {@link NoInputToForm absent}.\n */\nexport const InputToForm: SingleContextUpRef<InputToForm<any, any> | NoInputToForm> = (\n    /*#__PURE__*/ new SingleContextUpKey<InputToForm<any, any> | NoInputToForm>(\n        'input-to-form',\n        {\n          byDefault: () => ({}),\n        },\n    )\n);\n\n/**\n * Initiates filling the form by user input from.\n *\n * Constructs {@link InputToForm} and {@link InputFromControl} instances and makes them available in `root` component's\n * hierarchy.\n *\n * @typeParam TModel - Form model type.\n * @typeParam TElt - A type of HTML form element.\n * @param root - Root component context to initiate user input for.\n * @param control - Input form control.\n * @param form - Form element control.\n *\n * @returns Form fill supply. The form filling would be stopped once this supply is cut off.\n */\nexport function inputToForm<TModel, TElt extends HTMLElement>(\n    root: ComponentContext,\n    control: InControl<TModel>,\n    form: InFormElement<TElt>,\n): Supply {\n\n  const hierarchy = root.get(HierarchyContext);\n  const supply = hierarchy.provide({\n    a: InputToForm,\n    by: () => ({\n      root,\n      control,\n      form,\n    }),\n  });\n\n  hierarchy.provide({\n    a: InputFromControl,\n    via: InputToForm,\n  }).needs(supply);\n\n  return supply\n      .needs(root)\n      .needs(control)\n      .needs(form);\n}\n\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { InControl, InConverter, InFormElement } from '@frontmeans/input-aspects';\nimport { afterAll, afterThe, consumeEvents, digAfter, EventKeeper } from '@proc7ts/fun-events';\nimport { Class, Supply } from '@proc7ts/primitives';\nimport { Component, ComponentClass, ComponentContext, ComponentDecorator } from '@wesib/wesib';\nimport { ComponentNode, ElementNode, ElementPickMode } from '../tree';\nimport { DefaultInAspects } from './default-in-aspects';\nimport { inputToForm } from './input-to-form';\n\n/**\n * Constructs component decorator that finds form element to {@link InputToForm fill by user input}.\n *\n * @typeParam T - A type of decorated component class.\n * @param def - Form element fill definition.\n *\n * @returns New component decorator.\n */\nexport function FillInputForm<T extends ComponentClass = Class>(\n    def: FillInputFormDef<InstanceType<T>>,\n): ComponentDecorator<T> {\n\n  const { select = 'form', pick = { deep: true, all: true } } = def;\n\n  return Component({\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const componentNode = context.get(ComponentNode);\n\n        context.whenConnected(() => {\n          afterAll({\n            node: componentNode.select(select, pick).first,\n            aspects: context.get(DefaultInAspects),\n          }).do(\n              digAfter(({\n                node: [node],\n                aspects: [aspects],\n              }): EventKeeper<[InControl<any>, InFormElement, Supply?] | []> => {\n                if (!node) {\n                  return afterThe();\n                }\n\n                const tuple = def.makeForm({ node, context, aspects });\n\n                if (!tuple) {\n                  return afterThe();\n                }\n\n                return Array.isArray(tuple) ? afterThe(...tuple) : tuple;\n              }),\n              consumeEvents((control?, form?, supply?) => {\n                if (!control) {\n                  return;\n                }\n\n                const fillSupply = inputToForm(context, control, form!);\n\n                if (supply) {\n                  supply.needs(fillSupply);\n                } else {\n                  fillSupply.cuts(form!).cuts(control);\n                }\n\n                return fillSupply;\n              }),\n          );\n        });\n      });\n    },\n  });\n}\n\n/**\n * A definition of form element to {@link InputToForm fill by user input}.\n *\n * Configures {@link FillInputForm @FillInputForm} component decorator.\n *\n * @typeParam T - A type of component.\n */\nexport interface FillInputFormDef<T extends object = any> {\n\n  /**\n   * CSS selector of form element to fill.\n   *\n   * `form` by default.\n   */\n  readonly select?: string;\n\n  /**\n   * A mode of node picking from component tree.\n   *\n   * By default picks any matching element from entire subtree.\n   */\n  readonly pick?: ElementPickMode;\n\n  /**\n   * Constructs form control and form element control for element node found by {@link FillInputForm @FillInputForm}\n   * decorator.\n   *\n   * The returned control keeper may send an event supply as a third parameter. This supply will be cut off once\n   * the form filling is no longer needed. Otherwise the form's control supply will be cut off instead,\n   * and it would become unusable after that.\n   *\n   * @param node - Element node to construct form element control for.\n   * @param context - Component context the {@link FillInputForm @FillInputForm} decorator is applied to.\n   * @param aspects - Default input aspect converter. This is a value of {@link DefaultInAspects}.\n   *\n   * @returns Either form control and form element control tuple, their keeper, or nothing.\n   */\n  makeForm(\n      {\n        node,\n        context,\n        aspects,\n      }: {\n        node: ElementNode;\n        context: ComponentContext<T>;\n        aspects: InConverter.Aspect<any, any>;\n      },\n  ):\n      | [InControl<any>, InFormElement]\n      | EventKeeper<[InControl<any>, InFormElement, Supply?] | []>\n      | null\n      | undefined;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { DomEventDispatcher, handleDomEvents } from '@frontmeans/dom-events';\nimport { consumeEvents } from '@proc7ts/fun-events';\nimport { ComponentClass, ComponentProperty, ComponentPropertyDecorator } from '@wesib/wesib';\nimport { HierarchyContext } from '../hierarchy';\nimport { InputToForm, NoInputToForm } from './input-to-form';\n\n/**\n * Creates a decorator for component method to call on input form submit.\n *\n * The decorated method accepts a {@link InputToForm filled input form} and submit event as parameters.\n *\n * @typeParam T - A type of decorated component class.\n * @typeParam TModel - Submitted model type.\n * @typeParam TElt - A type of HTML form element.\n * @param def - Submit handler definition.\n *\n * @returns New component property decorator.\n */\nexport function OnSubmit<T extends ComponentClass, TModel = any, TElt extends HTMLElement = HTMLElement>(\n    def: OnSubmitDef = {},\n): ComponentPropertyDecorator<(form: InputToForm<TModel, TElt>, event: Event) => void, T> {\n\n  const { cancel = true } = def;\n\n  return ComponentProperty(({ get }) => ({\n    componentDef: {\n      define(defContext) {\n        defContext.whenComponent(context => {\n          context.whenConnected(() => {\n\n            const hierarchy = context.get(HierarchyContext);\n            const { component } = context;\n\n            hierarchy.get(InputToForm).do(consumeEvents((inputToForm: InputToForm<TModel, TElt> | NoInputToForm) => {\n              if (!inputToForm.control) {\n                return;\n              }\n\n              const submitDispatcher = new DomEventDispatcher(inputToForm.form.element);\n\n              submitDispatcher.supply.needs(context);\n\n              const onSubmit = submitDispatcher.on('submit');\n\n              return (cancel ? onSubmit.do(handleDomEvents(false)) : onSubmit)(\n                  event => get(component).call(component, inputToForm, event),\n              );\n            }));\n          });\n        });\n      },\n    },\n  }));\n}\n\n/**\n * Form submit handler definition.\n *\n * Configures {@link OnSubmit @OnSubmit} component property decorator.\n */\nexport interface OnSubmitDef {\n\n  /**\n   * Whether to cancel default submit handler.\n   *\n   * `true` by default.\n   */\n  cancel?: boolean;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { InGroup } from '@frontmeans/input-aspects';\nimport { afterAll, afterThe, consumeEvents, digAfter_, EventKeeper, mapAfter_ } from '@proc7ts/fun-events';\nimport { Class, valueProvider } from '@proc7ts/primitives';\nimport { Component, ComponentClass, ComponentContext, ComponentDecorator } from '@wesib/wesib';\nimport { HierarchyContext } from '../hierarchy';\nimport { InputFromControl, NoInputFromControl } from './input-from-control';\n\n/**\n * Creates component decorator that adds {@link InputFromControl input control} of decorated component to input control\n * group of enclosing one under the given name.\n *\n * @typeParam T - A type of decorated component class.\n * @param name - A name to assign to component. This could be either a string, or a function returning name as a string\n * or as its keeper.\n *\n * @returns New component decorator.\n */\nexport function SetInputName<T extends ComponentClass = Class>(\n    name: string | ((this: void, context: ComponentContext<InstanceType<T>>) => string | EventKeeper<[string?]>),\n): ComponentDecorator<T> {\n\n  const getName: (context: ComponentContext<InstanceType<T>>) => EventKeeper<[string?]> = typeof name === 'string'\n      ? valueProvider(afterThe(name))\n      : context => {\n        const result = name(context);\n        return typeof result === 'string' ? afterThe(result) : result;\n      };\n\n  return Component({\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const hierarchy = context.get(HierarchyContext);\n\n        afterAll({\n          group: hierarchy.up.do(\n              digAfter_(upper => upper ? upper.get(InputFromControl) : afterThe<[NoInputFromControl]>({})),\n              mapAfter_(({ control }) => control && control.aspect(InGroup)),\n          ),\n          control: hierarchy.get(InputFromControl),\n          name: getName(context),\n        }).do(\n            consumeEvents(({\n              group: [group],\n              control: [{ control }],\n              name: [name],\n            }) => {\n              if (name == null\n                  || !group\n                  || !control\n                  || group === control) {\n                return;\n              }\n              return group.controls.set(name, control);\n            }),\n        );\n      });\n    },\n  });\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { InControl, InConverter } from '@frontmeans/input-aspects';\nimport { afterAll, afterThe, consumeEvents, digAfter, EventKeeper } from '@proc7ts/fun-events';\nimport { Class, Supply } from '@proc7ts/primitives';\nimport { Component, ComponentClass, ComponentContext, ComponentDecorator } from '@wesib/wesib';\nimport { ComponentNode, ElementNode, ElementPickMode } from '../tree';\nimport { DefaultInAspects } from './default-in-aspects';\nimport { inputFromControl } from './input-from-control';\n\n/**\n * Constructs component decorator that finds input element and uses it as an {@link InputFromControl origin of user\n * input}.\n *\n * @typeParam T - A type of decorated component class.\n * @param def - Input element usage definition.\n *\n * @returns New component decorator.\n */\nexport function UseInputElement<T extends ComponentClass = Class>(\n    def: UseInputElementDef<InstanceType<T>>,\n): ComponentDecorator<T> {\n\n  const { select = 'input', pick = { deep: true, all: true } } = def;\n\n  return Component({\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const componentNode = context.get(ComponentNode);\n\n        context.whenConnected(() => {\n          afterAll({\n            node: componentNode.select(select, pick).first,\n            aspects: context.get(DefaultInAspects),\n          }).do(\n              digAfter(({\n                node: [node],\n                aspects: [aspects],\n              }): EventKeeper<[InControl<any>?, Supply?]> => {\n                if (!node) {\n                  return afterThe();\n                }\n\n                const control = def.makeControl({ node, context, aspects });\n\n                if (!control) {\n                  return afterThe();\n                }\n\n                return control instanceof InControl ? afterThe(control) : control;\n              }),\n              consumeEvents((control?: InControl<any>, supply?: Supply) => {\n                if (!control) {\n                  return;\n                }\n\n                const usageSupply = inputFromControl(context, control);\n\n                (supply || control.supply).needs(usageSupply);\n\n                return usageSupply;\n              }),\n          );\n        });\n      });\n    },\n  });\n}\n\n/**\n * A definition of element to use as an {@link InputFromControl origin of user input}.\n *\n * Configures {@link UseInputElement @UseInputElement} component decorator.\n *\n * @typeParam T - A type of component.\n */\nexport interface UseInputElementDef<T extends object = any> {\n\n  /**\n   * CSS selector of input element to use.\n   *\n   * `input` by default.\n   */\n  readonly select?: string;\n\n  /**\n   * A mode of node picking from component tree.\n   *\n   * By default picks any matching element from entire subtree.\n   */\n  readonly pick?: ElementPickMode;\n\n  /**\n   * Constructs input control for element node found by {@link UseInputElement @UseInputElement} decorator.\n   *\n   * The returned control keeper may send an event supply as a second parameter. This supply will be cut off once\n   * the input from control is no longer needed. Otherwise the control's input supply will be cut off instead,\n   * and control would become unusable after that.\n   *\n   * @param node - Element node to construct input control for.\n   * @param context - Component context the {@link UseInputElement @UseInputElement} decorator is applied to.\n   * @param aspects - Default input aspect converter. This is a value of {@link DefaultInAspects}.\n   *\n   * @returns Either input control, its keeper, or nothing.\n   */\n  makeControl(\n      {\n        node,\n        context,\n        aspects,\n      }: {\n        node: ElementNode;\n        context: ComponentContext<T>;\n        aspects: InConverter.Aspect<any, any>;\n      },\n  ):\n      | InControl<any>\n      | EventKeeper<[InControl<any>?, Supply?]>\n      | null\n      | undefined;\n\n}\n"],"names":["FetchAgentKey","ContextUpKey","[object Object]","name","super","this","upKey","createUpKey","slot","insert","seed","do","digAfter","agents","length","afterThe","next","request","fetch","agentIdx","agentRequest","agent","onSupplied","nextRequest","combineFetchAgents","hasFallback","or","defaultFetchAgent","delegated","context","get","undefined","whenOff","reason","contextDestroyed","HttpFetchAgent","HttpFetchAborted","HttpFetch","FnContextKey","byDefault","bootstrapDefault","window","BootstrapWindow","input","init","Request","onEventBy","receiver","responseEmitter","EventEmitter","supply","abortController","AbortController","signal","Supply","abort","off","needs","on","ctx","response","receive","customSignal","DomEventDispatcher","onceOn","aborted","then","send","catch","HierarchyRoot","SingleContextKey","bsContext","root","BootstrapRoot","HierarchyUpdates","issue","trackValue","HierarchyUpdates__key","ComponentContext","updates","hierarchyRoot","BootstrapContext","parent","findParentContext","it","ContextKey__symbol","of","element","immediate","parentNode","findIn","HierarchyContext__key","HierarchyContext$","HierarchyContext","ContextValues","up","afterEventBy","parentHierarchy","by","_parent","cuts","rootSupply","parentSupply","updateParent","parentCtx","read","connected","supplyAfter","consumeEvents","newParent","whenConnected","shareAfter","noop","registry","_registry","ContextRegistry","key","isContextSeedUpKey","upper","newValues","spec","provide","enclosing","ElementNodeList","OnEvent__symbol","onUpdate","AfterEvent__symbol","WATCH_DEEP","subtree","elementNodeList","selectorOrType","nodeOf","deep","all","selector","cache","Set","overNodes","overNodeSubtree","overArray","whenDefined","elementDef","html__naming","DefaultNamespaceAliaser","size","selected","refresh","added","itsElements","filterIt","mapIt","node","isPresent","console","error","addEventListener","event","target","has","iterable","overIterator","iteratorOf","ElementNodeList$","observer","ElementObserver","update","firstReceiver","observe","disconnect","clear","returnSelf","valueProvider","mapAfter","track","initialEmitter","first","afterSupplied","translateAfter","list","itsFirst","Symbol","iterator","PushIterator__symbol","accept","sel","querySelectorAll","filterArray","children","item","matches","select","mutations","removed","forEach","mutation","itsEach","removedNodes","removeNode","push","addedNodes","addNode","isElement","add","delete","nodes","flatMapArray","childNodes","AttributesObserver","_bs","Map","_observer","Observer","MutationObserver","_update","self","emitter","_emitter","rcv","eventReceiver","_emitters","reconnect","newValue","oldValue","takeRecords","attributes","attributeOldValue","attributeFilter","keys","attributeName","getAttribute","set","AttributeTracker","ValueTracker","_name","observeSupply","neverSupply","_updates","value","setAttribute","removeAttribute","NodeAttributes","bs","existing","_attrs","created","PropertyTracker","_element","_key","ComponentState","domPropertyPathTo","_ctx","_path","NodeProperties","_context","_props","prop","bind","ElementNode__symbol","ElementNode$","_bind","elementNodeOf","mode","optional","adapter","ElementAdapter","selectNodes","ComponentNode","getHashURL","url","URL","hash","substring","origin","setHashURL","hashURL","username","pathname","search","result","PageParam__symbol","PageParam","_page","PageHashURLValueParam$","page","handle","put","PageHashURLValueParam","PageHashURLParam$","create","PageHashURLParam","NavigationAgentKey","document","when","from","to","navigate","agentTo","nextURL","title","nextTitle","data","nextData","String","baseURI","visited","current","ref","defaultNavigationAgent","_when","_from","NavigationAgent","PageHashURLSupport__feature","setup","a","is","pageHashURLAgent","PageHashURLSupport","FeatureDef__symbol","PageParamContext","NavHistory__key","NavHistory","extractNavData","state","_document","_location","location","_history","history","_uid","btoa","Math","random","entry","newEntry","href","_entries","id","schedule","enter","replaceState","_historyState","PageEntry","_lastId","toEntry","tracker","pushState","_enter","fromEntry","e","_forget","prev","leave","popState","_changeHash","uid","pageId","existingEntry","transfer","oldEntry","forget","wesib:navigation:data","_bsContext","proto","_params","_status","param","newHandle","_newContext","_init","entries","transferred","at","values","stay","EnterPageEvent","Event","type","cancelable","LeavePageEvent","StayOnPageEvent","Navigation__key","dispatcher","navHistory","nav","nextEntry","apply","Promise","resolve","dispatch","hashChange","Navigation","onEnter","onLeave","onStay","onAny","delta","go","toURL","withParam","applyParams","with","mergeFunctions","open","replace","targetOrCallback","callback","navTarget","navTargetOf","applyAgent","whenLeave","promise","doNavigate","prepared","leavePage","prepare","navigated","ActivateNavLink","def","pick","Component","defContext","whenComponent","activate","scheduler","ElementRenderScheduler","render","active","defaultActiveNavLinkClass","activeClass","css__naming","assignClass","classList","remove","opts","NavLinkRenderSchedule__symbol","makeActive","lastSupply","activateNavLink","weigh","defaultNavLinkWeight","weight","supplier","translateAfter_","navLinkWeight","navigation","componentNode","digAfter_","afterEach","weights","maxWeight","selectActiveNavLinks","newActive","activeLink","linkURL","ownerDocument","calcNavLinkWeight","pageURL","linkDir","navLinkPath2dir","pageDir","searchParamWeight","navLinkSearchParamsWeight","startsWith","path","endsWith","searchParams","linkParams","pageParams","isIgnoredSearchParam","getAll","includes","Wesib__NS","HandleNavLinks","getHref","defaultNavLinkHref","preventDefault","defaultHandleNavLinks","events","setOfElements","eventType","onceAfter","importNode","beforeOrImport","importContent","importNodeContent","before","doc","elementClone","createElement","tagName","toLowerCase","getAttributeNames","attr","insertBefore","nodeClone","cachingPageLoader","loader","pageUrl","sup","tracked","onLoad","trackSupply","resp","valueOn_","asis","num","requested","supplyOn","PageLoadAbortError","Error","PageLoadRequestsParam","requests","PageLoadRequests","_navigation","_loader","_requests","flatMapIt","_map","fragments","itsEvery","fragment","pageSupply","loadSupply","_add","_transfer","responseReceiver","ok","shareOn","mapOn_","tag","getElementsByTagName","getElementById","onFragment","req","slice","PageLoadAgent","PageLoadURLModifier","PageLoader","httpFetch","modifyURL","parser","DOMParser","credentials","headers","Headers","Accept","fetchRequest","reduce","header","hthvQuote","requestPageFragments","EventNotifier","text","resolveOnOrdered","digOn_","batch","status","parsePageDocument","parseFromString","hthvParse","v","head","base","querySelector","newBase","appendChild","PageLoadParam$","PageLoadParam","PageCacheBuster__key","PageCacheBuster","rev","appRev","urlModifier","newRev","reload","pageScriptsAgent","allScripts","externalScripts","scripts","src","script","pageStyleAgent","newStyles","oldStyles","oldStylesByHref","firstOldStyle","link","newStyle","oldStyle","nextSibling","style","removeChild","pageTitleAgent","textContent","PageLoadSupport__feature","buster","PageLoadSupport","IncludePage","onResponse","contentKey","defaultPageContentKey","feature","detectFragment","lastPageURL","range","createRange","selectNodeContents","contentRoot","newPageURL","deleteContents","createDocumentFragment","insertNode","handleResponse","DefaultInAspectsKey","nsAlias","fns","intoConvertedBy","InRenderScheduler","InNamespaceAliaser","ContextSupply","DefaultInAspects","InputFromControl","SingleContextUpKey","inputFromControl","control","ConvertInput","convert","afterAll","aspects","converted","InControl","usageSupply","InputToForm","FillInputForm","tuple","makeForm","Array","isArray","form","fillSupply","hierarchy","via","inputToForm","OnSubmit","cancel","ComponentProperty","componentDef","component","submitDispatcher","onSubmit","handleDomEvents","call","SetInputName","getName","group","mapAfter_","aspect","InGroup","controls","UseInputElement","makeControl"],"mappings":"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"}