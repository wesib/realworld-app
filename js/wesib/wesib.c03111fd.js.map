{"version":3,"file":"wesib.c03111fd.js","sources":["../../../node_modules/@wesib/wesib/src/boot/bootstrap-context.key.impl.ts","../../../node_modules/@wesib/wesib/src/boot/bootstrap-context.ts","../../../node_modules/@wesib/wesib/src/boot/bootstrap-default.ts","../../../node_modules/@wesib/wesib/src/component/definition/component-factory.ts","../../../node_modules/@wesib/wesib/src/boot/globals/bootstrap-window.ts","../../../node_modules/@wesib/wesib/src/boot/globals/bootstrap-root.ts","../../../node_modules/@wesib/wesib/src/boot/globals/default-namespace-aliaser.ts","../../../node_modules/@wesib/wesib/src/boot/globals/default-render-scheduler.ts","../../../node_modules/@wesib/wesib/src/common/types.impl.ts","../../../node_modules/@wesib/wesib/src/common/array-set.ts","../../../node_modules/@wesib/wesib/src/common/classes.ts","../../../node_modules/@wesib/wesib/src/common/decorators.ts","../../../node_modules/@wesib/wesib/src/common/reflect.ts","../../../node_modules/@wesib/wesib/src/common/functions.ts","../../../node_modules/@wesib/wesib/src/common/is-element.ts","../../../node_modules/@wesib/wesib/src/common/meta-accessor.ts","../../../node_modules/@wesib/wesib/src/common/promises.ts","../../../node_modules/@wesib/wesib/src/feature/feature-def.ts","../../../node_modules/@wesib/wesib/src/feature/feature.decorator.ts","../../../node_modules/@wesib/wesib/src/feature/feature-context.ts","../../../node_modules/@wesib/wesib/src/feature/feature-needs-error.ts","../../../node_modules/@wesib/wesib/src/component/component-def.ts","../../../node_modules/@wesib/wesib/src/component/component.decorator.ts","../../../node_modules/@wesib/wesib/src/component/component-context.key.impl.ts","../../../node_modules/@wesib/wesib/src/component/component-event.key.impl.ts","../../../node_modules/@wesib/wesib/src/component/content-root.ts","../../../node_modules/@wesib/wesib/src/component/state-updater.ts","../../../node_modules/@wesib/wesib/src/component/component-context.ts","../../../node_modules/@wesib/wesib/src/component/component-event.ts","../../../node_modules/@wesib/wesib/src/component/component-property.decorator.ts","../../../node_modules/@wesib/wesib/src/boot/globals/element-adapter.ts","../../../node_modules/@wesib/wesib/src/boot/globals/element-observer.ts","../../../node_modules/@wesib/wesib/src/boot/impl/component-factory.symbol.impl.ts","../../../node_modules/@wesib/wesib/src/component/definition/custom-elements.ts","../../../node_modules/@wesib/wesib/src/component/definition/definition.context.key.impl.ts","../../../node_modules/@wesib/wesib/src/component/definition/element-def.ts","../../../node_modules/@wesib/wesib/src/component/definition/definition-context.ts","../../../node_modules/@wesib/wesib/src/boot/impl/bootstrap-context-registry.impl.ts","../../../node_modules/@wesib/wesib/src/boot/impl/component-context-registry.impl.ts","../../../node_modules/@wesib/wesib/src/boot/impl/definition-context-registry.impl.ts","../../../node_modules/@wesib/wesib/src/boot/impl/post-def-setup.impl.ts","../../../node_modules/@wesib/wesib/src/boot/impl/when-component.impl.ts","../../../node_modules/@wesib/wesib/src/boot/impl/element-builder.impl.ts","../../../node_modules/@wesib/wesib/src/component/component-mount.ts","../../../node_modules/@wesib/wesib/src/boot/impl/unloader.impl.ts","../../../node_modules/@wesib/wesib/src/feature/loader/component-registry.impl.ts","../../../node_modules/@wesib/wesib/src/feature/loader/feature-loader.impl.ts","../../../node_modules/@wesib/wesib/src/feature/loader/feature-request.impl.ts","../../../node_modules/@wesib/wesib/src/feature/loader/feature-requester.impl.ts","../../../node_modules/@wesib/wesib/src/boot/bootstrap/bootstrap-components.ts","../../../node_modules/@wesib/wesib/src/feature/feature-ref.ts","../../../node_modules/@wesib/wesib/src/feature/attributes/attribute-descriptor.ts","../../../node_modules/@wesib/wesib/src/feature/attributes/attribute-path.ts","../../../node_modules/@wesib/wesib/src/feature/attributes/attribute-state-update.impl.ts","../../../node_modules/@wesib/wesib/src/feature/attributes/attribute-registry.impl.ts","../../../node_modules/@wesib/wesib/src/feature/attributes/attributes-support.feature.ts","../../../node_modules/@wesib/wesib/src/feature/attributes/attribute.decorator.ts","../../../node_modules/@wesib/wesib/src/feature/attributes/attribute-descriptor.impl.ts","../../../node_modules/@wesib/wesib/src/feature/attributes/attributes.decorator.ts","../../../node_modules/@wesib/wesib/src/feature/state/component-state.ts","../../../node_modules/@wesib/wesib/src/feature/state/state-property-path.ts","../../../node_modules/@wesib/wesib/src/feature/state/state-property-update.impl.ts","../../../node_modules/@wesib/wesib/src/feature/state/state-support.feature.ts","../../../node_modules/@wesib/wesib/src/feature/state/state-property.decorator.ts","../../../node_modules/@wesib/wesib/src/feature/attributes/track-attribute.ts","../../../node_modules/@wesib/wesib/src/feature/dom-properties/dom-property-descriptor.ts","../../../node_modules/@wesib/wesib/src/feature/dom-properties/dom-property-registry.impl.ts","../../../node_modules/@wesib/wesib/src/feature/dom-properties/dom-properties-support.feature.ts","../../../node_modules/@wesib/wesib/src/feature/dom-properties/dom-property-path.ts","../../../node_modules/@wesib/wesib/src/feature/dom-properties/dom-property-update.impl.ts","../../../node_modules/@wesib/wesib/src/feature/dom-properties/dom-property.decorator.ts","../../../node_modules/@wesib/wesib/src/feature/dom-properties/dom-property-descriptor.impl.ts","../../../node_modules/@wesib/wesib/src/feature/render/element-renderer.ts","../../../node_modules/@wesib/wesib/src/feature/render/render.decorator.ts","../../../node_modules/@wesib/wesib/src/wesib.ns.ts"],"sourcesContent":["import { SingleContextKey } from 'context-values';\nimport { BootstrapContext } from './bootstrap-context';\n\n/**\n * @internal\n */\nexport const BootstrapContext__key = (/*#__PURE__*/ new SingleContextKey<BootstrapContext>('bootstrap-context'));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues } from 'context-values';\nimport { OnEvent } from 'fun-events';\nimport { Class } from '../common';\nimport { ComponentClass, ComponentFactory } from '../component/definition';\nimport { FeatureRef } from '../feature';\nimport { BootstrapContext__key } from './bootstrap-context.key.impl';\n\n/**\n * Components bootstrap context.\n *\n * An instance of this class is passed to [[FeatureDef.Options.init]] method so that the feature can configure itself.\n *\n * Extends `BootstrapValues` interface. The values could be {@link BootstrapSetup.provide pre-configured} in feature\n * definitions.\n *\n * @category Core\n */\nexport abstract class BootstrapContext extends ContextValues {\n\n  /**\n   * A key of bootstrap context value containing the bootstrap context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<BootstrapContext> {\n    return BootstrapContext__key;\n  }\n\n  /**\n   * An `OnEvent` sender of bootstrap readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete.\n   *\n   * If bootstrap is complete already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[BootstrapContext]>;\n\n  /**\n   * Allows to wait for component definition.\n   *\n   * This corresponds to `window.customElements.whenDefined()` method.\n   *\n   * @param componentType  Component class constructor.\n   *\n   * @return A promise that is resolved to component factory when the given `componentType` is registered.\n   *\n   * @throws TypeError  If `componentType` does not contain a component definition.\n   */\n  abstract whenDefined<C extends object>(componentType: ComponentClass<C>): Promise<ComponentFactory<C>>;\n\n  /**\n   * Allows to loads the given `feature`.\n   *\n   * @param feature  The feature to load.\n   *\n   * @returns  Loaded feature reference.\n   */\n  abstract load(feature: Class): FeatureRef;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKeyDefault } from 'context-values';\nimport { BootstrapContext } from './bootstrap-context';\n\n/**\n * Provides a default value for bootstrap context key.\n *\n * @category Core\n * @param provide  A function accepting bootstrap context and target key as parameters, and returning either a default\n * value, or `null`/`undefined` if unknown.\n *\n * @returns A provider of default value for bootstrap context value key.\n */\nexport function bootstrapDefault<Value, Key extends ContextKey<any, any, any>>(\n    provide: (this: void, context: BootstrapContext, key: Key) => Value | null | undefined,\n): ContextKeyDefault<Value, Key> {\n  return (context, key) => {\n\n    const bootstrapContext = context.get(BootstrapContext);\n\n    return context === bootstrapContext ? provide(bootstrapContext, key) : bootstrapContext.get(key);\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { Class } from '../../common';\nimport { ComponentMount } from '../component-mount';\nimport { ComponentClass } from './component-class';\nimport { ElementDef } from './element-def';\n\n/**\n * @internal\n */\nconst ComponentFactory__key = (/*#__PURE__*/ new SingleContextKey<ComponentFactory>('component-factory'));\n\n/**\n * A factory of components of particular type.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class ComponentFactory<T extends object = any> {\n\n  /**\n   * A key of definition context value containing a component factory.\n   */\n  static get [ContextKey__symbol](): ContextKey<ComponentFactory> {\n    return ComponentFactory__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element class constructor.\n   *\n   * It is an error accessing this property before the element class is created, e.g. from inside of\n   * `DefinitionListener` or `ComponentDef.define()` function. In these cases you may wish to add a `whenReady()`\n   * callback.\n   */\n  abstract readonly elementType: Class;\n\n  /**\n   * Custom element definition.\n   */\n  abstract readonly elementDef: ElementDef;\n\n  /**\n   * Mounts a component to arbitrary element.\n   *\n   * This method creates a component, but instead of creating a custom element for, it mounts it to the target\n   * `element`.\n   *\n   * It is up to the features to update the target element. They can use a `ComponentContext.mount` property to check\n   * whether the component is mounted or is constructed in standard way.\n   *\n   * The constructed component will be in disconnected state. To update its connection state either update a\n   * `ComponentMount.connected` property, or use a `connectTo()` method.\n   *\n   * @param element  Target element to mount new component to.\n   *\n   * @returns New component mount.\n   *\n   * @throws Error If target element is already bound to some component.\n   */\n  abstract mountTo(element: any): ComponentMount<T>;\n\n  /**\n   * Connects a component to arbitrary element.\n   *\n   * This method does the same as `mountTo()`, but also marks the mounted component as connected.\n   *\n   * @param element  Target element to mount new component to.\n   *\n   * @returns New component mount.\n   *\n   * @throws Error If target element is already bound to some component.\n   */\n  connectTo(element: any): ComponentMount<T> {\n\n    const mount = this.mountTo(element);\n\n    mount.connected = true;\n\n    return mount;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\n\n/**\n * A window the components bootstrap is performed against.\n *\n * @category Core\n */\nexport type BootstrapWindow = Window & typeof globalThis;\n\n/**\n * A key of bootstrap context value containing a window instance the bootstrap is performed against.\n *\n * Target value defaults to current window.\n *\n * @category Core\n */\nexport const BootstrapWindow: SingleContextRef<BootstrapWindow> = (/*#__PURE__*/ new SingleContextKey(\n    'window',\n    {\n      byDefault() {\n        return window;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { BootstrapWindow } from './bootstrap-window';\n\n/**\n * A window (e.g. DOM) element all bootstrapped components belong to.\n *\n * @category Core\n */\nexport type BootstrapRoot = any;\n\n/**\n * A key of bootstrap context value containing a bootstrap root.\n *\n * Target value defaults to document body of [[BootstrapWindow]].\n *\n * @category Core\n */\nexport const BootstrapRoot: SingleContextRef<BootstrapRoot> = (/*#__PURE__*/ new SingleContextKey(\n    'bootstrap-root',\n    {\n      byDefault(ctx) {\n        return ctx.get(BootstrapWindow).document.body;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { NamespaceAliaser } from 'namespace-aliaser';\n\n/**\n * Namespace aliaser used by default.\n *\n * Maps namespaces to their unique aliases.\n *\n * @category Core\n */\nexport type DefaultNamespaceAliaser = NamespaceAliaser;\n\n/**\n * A key of bootstrap context value containing the default namespace aliaser.\n *\n * @category Core\n */\nexport const DefaultNamespaceAliaser: SingleContextRef<DefaultNamespaceAliaser> = (\n    /*#__PURE__*/ new SingleContextKey<DefaultNamespaceAliaser>('default-namespace-aliaser')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { FnContextKey, FnContextRef } from 'context-values/updatable';\nimport { newRenderSchedule, RenderScheduler } from 'render-scheduler';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { BootstrapWindow } from './bootstrap-window';\n\n/**\n * Default rendering tasks scheduler.\n *\n * @category Core\n */\nexport type DefaultRenderScheduler = RenderScheduler;\n\n/**\n * A key of bootstrap, definition, or component context value containing [[DefaultRenderScheduler]] instance.\n *\n * Uses the default `RenderScheduler` (`newRenderSchedule()`) for {@link BootstrapWindow bootstrap window}.\n *\n * @category Core\n */\nexport const DefaultRenderScheduler:\n    FnContextRef<Parameters<DefaultRenderScheduler>, ReturnType<DefaultRenderScheduler>> = (\n    /*#__PURE__*/ new FnContextKey<Parameters<DefaultRenderScheduler>, ReturnType<DefaultRenderScheduler>>(\n        'default-render-scheduler',\n        {\n          byDefault: bootstrapDefault(\n              context => (options = {}) => newRenderSchedule({\n                ...options,\n                window: options.window || context.get(BootstrapWindow),\n              }),\n          ),\n        },\n    )\n);\n","/**\n * @internal\n */\nexport function isArray<T>(value: T | T[]): value is T[];\n\n/**\n * @internal\n */\nexport function isArray<T>(value: T | readonly T[]): value is readonly T[];\n\nexport function isArray<T>(value: T | readonly T[]): value is T[] {\n  return Array.isArray(value);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { AIterable } from 'a-iterable';\nimport { isArray } from './types.impl';\n\n/**\n * @category Utility\n */\nexport class ArraySet<T> extends AIterable<T> {\n\n  readonly items: Set<T>;\n\n  constructor(value?: T | readonly T[]) {\n    super();\n    this.items = value == null ? new Set() : isArray(value) ? new Set(value) : new Set([value]);\n  }\n\n  get value(): T | T[] | undefined {\n    switch (this.items.size) {\n    case 0: return;\n    case 1: return this.items[Symbol.iterator]().next().value;\n    default: return [...this.items];\n    }\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.items[Symbol.iterator]();\n  }\n\n  add(...items: T[]): this {\n    items.forEach(item => this.items.add(item));\n    return this;\n  }\n\n  get size(): number {\n    return this.items.size;\n  }\n\n  merge(items: readonly T[] | T | undefined): this {\n    if (items == null) {\n      return this;\n    }\n    if (isArray(items)) {\n      return this.add(...items);\n    }\n    return this.add(items);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Arbitrary class constructor.\n *\n * @category Utility\n * @typeparam T  A type of object.\n */\nexport interface Class<T extends object = any> extends Function {\n  new(...args: any[]): T;\n  prototype: T;\n}\n\n/**\n * Detects super class of the given class optionally satisfying the given criteria.\n *\n * Traverses all class ancestors until reaches the one satisfying the given criteria, or stops when there is no more\n * ancestors.\n *\n * @category Utility\n * @param type  The class constructor to find super class of.\n * @param satisfying  The criteria of super class matching. It is a function accepting a super class constructor\n * as the only parameter and returning `true` if the given super class matches, or `false` otherwise. Always returns\n * `true` by default.\n *\n * @return A super class `satisfying` the given criteria, or `undefined` if there is no such super class, or there is no\n * super class at all (e.g. when `Object` is passed in).\n */\nexport function superClassOf(type: Class, satisfying: (type: Class) => boolean = () => true): Class | undefined {\n\n  const prototype = Object.getPrototypeOf(type.prototype);\n\n  if (prototype == null) {\n    return;\n  }\n\n  const superType = prototype.constructor as Class;\n\n  if (satisfying(superType)) {\n    return superType;\n  }\n\n  return superClassOf(superType, satisfying);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from './classes';\nimport { fieldAccessorDescriptor, PropertyAccessorDescriptor, toPropertyAccessorDescriptor } from './reflect';\n\n/**\n * Typed class decorator.\n *\n * @category Utility\n * @typeparam T  A type of class to decorate.\n */\nexport type TypedClassDecorator<T extends Class> = (type: T) => T | void;\n\n/**\n * Typed property decorator.\n *\n * @category Utility\n * @typeparam T  A type of class the decorated property belongs to.\n */\nexport type TypedPropertyDecorator<T extends Class> =\n    <V>(target: InstanceType<T>, propertyKey: string | symbol, descriptor?: TypedPropertyDescriptor<V>) => any | void;\n\n/**\n * Property decorator helper converting a field or property to the one with accessor (`get` and optionally `set`).\n *\n * @category Utility\n * @typeparam T  A type of target object.\n * @typeparam V  A property value type.\n * @param target  Target object containing the property.\n * @param propertyKey  Target property key.\n * @param desc  Target property descriptor, or `undefined` for object fields.\n * @param updateDescriptor  Descriptor updater. Accepts the accessor descriptor as the only argument. If returns\n * a descriptor, then it is applied to the property. Otherwise the target property descriptor is never updated.\n *\n * @returns Updated property descriptor to return from decorator to apply to the property, or `undefined` if there is\n * nothing to update.\n */\nexport function decoratePropertyAccessor<T, V>(\n    target: T,\n    propertyKey: string | symbol,\n    desc: TypedPropertyDescriptor<V> | undefined,\n    updateDescriptor: (desc: PropertyAccessorDescriptor<V>) => PropertyAccessorDescriptor<V>,\n): PropertyAccessorDescriptor<V> | undefined {\n\n  const isField = !desc;\n  const accessorDesc: PropertyAccessorDescriptor<V> = desc\n      ? toPropertyAccessorDescriptor(desc)\n      : fieldAccessorDescriptor(target, propertyKey as keyof T) as any;\n  const updatedDesc = updateDescriptor(accessorDesc);\n\n  if (isField && updatedDesc) {\n    Object.defineProperty(target, propertyKey, updatedDesc);\n    return;\n  }\n\n  return updatedDesc;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Converts an object field to property accessor.\n *\n * Defines a new property with the given name in the target object and returns its descriptor.\n *\n * The converted descriptor is always configurable, enumerable, and writable.\n *\n * @category Utility\n * @typeparam T  The type of target object.\n * @typeparam K  Target object property keys type.\n * @param target  The object containing target field.\n * @param fieldKey  Target field key.\n *\n * @return New property accessor descriptor.\n */\nexport function field2accessor<T, K extends keyof T>(\n    target: T,\n    fieldKey: K,\n): PropertyAccessorDescriptor<T[K]> {\n\n  const desc = fieldAccessorDescriptor(target, fieldKey);\n\n  Object.defineProperty(target, fieldKey, desc);\n\n  return desc;\n}\n\n/**\n * Creates an property accessor descriptor for the given field.\n *\n * @category Utility\n * @typeparam T  The type of target object.\n * @typeparam K  Target object property keys type.\n * @param target  The object containing target field.\n * @param fieldKey  Target field key.\n */\nexport function fieldAccessorDescriptor<T, K extends keyof T>(\n    target: T,\n    fieldKey: K,\n): PropertyAccessorDescriptor<T[K]> {\n\n  const value__symbol = Symbol(`${String(fieldKey)}:value`);\n  const initial: T[K] = target[fieldKey];\n\n  return {\n    configurable: true,\n    enumerable: true,\n    get(this: any) {\n      return value__symbol in this ? this[value__symbol] : initial;\n    },\n    set(this: any, newValue) {\n      this[value__symbol] = newValue;\n    },\n  };\n}\n\n/**\n * Property accessor descriptor. I.e. the one with `get` and `set` functions.\n *\n * @category Utility\n * @typeparam V  Property value type.\n */\nexport interface PropertyAccessorDescriptor<V> extends TypedPropertyDescriptor<V> {\n  enumerable?: boolean;\n  configurable?: boolean;\n  writable?: undefined;\n  value?: undefined;\n  get?: () => V;\n  set?: (value: V) => void;\n}\n\n/**\n * Detects whether the given property descriptor is the one of property accessor.\n *\n * @category Utility\n * @typeparam V  Property value type.\n * @param desc  Target property descriptor.\n *\n * @return `true` if the descriptor has no `value` or `writable` attributes set.\n */\nexport function isPropertyAccessorDescriptor<V>(\n    desc: TypedPropertyDescriptor<V>,\n): desc is PropertyAccessorDescriptor<V> {\n  return desc.value === undefined && desc.writable === undefined;\n}\n\n/**\n * Converts a property descriptor to property accessor descriptor.\n *\n * @category Utility\n * @typeparam V  Property value type.\n * @param desc  Target property descriptor.\n *\n * @return Either an accessor descriptor constructed from data descriptor, or `desc` if it is an accessor descriptor\n * already.\n */\nexport function toPropertyAccessorDescriptor<V>(\n    desc: TypedPropertyDescriptor<V>,\n): PropertyAccessorDescriptor<V> {\n  if (isPropertyAccessorDescriptor(desc)) {\n    return desc;\n  }\n\n  const value__symbol = Symbol('value');\n  const initial = desc.value as V;\n\n  const accessorDesc: PropertyAccessorDescriptor<V> = {\n    ...desc,\n    writable: undefined,\n    value: undefined,\n    get(this: any) {\n      return value__symbol in this ? this[value__symbol] : initial;\n    },\n  };\n\n  if (desc.writable) {\n    accessorDesc.set = function (this: any, newValue: V) {\n      this[value__symbol] = newValue;\n    };\n  }\n\n  delete accessorDesc.writable;\n  delete accessorDesc.value;\n\n  return accessorDesc;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Merges two functions by calling one after another.\n *\n * Optionally merges function call results.\n *\n * @category Utility\n * @typeparam P  Function parameter types as tuple.\n * @typeparam R  A type of function result.\n * @typeparam T  A type if `this` object expected by function.\n * @param first  The first function to call.\n * @param second  The second function to call.\n * @param merge  Optional function call results merger. Accepts two function results as arguments and returns the final\n * result. When omitted the first function call result is ignored and the second function's call result is returned.\n *\n * @return A function that calls both of the given ones and merges their results. If one of the functions is absent,\n * then just returns another one. If both are absent, then returns `undefined`.\n */\nexport function mergeFunctions<P extends any[], R, T>(\n    first: (this: T, ...args: P) => R,\n    second: ((this: T, ...args: P) => R) | undefined,\n    merge: (first: R, second: R) => R,\n): (this: T, ...args: P) => R;\n\nexport function mergeFunctions<P extends any[], R, T>(\n    first: ((this: T, ...args: P) => R) | undefined,\n    second: (this: T, ...args: P) => R,\n    merge?: (first: R, second: R) => R,\n): (this: T, ...args: P) => R;\n\nexport function mergeFunctions<P extends any[], R, T>(\n    first: ((this: T, ...args: P) => R) | undefined,\n    second: ((this: T, ...args: P) => R) | undefined,\n    merge?: (first: R, second: R) => R,\n): ((this: T, ...args: P) => R) | undefined;\n\nexport function mergeFunctions<P extends any[], R, T>(\n    first: ((this: T, ...args: P) => R) | undefined,\n    second: ((this: T, ...args: P) => R) | undefined,\n    merge: (first: R, second: R) => R = (_f, s) => s,\n): ((this: T, ...args: P) => R) | undefined {\n  if (!first) {\n    return second;\n  }\n  if (!second) {\n    return first;\n  }\n  return function (this: T, ...args: P): R {\n    return merge(\n        first.apply(this, args),\n        second.apply(this, args),\n    );\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Checks whether the given DOM node is element.\n *\n * @category Utility\n * @param node  A DOM node to check.\n *\n * @returns `true` is `node` is element, or `false` otherwise.\n */\nexport function isElement(node: Node): node is Element {\n  return node.nodeType === Node.ELEMENT_NODE;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { flatMapIt, mapIt } from 'a-iterable';\nimport { Class, superClassOf } from './classes';\n\n/**\n * @category Utility\n */\nexport abstract class MetaAccessor<M, S = M> {\n\n  readonly symbol: symbol;\n\n  protected constructor(symbol: symbol) {\n    this.symbol = symbol;\n  }\n\n  own(type: Class): M | undefined {\n    // eslint-disable-next-line no-prototype-builtins\n    return type.hasOwnProperty(this.symbol) ? (type as any)[this.symbol] : undefined;\n  }\n\n  of(type: Class): M | undefined {\n\n    const ownDef: M | undefined = this.own(type);\n    const superType = superClassOf(type);\n    const superDef = superType && this.of(superType);\n\n    return ownDef ? (superDef ? this.merge([superDef, ownDef]) : ownDef) : superDef;\n  }\n\n  define<C extends Class>(type: C, sources: Iterable<S>): C {\n\n    const prevMeta = this.own(type);\n    const updates = mapIt(sources, source => this.meta(source, type));\n    const newMeta: M = this.merge(prevMeta ? flatMapIt([[prevMeta], updates]) : updates);\n\n    Object.defineProperty(\n        type,\n        this.symbol,\n        {\n          configurable: true,\n          value: newMeta,\n        },\n    );\n\n    return type;\n  }\n\n  abstract merge(metas: Iterable<M>): M;\n\n  protected abstract meta(source: S, type: Class): M;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * @category Utility\n */\nexport class PromiseResolver<T = void> {\n\n  readonly promise: Promise<T>;\n  private _resolve!: (value: T) => void;\n  private _reject!: (error: any) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  resolve(value: T): void {\n    this._resolve(value);\n  }\n\n  reject(error: any): void {\n    this._reject(error);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { itsReduction } from 'a-iterable';\nimport { BootstrapSetup } from '../boot';\nimport { ArraySet, Class, mergeFunctions, MetaAccessor } from '../common';\nimport { FeatureContext } from './feature-context';\n\n/**\n * A key of a property holding a feature definition within its class constructor.\n *\n * @category Core\n */\nexport const FeatureDef__symbol = (/*#__PURE__*/ Symbol('feature-def'));\n\n/**\n * Feature definition.\n *\n * This can be one of:\n * - feature definition options object,\n * - feature definition holder, or\n * - feature definition factory.\n *\n * @category Core\n */\nexport type FeatureDef =\n    | FeatureDef.Options\n    | FeatureDef.Holder\n    | FeatureDef.Factory;\n\nexport namespace FeatureDef {\n\n  /**\n   * Feature definition options.\n   */\n  export interface Options {\n\n    readonly [FeatureDef__symbol]?: undefined;\n\n    /**\n     * Features this one requires.\n     */\n    readonly needs?: Class | readonly Class[];\n\n    /**\n     * Features this one provides.\n     *\n     * The feature always provides itself.\n     */\n    readonly has?: Class | readonly Class[];\n\n    /**\n     * Sets up bootstrap.\n     *\n     * This method is called before bootstrap context created.\n     *\n     * @param setup  Bootstrap setup.\n     */\n    setup?(setup: BootstrapSetup): void;\n\n    /**\n     * Bootstraps this feature by calling the given bootstrap context constructed.\n     *\n     * @param context  Feature initialization context.\n     */\n    init?(context: FeatureContext): void;\n\n  }\n\n  /**\n   * Feature definition holder.\n   */\n  export interface Holder {\n\n    /**\n     * The feature definition this holder contains.\n     */\n    readonly [FeatureDef__symbol]: FeatureDef;\n\n  }\n\n  /**\n   * Feature definition factory.\n   */\n  export interface Factory {\n\n    /**\n     * Builds feature definition.\n     *\n     * @param featureType  A feature class constructor to build definition for.\n     *\n     * @returns Built feature definition.\n     */\n    [FeatureDef__symbol](featureType: Class): FeatureDef;\n\n  }\n\n}\n\n/**\n * @internal\n */\nclass FeatureMeta extends MetaAccessor<FeatureDef.Options, FeatureDef> {\n\n  constructor() {\n    super(FeatureDef__symbol);\n  }\n\n  merge(defs: Iterable<FeatureDef.Options>): FeatureDef.Options {\n    return itsReduction<FeatureDef.Options, FeatureDef.Options>(\n        defs,\n        (prev, def) => ({\n          needs: new ArraySet(prev.needs).merge(def.needs).value,\n          has: new ArraySet(prev.has).merge(def.has).value,\n          setup: mergeFunctions<[BootstrapSetup], void, Class>(prev.setup, def.setup),\n          init: mergeFunctions<[FeatureContext], void, Class>(prev.init, def.init),\n        }),\n        {},\n    );\n  }\n\n  meta(source: FeatureDef, type: Class): FeatureDef.Options {\n\n    const def = source[FeatureDef__symbol];\n\n    return def == null\n        ? source as FeatureDef.Options\n        : this.meta(\n            typeof def === 'function' ? (source as FeatureDef.Factory)[FeatureDef__symbol](type) : def,\n            type,\n        );\n  }\n\n}\n\n/**\n * @internal\n */\nconst featureMeta = (/*#__PURE__*/ new FeatureMeta());\n\n/**\n * @internal\n */\nconst noFeatureDef: FeatureDef.Factory = {\n  [FeatureDef__symbol]() {\n    return {};\n  },\n};\n\n/**\n * @category Core\n */\nexport const FeatureDef = {\n\n  /**\n   * Extracts feature definition options from its type.\n   *\n   * @param featureType  Target feature class constructor.\n   *\n   * @returns Feature definition options. May be empty when there is no feature definition found in the given\n   * `featureType`.\n   */\n  of(this: void, featureType: Class): FeatureDef.Options {\n    return featureMeta.of(featureType) || {};\n  },\n\n  /**\n   * Builds feature definition options for the given feature class.\n   *\n   * @param featureType  Target feature class constructor.\n   * @param def  A feature definition.\n   *\n   * @returns Feature definition options.\n   */\n  for(this: void, featureType: Class, def: FeatureDef): FeatureDef.Options {\n    return featureMeta.meta(def, featureType);\n  },\n\n  /**\n   * Merges multiple feature definition options.\n   *\n   * @param defs  Feature definition options to merge.\n   *\n   * @returns Merged feature definition options.\n   */\n  merge(this: void, ...defs: readonly FeatureDef.Options[]): FeatureDef.Options {\n    return featureMeta.merge(defs);\n  },\n\n  /**\n   * Merges multiple feature definitions.\n   *\n   * @param defs  Feature definitions to merge.\n   *\n   * @returns Merged feature definition.\n   */\n  all(this: void, ...defs: readonly FeatureDef[]): FeatureDef {\n    return itsReduction<FeatureDef, FeatureDef.Factory>(\n        defs,\n        (prev, def) => ({\n          [FeatureDef__symbol](featureType: Class) {\n            return FeatureDef.merge(\n                FeatureDef.for(featureType, prev),\n                FeatureDef.for(featureType, def),\n            );\n          },\n        }),\n        noFeatureDef,\n    );\n  },\n\n  /**\n   * Defines a feature.\n   *\n   * Either creates new or extends an existing feature definition and stores it under `[FeatureDef__symbol]` key.\n   *\n   * @typeparam T  Feature type.\n   * @param featureType  Feature class constructor.\n   * @param defs  Feature definitions.\n   *\n   * @returns The `type` instance.\n   */\n  define<T extends Class>(this: void, featureType: T, ...defs: readonly FeatureDef[]): T {\n    return featureMeta.define(featureType, defs);\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class, TypedClassDecorator } from '../common';\nimport { FeatureDef } from './feature-def';\n\n/**\n * Feature class decorator.\n *\n * Decorate a class with this decorator to define it as a feature like this:\n * ```TypeScript\n * @Feature({ needs: [OtherFeature, MyComponent] })\n * class MyFeature {\n *   // ...\n * }\n * ```\n *\n * Such feature can be passed to [[bootstrapComponents]] function or referenced by other features.\n *\n * This is an alternative to direct call to [[FeatureDef.define]] method.\n *\n * @category Core\n * @typeparam T  A type of decorated feature class.\n * @param defs  Feature definitions.\n *\n * @returns A feature class decorator.\n */\nexport function Feature<T extends Class = any>(...defs: FeatureDef[]): TypedClassDecorator<T> {\n  return (type: T) => FeatureDef.define(type, ...defs);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValueSpec, SingleContextKey } from 'context-values';\nimport { OnEvent } from 'fun-events';\nimport { BootstrapContext, BootstrapSetup } from '../boot';\nimport { Class } from '../common';\nimport { ComponentContext } from '../component';\nimport { ComponentClass, ComponentFactory, DefinitionContext, DefinitionSetup } from '../component/definition';\nimport { FeatureRef } from './feature-ref';\n\n/**\n * @internal\n */\nconst FeatureContext__key = (/*#__PURE__*/ new SingleContextKey<FeatureContext>('feature-context'));\n\n/**\n * Feature initialization context.\n *\n * @category Core\n */\nexport abstract class FeatureContext extends BootstrapContext implements BootstrapSetup {\n\n  /**\n   * A key of feature context value containing the feature context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<FeatureContext> {\n    return FeatureContext__key;\n  }\n\n  /**\n   * Feature class this context is created for.\n   */\n  abstract readonly feature: Class;\n\n  abstract readonly whenReady: OnEvent<[FeatureContext]>;\n\n  abstract readonly onDefinition: OnEvent<[DefinitionContext]>;\n\n  abstract readonly onComponent: OnEvent<[ComponentContext]>;\n\n  /**\n   * Provides bootstrap context value.\n   *\n   * Note that this happens when bootstrap context already exists. To provide a value before bootstrap context created\n   * a [[BootstrapSetup.provide]] method can be used.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  abstract provide<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<BootstrapContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract perDefinition<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<DefinitionContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract perComponent<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<ComponentContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract setupDefinition<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionSetup]>;\n\n  /**\n   * Defines a component.\n   *\n   * Creates a custom element according to component definition, and registers it with custom elements registry.\n   *\n   * Note that custom element definition will happen only when all features configuration complete.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Component class constructor.\n   *\n   * @return Custom element class constructor registered as custom element.\n   *\n   * @throws TypeError  If `componentType` does not contain a component definition.\n   */\n  abstract define<T extends object>(componentType: ComponentClass<T>): void;\n\n  whenDefined<C extends object>(componentType: ComponentClass<C>): Promise<ComponentFactory<C>> {\n    return this.get(BootstrapContext).whenDefined(componentType);\n  }\n\n  load(feature: Class): FeatureRef {\n    return this.get(BootstrapContext).load(feature);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '../common';\n\n/**\n * Feature need.\n *\n * Indicates why one feature needs another one. The reason can be one of:\n *\n * - `needs` when feature {@link FeatureDef.Options.needs depends} on another one, or\n * - `has` when feature {@link FeatureDef.Options.has provides} another one.\n *\n * @category Core\n */\nexport type FeatureNeed = [Class, 'needs' | 'has', Class];\n\n/**\n * An error in feature needs. I.e. circular dependency.\n *\n * @category Core\n */\nexport class FeatureNeedsError extends Error {\n\n  /**\n   * Feature needs causing this error.\n   */\n  readonly needs: readonly FeatureNeed[];\n\n  /**\n   * Constructs feature needs error.\n   *\n   * @param needs  Feature needs causing the error.\n   */\n  constructor(needs: readonly FeatureNeed[]) {\n    super(\n        'Circular feature needs: ' + needs.reduce(\n        (\n            prev,\n            [feature, reason, need],\n        ) => (prev ? prev : feature.name) + ` ${reason} ${need.name}`,\n        '',\n        ),\n    );\n    this.needs = needs;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { itsReduction } from 'a-iterable';\nimport { isQualifiedName, QualifiedName } from 'namespace-aliaser';\nimport { mergeFunctions, MetaAccessor } from '../common';\nimport { FeatureDef, FeatureDef__symbol } from '../feature';\nimport { ComponentClass, DefinitionContext, DefinitionSetup, ElementDef } from './definition';\n\n/**\n * A key of a property holding a component definition within its class constructor.\n *\n * @category Core\n */\nexport const ComponentDef__symbol = (/*#__PURE__*/ Symbol('component-def'));\n\n/**\n * Component definition.\n *\n * A custom element class will be created for each registered component in accordance to this definition.\n *\n * This can be one of:\n * - custom element name (possibly qualified),\n * - component definition options,\n * - component definition holder,\n * - component definition factory,\n * - feature definition holder, or\n * - feature definition factory.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport type ComponentDef<T extends object = any> =\n    | QualifiedName\n    | ComponentDef.Options<T>\n    | ComponentDef.Holder<T>\n    | ComponentDef.Factory<T>\n    | FeatureDef.Holder\n    | FeatureDef.Factory;\n\nexport namespace ComponentDef {\n\n  /**\n   * Component definition options.\n   */\n  export interface Options<T extends object = any> {\n\n    readonly [ComponentDef__symbol]?: undefined;\n\n    /**\n     * Custom element name.\n     *\n     * The name may belong to some namespace to avoid naming conflicts. I.e. it can be either a string, or\n     * name/namespace tuple.\n     *\n     * When omitted an anonymous component will be registered. Such component is not bound to custom element, but it\n     * still can be mounted.\n     */\n    readonly name?: QualifiedName;\n\n    /**\n     * Existing element to extend by custom one.\n     */\n    readonly extend?: ElementDef.Extend;\n\n    /**\n     * Additional feature definition options.\n     */\n    readonly feature?: FeatureDef.Options;\n\n    /**\n     * Sets up component definition.\n     *\n     * This method is called before component definition context constructed.\n     *\n     * @param setup  Component definition setup.\n     */\n    setup?(setup: DefinitionSetup<T>): void;\n\n    /**\n     * Defines this component by calling the given component definition context methods.\n     *\n     * This function is called before the custom element is defined.\n     *\n     * @param context  Component definition context.\n     */\n    define?(context: DefinitionContext<T>): void;\n\n  }\n\n  /**\n   * Component definition holder.\n   *\n   * @typeparam T  A type of component.\n   */\n  export interface Holder<T extends object = any> {\n\n    /**\n     * The component definition this holder contains.\n     */\n    readonly [ComponentDef__symbol]: ComponentDef<T>;\n\n  }\n\n  /**\n   * Component definition factory.\n   *\n   * @typeparam T  A type of component.\n   */\n  export interface Factory<T extends object = any> {\n\n    /**\n     * Builds component definition.\n     *\n     * @param componentType  A component class constructor to build definition for.\n     *\n     * @returns Built component definition.\n     */\n    [ComponentDef__symbol](componentType: ComponentClass<T>): ComponentDef<T>;\n\n  }\n\n}\n\n/**\n * @internal\n */\nclass ComponentMeta extends MetaAccessor<ComponentDef.Options, ComponentDef> {\n\n  constructor() {\n    super(ComponentDef__symbol);\n  }\n\n  merge<T extends object>(defs: Iterable<ComponentDef.Options<T>>): ComponentDef.Options<T> {\n    return itsReduction<ComponentDef.Options<T>, ComponentDef.Options<T>>(\n        defs,\n        (prev, def) => ({\n          ...prev,\n          ...def,\n          setup: mergeFunctions(prev.setup, def.setup),\n          define: mergeFunctions(prev.define, def.define),\n          feature: prev.feature\n              ? def.feature ? FeatureDef.merge(prev.feature, def.feature) : prev.feature\n              : def.feature,\n        }),\n        {},\n    );\n  }\n\n  meta<T extends object>(source: ComponentDef<T>, componentType: ComponentClass<T>): ComponentDef.Options<T> {\n\n    const def = (source as any)[ComponentDef__symbol];\n\n    if (def != null) {\n      return this.meta(\n          typeof def === 'function' ? (source as ComponentDef.Factory<T>)[ComponentDef__symbol](componentType) : def,\n          componentType,\n      );\n    }\n    if ((source as any)[FeatureDef__symbol] != null) {\n      return {\n        feature: FeatureDef.for(componentType, source as FeatureDef),\n      };\n    }\n    if (isQualifiedName(source)) {\n      return { name: source };\n    }\n\n    return source as ComponentDef.Options;\n  }\n\n}\n\n/**\n * @internal\n */\nconst componentMeta = (/*#__PURE__*/ new ComponentMeta());\n\n/**\n * @internal\n */\nconst noComponentDef: ComponentDef.Factory = {\n  [ComponentDef__symbol]() {\n    return {};\n  },\n};\n\n/**\n * @category Core\n */\nexport const ComponentDef = {\n\n  /**\n   * Extracts component definition options from its type.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Target component class constructor.\n   *\n   * @returns Component definition options. May be empty if there is not definition attached to component type.\n   */\n  of<T extends object>(this: void, componentType: ComponentClass<T>): ComponentDef.Options<T> {\n    return componentMeta.of(componentType) as ComponentDef.Options<T> || {};\n  },\n\n  /**\n   * Builds component definition options for the given component class.\n   *\n   * @param componentType  Target component class constructor.\n   * @param source  A source of component definition.\n   *\n   * @returns Component definition.\n   */\n  for<T extends object>(\n      this: void,\n      componentType: ComponentClass<T>,\n      source: ComponentDef<T>,\n  ): ComponentDef.Options<T> {\n    return componentMeta.meta(source, componentType);\n  },\n\n  /**\n   * Merges multiple component definition options.\n   *\n   * @typeparam T  A type of component.\n   * @param defs  Component definition options to merge.\n   *\n   * @returns Merged component definition options.\n   */\n  merge<T extends object>(this: void, ...defs: ComponentDef.Options<T>[]): ComponentDef.Options<T> {\n    return componentMeta.merge(defs);\n  },\n\n  /**\n   * Merges multiple component definitions.\n   *\n   * @typeparam T  A type of component.\n   * @param defs  Component definitions to merge.\n   *\n   * @returns Merged component definition.\n   */\n  all<T extends object>(this: void, ...defs: ComponentDef<T>[]): ComponentDef<T> {\n    return itsReduction<ComponentDef<T>, ComponentDef.Factory<T>>(\n        defs,\n        (prev, def) => ({\n          [ComponentDef__symbol](componentType: ComponentClass<T>) {\n            return ComponentDef.merge(\n                ComponentDef.for(componentType, prev),\n                ComponentDef.for(componentType, def),\n            );\n          },\n        }),\n        noComponentDef,\n    );\n  },\n\n  /**\n   * Defines a component.\n   *\n   * Either assigns new or extends existing component definition and stores it under [[ComponentDef__symbol]] key.\n   *\n   * Each component can be passed directly to [[bootstrapComponents]] function or added as a requirement\n   * of another feature.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Component class constructor.\n   * @param defs  Component definitions.\n   *\n   * @returns The `type` instance.\n   */\n  define<T extends ComponentClass>(\n      this: void,\n      componentType: T,\n      ...defs: ComponentDef<InstanceType<T>>[]\n  ): T {\n    return componentMeta.define(componentType, defs);\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '../common';\nimport { ComponentDef, ComponentDef__symbol } from './component-def';\nimport { ComponentClass } from './definition';\n\n/**\n * Component decorator interface.\n *\n * In addition to being a decorator for component class, it may also serve as {@link ComponentDef component definition}.\n * Thus it can be added as parameter to {@link Component @Component} decorator, or used as class decorator by itself.\n *\n * Constructed by [[Component]] function.\n *\n * @category Core\n * @typeparam T  A type of decorated component class.\n */\nexport type ComponentDecorator<T extends ComponentClass = Class> =\n    & ((this: void, type: T) => T | void)\n    & ComponentDef<InstanceType<T>>;\n\n/**\n * Decorator of component class.\n *\n * Decorated class becomes component:\n * ```TypeScript\n * @Component({ name: 'my-element' })\n * class MyComponent {\n *   // ...\n * }\n * ```\n *\n * Such component can be registered with [[FeatureContext.define]] method or used as a feature, e.g. passed to\n * [[bootstrapComponents]] function, or added to [[FeatureDef.Options.needs]] property of another feature.\n *\n * This is an alternative to direct call to [[ComponentDef.Options.define]] method.\n *\n * @category Core\n * @typeparam T  A type of decorated component class.\n * @param defs  Component definitions.\n *\n * @returns A component class decorator.\n */\nexport function Component<T extends ComponentClass = Class>(\n    ...defs: ComponentDef<InstanceType<T>>[]\n): ComponentDecorator<T> {\n\n  const decorator = ((type: T) => ComponentDef.define(type, ...defs)) as ComponentDecorator<T>;\n  const def = decorator as ComponentDef.Factory<InstanceType<T>>;\n\n  def[ComponentDef__symbol] = () => ComponentDef.all(...defs);\n\n  return decorator;\n}\n","import { SingleContextKey } from 'context-values';\nimport { ComponentContext } from './component-context';\n\n/**\n * @internal\n */\nexport const ComponentContext__key = (/*#__PURE__*/ new SingleContextKey<ComponentContext>('component-context'));\n","import { SingleContextKey } from 'context-values';\nimport { eventSupplyOf } from 'fun-events';\nimport { DomEventDispatcher, OnDomEvent } from 'fun-events/dom';\nimport { ComponentContext__key } from './component-context.key.impl';\nimport { ComponentEventDispatcher } from './component-event';\n\n/**\n * @internal\n */\nexport const ComponentEventDispatcher__key = (/*#__PURE__*/ new SingleContextKey<ComponentEventDispatcher>(\n    'component-event-dispatcher',\n    {\n      byDefault(values) {\n\n        const context = values.get(ComponentContext__key);\n        const dispatcher = new DomEventDispatcher(context.element);\n\n        eventSupplyOf(dispatcher).needs(context);\n\n        return {\n          dispatch(event: Event): boolean {\n            return dispatcher.dispatch(event);\n          },\n          on<E extends Event>(type: string): OnDomEvent<E> {\n            return dispatcher.on(type);\n          },\n        };\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { ComponentContext__key } from './component-context.key.impl';\n\n/**\n * Component content root node.\n *\n * @category Core\n */\nexport type ContentRoot = any;\n\n/**\n * A key of component context value containing a component root element.\n *\n * This is an element itself by default. But can be overridden e.g. by {@link AttachShadow @AttachShadow} decorator.\n *\n * @category Core\n */\nexport const ContentRoot: SingleContextRef<ContentRoot> = (/*#__PURE__*/ new SingleContextKey<ContentRoot>(\n    'content-root',\n    {\n      byDefault(ctx) {\n        return ctx.get(ComponentContext__key).element;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { noop, valueProvider } from 'call-thru';\nimport { FnContextKey, FnContextRef } from 'context-values/updatable';\nimport { StatePath } from 'fun-events';\n\n/**\n * Component state updater function.\n *\n * @category Core\n */\nexport type StateUpdater =\n/**\n * @typeparam V  Updated value type\n * @param path  Updated state node path.\n * @param newValue  New value.\n * @param oldValue  Replaced value.\n */\n    <V>(this: void, path: StatePath, newValue: V, oldValue: V) => void;\n\n/**\n * A key of component context value containing a component state updates receiver function.\n *\n * Features are calling this function by default when component state changes, e.g. attribute value or DOM property\n * modified.\n *\n * Note that this value is not provided, unless the `StateSupport` feature is enabled.\n *\n * @category Core\n */\nexport const StateUpdater: FnContextRef<Parameters<StateUpdater>> = (/*#__PURE__*/ new FnContextKey(\n    'state-updater',\n    {\n      byDefault: valueProvider(noop),\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues } from 'context-values';\nimport { EventSupply, EventSupply__symbol, EventSupplyPeer, OnEvent, StatePath } from 'fun-events';\nimport { OnDomEvent } from 'fun-events/dom';\nimport { ComponentContext__key } from './component-context.key.impl';\nimport { ComponentEventDispatcher__key } from './component-event.key.impl';\nimport { ComponentMount } from './component-mount';\nimport { ContentRoot } from './content-root';\nimport { ComponentClass } from './definition';\nimport { StateUpdater } from './state-updater';\n\n/**\n * A key of a custom element and component properties containing a reference to component context.\n *\n * @category Core\n */\nexport const ComponentContext__symbol = (/*#__PURE__*/ Symbol('component-context'));\n\n/**\n * Component context.\n *\n * Passed to component constructor as its only parameter.\n *\n * Extends `ContextValues` interface. The values are provided by corresponding providers registered with\n * [[BootstrapSetup.perComponent]] and [[DefinitionSetup.perComponent]] methods.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class ComponentContext<T extends object = any> extends ContextValues implements EventSupplyPeer {\n\n  /**\n   * A key of component context value containing the component context instance itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<ComponentContext> {\n    return ComponentContext__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element constructed for the component according to its type.\n   *\n   * E.g. `HTMLElement` instance.\n   */\n  abstract readonly element: any;\n\n  /**\n   * A component instance.\n   *\n   * It is an error accessing this property before the component is created, e.g. from inside of component constructor\n   * or {@link DefinitionContext.whenComponent component instantiation event} receiver. A [[whenReady]] callback could\n   * be utilized to work this around.\n   */\n  abstract readonly component: T;\n\n  /**\n   * Component mount.\n   *\n   * This is defined when component is mounted to arbitrary element by [[ComponentFactory.mountTo]]. Ot is `undefined`\n   * for components created in standard way.\n   */\n  abstract readonly mount: ComponentMount<T> | undefined;\n\n  /**\n   * Whether the custom element is connected.\n   *\n   * This becomes `true` right before [[whenOn]] event is sent, and becomes `false` right before [[whenOff]] event is\n   * sent.\n   */\n  abstract readonly connected: boolean;\n\n  /**\n   * An event supply that {@link destroy destroys} component when cut off.\n   */\n  abstract readonly [EventSupply__symbol]: EventSupply;\n\n  /**\n   * An `OnEvent` sender of custom element connection events.\n   *\n   * The registered receivers are called when custom element is connected, i.e. its `connectedCallback()` method is\n   * called. If component is connected already the receiver is called immediately.\n   *\n   * Sends a connection supply that is cut off once custom element is disconnected.\n   */\n  abstract readonly whenOn: OnEvent<[EventSupply]>;\n\n  /**\n   * An `OnEvent` sender of custom element disconnection events.\n   *\n   * The registered receivers are called when custom element is disconnected, i.e. its `disconnectedCallback()` method\n   * is called. If component is ready but disconnected, the receiver is called immediately.\n   */\n  abstract readonly whenOff: OnEvent<[]>;\n\n  /**\n   * An `OnEvent` sender of component readiness event.\n   *\n   * The component is constructed shortly after custom element. So the component may not exist when requested\n   * e.g. inside component constructor or {@link DefinitionContext.whenComponent component instantiation event}\n   * receiver. The registered receiver will be notified when the component is constructed.\n   *\n   * If the component is constructed already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[this]>;\n\n  /**\n   * An `OnEvent` sender of component destruction reason event.\n   *\n   * The registered receiver is notified when [[destroy]] method is called. If the component is destroyed already\n   * the receiver is notified immediately.\n   */\n  abstract readonly whenDestroyed: OnEvent<[any]>;\n\n  /**\n   * Updates component's state.\n   *\n   * This is a shorthand for invoking a component {@link StateUpdater state updater} .\n   *\n   * Note that state update has no effect unless [[StateSupport]] feature is enabled or [[StateUpdater]] context value\n   * is provided by other means.\n   *\n   * @typeparam V  A type of changed value.\n   * @param key  Changed value key.\n   * @param newValue  New value.\n   * @param oldValue  Previous value.\n   */\n  readonly updateState: StateUpdater = updateComponentState.bind(this);\n\n  /**\n   * Extracts component context from its custom element or from component itself.\n   *\n   * @param element  Custom element instance created for the component or the component itself.\n   *\n   * @return Component context reference stored under [[ComponentContext__symbol]] key.\n   *\n   * @throws TypeError  When the given `element` does not contain component context reference.\n   */\n  static of<T extends object>(element: any): ComponentContext<T> {\n\n    const context = element[ComponentContext__symbol];\n\n    if (!context) {\n      throw TypeError(`No component context found in ${element}`);\n    }\n\n    return context;\n  }\n\n  /**\n   * Component content root.\n   *\n   * This is a shorthand for requesting a {@link ContentRoot content root} from component context.\n   */\n  get contentRoot(): any {\n    return this.get(ContentRoot);\n  }\n\n  /**\n   * Returns a `super` property value inherited from custom element parent.\n   *\n   * @param key  Target property key.\n   */\n  abstract elementSuper(key: PropertyKey): any;\n\n  /**\n   * Returns a DOM event producer for the given event type.\n   *\n   * This is a shorthand for invoking a component event producer function available under\n   * `[ComponentEventProducer.key]` key.\n   *\n   * @param type  An event type to listen for.\n   *\n   * @returns A producer of DOM event events of the given type.\n   */\n  on<E extends Event>(type: string): OnDomEvent<E> {\n    return this.get(ComponentEventDispatcher__key).on(type);\n  }\n\n  /**\n   * Dispatches an event to component element.\n   *\n   * This is a shorthand for invoking a component {@link ComponentEventDispatcher event dispatcher}.\n   *\n   * @param event  An event to dispatch.\n   */\n  dispatchEvent(event: Event): void {\n    this.get(ComponentEventDispatcher__key).dispatch(event);\n  }\n\n  /**\n   * Destroys the component.\n   *\n   * Removes element from the DOM tree. I.e. disconnects custom element first.\n   *\n   * After this method call the component should no longer be used.\n   *\n   * Note that component destruction is virtual. It is up to developer to decide when component is no longer needed.\n   *\n   * @param reason  Optional reason of destruction.\n   */\n  abstract destroy(reason?: any): void;\n\n}\n\n/**\n * @internal\n */\nfunction updateComponentState<V>(this: ComponentContext<any>, key: StatePath, newValue: V, oldValue: V): void {\n  this.get(StateUpdater)(key, newValue, oldValue);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextRef } from 'context-values';\nimport { OnDomEvent } from 'fun-events/dom';\nimport { ComponentContext } from './component-context';\nimport { ComponentEventDispatcher__key } from './component-event.key.impl';\n\n/**\n * Component event.\n *\n * Events of this type are thrown by various services to inform on component status changes.\n *\n * It is illegal to dispatch such events for elements not bound to components. It is reasonable to dispatch events\n * using [[ComponentEventDispatcher]] available in component context.\n *\n * The following event types supported:\n * - `wesib:component` is dispatched when component is bound to element. I.e. when HTML element is upgraded to custom\n *   one defined by component, or component is mounted to element. The event is dispatched when component is connected\n *   for the first time. I.e. when element is added to the document.\n *   This event bubbles and is not cancelable.\n *\n * @category Core\n * @event ComponentEvent#wesib:component\n */\nexport class ComponentEvent extends Event {\n\n  /**\n   * Target component context.\n   */\n  get context(): ComponentContext {\n    return ComponentContext.of(this.target);\n  }\n\n}\n\n/**\n * Component event dispatcher is used to listen for and dispatch component events.\n *\n * It is available in bootstrap context context.\n *\n * By default treats a component element as event target.\n *\n * @category Core\n */\nexport interface ComponentEventDispatcher {\n\n  /**\n   * Dispatches the DOM event for the given component.\n   *\n   * @param event  An event to dispatch.\n   *\n   * @returns `true` if either event's `cancelable` attribute value is `false` or its `preventDefault()` method was not\n   * invoked, or `false` otherwise.\n   */\n  dispatch(event: Event): boolean;\n\n  /**\n   * Returns an `OnDomEvent` sender of DOM events of the given type.\n   *\n   * @param type  An event type to listen for.\n   *\n   * @returns A producer of DOM event events of the given type.\n   */\n  on<E extends Event>(type: string): OnDomEvent<E>;\n\n}\n\n/**\n * A key of component context value containing component event dispatcher.\n *\n * @category Core\n */\nexport const ComponentEventDispatcher: SingleContextRef<ComponentEventDispatcher> = ComponentEventDispatcher__key;\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { valueProvider } from 'call-thru';\nimport { Class, decoratePropertyAccessor, PropertyAccessorDescriptor } from '../common';\nimport { ComponentDef, ComponentDef__symbol } from './component-def';\nimport { Component, ComponentDecorator } from './component.decorator';\nimport { ComponentClass } from './definition';\n\n/**\n * Component property decorator interface.\n *\n * Allows to construct a {@link ComponentDecorator component decorator} by declaring a virtual property to use instead\n * of decorated one.\n *\n * Constructed by [[ComponentProperty]] function.\n *\n * @category Core\n * @typeparam V  Property value type.\n * @typeparam T  A type of decorated component class.\n */\nexport interface ComponentPropertyDecorator<V, T extends ComponentClass = Class> {\n\n  /**\n   * Decorates component method.\n   *\n   * @typeparam P  Property value type.\n   * @param proto  Decorated class prototype.\n   * @param propertyKey  Decorated property key.\n   * @param descriptor  Decorated property descriptor.\n   *\n   * @returns  Either updated property descriptor, or nothing.\n   */\n  // eslint-disable-next-line\n  <P extends V>(\n      this: void,\n      proto: InstanceType<T>,\n      propertyKey: string | symbol,\n      descriptor?: TypedPropertyDescriptor<P>,\n  ): any | void;\n\n  /**\n   * Builds component decorator assuming the virtual property has the given value.\n   *\n   * @param value  Virtual property value.\n   * @param key  Virtual property key. Defaults to [[AnonymousComponentProperty__symbol]].\n   *\n   * @returns New component decorator.\n   */\n  As(\n      this: void,\n      value: V,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n  /**\n   * Builds component decorator assuming the virtual property value is provided by the given `provider`.\n   *\n   * @param provider  Virtual property read-only value provider.\n   * @param key  Virtual property key. Defaults to [[AnonymousComponentProperty__symbol]].\n   *\n   * @returns New component decorator.\n   */\n  By(\n      this: void,\n      provider: ComponentProperty.Provider<V, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n  /**\n   * Builds component decorator assuming the decorated property is available via the given `access` specifier.\n   *\n   * @param accessor  Virtual property accessor.\n   * @param key  Virtual property key. Defaults to [[AnonymousComponentProperty__symbol]].\n   *\n   * @returns New component decorator.\n   */\n  With(\n      this: void,\n      accessor: ComponentProperty.Accessor<V, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n}\n\nexport namespace ComponentProperty {\n\n  /**\n   * Component property value provider signature.\n   *\n   * This function will be called each time the property value is requested.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component.\n   */\n  export type Provider<V, T extends object = any> =\n  /**\n   * @param component  Component instance.\n   * @param key  Target property key.\n   *\n   * @returns Property value.\n   */\n      (\n          this: void,\n          component: T,\n          key: string | symbol,\n      ) => V;\n\n  /**\n   * Component property accessor.\n   *\n   * Allows to read and write property value.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component.\n   */\n  export interface Accessor<V, T extends object = any> {\n\n    /**\n     * Reads property value.\n     *\n     * May throw if the property is not readable.\n     *\n     * @param component  Target component instance.\n     * @param key  Property key.\n     *\n     * @returns Property value.\n     */\n    get(this: void, component: T, key: string | symbol): V;\n\n    /**\n     * Assigns new property value.\n     *\n     * May throw is the property is not writable.\n     *\n     * @param component  Target component instance.\n     * @param value  New property value.\n     * @param key  Property key.\n     */\n    set(this: void, component: T, value: V, key: string | symbol): void;\n\n  }\n\n  /**\n   * Component property descriptor.\n   *\n   * Passed to {@link Definer property definer} by [[ComponentProperty]] function to construct a {@link Definition\n   * property definition}.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component class.\n   */\n  export interface Descriptor<V, T extends ComponentClass = Class> {\n\n    /**\n     * Component class constructor.\n     */\n    readonly type: T;\n\n    /**\n     * Component property key.\n     */\n    readonly key: string | symbol;\n\n    /**\n     * Whether the property is initially writable.\n     *\n     * This can be changed by {@link Definition.get property read definition}.\n     */\n    readonly readable: boolean;\n\n    /**\n     * Whether the property is initially writable.\n     *\n     * This can be changed by {@link Definition.set property assignment definition}.\n     */\n    readonly writable: boolean;\n\n    /**\n     * Whether the property is initially enumerable.\n     *\n     * This can be changed by {@link Definition.enumerable property definition}.\n     */\n    readonly enumerable: boolean;\n\n    /**\n     * Whether the property is initially configurable.\n     *\n     * This can be changed by {@link Definition.configurable property definition}.\n     */\n    readonly configurable: boolean;\n\n    /**\n     * Reads property value.\n     *\n     * May throw if the property is not readable.\n     *\n     * @param component  Target component instance.\n     *\n     * @returns Property value.\n     */\n    get(this: void, component: InstanceType<T>): V;\n\n    /**\n     * Assigns new property value.\n     *\n     * May throw is the property is not writable.\n     *\n     * @param component  Target component instance.\n     * @param value  New property value.\n     */\n    set(this: void, component: InstanceType<T>, value: V): void;\n\n  }\n\n  /**\n   * Component property definition builder signature.\n   *\n   * This is a function called by [[ComponentProperty]] to define the property.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component class.\n   */\n  export type Definer<V, T extends ComponentClass = Class> =\n  /**\n   * @param descriptor  Component property descriptor.\n   *\n   * @returns Component property definition. Or nothing if the property definition is not to be changed.\n   */\n      (\n          this: void,\n          descriptor: Descriptor<V, T>,\n      ) => Definition<V, T> | void;\n\n  /**\n   * Property definition to apply to existing property.\n   *\n   * When applying to decorated property, this definition updates its definition.\n   *\n   * When applying to virtual property assumed by one of [[ComponentPropertyDescriptor]] methods, most of returned\n   * values ignored. Except for {@link Definition.componentDef component definition} and {@link Definition.access\n   * access specifier}.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component class.\n   */\n  export interface Definition<V, T extends ComponentClass = Class> {\n\n    /**\n     * Component definition to apply to component.\n     *\n     * When specified, it is used to enable certain functionality for decorated (or virtual) property.\n     */\n    readonly componentDef?: ComponentDef<InstanceType<T>>;\n\n    /**\n     * Whether to make the property enumerable.\n     *\n     * When specified, it is used as `enumerable` attribute value of decorated property descriptor.\n     */\n    readonly enumerable?: boolean;\n\n    /**\n     * Whether to make the property configurable.\n     *\n     * When specified, it is used as `configurable` attribute value of decorated property descriptor.\n     */\n    readonly configurable?: boolean;\n\n    /**\n     * Reads property value.\n     *\n     * When specified it changes how the property value is read.\n     *\n     * When neither [[get]], nor [[set]] specified, the property access does not change.\n     *\n     * @param component  Target component instance.\n     * @param key  Property key.\n     *\n     * @returns Property value.\n     */\n    get?(this: void, component: InstanceType<T>, key: string | symbol): V;\n\n    /**\n     * Assigns new property value.\n     *\n     * When specified it changes how the property value is assigned.\n     *\n     * When neither [[get]], nor [[set]] specified, the property access does not change.\n     *\n     * @param component  Target component instance.\n     * @param value  New property value.\n     * @param key  Property key.\n     */\n    set?(this: void, component: InstanceType<T>, value: V, key: string | symbol): void;\n\n  }\n\n}\n\n/**\n * Anonymous component property key.\n *\n * Used as a default virtual property key.\n *\n * @category Core\n */\nexport const AnonymousComponentProperty__symbol = (/*#__PURE__*/ Symbol('anonymous-component-property'));\n\n/**\n * Decorator of component property.\n *\n * Updates decorated property and component definition. Can be converted to {@link ComponentDecorator component\n * decorator} by calling appropriate method of returned decorator instance.\n *\n * @category Core\n * @typeparam V  Decorated property value type.\n * @typeparam T  A type of decorated component class.\n * @param define  Component property definition builder.\n *\n * @returns Component property decorator.\n */\nexport function ComponentProperty<V, T extends ComponentClass = Class>(\n    define: ComponentProperty.Definer<V, T>,\n): ComponentPropertyDecorator<V, T> {\n\n  const decorator = (\n      proto: InstanceType<T>,\n      propertyKey: string | symbol,\n      descriptor?: TypedPropertyDescriptor<V>,\n  ): any | void => decoratePropertyAccessor(\n      proto,\n      propertyKey,\n      descriptor,\n      desc => {\n\n        const { get: getValue, set: setValue } = desc;\n        const type = proto.constructor;\n        const { get, set, configurable, enumerable, componentDef = {} } = define({\n          type,\n          key: propertyKey,\n          readable: !!desc.get,\n          writable: !!desc.set,\n          enumerable: !!desc.enumerable,\n          configurable: !!desc.configurable,\n          get: getValue\n              ? ((component: InstanceType<T>) => getValue.call(component))\n              : (() => { throw new TypeError(`\"${String(propertyKey)}\" is not readable`); }),\n          set: setValue\n              ? ((component, value) => setValue.call(component, value))\n              : (() => { throw new TypeError(`\"${String(propertyKey)}\" is read-only`); }),\n        }) || {};\n\n        ComponentDef.define(type, componentDef);\n\n        const updated: PropertyAccessorDescriptor<V> = {\n          ...desc,\n          configurable: configurable ?? desc.configurable,\n          enumerable: enumerable ?? desc.enumerable,\n        };\n\n        if (get || set) {\n          updated.get = get && function (this: InstanceType<T>) {\n            return get(this, propertyKey);\n          };\n          updated.set = set && function (this: InstanceType<T>, value: V) {\n            set(this, value, propertyKey);\n          };\n        }\n\n        return updated;\n      },\n  );\n  const decorateWith = (\n      { get, set }: ComponentProperty.Accessor<V, InstanceType<T>>,\n      key: string | symbol = AnonymousComponentProperty__symbol,\n      writable: boolean,\n  ): ComponentDecorator<T> => Component({\n    [ComponentDef__symbol](type: InstanceType<T>) {\n\n      const def = define({\n        type,\n        key,\n        readable: true,\n        writable,\n        enumerable: false,\n        configurable: false,\n        get: component => get(component, key),\n        set: (component, value) => set(component, value, key),\n      });\n\n      return (def && def.componentDef) || {};\n    },\n  });\n  const By = (\n      provider: ComponentProperty.Provider<V, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T> => decorateWith(\n      ({\n        get(component, key) {\n          return provider(component, key);\n        },\n      } as ComponentProperty.Accessor<V>),\n      key,\n      false,\n  );\n\n  const result = decorator as ComponentPropertyDecorator<V, T>;\n\n  result.With = (access, key) => decorateWith(access, key, true);\n  result.By = By;\n  result.As = (value, key?) => By(valueProvider(value), key);\n\n  return result;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextValueOpts, ContextValues } from 'context-values';\nimport { ContextUpKey, ContextUpRef } from 'context-values/updatable';\nimport { AfterEvent, afterThe, EventKeeper, nextAfterEvent } from 'fun-events';\nimport { ComponentContext, ComponentContext__symbol } from '../../component';\n\n/**\n * Element adapter is a function able to convert a raw element to component. E.g. mount a component to it.\n *\n * Features may use it internally. E.g. an `AutoConnectSupport` applies it to each added DOM element.\n *\n * Multiple element adapters can be registered in bootstrap context.\n *\n * @category Core\n */\nexport type ElementAdapter =\n/**\n * @param element  Target raw element to adapt.\n *\n * @returns An adapted component's context, or `undefined` if element can not be adapted.\n */\n    (this: void, element: any) => ComponentContext | undefined;\n\n/**\n * @internal\n */\nclass ElementAdapterKey extends ContextUpKey<ElementAdapter, ElementAdapter> {\n\n  readonly upKey: ContextUpKey.UpKey<ElementAdapter, ElementAdapter>;\n\n  constructor() {\n    super('element-adapter');\n    this.upKey = this.createUpKey(\n        opts => opts.seed.keep.thru((...adapters) => {\n\n          const combined: ElementAdapter = adapters.reduce(\n              (prev, adapter) => element => prev(element) || adapter(element),\n              defaultElementAdapter,\n          );\n\n          const defaultProvider = (): AfterEvent<[ElementAdapter]> => afterThe(defaultElementAdapter);\n\n          return combined !== defaultElementAdapter\n              ? combined\n              : nextAfterEvent(opts.byDefault(defaultProvider) || defaultProvider());\n        }),\n    );\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          ElementAdapter,\n          EventKeeper<ElementAdapter[]> | ElementAdapter,\n          AfterEvent<ElementAdapter[]>>,\n  ): ElementAdapter {\n\n    let delegated: ElementAdapter;\n\n    opts.context.get(\n        this.upKey,\n        'or' in opts ? { or: opts.or != null ? afterThe(opts.or) : opts.or } : undefined,\n    )!(adapter => delegated = adapter);\n\n    return element => delegated(element);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultElementAdapter(element: any): ComponentContext {\n  return element[ComponentContext__symbol];\n}\n\n/**\n * A key of bootstrap context value containing combined [[ElementAdapter]] instance.\n *\n * @category Core\n */\nexport const ElementAdapter: ContextUpRef<ElementAdapter, ElementAdapter> = (/*#__PURE__*/ new ElementAdapterKey());\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { filterIt, itsEach, overArray } from 'a-iterable';\nimport { FnContextKey } from 'context-values/updatable';\nimport { isElement } from '../../common';\nimport { ComponentContext__symbol, ComponentMount } from '../../component';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { ElementAdapter } from './element-adapter';\n\n/**\n * Element mutations observer.\n *\n * It is a `MutationObserver` implementation that:\n * - always observes target's children,\n * - applies {@link ElementAdapter element adapter} to added elements,\n * - tracks mounted components {@link ComponentMount.connected connection state}.\n *\n * A function constructing element observer instance could be obtained from bootstrap context.\n *\n * @category Core\n */\nexport interface ElementObserver extends MutationObserver {\n\n  /**\n   * Configures the observer callback to begin receiving notifications of changes to the DOM that match the given\n   * options.\n   * To stop the MutationObserver (so that none of its callbacks will be triggered any longer), call\n   * [[disconnect]].\n   *\n   * @param target  A DOM node within the DOM tree to watch for changes, and to be the root of a subtree of nodes\n   * to be watched.\n   * @param options  An options that describe what DOM mutations should be reported to the observer's callback.\n   */\n  observe(target: Node, options?: ElementObserverInit): void;\n\n}\n\n/**\n * A key of bootstrap context value containing a function constructing a new [[ElementObserver]] instance.\n *\n * @category Core\n */\nexport const ElementObserver: FnContextKey<[MutationCallback], ElementObserver> = (/*#__PURE__*/ new FnContextKey(\n    'element-observer',\n    {\n      byDefault: bootstrapDefault(bsContext => {\n\n        const adapter = bsContext.get(ElementAdapter);\n        class DefaultElementObserver extends MutationObserver implements ElementObserver {\n\n          constructor(callback: MutationCallback) {\n            super(mutations => {\n              mutations.forEach(mutation => {\n                itsEach(\n                    overArray(mutation.removedNodes),\n                    node => mountOf(node)?.checkConnected(),\n                );\n                itsEach(\n                    filterIt(\n                        overArray(mutation.addedNodes),\n                        isElement,\n                    ),\n                    element => adapter(element)?.mount?.checkConnected(),\n                );\n              });\n              callback(mutations, this);\n            });\n          }\n\n          observe(target: Node, options?: ElementObserverInit): void {\n            super.observe(target, { ...options, childList: true });\n          }\n\n        }\n\n        return callback => new DefaultElementObserver(callback);\n      }),\n    },\n));\n\n/**\n * Element observer initialization options.\n *\n * @category Core\n */\nexport interface ElementObserverInit extends MutationObserverInit {\n\n  /**\n   * Whether mutations to target's children are to be observed.\n   *\n   * Always `true`.\n   */\n  childList?: true;\n\n}\n\n/**\n * @internal\n */\nfunction mountOf(node: any): ComponentMount | undefined {\n  return node[ComponentContext__symbol]?.mount;\n}\n","import { ComponentClass, ComponentFactory } from '../../component/definition';\n\n/**\n * @internal\n */\nexport const ComponentFactory__symbol = (/*#__PURE__*/ Symbol('component-factory'));\n\n/**\n * @internal\n */\nexport function componentFactoryOf<T extends object>(componentType: ComponentClass<T>): ComponentFactory<T> {\n\n  const factory = (componentType as any)[ComponentFactory__symbol];\n\n  if (!factory) {\n    throw new TypeError(`Component is not defined: ${componentType}`);\n  }\n\n  return factory;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues, SingleContextKey } from 'context-values';\nimport { html__naming, isQualifiedName, QualifiedName } from 'namespace-aliaser';\nimport { BootstrapWindow, DefaultNamespaceAliaser } from '../../boot/globals';\nimport { componentFactoryOf } from '../../boot/impl/component-factory.symbol.impl';\nimport { Class, PromiseResolver } from '../../common';\nimport { ComponentClass } from './component-class';\n\n/**\n * @internal\n */\nconst CustomElements__key = (/*#__PURE__*/ new SingleContextKey<CustomElements>(\n    'custom-elements',\n    {\n      byDefault: createCustomElements,\n    },\n));\n\n/**\n * Custom elements registry.\n *\n * This is used to register custom elements.\n *\n * Typically implemented by `window.customElements`.\n *\n * @category Core\n */\nexport abstract class CustomElements {\n\n  /**\n   * A key of bootstrap context value containing a `CustomElements` instance used to register custom\n   * elements.\n   *\n   * Target value defaults to `window.customElements` from the window provided under `[BootstrapWindow.key]`.\n   */\n  static get [ContextKey__symbol](): ContextKey<CustomElements> {\n    return CustomElements__key;\n  }\n\n  /**\n   * Defines custom element.\n   *\n   * @param componentTypeOrName  A component class constructor or custom element name. The latter may belong to\n   * namespace to avoid naming conflicts.\n   * @param elementType  A constructor of custom element to define.\n   */\n  abstract define(componentTypeOrName: ComponentClass | QualifiedName, elementType: Class): void;\n\n  /**\n   * Allows to wait for component definition.\n   *\n   * This corresponds to `window.customElements.whenDefined()` method.\n   *\n   * @param componentTypeOrName  Component class constructor or custom element name possibly belonging to some\n   * namespace.\n   *\n   * @return A promise that is resolved when custom element is registered.\n   *\n   * @throws TypeError If `componentType` does not contain a component definition.\n   */\n  abstract whenDefined(componentTypeOrName: ComponentClass | QualifiedName): Promise<void>;\n\n}\n\n/**\n * @internal\n */\nfunction createCustomElements(values: ContextValues): CustomElements {\n\n  const customElements: CustomElementRegistry = values.get(BootstrapWindow).customElements;\n  const nsAlias = values.get(DefaultNamespaceAliaser);\n\n  class WindowCustomElements extends CustomElements {\n\n    define(componentTypeOrName: ComponentClass | string, elementType: Class): void {\n      if (isQualifiedName(componentTypeOrName)) {\n        customElements.define(html__naming.name(componentTypeOrName, nsAlias), elementType);\n        return;\n      }\n\n      const factory = componentFactoryOf(componentTypeOrName);\n      const { name, extend } = factory.elementDef;\n\n      if (!name) {\n        componentResolver(componentTypeOrName).resolve(undefined);\n        return; // Anonymous component.\n      }\n      if (extend && extend.name) {\n        customElements.define(\n            html__naming.name(name, nsAlias),\n            elementType,\n            {\n              extends: extend.name,\n            },\n        );\n      } else {\n        customElements.define(html__naming.name(name, nsAlias), elementType);\n      }\n    }\n\n    whenDefined(componentTypeOrName: ComponentClass | string): Promise<void> {\n      if (isQualifiedName(componentTypeOrName)) {\n        return customElements.whenDefined(html__naming.name(componentTypeOrName, nsAlias));\n      }\n\n      const factory = componentFactoryOf(componentTypeOrName);\n      const { name } = factory.elementDef;\n\n      if (!name) {\n        return componentResolver(componentTypeOrName).promise;\n      }\n\n      return customElements.whenDefined(html__naming.name(name, nsAlias));\n    }\n\n  }\n\n  return new WindowCustomElements();\n}\n\n/**\n * @internal\n */\nconst ComponentResolver__symbol = (/*#__PURE__*/ Symbol('component-resolver'));\n\n/**\n * @internal\n */\nfunction componentResolver(componentType: ComponentClass): PromiseResolver<void> {\n  return (componentType as any)[ComponentResolver__symbol]\n      || ((componentType as any)[ComponentResolver__symbol] = new PromiseResolver());\n}\n","import { SingleContextKey } from 'context-values';\nimport { DefinitionContext } from './definition-context';\n\n/**\n * @internal\n */\nexport const DefinitionContext__key = (/*#__PURE__*/ new SingleContextKey<DefinitionContext>('definition-context'));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { QualifiedName } from 'namespace-aliaser';\nimport { BootstrapWindow } from '../../boot/globals';\nimport { Class } from '../../common';\nimport { ComponentDef } from '../component-def';\nimport { DefinitionContext__key } from './definition.context.key.impl';\n\n/**\n * Custom element definition meta.\n *\n * @category Core\n */\nexport interface ElementDef {\n\n  /**\n   * Custom element name.\n   *\n   * The name may belong to some namespace to avoid naming conflicts. I.e. it can be either a string, or\n   * name/namespace tuple.\n   *\n   * When omitted an anonymous component will be registered. Such component is not bound to custom element, but it\n   * still can be mounted.\n   */\n  readonly name?: QualifiedName;\n\n  /**\n   * Existing element to extend by custom one.\n   */\n  readonly extend: ElementDef.Extend;\n\n}\n\n/**\n * A key of definition context value containing a custom element definition.\n *\n * Target value defaults to `HTMLElement` from the window provided under `[BootstrapWindow.key]`,\n * unless `ComponentDef.extend.type` is specified.\n */\nexport const ElementDef: SingleContextRef<ElementDef> = (/*#__PURE__*/ new SingleContextKey<ElementDef>(\n    'element-def',\n    {\n      byDefault(values) {\n\n        const componentType = values.get(DefinitionContext__key).componentType;\n        const { name, extend } = ComponentDef.of(componentType);\n\n        const elementExtend: ElementDef.Extend = {\n          get type() {\n            return extend && extend.type || values.get(BootstrapWindow).HTMLElement;\n          },\n          get name() {\n            return extend && extend.name;\n          },\n        };\n\n        return {\n          get name() {\n            return name;\n          },\n          get extend() {\n            return elementExtend;\n          },\n        };\n      },\n    },\n));\n\n/**\n * @category Core\n */\nexport namespace ElementDef {\n\n  /**\n   * The definition of element to extend by custom one.\n   */\n  export interface Extend {\n\n    /**\n     * The class constructor of element to extend.\n     */\n    readonly type: Class;\n\n    /**\n     * The name of element to extend.\n     *\n     * This is to support `as` attribute of standard HTML element. Note that this is not supported by polyfills.\n     */\n    readonly name?: string;\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues, ContextValueSpec } from 'context-values';\nimport { OnEvent } from 'fun-events';\nimport { Class } from '../../common';\nimport { ComponentContext } from '../component-context';\nimport { ComponentClass } from './component-class';\nimport { DefinitionContext__key } from './definition.context.key.impl';\nimport { ElementDef } from './element-def';\n\n/**\n * Component definition context.\n *\n * Extends `ContextValues` interface. The values are provided by corresponding providers registered with\n * [[BootstrapSetup.perDefinition]] and [[DefinitionSetup.perDefinition]] methods. All [[BootstrapContext]] values\n * are available too.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class DefinitionContext<T extends object = any> extends ContextValues {\n\n  /**\n   * A key of definition context value containing the definition context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<DefinitionContext> {\n    return DefinitionContext__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element class constructor.\n   *\n   * It is an error accessing this property before the element class is created, e.g. from inside of\n   * `DefinitionListener` or `ComponentDef.define()` function. In these cases you may wish to add a `whenReady()`\n   * callback.\n   */\n  abstract readonly elementType: Class;\n\n  /**\n   * An `OnEvent` sender of component definition context upon its readiness.\n   *\n   * The custom element class is not constructed until component definition is complete.\n   * The registered receiver will be notified when the custom element class is constructed.\n   *\n   * If the custom element class is constructed already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[this]>;\n\n  /**\n   * An `OnEvent` sender of component context upon its instantiation.\n   *\n   * If component instantiated after the receiver is registered, that receiver would receive an instantiated component's\n   * context immediately.\n   *\n   * If component already exists when the receiver is registered, that receiver would receive instantiated component's\n   * context only when/if component is {@link ComponentContext.whenOn connected}. This is to prevent resource leaking\n   * on disconnected components that may be never used again.\n   */\n  abstract readonly whenComponent: OnEvent<[ComponentContext<T>]>;\n\n  /**\n   * Custom element definition.\n   */\n  get elementDef(): ElementDef {\n    return this.get(ElementDef);\n  }\n\n  /**\n   * Provides a value available in the context of each component of the defined component type.\n   *\n   * @typeparam Deps  A type of dependencies.\n   * @typeparam Src  The type of context value sources.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Component context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  abstract perComponent<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<ComponentContext<T>, any, Deps, Src, Seed>,\n  ): () => void;\n\n}\n","import { ContextKey, ContextKey__symbol, ContextRegistry, ContextValues, SingleContextKey } from 'context-values';\nimport { BootstrapContext } from '../bootstrap-context';\n\nconst BootstrapContextRegistry__key = (\n    /*#__PURE__*/ new SingleContextKey<BootstrapContextRegistry>('bootstrap-context-registry')\n);\n\n/**\n * @internal\n */\nexport class BootstrapContextRegistry extends ContextRegistry<BootstrapContext> {\n\n  static get [ContextKey__symbol](): ContextKey<BootstrapContextRegistry> {\n    return BootstrapContextRegistry__key;\n  }\n\n  readonly values: ContextValues;\n\n  static create(): BootstrapContextRegistry {\n    return new BootstrapContextRegistry();\n  }\n\n  private constructor() {\n    super();\n    this.provide({ a: BootstrapContextRegistry, is: this });\n    this.values = this.newValues();\n  }\n\n}\n","import { ContextKey, ContextKey__symbol, ContextRegistry, SingleContextKey } from 'context-values';\nimport { ComponentContext } from '../../component';\nimport { bootstrapDefault } from '../bootstrap-default';\n\nconst ComponentContextRegistry__key = (/*#__PURE__*/ new SingleContextKey<ComponentContextRegistry>(\n    'component-context-registry',\n    {\n      byDefault: bootstrapDefault(() => new ComponentContextRegistry()),\n    },\n));\n\n/**\n * @internal\n */\nexport class ComponentContextRegistry extends ContextRegistry<ComponentContext> {\n\n  static get [ContextKey__symbol](): ContextKey<ComponentContextRegistry> {\n    return ComponentContextRegistry__key;\n  }\n\n}\n","import { ContextKey, ContextKey__symbol, ContextRegistry, SingleContextKey } from 'context-values';\nimport { DefinitionContext } from '../../component/definition';\nimport { bootstrapDefault } from '../bootstrap-default';\n\nconst DefinitionContextRegistry__key = (/*#__PURE__*/ new SingleContextKey<DefinitionContextRegistry>(\n    'definition-context-registry',\n    {\n      byDefault: bootstrapDefault(context => new DefinitionContextRegistry(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport class DefinitionContextRegistry extends ContextRegistry<DefinitionContext> {\n\n  static get [ContextKey__symbol](): ContextKey<DefinitionContextRegistry> {\n    return DefinitionContextRegistry__key;\n  }\n\n}\n","import { nextArgs, nextSkip } from 'call-thru';\nimport { EventEmitter, onAny, OnEvent, onEventBy, trackValue } from 'fun-events';\nimport { superClassOf } from '../../common';\nimport { ComponentDef__symbol } from '../../component';\nimport { ComponentClass, DefinitionSetup } from '../../component/definition';\nimport { Unloader } from './unloader.impl';\n\n/**\n * @internal\n */\nexport function onPostDefSetup(\n    componentType: ComponentClass,\n    unloader: Unloader,\n): OnEvent<[DefinitionSetup]> {\n\n  const { on } = postDefSetup(componentType);\n\n  return onEventBy(receiver => {\n    on({\n      supply: receiver.supply.needs(unloader.supply),\n      receive(ctx, setup) {\n\n        const whenReady = setup.whenReady.tillOff(unloader.supply);\n        const whenComponent = setup.whenComponent.tillOff(unloader.supply);\n\n        receiver.receive(ctx, {\n          get componentType() {\n            return setup.componentType;\n          },\n          get whenReady() {\n            return whenReady;\n          },\n          get whenComponent() {\n            return whenComponent;\n          },\n          perDefinition(spec) {\n            return unloader.add(() => setup.perDefinition(spec));\n          },\n          perComponent(spec) {\n            return unloader.add(() => setup.perComponent(spec));\n          },\n        });\n      },\n    });\n  });\n}\n\n/**\n * @internal\n */\nexport interface PostDefSetup<T extends object = any> {\n  readonly on: OnEvent<[DefinitionSetup<T>]>;\n  send(setup: DefinitionSetup): void;\n  setup(setup: DefinitionSetup<T>): void;\n}\n\nconst PostDefSetup__symbol = (/*#__PURE__*/ Symbol('post-def-setup'));\n\n/**\n * @internal\n */\nexport function postDefSetup<T extends object>(componentType: ComponentClass<T>): PostDefSetup<T> {\n  // eslint-disable-next-line no-prototype-builtins\n  if (componentType.hasOwnProperty(PostDefSetup__symbol)) {\n    return (componentType as any)[PostDefSetup__symbol];\n  }\n\n  const tracker = trackValue<DefinitionSetup<T>>();\n  const emitter = new EventEmitter<[DefinitionSetup]>();\n  const onSetup: OnEvent<[DefinitionSetup<T>]> = tracker.read.thru(setup => setup ? nextArgs(setup) : nextSkip());\n  const on = onAny(onSetup, emitter);\n  const superType = superClassOf(componentType, type => ComponentDef__symbol in type);\n\n  if (superType) {\n\n    const superPostDefSetup = postDefSetup(superType);\n\n    on(setup => superPostDefSetup.send(setup));\n  }\n\n  const result: PostDefSetup<T> = {\n    on,\n    send(setup) {\n      emitter.send(setup);\n    },\n    setup(setup) {\n      tracker.it = setup;\n    },\n  };\n\n  Object.defineProperty(componentType, PostDefSetup__symbol, { value: result });\n\n  return result;\n}\n","import { AfterEvent, EventEmitter, OnEvent, onEventBy, trackValue } from 'fun-events';\nimport { ComponentContext } from '../../component';\n\nexport class WhenComponent<T extends object> {\n\n  readonly onCreated: OnEvent<[ComponentContext<T>]>;\n  readonly readNotifier: AfterEvent<[ComponentNotifier<T>]>;\n\n  constructor() {\n\n    const currentRev = trackValue(0);\n    const created = new EventEmitter<[ComponentContext<T>, number]>();\n\n    this.onCreated = onEventBy(receiver => {\n\n      const receiverRev = currentRev.it + 1;\n\n      created.on({\n        supply: receiver.supply,\n        receive: (eventContext, componentContext, notifiedRev) => {\n          if (notifiedRev < receiverRev) {\n            // Notify only receivers added after the last notification\n            receiver.receive(\n                {\n                  onRecurrent(recurrentReceiver) {\n                    eventContext.onRecurrent(recurrentContext => recurrentReceiver(recurrentContext));\n                  },\n                },\n                componentContext,\n            );\n          }\n        },\n      });\n\n      ++currentRev.it;\n    });\n    this.readNotifier = currentRev.read.keep.thru_(\n        rev => (context, notifiedRev) => {\n          created.send(context, notifiedRev);\n          return rev;\n        },\n    );\n  }\n\n}\n\nexport type ComponentNotifier<T extends object> = (\n    this: void,\n    context: ComponentContext<T>,\n    notifiedRev: number,\n) => number;\n","import { nextArgs, nextSkip, noop, valueProvider } from 'call-thru';\nimport { ContextRegistry, ContextValues, ContextValueSpec, SingleContextKey, SingleContextRef } from 'context-values';\nimport {\n  EventEmitter,\n  eventSupply,\n  EventSupply,\n  EventSupply__symbol, eventSupplyOf,\n  OnEvent,\n  trackValue,\n  ValueTracker,\n} from 'fun-events';\nimport { Class } from '../../common';\nimport {\n  ComponentContext as ComponentContext_,\n  ComponentContext__symbol,\n  ComponentDef,\n  ComponentEvent,\n  ComponentMount as ComponentMount_,\n} from '../../component';\nimport {\n  ComponentClass,\n  ComponentFactory as ComponentFactory_,\n  DefinitionContext as DefinitionContext_,\n  DefinitionSetup,\n  ElementDef,\n} from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { ComponentContextRegistry } from './component-context-registry.impl';\nimport { DefinitionContextRegistry } from './definition-context-registry.impl';\nimport { postDefSetup } from './post-def-setup.impl';\nimport { WhenComponent } from './when-component.impl';\n\n/**\n * @internal\n */\nexport interface ElementBuilder {\n  readonly definitions: EventEmitter<[DefinitionContext_]>;\n  readonly components: EventEmitter<[ComponentContext_]>;\n  buildElement<T extends object>(this: void, componentType: ComponentClass<T>): ComponentFactory_<T>;\n}\n\n/**\n * @internal\n */\nexport const ElementBuilder: SingleContextRef<ElementBuilder> = (/*#__PURE__*/ new SingleContextKey<ElementBuilder>(\n    'element-builder',\n    {\n      byDefault: bootstrapDefault(newElementBuilder),\n    },\n));\n\nconst enum ComponentStatus {\n  Building,\n  Ready,\n  Off,\n  On,\n}\n\nconst ComponentStatus__symbol = (/*#__PURE__*/ Symbol('component-status'));\n\nfunction newElementBuilder(bsContext: BootstrapContext): ElementBuilder {\n\n  const definitionContextRegistry$global = bsContext.get(DefinitionContextRegistry);\n  const componentContextRegistry$global = bsContext.get(ComponentContextRegistry);\n  const definitions = new EventEmitter<[DefinitionContext_]>();\n  const components = new EventEmitter<[ComponentContext_]>();\n\n  return {\n    definitions,\n    components,\n    buildElement<T extends object>(componentType: ComponentClass<T>) {\n\n      const def = ComponentDef.of(componentType);\n      const whenComponent = new WhenComponent<T>();\n      let componentContextRegistry$perType!: ComponentContextRegistry;\n      const ready = trackValue(false);\n      const whenReady: OnEvent<[]> = ready.read.thru(cls => cls ? nextArgs() : nextSkip());\n      // eslint-disable-next-line prefer-const\n      let definitionContext: DefinitionContext;\n\n      function createComponentContextRegistry(): ContextRegistry<ComponentContext_<T>> {\n        return componentContextRegistry$global.append(componentContextRegistry$perType);\n      }\n\n      class ComponentFactory extends ComponentFactory_ < T > {\n\n        get componentType(): ComponentClass<T> {\n          return definitionContext.componentType;\n        }\n\n        get elementType(): Class {\n          return definitionContext.elementType;\n        }\n\n        get elementDef(): ElementDef {\n          return definitionContext.elementDef;\n        }\n\n        mountTo(element: any): ComponentMount_<T> {\n          if (element[ComponentContext__symbol]) {\n            throw new Error(`Element ${element} already bound to component`);\n          }\n\n          const mount = createComponent({\n            definitionContext,\n            whenComponent,\n            registry: createComponentContextRegistry(),\n            element,\n            elementSuper(key) {\n              return element[key];\n            },\n            createMount(context: ComponentContext_<T>) {\n\n              class ComponentMount extends ComponentMount_<T> {\n\n                get context(): ComponentContext_<T> {\n                  return context;\n                }\n\n                get connected(): boolean {\n                  return elementStatus(element).it === ComponentStatus.On;\n                }\n\n                set connected(value: boolean) {\n                  elementStatus(element).it = value ? ComponentStatus.On : ComponentStatus.Off;\n                }\n\n                checkConnected(): boolean {\n\n                  const el: Element = element;\n                  const doc = el.ownerDocument;\n\n                  return this.connected = doc != null && doc.contains(el);\n                }\n\n              }\n\n              return new ComponentMount();\n            },\n          }).mount as ComponentMount_<T>;\n\n          mount.checkConnected();\n          componentCreated(mount.context);\n\n          return mount;\n        }\n\n      }\n\n      const componentFactory = new ComponentFactory();\n\n      class DefinitionContext extends DefinitionContext_<T> {\n\n        readonly get: ContextValues['get'];\n        readonly whenReady: OnEvent<[this]>;\n\n        get componentType(): ComponentClass<T> {\n          return componentType;\n        }\n\n        get whenComponent(): OnEvent<[ComponentContext_<T>]> {\n          return whenComponent.onCreated;\n        }\n\n        get elementType(): Class {\n          throw new Error('Custom element class is not constructed yet. Consider to use a `whenReady()` callback');\n        }\n\n        constructor() {\n          super();\n\n          const context = this;\n\n          this.whenReady = whenReady.thru_(valueProvider(this)).once as OnEvent<[this]>;\n\n          const definitionContextRegistry = new DefinitionContextRegistry(\n              definitionContextRegistry$global.seedIn(this),\n          );\n\n          definitionContextRegistry.provide({ a: DefinitionContext_, is: this });\n          definitionContextRegistry.provide({ a: ComponentFactory_, is: componentFactory });\n          this.get = definitionContextRegistry.newValues().get;\n          componentContextRegistry$perType = new ComponentContextRegistry(definitionContextRegistry.seedIn(this));\n\n          const definitionSetup: DefinitionSetup<T> = {\n            get componentType() {\n              return componentType;\n            },\n            get whenReady() {\n              return context.whenReady;\n            },\n            get whenComponent() {\n              return context.whenComponent;\n            },\n            perDefinition(spec) {\n              return definitionContextRegistry.provide(spec);\n            },\n            perComponent(spec) {\n              return componentContextRegistry$perType.provide(spec);\n            },\n          };\n\n          def.setup?.(definitionSetup);\n          postDefSetup(componentType).setup(definitionSetup);\n        }\n\n        perComponent<Deps extends any[], Src, Seed>(\n            spec: ContextValueSpec<ComponentContext_<T>, any, Deps, Src, Seed>,\n        ): () => void {\n          return componentContextRegistry$perType.provide(spec);\n        }\n\n      }\n\n      definitionContext = new DefinitionContext();\n\n      def.define?.(definitionContext);\n      definitions.send(definitionContext);\n\n      const elementType = createElementType(definitionContext, whenComponent, createComponentContextRegistry);\n\n      Object.defineProperty(definitionContext, 'elementType', {\n        configurable: true,\n        enumerable: true,\n        value: elementType,\n      });\n\n      ready.it = true;\n\n      return componentFactory;\n    },\n  };\n\n  function createElementType<T extends object>(\n      definitionContext: DefinitionContext_<T>,\n      whenComponent: WhenComponent<T>,\n      createRegistry: () => ContextRegistry<ComponentContext_<T>>,\n  ): Class {\n\n    const elementDef = definitionContext.get(ElementDef);\n\n    class Element extends elementDef.extend.type {\n\n      // Component context reference\n      [ComponentContext__symbol]: ComponentContext_<T>;\n\n      constructor() {\n        super();\n\n        const context = createComponent({\n          definitionContext,\n          whenComponent,\n          registry: createRegistry(),\n          element: this,\n          createMount: noop,\n          elementSuper: key => super[key],\n        });\n\n        componentCreated(context);\n      }\n\n      connectedCallback(): void {\n        elementStatus(this).it = ComponentStatus.On;\n      }\n\n      disconnectedCallback(): void {\n        elementStatus(this).it = ComponentStatus.Off;\n      }\n\n    }\n\n    return Element;\n  }\n\n  function createComponent<T extends object>(\n      {\n        definitionContext,\n        whenComponent,\n        registry,\n        element,\n        createMount,\n        elementSuper,\n      }: {\n        definitionContext: DefinitionContext_<T>;\n        whenComponent: WhenComponent<T>;\n        registry: ComponentContextRegistry;\n        element: any;\n        elementSuper(name: PropertyKey): any;\n        createMount(context: ComponentContext_<T>): ComponentMount_<T> | undefined;\n      },\n  ): ComponentContext_<T> {\n\n    const status = trackValue<ComponentStatus>(ComponentStatus.Building);\n    const destructionReason = trackValue<[any] | undefined>();\n\n    status.on(noop).whenOff(reason => destructionReason.it = [reason]);\n\n    const destroyed: OnEvent<[any]> = destructionReason.read.thru(reason => reason ? nextArgs(reason[0]) : nextSkip());\n    const whenDestroyed: OnEvent<[any]> = destroyed.once;\n\n    const whenOff: OnEvent<[]> = status.read.thru_(sts => sts === ComponentStatus.Off ? nextArgs() : nextSkip());\n    const whenOn: OnEvent<[EventSupply]> = status.read.thru_(\n        sts => {\n          if (sts !== ComponentStatus.On) {\n            return nextSkip();\n          }\n\n          const offSupply = eventSupply();\n\n          whenOff.once(() => offSupply.off());\n\n          return nextArgs(offSupply);\n        },\n    );\n\n    let mount: ComponentMount_<T> | undefined;\n    const values = registry.newValues();\n\n    class ComponentContext extends ComponentContext_<T> {\n\n      readonly get = values.get;\n      readonly elementSuper = elementSuper;\n      readonly whenReady: OnEvent<[this]>;\n\n      constructor() {\n        super();\n\n        const whenReady: OnEvent<[this]> = status.read.thru(sts => sts ? nextArgs(this) : nextSkip());\n\n        this.whenReady = whenReady.once;\n      }\n\n      get componentType(): ComponentClass<T> {\n        return definitionContext.componentType;\n      }\n\n      get element(): any {\n        return element;\n      }\n\n      get component(): T {\n        throw new Error('The component is not constructed yet. Consider to use a `whenReady()` callback');\n      }\n\n      get mount(): ComponentMount_<T> | undefined {\n        return mount || (mount = createMount(this));\n      }\n\n      get connected(): boolean {\n        return status.it === ComponentStatus.On;\n      }\n\n      get [EventSupply__symbol](): EventSupply {\n        return eventSupplyOf(status);\n      }\n\n      get whenOn(): OnEvent<[EventSupply]> {\n        return whenOn;\n      }\n\n      get whenOff(): OnEvent<[]> {\n        return whenOff;\n      }\n\n      get whenDestroyed(): OnEvent<[any]> {\n        return whenDestroyed;\n      }\n\n      destroy(reason?: any): void {\n        status.done(reason);\n      }\n\n    }\n\n    const context = new ComponentContext();\n    let lastRev = 0;\n\n    context.whenDestroyed(() => removeElement(context));\n    registry.provide({ a: ComponentContext_, is: context });\n\n    augmentElement();\n\n    whenComponent.readNotifier.once(notifier => lastRev = notifier(context, lastRev));\n    context.whenOn(supply => {\n      whenComponent.readNotifier({\n        supply,\n        receive(_, notifier) {\n          lastRev = notifier(context, lastRev);\n        },\n      });\n    });\n    components.send(context);\n\n    const component = newComponent(definitionContext.componentType, context);\n\n    Object.defineProperty(context, 'component', {\n      configurable: true,\n      enumerable: true,\n      value: component,\n    });\n\n    status.it = ComponentStatus.Ready;\n\n    return context;\n\n    function augmentElement(): void {\n      Object.defineProperty(element, ComponentContext__symbol, { value: context });\n      Object.defineProperty(element, ComponentStatus__symbol, { writable: true, value: status });\n    }\n  }\n\n}\n\n/**\n * Creates new component of the given type.\n *\n * It makes component context available under `[ComponentContext__symbol]` key in constructed component.\n * The component context is also available inside component constructor by temporarily assigning it to component\n * prototype.\n *\n * @typeparam T  A type of component.\n * @param type  Component class constructor.\n * @param context  Target component context.\n */\nfunction newComponent<T extends object>(type: ComponentClass<T>, context: ComponentContext_<T>): T {\n\n  const proto = type.prototype as any;\n  const prevContext = proto[ComponentContext__symbol];\n\n  proto[ComponentContext__symbol] = context;\n  try {\n\n    const component = new type(context);\n\n    Object.defineProperty(component, ComponentContext__symbol, { value: context });\n\n    return component;\n  } finally {\n    proto[ComponentContext__symbol] = prevContext;\n  }\n}\n\nfunction elementStatus(element: any): ValueTracker<ComponentStatus> {\n  return element[ComponentStatus__symbol];\n}\n\nfunction componentCreated(context: ComponentContext_): void {\n  context.whenOn.once(\n      () => context.dispatchEvent(new ComponentEvent('wesib:component', { bubbles: true })),\n  );\n}\n\nfunction removeElement(context: ComponentContext_): void {\n\n  const { element, mount } = context;\n\n  if (mount) {\n    mount.connected = false; // Disconnect mounted element\n  }\n\n  const parentNode: Element = element.parentElement;\n\n  if (parentNode) {\n    parentNode.removeChild(element);\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentContext } from './component-context';\n\n/**\n * A mount of the component to an element.\n *\n * This is constructed when a component is mounted to arbitrary element by [[ComponentFactory.mountTo]] method.\n *\n * Mounted components do not maintain their connection state automatically. It is a calling code responsibility to set\n * their connection state by updating [[ComponentMount.connected]] property. E.g. by calling a\n * [[ComponentMount.checkConnected]] method. An [[ElementObserver]] and [[AutoConnectSupport]] feature could be used to\n * do it automatically.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class ComponentMount<T extends object = any> {\n\n  /**\n   * Mounted component context.\n   */\n  abstract readonly context: ComponentContext<T>;\n\n  /**\n   * Component connection state.\n   *\n   * Updating this property triggers appropriate listeners registered in [[ComponentContext]].\n   *\n   * The initial state is set by [[checkConnected]] method.\n   */\n  abstract connected: boolean;\n\n  /**\n   * Mounted component.\n   */\n  get component(): T {\n    return this.context.component;\n  }\n\n  /**\n   * An element the component is mounted to.\n   */\n  get element(): any {\n    return this.context.element;\n  }\n\n  /**\n   * Checks whether the mounted component element is actually connected to its owning document.\n   *\n   * Updates the `connected` property and returns its value.\n   *\n   * @returns `true` if the component element is connected, or `false` otherwise.\n   */\n  abstract checkConnected(): boolean;\n\n}\n","import { itsEach, overArray } from 'a-iterable';\nimport { noop, valueProvider } from 'call-thru';\nimport { EventSupply, eventSupply } from 'fun-events';\n\n/**\n * @internal\n */\nexport interface Unloader {\n  readonly supply: EventSupply;\n  add(adder: () => () => void): () => void;\n}\n\nconst doNotAdd = valueProvider(noop);\n\n/**\n * @internal\n */\nexport function newUnloader(): Unloader {\n\n  const unloads: (() => void)[] = [];\n  let add = (adder: () => () => void): () => void => {\n\n    const unload = adder();\n\n    unloads.push(unload);\n\n    return unload;\n  };\n  const supply = eventSupply(() => {\n    add = doNotAdd;\n    itsEach(\n        overArray(unloads).reverse(),\n        unload => unload(),\n    );\n    unloads.length = 0;\n  });\n\n  return {\n    supply,\n    add(adder) {\n      return add(adder);\n    },\n  };\n}\n","import { ElementBuilder } from '../../boot/impl';\nimport { ComponentFactory__symbol } from '../../boot/impl/component-factory.symbol.impl';\nimport { ComponentClass, CustomElements } from '../../component/definition';\nimport { FeatureContext } from '../feature-context';\n\n/**\n * @internal\n */\nexport class ComponentRegistry {\n\n  private _definitionQueue: (() => void)[] = [];\n\n  constructor(private readonly _context: FeatureContext) {\n    _context.whenReady(() => {\n      this._definitionQueue.forEach(definition => definition());\n      delete this._definitionQueue;\n    });\n  }\n\n  get customElements(): CustomElements {\n    return this._context.get(CustomElements);\n  }\n\n  define<T extends object>(componentType: ComponentClass<T>): void {\n    this._definitionQueue.push(() => {\n\n      const elementBuilder = this._context.get(ElementBuilder);\n      const factory = elementBuilder.buildElement(componentType);\n\n      (componentType as any)[ComponentFactory__symbol] = factory;\n\n      this.customElements.define(componentType, factory.elementType);\n    });\n  }\n\n}\n","import { filterIt, mapIt } from 'a-iterable';\nimport { isPresent, nextArgs, NextCall, NextSkip, nextSkip } from 'call-thru';\nimport { ContextRegistry, ContextValueOpts, ContextValues, ContextValueSpec } from 'context-values';\nimport { ContextUpKey } from 'context-values/updatable';\nimport {\n  afterAll,\n  afterEach,\n  AfterEvent,\n  afterEventBy,\n  afterThe,\n  EventKeeper,\n  EventSupply,\n  nextAfterEvent,\n  OnEvent,\n  OnEventCallChain,\n  trackValue,\n} from 'fun-events';\nimport { BootstrapContext } from '../../boot';\nimport {\n  BootstrapContextRegistry,\n  ComponentContextRegistry,\n  DefinitionContextRegistry,\n  ElementBuilder,\n  newUnloader,\n  onPostDefSetup,\n} from '../../boot/impl';\nimport { ArraySet, Class } from '../../common';\nimport { ComponentContext } from '../../component';\nimport { ComponentClass, DefinitionContext, DefinitionSetup } from '../../component/definition';\nimport { FeatureContext } from '../feature-context';\nimport { ComponentRegistry } from './component-registry.impl';\nimport { FeatureClause, FeatureRequest } from './feature-request.impl';\n\nconst FeatureKey__symbol = (/*#__PURE__*/ Symbol('feature-key'));\n\n/**\n * @internal\n */\nexport class FeatureKey extends ContextUpKey<AfterEvent<[FeatureLoader?]>, FeatureClause> {\n\n  static of(feature: Class): FeatureKey {\n    // eslint-disable-next-line no-prototype-builtins\n    return feature.hasOwnProperty(FeatureKey__symbol)\n        ? (feature as any)[FeatureKey__symbol]\n        : ((feature as any)[FeatureKey__symbol] = new FeatureKey(feature));\n  }\n\n  get upKey(): this {\n    return this;\n  }\n\n  private constructor(feature: Class) {\n    super(`feature:${feature.name}`);\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          AfterEvent<[FeatureLoader?]>,\n          EventKeeper<FeatureClause[]> | FeatureClause,\n          AfterEvent<FeatureClause[]>>,\n  ): AfterEvent<[FeatureLoader?]> | null | undefined {\n    return loadFeature(\n        opts.context.get(BootstrapContext),\n        opts.seed.keep.thru(preferredFeatureClause),\n    );\n  }\n\n}\n\nfunction preferredFeatureClause(...clauses: FeatureClause[]): FeatureClause | undefined {\n\n  let required = false;\n  let preferred: FeatureClause | undefined;\n\n  for (const clause of clauses) {\n    switch (clause[1]) {\n      case 'is':\n        required = true;\n        if (!preferred) {\n          preferred = clause;\n        }\n        break;\n      case 'has':\n        preferred = clause;\n        break;\n      case 'needs':\n        required = true;\n    }\n  }\n\n  return required ? preferred : undefined;\n}\n\nfunction loadFeature(\n    bsContext: BootstrapContext,\n    from: AfterEvent<[FeatureClause?]>,\n): AfterEvent<[FeatureLoader?]> {\n  return afterEventBy<[FeatureLoader?]>(receiver => {\n\n    let origin: Class | undefined;\n    let source: AfterEvent<[FeatureLoader?]> = afterThe();\n    let stageId: Promise<FeatureStageId> = Promise.resolve('idle');\n\n    return afterAll({\n      clause: from,\n      deps: loadFeatureDeps(bsContext, from),\n    }).keep.thru_(({ clause: [clause], deps }): NextCall<OnEventCallChain, [FeatureLoader?]> => {\n      if (!clause) {\n        return nextArgs();\n      }\n\n      const [request, , target] = clause;\n\n      if (request.feature === origin) {\n        return nextAfterEvent(source); // Origin didn't change. Reuse the source.\n      }\n\n      origin = request.feature;\n\n      if (target !== origin) {\n        // Originated from replacement feature provider. Reuse its loader.\n        return nextAfterEvent(source = bsContext.get(FeatureKey.of(origin)).keep.thru_(\n            loader => {\n              loader!.to(stageId);\n              stageId = loader!.stage;\n              return loader;\n            },\n        ));\n      }\n\n      // Create feature's own loader\n      const ownLoader = new FeatureLoader(bsContext, request, deps).to(stageId);\n      const ownSource = afterThe(ownLoader);\n\n      return nextAfterEvent(source = afterEventBy<[FeatureLoader]>(\n          rcv => ownSource(rcv).whenOff(() => {\n            stageId = ownLoader.unload();\n          }),\n      ).share()); // Can be accessed again when reused\n    })(receiver);\n  }).keep.thru(\n      preventDuplicateLoader(),\n  );\n}\n\nfunction preventDuplicateLoader():\n    (\n        loader?: FeatureLoader,\n    ) => NextCall<OnEventCallChain, [FeatureLoader?]> | NextSkip {\n\n  let lastLoader: FeatureLoader | null | undefined = null; // Initially `null` to differ from `undefined`\n\n  return (loader?: FeatureLoader) => {\n    if (lastLoader === loader) {\n      return nextSkip();\n    }\n    lastLoader = loader;\n\n    if (!loader) {\n      return nextArgs<[FeatureLoader?]>();\n    }\n\n    return nextArgs<[FeatureLoader?]>(loader);\n  };\n}\n\nfunction loadFeatureDeps(\n    bsContext: BootstrapContext,\n    from: AfterEvent<[FeatureClause?]>,\n): AfterEvent<FeatureLoader[]> {\n  return from.keep.thru_(clause => {\n    if (!clause) {\n      return nextArgs();\n    }\n\n    const [{ def }] = clause;\n    const needs = new ArraySet(def.needs);\n\n    if (!needs.size) {\n      return nextArgs();\n    }\n\n    return nextAfterEvent(\n        afterEach(\n            ...mapIt(\n                needs,\n                dep => bsContext.get(FeatureKey.of(dep)),\n            ),\n        ).keep.thru_(presentFeatureDeps),\n    );\n  });\n}\n\nfunction presentFeatureDeps(...deps: [FeatureLoader?][]): NextCall<OnEventCallChain, FeatureLoader[]> {\n  return nextArgs<FeatureLoader[]>(\n      ...filterIt<FeatureLoader | undefined, FeatureLoader>(\n          mapIt(deps, dep => dep[0]),\n          isPresent,\n      ),\n  );\n}\n\n/**\n * @internal\n */\nexport class FeatureLoader {\n\n  readonly down: Promise<void>;\n  private _stage: Promise<FeatureStage>;\n  private _down!: () => void;\n  readonly state = trackValue(false);\n\n  constructor(\n      readonly bsContext: BootstrapContext,\n      readonly request: FeatureRequest,\n      readonly deps: FeatureLoader[],\n  ) {\n    this.down = new Promise(resolve => this._down = resolve);\n    this._stage = Promise.resolve(new SetupFeatureStage(this));\n  }\n\n  get stage(): Promise<FeatureStageId> {\n    return this._stage.then(stage => stage.after);\n  }\n\n  get ready(): boolean {\n    return this.state.it;\n  }\n\n  to(stageId: Promise<FeatureStageId>): this {\n\n    const lastStage = this._stage;\n\n    this._stage = stageId.then(id => lastStage.then(stage => stage[id]()));\n\n    return this;\n  }\n\n  async setup(): Promise<void> {\n    await (this._stage = this._stage.then(stage => stage.setup()));\n  }\n\n  async init(): Promise<void> {\n    await (this._stage = this._stage.then(stage => stage.init()));\n  }\n\n  async unload(): Promise<FeatureStageId> {\n\n    const prevStage = this._stage;\n\n    delete this._stage; // Unloaded feature should never be accessed again.\n\n    const stage = await prevStage;\n    const stageId = await stage.stop();\n\n    this._down();\n\n    return stageId;\n  }\n\n}\n\ntype FeatureStageId = 'idle' | 'setup' | 'init';\ntype FeatureStageStop = (this: void) => Promise<any>;\n\nabstract class FeatureStage {\n\n  abstract readonly after: FeatureStageId;\n\n  constructor(\n      readonly loader: FeatureLoader,\n      private readonly _stop: FeatureStageStop = () => Promise.resolve(),\n  ) {}\n\n  idle(): Promise<this> {\n    return Promise.resolve(this);\n  }\n\n  abstract setup(): Promise<FeatureStage>;\n\n  abstract init(): Promise<FeatureStage>;\n\n  stop(): Promise<FeatureStageId> {\n    return this._stop().then(() => this.after);\n  }\n\n  protected perDep(action: (dep: FeatureLoader) => Promise<void>): Promise<any> {\n\n    const { deps } = this.loader;\n\n    return Promise.all(deps.map(dep => action(dep)));\n  }\n\n}\n\nclass SetupFeatureStage extends FeatureStage {\n\n  get after(): 'idle' {\n    return 'idle';\n  }\n\n  async setup(): Promise<FeatureStage> {\n    await this.perDep(loader => loader.setup());\n\n    const { bsContext, request: { def } } = this.loader;\n    const [context, supply] = newFeatureContext(bsContext, this.loader);\n\n    def.setup?.(context);\n\n    return new InitFeatureStage(\n        this.loader,\n        context,\n        () => Promise.resolve(supply.off()),\n    );\n  }\n\n  init(): Promise<FeatureStage> {\n    return this.setup().then(stage => stage.init());\n  }\n\n}\n\nclass InitFeatureStage extends FeatureStage {\n\n  get after(): 'setup' {\n    return 'setup';\n  }\n\n  constructor(\n      state: FeatureLoader,\n      private readonly _context: FeatureContext,\n      stop: FeatureStageStop,\n  ) {\n    super(state, stop);\n  }\n\n  setup(): Promise<FeatureStage> {\n    return Promise.resolve(this);\n  }\n\n  async init(): Promise<FeatureStage> {\n    await this.perDep(loader => loader.init());\n\n    const { request: { def } } = this.loader;\n\n    def.init?.(this._context);\n\n    return new ActiveFeatureStage(this);\n  }\n\n}\n\nclass ActiveFeatureStage extends FeatureStage {\n\n  get after(): 'init' {\n    return 'init';\n  }\n\n  constructor(prev: InitFeatureStage) {\n    super(prev.loader, () => prev.stop());\n    prev.loader.state.it = true;\n  }\n\n  setup(): Promise<FeatureStage> {\n    return Promise.resolve(this);\n  }\n\n  init(): Promise<FeatureStage> {\n    return Promise.resolve(this);\n  }\n\n}\n\nfunction newFeatureContext(\n    bsContext: BootstrapContext,\n    loader: FeatureLoader,\n): [FeatureContext, EventSupply] {\n\n  const unloader = newUnloader();\n  let componentRegistry: ComponentRegistry;\n  const definitionContextRegistry = bsContext.get(DefinitionContextRegistry);\n  const componentContextRegistry = bsContext.get(ComponentContextRegistry);\n  const registry = new ContextRegistry<FeatureContext>(bsContext);\n  const elementBuilder = bsContext.get(ElementBuilder);\n  const onDefinition = elementBuilder.definitions.on.tillOff(unloader.supply);\n  const onComponent = elementBuilder.components.on.tillOff(unloader.supply);\n\n  class Context extends FeatureContext {\n\n    readonly get = registry.newValues().get;\n    readonly whenReady: OnEvent<[FeatureContext]>;\n\n    constructor() {\n      super();\n\n      const whenReady: OnEvent<[FeatureContext]> = afterAll({\n        st: loader.state,\n        bs: trackValue<BootstrapContext>().by(bsContext.whenReady),\n      }).thru(\n          ({ st: [ready], bs: [bs] }) => bs && ready ? nextArgs(this) : nextSkip(),\n      );\n\n      this.whenReady = whenReady.once;\n      registry.provide({ a: FeatureContext, is: this });\n      componentRegistry = new ComponentRegistry(this);\n    }\n\n    get feature(): Class {\n      return loader.request.feature;\n    }\n\n    get onDefinition(): OnEvent<[DefinitionContext]> {\n      return onDefinition;\n    }\n\n    get onComponent(): OnEvent<[ComponentContext]> {\n      return onComponent;\n    }\n\n    provide<Deps extends any[], Src, Seed>(\n        spec: ContextValueSpec<BootstrapContext, any, Deps, Src, Seed>,\n    ): () => void {\n      return unloader.add(() => bsContext.get(BootstrapContextRegistry).provide(spec));\n    }\n\n    perDefinition<Deps extends any[], Src, Seed>(\n        spec: ContextValueSpec<DefinitionContext, any, Deps, Src, Seed>,\n    ): () => void {\n      return unloader.add(() => definitionContextRegistry.provide(spec));\n    }\n\n    perComponent<Deps extends any[], Src, Seed>(\n        spec: ContextValueSpec<ComponentContext, any, Deps, Src, Seed>,\n    ): () => void {\n      return unloader.add(() => componentContextRegistry.provide(spec));\n    }\n\n    setupDefinition<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionSetup]> {\n      return onPostDefSetup(componentType, unloader);\n    }\n\n    define<T extends object>(componentType: ComponentClass<T>): void {\n      componentRegistry.define(componentType);\n    }\n\n  }\n\n  return [new Context(), unloader.supply];\n}\n","import { ArraySet, Class, mergeFunctions } from '../../common';\nimport { ComponentDef, ComponentDef__symbol } from '../../component';\nimport { FeatureDef } from '../feature-def';\nimport { FeatureNeedsError } from '../feature-needs-error';\nimport { FeatureKey } from './feature-loader.impl';\nimport { FeatureRequester } from './feature-requester.impl';\n\n/**\n * @internal\n */\nexport type FeatureClause = [FeatureRequest, 'is' | 'needs' | 'has', Class];\n\n/**\n * @internal\n */\nexport type FeatureNeedClause = [FeatureRequest, 'needs' | 'has', Class];\n\n/**\n * @internal\n */\nexport class FeatureRequest {\n\n  readonly def: FeatureDef.Options;\n  private _uses = 0;\n\n  constructor(\n      private readonly _requester: FeatureRequester,\n      readonly feature: Class,\n      private _revoke: () => void,\n  ) {\n    this.def = featureDef(feature);\n  }\n\n  request(clauses: readonly FeatureNeedClause[]): this {\n\n    const requester = this._requester;\n    const { registry } = requester;\n    const isClause: FeatureClause = [this, 'is', this.feature];\n\n    this._revokeBy(registry.provide({\n      a: FeatureKey.of(this.feature),\n      is: isClause,\n    }));\n\n    new ArraySet(this.def.has).forEach(feature => {\n\n      const clause: FeatureNeedClause = [this, 'has', feature];\n\n      this._revokeBy(registry.provide({ a: FeatureKey.of(feature), is: clause }));\n\n      // Request the provided feature _after_ provider\n      const request = requester.request(feature, [...clauses, clause]);\n\n      this._revokeBy(() => request.unuse());\n    });\n\n    new ArraySet(this.def.needs).forEach(feature => {\n\n      const clause: FeatureNeedClause = [this, 'needs', feature];\n\n      const request = requester.request(feature, [...clauses, clause]);\n\n      this._revokeBy(() => request.unuse());\n      this._revokeBy(registry.provide({ a: FeatureKey.of(feature), is: clause }));\n    });\n\n    this._uses = 1;\n\n    return this;\n  }\n\n  reuse(clauses: readonly FeatureNeedClause[]): this {\n    if (!this._uses) {\n      throw new FeatureNeedsError(clauses.map(([{ feature }, reason, need]) => [feature, reason, need]));\n    }\n\n    ++this._uses;\n\n    return this;\n  }\n\n  unuse(): void {\n    if (!--this._uses) {\n      this._revoke();\n    }\n  }\n\n  private _revokeBy(revoke: () => void): void {\n    this._revoke = mergeFunctions(revoke, this._revoke);\n  }\n\n}\n\nfunction featureDef(featureType: Class): FeatureDef.Options {\n\n  let def = FeatureDef.of(featureType);\n\n  if (ComponentDef__symbol in featureType) {\n    def = FeatureDef.merge(\n        def,\n        {\n          init(context) {\n            context.define(featureType);\n          },\n        },\n    );\n\n    const { feature } = ComponentDef.of(featureType);\n\n    if (feature) {\n      def = FeatureDef.merge(def, feature);\n    }\n\n  }\n\n  return def;\n}\n\n","import { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { BootstrapContext, bootstrapDefault } from '../../boot';\nimport { BootstrapContextRegistry } from '../../boot/impl';\nimport { Class } from '../../common';\nimport { FeatureNeedClause, FeatureRequest } from './feature-request.impl';\n\nconst FeatureRequester__key = (/*#__PURE__*/ new SingleContextKey<FeatureRequester>(\n    'feature-requester',\n    {\n      byDefault: bootstrapDefault(context => new FeatureRequester(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport class FeatureRequester {\n\n  static get [ContextKey__symbol](): ContextKey<FeatureRequester> {\n    return FeatureRequester__key;\n  }\n\n  readonly registry: BootstrapContextRegistry;\n  private readonly _map = new Map<Class, FeatureRequest>();\n\n  constructor(context: BootstrapContext) {\n    this.registry = context.get(BootstrapContextRegistry);\n  }\n\n  request(feature: Class, clauses: readonly FeatureNeedClause[] = []): FeatureRequest {\n\n    const existing = this._map.get(feature);\n\n    if (existing) {\n      return existing.reuse(clauses);\n    }\n\n    const request = new FeatureRequest(this, feature, () => this._map.delete(feature));\n\n    this._map.set(feature, request);\n\n    return request.request(clauses);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { nextArgs, nextSkip } from 'call-thru';\nimport { AfterEvent, afterEventBy, OnEvent, trackValue } from 'fun-events';\nimport { newNamespaceAliaser } from 'namespace-aliaser';\nimport { Class } from '../../common';\nimport { ComponentClass, ComponentFactory, CustomElements } from '../../component/definition';\nimport { FeatureDef, FeatureRef, FeatureStatus } from '../../feature';\nimport { FeatureKey, FeatureLoader, FeatureRequester } from '../../feature/loader';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { DefaultNamespaceAliaser } from '../globals';\nimport { BootstrapContextRegistry } from '../impl';\nimport { componentFactoryOf } from '../impl/component-factory.symbol.impl';\n\n/**\n * Bootstraps components.\n *\n * Both features and components can be passed as parameters to this function.\n *\n * @category Core\n * @param features  Features and components to enable.\n *\n * @returns Bootstrap context instance.\n */\nexport function bootstrapComponents(...features: Class[]): BootstrapContext {\n\n  const bootstrapContextRegistry = BootstrapContextRegistry.create();\n  const { bootstrapContext, complete } = initBootstrap(bootstrapContextRegistry);\n  const feature = features.length === 1 ? features[0] : bootstrapFeature(features);\n\n  bootstrapContext.get(FeatureRequester).request(feature);\n  bootstrapContext.get(FeatureKey.of(feature))(loader => {\n    loader!.init().then(complete);\n  });\n\n  return bootstrapContext;\n}\n\n/**\n * @internal\n */\nfunction bootstrapFeature(needs: Class[]): Class {\n  return FeatureDef.define(class BootstrapFeature {}, { needs });\n}\n\n/**\n * @internal\n */\nconst enum BootstrapStage {\n  Init,\n  Ready,\n}\n\n/**\n * @internal\n */\nfunction initBootstrap(\n    bootstrapContextRegistry: BootstrapContextRegistry,\n): {\n  bootstrapContext: BootstrapContext;\n  complete(): void;\n} {\n\n  const stage = trackValue<BootstrapStage>(BootstrapStage.Init);\n  const values = bootstrapContextRegistry.values;\n\n  class Context extends BootstrapContext {\n\n    readonly get = values.get;\n    readonly whenReady: OnEvent<[BootstrapContext]>;\n\n    constructor() {\n      super();\n\n      const whenReady: OnEvent<[BootstrapContext]> = stage.read.thru(\n          s => s ? nextArgs(this) : nextSkip(),\n      );\n\n      this.whenReady = whenReady.once;\n      bootstrapContextRegistry.provide({ a: DefaultNamespaceAliaser, by: newNamespaceAliaser });\n      bootstrapContextRegistry.provide({ a: BootstrapContext, is: this });\n    }\n\n    async whenDefined<C extends object>(componentType: ComponentClass<C>): Promise<ComponentFactory<C>> {\n      await new Promise(this.whenReady);\n      await this.get(CustomElements).whenDefined(componentType);\n      return componentFactoryOf(componentType);\n    }\n\n    load(feature: Class<any>): FeatureRef {\n\n      interface FeatureInfo {\n        status: FeatureStatus;\n        down?: Promise<void>;\n      }\n\n      const status = afterEventBy<[FeatureInfo]>(receiver => {\n\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const request = bootstrapContext.get(FeatureRequester).request(feature);\n        const info = trackValue<FeatureInfo>({\n          status: {\n            feature,\n            ready: false,\n          },\n        });\n\n        this.get(FeatureKey.of(feature))({\n          supply: receiver.supply,\n          receive(_ctx, ldr) {\n\n            // Present until `request` revoked\n            // But that happens only when supply is cut off.\n            const loader = ldr as FeatureLoader;\n\n            info.it = {\n              status: {\n                feature: loader.request.feature,\n                ready: loader.ready,\n              },\n              down: loader.down,\n            };\n            if (!loader.ready) {\n              loader.init().then(() => {\n                info.it = {\n                  status: {\n                    feature: loader.request.feature,\n                    ready: true,\n                  },\n                  down: loader.down,\n                };\n              });\n            }\n          },\n        }).whenOff(() => {\n          request.unuse(); // Apply this callback _after_ registration complete,\n                           // to prevent receiver call.\n        });\n\n        info.read(receiver);\n      }).share();\n\n      let whenDown: Promise<void>;\n      const supply = status(({ down }) => {\n        whenDown = down!;\n      });\n      const read: AfterEvent<[FeatureStatus]> = status.keep.thru(\n          info => info.status,\n      ).tillOff(supply);\n\n      class Ref extends FeatureRef {\n\n        get read(): AfterEvent<[FeatureStatus]> {\n          return read;\n        }\n\n        get down(): Promise<void> {\n          return whenDown;\n        }\n\n        dismiss(reason?: any): Promise<void> {\n          supply.off(reason);\n          return whenDown;\n        }\n\n      }\n\n      return new Ref();\n    }\n\n  }\n\n  const bootstrapContext = new Context();\n\n  return {\n    bootstrapContext,\n    complete(): void {\n      stage.it = BootstrapStage.Ready;\n    },\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { AfterEvent, AfterEvent__symbol, EventKeeper } from 'fun-events';\nimport { FeatureStatus } from './feature-status';\n\n/**\n * Dynamically loaded feature reference.\n *\n * It is returned from [[BootstrapContext.load]] and can be used to read feature load status and unload it.\n *\n * Implements an `EventKeeper` interface by sending a feature load status updates.\n *\n * @category Core\n */\nexport abstract class FeatureRef implements EventKeeper<[FeatureStatus]> {\n\n  /**\n   * An `AfterEvent` sender of feature load status updates.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[FeatureStatus]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[FeatureStatus]> {\n    return this.read;\n  }\n\n  /**\n   * A promise resolved when feature is unloaded.\n   *\n   * This happens after all feature references dismissed.\n   */\n  abstract readonly down: Promise<void>;\n\n  /**\n   * Dismisses feature reference.\n   *\n   * When all feature references dismissed, then unloads the feature. This removes everything set up by the\n   * feature via [[BootstrapSetup]] and [[DefinitionSetup]].\n   *\n   * @param reason  Arbitrary reason of feature reference dismiss. This will be reported by load status supplies\n   * as their cut off reason.\n   *\n   * @returns A promise resolved when feature is unloaded. This happens only after all feature references dismissed.\n   */\n  abstract dismiss(reason?: any): Promise<void>;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { MultiContextKey, MultiContextRef } from 'context-values';\n\n/**\n * Custom element attribute change callback signature.\n *\n * This function is called whenever a new attribute value assigned.\n *\n * @category Feature\n * @typeparam T  A type of component.\n */\nexport type AttributeChangedCallback<T extends object> =\n/**\n * @param component  Component instance.\n * @param newValue  New attribute value.\n * @param oldValue  Previous attribute value, or `null` if there were no value assigned.\n */\n    (this: void, component: T, newValue: string, oldValue: string | null) => void;\n\n/**\n * Custom element attribute descriptor.\n *\n * Descriptors are to be registered in component's definition context in order to make them available to component.\n * The {@link Attribute @Attribute}, {@link Attributes @Attributes}, and {@link AttributeChanged @AttributeChanged}\n * decorators are doing so.\n *\n * @category Feature\n */\nexport interface AttributeDescriptor<T extends object = any> {\n\n  /**\n   * Attribute name.\n   */\n  readonly name: string;\n\n  /**\n   * Attribute change callback that will be called each time attribute value changes.\n   */\n  readonly change: AttributeChangedCallback<T>;\n\n}\n\n/**\n * A key of component definition context value containing attribute descriptors.\n *\n * @category Feature\n */\nexport const AttributeDescriptor: MultiContextRef<AttributeDescriptor> = (\n    /*#__PURE__*/ new MultiContextKey<AttributeDescriptor>('attribute-descriptor')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing element an attributes.\n *\n * Thus, an attribute state path is always something like `[AttributePath__root, 'attribute-name']`.\n *\n * @category Feature\n */\nexport const AttributePath__root = (/*#__PURE__*/ Symbol('attribute'));\n\n/**\n * A path to the named attribute state.\n *\n * @category Feature\n */\nexport type AttributePath = readonly [keyof AttributePath__rootKeys, string];\n\n/**\n * Constructs a named attribute state path.\n *\n * @category Feature\n * @param name  Target attribute name.\n *\n * @return Attribute state path.\n */\nexport function attributePathTo(name: string): AttributePath {\n  return [AttributePath__root, name];\n}\n\n/**\n * @category Feature\n */\n// eslint-disable-next-line @typescript-eslint/class-name-casing\nexport interface AttributePath__rootKeys {\n  [AttributePath__root]: true;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { noop } from 'call-thru';\nimport { StatePath } from 'fun-events';\nimport { ComponentContext } from '../../component';\nimport { AttributeUpdateReceiver } from './attribute-def';\nimport { AttributeChangedCallback } from './attribute-descriptor';\nimport { attributePathTo } from './attribute-path';\n\n/**\n * @internal\n */\nexport function attributeStateUpdate<T extends object>(\n    name: string,\n    updateState: boolean | AttributeUpdateReceiver<T> | StatePath = true,\n): AttributeChangedCallback<T> {\n  if (updateState === false) {\n    return noop;\n  }\n  if (updateState === true || typeof updateState === 'function') {\n\n    const path = attributePathTo(name);\n    const update: AttributeUpdateReceiver<T> = updateState === true ? updateAttributeState : updateState;\n\n    return (component: T, newValue, oldValue) => update(component, path, newValue, oldValue);\n  }\n\n  return (component: T, newValue, oldValue) => updateAttributeState(component, updateState, newValue, oldValue);\n}\n\nfunction updateAttributeState<T extends object>(\n    component: T,\n    path: StatePath,\n    newValue: string,\n    oldValue: string | null,\n): void {\n  ComponentContext.of(component).updateState(path, newValue, oldValue);\n}\n","import { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { BootstrapWindow } from '../../boot/globals';\nimport { Class, mergeFunctions } from '../../common';\nimport { ComponentContext, ComponentMount } from '../../component';\nimport { DefinitionContext } from '../../component/definition';\nimport { AttributeChangedCallback, AttributeDescriptor } from './attribute-descriptor';\n\nconst AttributeRegistry__key = (/*#__PURE__*/ new SingleContextKey<AttributeRegistry>('attribute-registry'));\n\n/**\n * @internal\n */\nexport class AttributeRegistry<T extends object = any> {\n\n  static get [ContextKey__symbol](): ContextKey<AttributeRegistry> {\n    return AttributeRegistry__key;\n  }\n\n  private _attrs?: Map<string, AttributeChangedCallback<T>>;\n\n  constructor(private readonly _context: DefinitionContext) {\n  }\n\n  get attrs(): Map<string, AttributeChangedCallback<T>> {\n    if (this._attrs) {\n      return this._attrs;\n    }\n\n    const attrs = new Map<string, AttributeChangedCallback<T>>();\n\n    this._context.get(AttributeDescriptor).forEach(desc => {\n\n      const { name, change } = desc;\n\n      attrs.set(name, mergeFunctions(attrs.get(name), change));\n    });\n\n    return this._attrs = attrs;\n  }\n\n  define(elementType: Class): void {\n\n    const attrs = this.attrs;\n    const observedAttributes = Array.from(attrs.keys());\n\n    if (!observedAttributes.length) {\n      return; // No attributes defined\n    }\n\n    Object.defineProperty(elementType, 'observedAttributes', {\n      configurable: true,\n      enumerable: true,\n      value: observedAttributes,\n    });\n    Object.defineProperty(elementType.prototype, 'attributeChangedCallback', {\n      configurable: true,\n      enumerable: true,\n      value: function (name: string, oldValue: string | null, newValue: string) {\n        attrs.get(name)!(ComponentContext.of<T>(this).component, newValue, oldValue);\n      },\n    });\n  }\n\n  mount(mount: ComponentMount<T>): void {\n\n    const element = mount.element;\n    const attrs = this.attrs;\n    const attributeFilter = Array.from(attrs.keys());\n\n    if (!attributeFilter.length) {\n      return; // No attributes defined\n    }\n\n    const MutationObserver = this._context.get(BootstrapWindow).MutationObserver;\n    const observer = new MutationObserver(\n        records => records.forEach(\n            record => {\n\n              const attributeName = record.attributeName as string;\n\n              return attrs.get(attributeName)!(\n                  ComponentContext.of<T>(element).component,\n                  element.getAttribute(attributeName),\n                  record.oldValue,\n              );\n            },\n        ),\n    );\n\n    observer.observe(element, {\n      attributes: true,\n      attributeFilter,\n      attributeOldValue: true,\n    });\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { FeatureDef, FeatureDef__symbol } from '../feature-def';\nimport { AttributeRegistry } from './attribute-registry.impl';\n\n/**\n * @internal\n */\nconst AttributesSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.perDefinition({ as: AttributeRegistry });\n    setup.onDefinition(definitionContext => {\n      // Define element prototype attributes\n      definitionContext.whenReady(\n          ({ elementType }) => definitionContext.get(AttributeRegistry).define(elementType),\n      );\n    });\n    setup.onComponent(componentContext => {\n\n      const mount = componentContext.mount;\n\n      if (mount) {\n        // Mount element attributes\n        componentContext.get(AttributeRegistry).mount(mount);\n      }\n    });\n  },\n};\n\n/**\n * A feature adding attributes to custom elements.\n *\n * This feature is enabled automatically whenever an `@Attribute`, `@Attributes`, or `@AttributeChanged` decorator\n * applied to component.\n *\n * @category Feature\n */\nexport class AttributesSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return AttributesSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentContext, ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { AttributeDef } from './attribute-def';\nimport { AttributeDescriptor } from './attribute-descriptor';\nimport { parseAttributeDescriptor } from './attribute-descriptor.impl';\nimport { AttributesSupport } from './attributes-support.feature';\n\n/**\n * Creates a decorator for component's property that accesses custom element's attribute.\n *\n * The decorated property accesses corresponding attribute on read, and updates it on setting.\n *\n * This decorator automatically enables [[AttributesSupport]] feature.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Attribute definition or just an attribute name.\n *\n * @return Component property decorator.\n */\nexport function Attribute<T extends ComponentClass>(\n    def?: AttributeDef<InstanceType<T>> | string,\n): ComponentPropertyDecorator<string | null, T> {\n  return ComponentProperty(({ type, key }) => {\n\n    const descriptor = parseAttributeDescriptor(type.prototype, key, def);\n    const { name } = descriptor;\n\n    return {\n      componentDef: {\n        feature: {\n          needs: AttributesSupport,\n        },\n        setup(setup) {\n          setup.perDefinition({ a: AttributeDescriptor, is: descriptor });\n        },\n      },\n      get(component: InstanceType<T>): string | null {\n        return ComponentContext.of(component).element.getAttribute(name);\n      },\n      set(component: InstanceType<T>, newValue: string | null) {\n        ComponentContext.of(component).element.setAttribute(name, newValue);\n      },\n    };\n  });\n}\n","import { ComponentClass } from '../../component/definition';\nimport { AttributeDef } from './attribute-def';\nimport { AttributeChangedCallback, AttributeDescriptor } from './attribute-descriptor';\nimport { attributeStateUpdate } from './attribute-state-update.impl';\n\n/**\n * @internal\n */\nexport function parseAttributeDescriptor<T extends ComponentClass>(\n    target: InstanceType<T>,\n    propertyKey: string | symbol,\n    opts?: AttributeDef<InstanceType<T>> | string,\n): AttributeDescriptor<InstanceType<T>> {\n\n  let name: string;\n  let change: AttributeChangedCallback<InstanceType<T>>;\n\n  if (typeof opts === 'string') {\n    name = opts;\n    change = attributeStateUpdate(name);\n  } else {\n    if (opts && opts.name) {\n      name = opts.name;\n    } else if (typeof propertyKey !== 'string') {\n      throw new TypeError(\n          'Attribute name is required as property key is not a string: '\n          + `${target.constructor.name}.prototype.${String(propertyKey)}`,\n      );\n    } else {\n      name = propertyKey;\n    }\n\n    change = attributeStateUpdate(name, opts && opts.updateState);\n  }\n\n  return { name, change };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { StatePath } from 'fun-events';\nimport { Class } from '../../common';\nimport { isArray } from '../../common/types.impl';\nimport { Component, ComponentDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { AttributeUpdateReceiver } from './attribute-def';\nimport { AttributeDescriptor } from './attribute-descriptor';\nimport { attributeStateUpdate } from './attribute-state-update.impl';\nimport { AttributesSupport } from './attributes-support.feature';\n\n/**\n * Creates a component decorator declaring supported custom element's attributes.\n *\n * This decorator automatically enables [[AttributesSupport]] feature.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param items  Attributes definition options. Either an attribute definition item, or an array of such items.\n *\n * @return New component decorator.\n */\nexport function Attributes<T extends ComponentClass = Class>(\n    items: Attributes.Item<InstanceType<T>> | readonly Attributes.Item<InstanceType<T>>[],\n): ComponentDecorator<T> {\n  return Component({\n    feature: { needs: AttributesSupport },\n    setup(setup) {\n\n      const defineByItem = (item: Attributes.Item<InstanceType<T>>): void => {\n        if (typeof item === 'string') {\n          setup.perDefinition({\n            a: AttributeDescriptor,\n            is: {\n              name: item,\n              change: attributeStateUpdate(item),\n            },\n          });\n        } else {\n          Object.keys(item).forEach(name => {\n            setup.perDefinition({\n              a: AttributeDescriptor,\n              is: {\n                name,\n                change: attributeStateUpdate(name, item[name]),\n              },\n            });\n          });\n        }\n      };\n\n      if (isArray<Attributes.Item<InstanceType<T>>>(items)) {\n        items.forEach(defineByItem);\n      } else {\n        defineByItem(items);\n      }\n    },\n  });\n}\n\nexport namespace Attributes {\n\n  /**\n   * Attribute definition item.\n   *\n   * This is either an attribute name, or a per-attribute options map.\n   *\n   * @typeparam T  A type of component.\n   */\n  export type Item<T extends object> = Map<T> | string;\n\n  /**\n   * Per-attribute definition options.\n   *\n   * This is a map with attribute names as keys and their state update instructions as values.\n   *\n   * The state update instruction can be one of:\n   * - `false` to not update the component state,\n   * - `true` to update the component state with changed attribute key,\n   * - a state value key to update, or\n   * - an attribute update receiver function with custom state update logic.\n   *\n   * @typeparam T  A type of component.\n   */\n  export interface Map<T extends object> {\n    readonly [name: string]: boolean | StatePath | AttributeUpdateReceiver<T>;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { StateTracker } from 'fun-events';\n\n/**\n * @internal\n */\nconst ComponentState__key = (/*#__PURE__*/ new SingleContextKey<ComponentState>('component-state'));\n\n/**\n * Component state tracker.\n *\n * @category Feature\n */\nexport class ComponentState extends StateTracker {\n\n  static get [ContextKey__symbol](): ContextKey<ComponentState> {\n    return ComponentState__key;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing component state properties.\n *\n * Thus a property state path is always something like `[StatePropertyPath__root, 'property-name']`.\n *\n * @category Feature\n */\nexport const StatePropertyPath__root = (/*#__PURE__*/ Symbol('state-property'));\n\n/**\n * A path to the named component property state.\n *\n * @category Feature\n */\nexport type StatePropertyPath<K extends PropertyKey = PropertyKey> = readonly [keyof StatePropertyPath__rootKeys, K];\n\n/**\n * Constructs a named component property state path.\n *\n * @category Feature\n * @param key  Target property key.\n *\n * @return DOM property state path.\n */\nexport function statePropertyPathTo<K extends PropertyKey = PropertyKey>(key: K): StatePropertyPath<K> {\n  return [StatePropertyPath__root, key];\n}\n\n/**\n * @category Feature\n */\n// eslint-disable-next-line @typescript-eslint/class-name-casing\nexport interface StatePropertyPath__rootKeys {\n  [StatePropertyPath__root]: true;\n}\n","import { StatePath } from 'fun-events';\nimport { ComponentContext } from '../../component';\nimport { StatePropertyPath, statePropertyPathTo } from './state-property-path';\nimport { StatePropertyUpdateReceiver } from './state-property.decorator';\n\n/**\n * @internal\n */\nexport type StatePropertyUpdateCallback<T extends object> = <K extends keyof T>(\n    this: void,\n    component: T,\n    newValue: T[K],\n    oldValue: T[K],\n) => void;\n\n/**\n * @internal\n */\nexport function statePropertyUpdate<T extends object>(\n    propertyKey: PropertyKey,\n    updateState: true | StatePropertyUpdateReceiver<T> | StatePath = true,\n): StatePropertyUpdateCallback<T> {\n  if (updateState === true || typeof updateState === 'function') {\n\n    const path = statePropertyPathTo(propertyKey as keyof T);\n    const update = updateState === true ? updateStatePropertyState : updateState;\n\n    return (component, newValue, oldValue) => update(component, path, newValue, oldValue);\n  }\n\n  return (component, newValue, oldValue) => {\n    if (newValue !== oldValue) {\n      ComponentContext.of(component).updateState(updateState, newValue, oldValue);\n    }\n  };\n}\n\nfunction updateStatePropertyState<T extends object, K extends keyof T>(\n    component: T,\n    path: StatePropertyPath<K>,\n    newValue: T[K],\n    oldValue: T[K],\n): void {\n  if (newValue !== oldValue) {\n    ComponentContext.of(component).updateState(path, newValue, oldValue);\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentContext, StateUpdater } from '../../component';\nimport { FeatureDef, FeatureDef__symbol } from '../feature-def';\nimport { ComponentState } from './component-state';\n\n/**\n * @internal\n */\nconst StateSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.perComponent({\n      a: ComponentState,\n      by(context: ComponentContext) {\n\n        const state = new ComponentState();\n\n        context.whenDestroyed(reason => state.done(reason));\n\n        return state;\n      },\n    });\n    setup.perComponent({\n      a: StateUpdater,\n      by(state: ComponentState) {\n        return state.update;\n      },\n      with: [ComponentState],\n    });\n  },\n};\n\n/**\n * Component state support feature.\n *\n * When enabled, it registers the following component context values:\n *\n * - [[StateUpdater]] that allows to update the component state, and\n * - [[ComponentState]] that allows to track component state changes.\n *\n * Other features would use this to notify when the state changes. E.g. [[DomPropertiesSupport]]\n * and [[AttributesSupport]] features issue state updates when needed.\n *\n * @category Feature\n */\nexport class StateSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return StateSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { StatePath } from 'fun-events';\nimport { Class } from '../../common';\nimport { ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { StatePropertyPath } from './state-property-path';\nimport { statePropertyUpdate } from './state-property-update.impl';\nimport { StateSupport } from './state-support.feature';\n\n/**\n * Creates a decorator of component property containing part of component state.\n *\n * Once such property updated, the component state is {@link ComponentContext.updateState also updated}.\n *\n * Enables [[StateSupport]] feature when applied.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Custom element property definition.\n *\n * @returns Component property decorator.\n */\nexport function StateProperty<V = any, T extends ComponentClass = Class>(\n    { updateState }: StatePropertyDef = {},\n): ComponentPropertyDecorator<V, T> {\n  return ComponentProperty(({ get, set, key }) => {\n    if (updateState !== false) {\n\n      const setValue = set;\n      const update = statePropertyUpdate<InstanceType<T>>(key, updateState);\n\n      set = (component, newValue) => {\n\n        const oldValue = get(component);\n\n        setValue(component, newValue);\n        update(component, newValue, oldValue);\n      };\n    }\n\n    return {\n      componentDef: {\n        feature: {\n          needs: StateSupport,\n        },\n      },\n      get,\n      set,\n    };\n  });\n}\n\n/**\n * Component state property definition.\n *\n * This is a parameter to {@link StateProperty @StateProperty} decorator applied to component property.\n *\n * @category Feature\n */\nexport interface StatePropertyDef<T extends object = any> {\n\n  /**\n   * Whether to update the component state after this property changed.\n   *\n   * Can be one of:\n   * - `false` to not update the component state,\n   * - `true` (the default value) to update the component state with changed property key,\n   * - a state value key to update, or\n   * - an state property update receiver function with custom state update logic.\n   *\n   * By default does not update component state if property value didn't change.\n   */\n  readonly updateState?: boolean | StatePath | StatePropertyUpdateReceiver<T>;\n\n}\n\n/**\n * Component state property updates receiver invoked when its value changed.\n *\n * @category Feature\n * @typeparam T  A type of component.\n */\nexport type StatePropertyUpdateReceiver<T extends object> =\n/**\n * @typeparam K  A type of component property keys.\n * @param component  Component instance.\n * @param path  The changed property state path in the form of `[StatePropertyPath__root, propertyKey]`.\n * @param newValue  New property value.\n * @param oldValue  Previous property value.\n */\n    <K extends keyof T>(\n        this: void,\n        component: T,\n        path: StatePropertyPath<K>,\n        newValue: T[K],\n        oldValue: T[K],\n    ) => void;\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { nextArgs } from 'call-thru';\nimport { EventSupply, eventSupply, EventSupply__symbol, OnEvent, StatePath, ValueTracker } from 'fun-events';\nimport { ComponentContext } from '../../component';\nimport { ComponentState } from '../state';\nimport { attributePathTo } from './attribute-path';\n\n/**\n * Creates a tracker of custom element's attribute value.\n *\n * Requires [[AttributesSupport]] feature to be enabled and attribute to be defined. E.g. with {@link Attribute\n * @Attribute}, {@link AttributeChanged @AttributeChanged}, or {@link Attributes @Attributes} decorator.\n *\n * @category Feature\n * @param context  Target component context.\n * @param name  Attribute name.\n * @param path  Custom attribute state path.\n *\n * @returns New attribute value tracker.\n */\nexport function trackAttribute(\n    context: ComponentContext,\n    name: string,\n    path: StatePath = attributePathTo(name),\n): ValueTracker<string | null> {\n\n  const { element }: { element: Element } = context;\n  const state = context.get(ComponentState).track(path);\n  const supply = eventSupply();\n  const on: OnEvent<[string | null, string | null]> = state.onUpdate.thru(\n      (_path, newValue, oldValue) => nextArgs(newValue, oldValue),\n  ).tillOff(supply);\n\n  class AttributeTracker extends ValueTracker<string | null> {\n\n    get on(): OnEvent<[string | null, string | null]> {\n      return on;\n    }\n\n    get [EventSupply__symbol](): EventSupply {\n      return supply;\n    }\n\n    get it(): string | null {\n      return element.getAttribute(name);\n    }\n\n    set it(value: string | null) {\n      if (!supply.isOff) {\n        if (value == null) {\n          element.removeAttribute(name);\n        } else {\n          element.setAttribute(name, value);\n        }\n      }\n    }\n\n  }\n\n  return new AttributeTracker();\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { MultiContextKey, MultiContextRef } from 'context-values';\n\n/**\n * Custom element property descriptor.\n *\n * Descriptors are to be registered in component's definition context in order to make them available to component.\n * The {@link DomProperty @DomProperty} decorator is doing so.\n *\n * @category Feature\n */\nexport interface DomPropertyDescriptor {\n\n  /**\n   * Custom element property key.\n   */\n  readonly key: PropertyKey;\n\n  /**\n   * Custom element property descriptor.\n   */\n  readonly descriptor: PropertyDescriptor;\n\n}\n\n/**\n * A key of component definition context value containing custom element property descriptors.\n *\n * @category Feature\n */\nexport const DomPropertyDescriptor: MultiContextRef<DomPropertyDescriptor> = (\n    /*#__PURE__*/ new MultiContextKey<DomPropertyDescriptor>('dom-property-descriptor')\n);\n","import { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { Class } from '../../common';\nimport { ComponentMount } from '../../component';\nimport { DefinitionContext } from '../../component/definition';\nimport { DomPropertyDescriptor } from './dom-property-descriptor';\n\nconst DomPropertyRegistry__key = (/*#__PURE__*/ new SingleContextKey<DomPropertyRegistry>('dom-property-registry'));\n\n/**\n * @internal\n */\nexport class DomPropertyRegistry {\n\n  static get [ContextKey__symbol](): ContextKey<DomPropertyRegistry> {\n    return DomPropertyRegistry__key;\n  }\n\n  private _props?: Map<PropertyKey, PropertyDescriptor>;\n\n  constructor(private readonly _context: DefinitionContext) {\n  }\n\n  get props(): Map<PropertyKey, PropertyDescriptor> {\n    if (this._props) {\n      return this._props;\n    }\n\n    return this._props = new Map<PropertyKey, PropertyDescriptor>(\n        this._context.get(DomPropertyDescriptor)\n            .map(({ key, descriptor }) => [key, descriptor]),\n    );\n  }\n\n  define<T extends object>(elementType: Class<T>): void {\n\n    const prototype = elementType.prototype;\n\n    this.props.forEach((desc, key) => {\n      Object.defineProperty(prototype, key, desc);\n    });\n  }\n\n  mount<T extends object>(mount: ComponentMount<T>): void {\n\n    const element = mount.element;\n\n    this.props.forEach((desc, key) => {\n      Object.defineProperty(element, key, desc);\n    });\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { FeatureDef, FeatureDef__symbol } from '../feature-def';\nimport { DomPropertyRegistry } from './dom-property-registry.impl';\n\n/**\n * @internal\n */\nconst DomPropertiesSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.perDefinition({ as: DomPropertyRegistry });\n    setup.onDefinition(definitionContext => {\n      // Define element prototype properties\n      definitionContext.whenReady(\n          ({ elementType }) => definitionContext.get(DomPropertyRegistry).define(elementType),\n      );\n    });\n    setup.onComponent(componentContext => {\n\n      const mount = componentContext.mount;\n\n      if (mount) {\n        // Mount element properties\n        componentContext.get(DomPropertyRegistry).mount(mount);\n      }\n    });\n  },\n};\n\n/**\n * A feature adding properties to custom elements.\n *\n * This feature is enabled automatically whenever a {@link DomProperty @DomProperty} decorator applied to component.\n *\n * @category Feature\n */\nexport class DomPropertiesSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return DomPropertiesSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing DOM properties.\n *\n * Thus a property state path is always something like `[DomPropertyPath__root, 'property-name']`.\n *\n * @category Feature\n */\nexport const DomPropertyPath__root = (/*#__PURE__*/ Symbol('dom-property'));\n\n/**\n * A path to the named DOM property state.\n *\n * @category Feature\n */\nexport type DomPropertyPath<K extends PropertyKey = PropertyKey> = readonly [keyof DomPropertyPath__rootKeys, K];\n\n/**\n * Constructs a named DOM property state path.\n *\n * @category Feature\n * @param key  Target property key.\n *\n * @return DOM property state path.\n */\nexport function domPropertyPathTo<K extends PropertyKey = PropertyKey>(key: K): DomPropertyPath<K> {\n  return [DomPropertyPath__root, key];\n}\n\n/**\n * @category Feature\n */\n// eslint-disable-next-line @typescript-eslint/class-name-casing\nexport interface DomPropertyPath__rootKeys {\n  [DomPropertyPath__root]: true;\n}\n","import { StatePath } from 'fun-events';\nimport { ComponentContext } from '../../component';\nimport { DomPropertyUpdateReceiver } from './dom-property-def';\nimport { DomPropertyPath, domPropertyPathTo } from './dom-property-path';\n\n/**\n * @internal\n */\nexport type DomPropertyUpdateCallback<T extends object> = <K extends keyof T>(\n    this: void,\n    component: T,\n    newValue: T[K],\n    oldValue: T[K],\n) => void;\n\n/**\n * @internal\n */\nexport function domPropertyUpdate<T extends object>(\n    propertyKey: PropertyKey,\n    updateState: true | DomPropertyUpdateReceiver<T> | StatePath = true,\n): DomPropertyUpdateCallback<T> {\n  if (updateState === true || typeof updateState === 'function') {\n\n    const path = domPropertyPathTo(propertyKey as keyof T);\n    const update = updateState === true ? updateDomPropertyState : updateState;\n\n    return (component, newValue, oldValue) => update(component, path, newValue, oldValue);\n  }\n  return (component, newValue, oldValue) => {\n    if (newValue !== oldValue) {\n      ComponentContext.of(component).updateState(updateState, newValue, oldValue);\n    }\n  };\n}\n\nfunction updateDomPropertyState<T extends object, K extends keyof T>(\n    component: T,\n    path: DomPropertyPath<K>,\n    newValue: T[K],\n    oldValue: T[K],\n): void {\n  if (newValue !== oldValue) {\n    ComponentContext.of(component).updateState(path, newValue, oldValue);\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '../../common';\nimport { ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { DomPropertiesSupport } from './dom-properties-support.feature';\nimport { DomPropertyDef } from './dom-property-def';\nimport { DomPropertyDescriptor } from './dom-property-descriptor';\nimport { domPropertyDescriptor } from './dom-property-descriptor.impl';\nimport { domPropertyUpdate } from './dom-property-update.impl';\n\n/**\n * Creates component property decorator that declares a property to add to custom element created for this component.\n *\n * The value of declared element's property will be read from and written to decorated one.\n *\n * By default does not update component state if property value didn't change.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Custom element property definition.\n *\n * @returns Component property decorator.\n */\nexport function DomProperty<V = any, T extends ComponentClass = Class>(\n    def: DomPropertyDef<T> = {},\n): ComponentPropertyDecorator<V, T> {\n  return ComponentProperty(descriptor => {\n\n    const { key, get } = descriptor;\n    let { set } = descriptor;\n    const domDescriptor = domPropertyDescriptor(descriptor, def);\n\n    if (def.updateState !== false) {\n\n      const updateState = domPropertyUpdate<InstanceType<T>>(key, def.updateState);\n      const setValue = set;\n\n      set = (component, newValue) => {\n\n        const oldValue = get(component);\n\n        setValue(component, newValue);\n        updateState(component, newValue, oldValue);\n      };\n    }\n\n    return {\n      componentDef: {\n        feature: {\n          needs: DomPropertiesSupport,\n        },\n        setup(setup) {\n          setup.perDefinition({ a: DomPropertyDescriptor, is: domDescriptor });\n        },\n      },\n      get,\n      set,\n    };\n  });\n}\n\n/**\n * Component method decorator that declares a method to add to custom element created for this component.\n *\n * This is just an alias of {@link DomProperty @DomProperty} decorator.\n *\n * @category Feature\n */\nexport { DomProperty as DomMethod };\n","import { PropertyAccessorDescriptor } from '../../common';\nimport { ComponentContext, ComponentProperty } from '../../component';\nimport { DomPropertyDef } from './dom-property-def';\nimport { DomPropertyDescriptor } from './dom-property-descriptor';\n\n/**\n * @internal\n */\nexport function domPropertyDescriptor<V>(\n    propertyDesc: ComponentProperty.Descriptor<V>,\n    {\n      propertyKey: key = propertyDesc.key,\n      configurable = propertyDesc.configurable,\n      enumerable = propertyDesc.enumerable,\n      writable = propertyDesc.writable,\n    }: DomPropertyDef,\n): DomPropertyDescriptor {\n\n  const componentPropertyKey = propertyDesc.key;\n  const descriptor: PropertyAccessorDescriptor<V> = {\n    configurable,\n    enumerable,\n    get: function (this: any) {\n      return (ComponentContext.of(this).component as any)[componentPropertyKey];\n    },\n    set: writable\n        ? function (this: any, value: any) {\n          (ComponentContext.of(this).component as any)[componentPropertyKey] = value;\n        }\n        : undefined,\n  };\n\n  return { key, descriptor };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { noop } from 'call-thru';\nimport { DefaultRenderScheduler } from '../../boot/globals';\nimport { ComponentContext } from '../../component';\nimport { ComponentState } from '../state';\nimport { RenderDef } from './render-def';\n\n/**\n * Component's element renderer signature.\n *\n * It has no arguments. It may return either nothing, or a function. In the latter case the returned function will be\n * called immediately to render the element. It may, in turn, return a renderer function, and so on.\n *\n * @category Feature\n */\nexport type ElementRenderer =\n/**\n * @returns Either delegated renderer, or nothing.\n */\n    (this: void) => void | ElementRenderer;\n\nconst enum RenderStatus {\n  Pending,\n  Scheduled,\n  Complete,\n  Cancelled = -1,\n}\n\n/**\n * @category Feature\n */\nexport const ElementRenderer = {\n\n  /**\n   * Enables component element rendering.\n   *\n   * A `renderer` function call will be scheduled by [[DefaultRenderScheduler]] once component state updated.\n   *\n   * @param context  Target component context.\n   * @param renderer  Element renderer function.\n   * @param def  Optional element rendering definition.\n   */\n  render(\n      this: void,\n      context: ComponentContext,\n      renderer: ElementRenderer,\n      def: RenderDef = {},\n  ): void {\n\n    const { offline, path = [] } = def;\n    const stateTracker = context.get(ComponentState).track(path);\n    const schedule = context.get(DefaultRenderScheduler)();\n\n    let status = RenderStatus.Pending;\n    const stateSupply = stateTracker.onUpdate(() => {\n      if (offline || context.connected) {\n        scheduleRenderer();\n      } else {\n        status = RenderStatus.Pending; // Require rendering next time online\n      }\n    });\n\n    if (offline) {\n      scheduleRenderer();\n    } else {\n      context.whenOn(supply => {\n        supply.whenOff(cancelRenderer); // Prevent rendering while offline\n        if (status <= 0) { // There is an update to render. Either pending or previously cancelled.\n          scheduleRenderer();\n        }\n      }).whenOff(reason => {\n        // Component destroyed\n        cancelRenderer();\n        stateSupply.off(reason);\n      });\n    }\n\n    function scheduleRenderer(): void {\n      status = RenderStatus.Scheduled;\n      schedule(renderElement);\n    }\n\n    function cancelRenderer(): void {\n      if (status === RenderStatus.Scheduled) { // Scheduled, but not rendered yet\n        schedule(noop);\n        status = RenderStatus.Cancelled;\n      }\n    }\n\n    function renderElement(): void {\n      /*\n\n      Should never happen since render-scheduler v1.1\n      As disconnecting in another schedule would correctly cancel this one,\n      because it is not executed yet and thus will be replaced by `noop`.\n\n      if (status < 0) {\n        // Prevent excessive rendering\n        return;\n      }\n      */\n      status = RenderStatus.Complete;\n      for (;;) {\n\n        const newRenderer = renderer();\n\n        if (newRenderer === renderer || typeof newRenderer !== 'function') {\n          break;\n        }\n\n        renderer = newRenderer;\n      }\n    }\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { StateSupport } from '../state';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * Component property decorator that declares a rendering method for the component.\n *\n * The decorated method call will be scheduled by [[DefaultRenderScheduler]] once component state updated.\n *\n * The decorated method should have no arguments. It may return either nothing, or a function. In the latter case the\n * returned function will be called immediately to render the element. It may, in turn, return a renderer function,\n * and so on.\n *\n * This decorator automatically enables [[StateSupport]] feature.\n *\n * Utilizes [[ElementRenderer.render]] function to enable rendering.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Non-mandatory render definition.\n *\n * @returns Component method decorator.\n */\nexport function Render<T extends ComponentClass>(\n    def?: RenderDef,\n): ComponentPropertyDecorator<() => ElementRenderer | void, T> {\n  return ComponentProperty(({ get }) => ({\n    componentDef: {\n      feature: {\n        needs: StateSupport,\n      },\n      define(defContext) {\n        defContext.whenComponent(context => {\n          context.whenReady(() => {\n\n            const { component } = context;\n\n            ElementRenderer.render(context, get(component).bind(component), def);\n          });\n        });\n      },\n    },\n  }));\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { NamespaceDef } from 'namespace-aliaser';\n\n/**\n * Default Wesib namespace definition.\n *\n * @category Core\n */\nexport const Wesib__NS: NamespaceDef = (/*#__PURE__*/ new NamespaceDef(\n    'https://wesib.github.io/ns',\n    'b',\n    'wesib',\n));\n"],"names":["BootstrapContext__key","SingleContextKey","BootstrapContext","ContextValues","ContextKey__symbol","bootstrapDefault","provide","context","key","bootstrapContext","get","ComponentFactory__key","ComponentFactory","[object Object]","element","mount","this","mountTo","connected","BootstrapWindow","byDefault","window","BootstrapRoot","ctx","document","body","DefaultNamespaceAliaser","DefaultRenderScheduler","FnContextKey","options","newRenderSchedule","isArray","value","Array","ArraySet","AIterable","super","items","Set","size","Symbol","iterator","next","forEach","item","add","superClassOf","type","satisfying","prototype","Object","getPrototypeOf","superType","constructor","decoratePropertyAccessor","target","propertyKey","desc","updateDescriptor","isField","updatedDesc","undefined","writable","isPropertyAccessorDescriptor","value__symbol","initial","accessorDesc","set","newValue","toPropertyAccessorDescriptor","fieldKey","String","configurable","enumerable","fieldAccessorDescriptor","defineProperty","mergeFunctions","first","second","merge","_f","s","args","apply","isElement","node","nodeType","Node","ELEMENT_NODE","MetaAccessor","symbol","hasOwnProperty","ownDef","own","superDef","of","sources","prevMeta","updates","mapIt","source","meta","newMeta","flatMapIt","PromiseResolver","promise","Promise","resolve","reject","_resolve","_reject","error","FeatureDef__symbol","FeatureMeta","defs","itsReduction","prev","def","needs","has","setup","init","featureMeta","noFeatureDef","FeatureDef","featureType","for","all","define","Feature","FeatureContext__key","FeatureContext","componentType","whenDefined","feature","load","FeatureNeedsError","Error","reduce","reason","need","name","ComponentDef__symbol","ComponentMeta","isQualifiedName","componentMeta","noComponentDef","ComponentDef","Component","decorator","ComponentContext__key","ComponentEventDispatcher__key","values","dispatcher","DomEventDispatcher","eventSupplyOf","dispatch","event","on","ContentRoot","StateUpdater","valueProvider","noop","ComponentContext__symbol","ComponentContext","updateComponentState","bind","TypeError","contentRoot","oldValue","ComponentEvent","Event","AnonymousComponentProperty__symbol","ComponentProperty","decorateWith","readable","component","componentDef","By","provider","result","proto","descriptor","getValue","setValue","call","updated","With","access","As","ElementAdapterKey","ContextUpKey","upKey","createUpKey","opts","seed","keep","thru","adapters","combined","adapter","defaultElementAdapter","defaultProvider","afterThe","nextAfterEvent","delegated","or","ElementAdapter","ElementObserver","bsContext","DefaultElementObserver","MutationObserver","callback","mutations","mutation","itsEach","overArray","removedNodes","mountOf","checkConnected","filterIt","addedNodes","observe","childList","ComponentFactory__symbol","componentFactoryOf","factory","CustomElements__key","customElements","nsAlias","CustomElements","componentTypeOrName","elementType","html__naming","extend","elementDef","extends","componentResolver","ComponentResolver__symbol","DefinitionContext__key","ElementDef","elementExtend","HTMLElement","DefinitionContext","BootstrapContextRegistry__key","BootstrapContextRegistry","ContextRegistry","a","is","newValues","ComponentContextRegistry__key","ComponentContextRegistry","DefinitionContextRegistry__key","DefinitionContextRegistry","PostDefSetup__symbol","postDefSetup","tracker","trackValue","emitter","EventEmitter","onSetup","read","nextArgs","nextSkip","onAny","superPostDefSetup","send","it","WhenComponent","currentRev","created","onCreated","onEventBy","receiver","receiverRev","supply","receive","eventContext","componentContext","notifiedRev","recurrentReceiver","onRecurrent","recurrentContext","readNotifier","thru_","rev","ElementBuilder","definitionContextRegistry$global","componentContextRegistry$global","definitions","components","whenComponent","componentContextRegistry$perType","ready","whenReady","cls","definitionContext","createComponentContextRegistry","append","componentFactory","ComponentFactory_","createComponent","registry","elementSuper","createMount","elementStatus","el","doc","ownerDocument","contains","componentCreated","DefinitionContext_","once","definitionContextRegistry","seedIn","definitionSetup","perDefinition","spec","perComponent","createRegistry","Element","createElementType","status","destructionReason","whenOff","whenDestroyed","sts","whenOn","offSupply","eventSupply","off","ComponentContext_","EventSupply__symbol","done","lastRev","parentNode","parentElement","removeChild","removeElement","ComponentStatus__symbol","notifier","_","prevContext","newComponent","dispatchEvent","bubbles","doNotAdd","ComponentRegistry","_context","_definitionQueue","definition","push","buildElement","FeatureKey__symbol","FeatureKey","from","preferredFeatureClause","afterEventBy","origin","stageId","afterAll","clause","deps","loadFeatureDeps","request","loader","to","stage","ownLoader","FeatureLoader","ownSource","rcv","unload","share","lastLoader","preventDuplicateLoader","clauses","preferred","required","afterEach","dep","presentFeatureDeps","isPresent","down","_down","_stage","SetupFeatureStage","then","after","state","lastStage","id","prevStage","stop","FeatureStage","_stop","action","map","perDep","unloader","unloads","adder","reverse","length","newUnloader","componentRegistry","componentContextRegistry","elementBuilder","onDefinition","tillOff","onComponent","st","bs","by","onPostDefSetup","newFeatureContext","InitFeatureStage","ActiveFeatureStage","FeatureRequest","_requester","_revoke","featureDef","requester","isClause","_revokeBy","unuse","_uses","revoke","FeatureRequester__key","FeatureRequester","Map","existing","_map","reuse","delete","bootstrapComponents","features","bootstrapContextRegistry","create","complete","newNamespaceAliaser","info","_ctx","ldr","whenDown","AfterEvent__symbol","initBootstrap","AttributeDescriptor","MultiContextKey","AttributePath__root","attributePathTo","attributeStateUpdate","updateState","path","update","updateAttributeState","AttributeRegistry__key","AttributeRegistry","attrs","_attrs","change","observedAttributes","keys","attributeFilter","records","record","attributeName","getAttribute","attributes","attributeOldValue","AttributesSupport__feature","as","AttributesSupport","Attribute","parseAttributeDescriptor","setAttribute","Attributes","defineByItem","ComponentState__key","ComponentState","StateTracker","StatePropertyPath__root","statePropertyPathTo","updateStatePropertyState","StateSupport__feature","with","StateSupport","StateProperty","statePropertyUpdate","trackAttribute","track","onUpdate","_path","ValueTracker","isOff","removeAttribute","DomPropertyDescriptor","DomPropertyRegistry__key","DomPropertyRegistry","props","_props","DomPropertiesSupport__feature","DomPropertiesSupport","DomPropertyPath__root","domPropertyPathTo","updateDomPropertyState","DomProperty","domDescriptor","propertyDesc","componentPropertyKey","domPropertyDescriptor","domPropertyUpdate","ElementRenderer","renderer","offline","stateTracker","schedule","stateSupply","scheduleRenderer","renderElement","cancelRenderer","newRenderer","Render","defContext","render","Wesib__NS","NamespaceDef"],"mappings":"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"}