{"version":3,"file":"generic.36801613.js","sources":["../../../../generic/src/fetch/fetch-agent-key.impl.ts","../../../../generic/src/fetch/http-fetch-agent.ts","../../../../generic/src/fetch/http-fetch.impl.ts","../../../../generic/src/fetch/http-fetch.ts","../../../../generic/src/hierarchy/hierarchy-updates.impl.ts","../../../../generic/src/hierarchy/hierarchy-context.ts","../../../../generic/src/hierarchy/hierarchy-registry.impl.ts","../../../../generic/src/tree/element-node-list.ts","../../../../generic/src/tree/element-node-list.impl.ts","../../../../generic/src/tree/node-attributes.impl.ts","../../../../generic/src/tree/node-properties.impl.ts","../../../../generic/src/tree/element-node.impl.ts","../../../../generic/src/tree/element-node.ts","../../../../generic/src/navigation/hash-url/hash-url.ts","../../../../generic/src/navigation/page-param.ts","../../../../generic/src/navigation/hash-url/page-hash-url-param.impl.ts","../../../../generic/src/navigation/hash-url/page-hash-url-param.ts","../../../../generic/src/navigation/navigation-agent.ts","../../../../generic/src/navigation/hash-url/page-hash-url-support.feature.ts","../../../../generic/src/navigation/page-param-context.ts","../../../../generic/src/navigation/nav-history.impl.ts","../../../../generic/src/navigation/navigation.event.ts","../../../../generic/src/navigation/navigation.ts","../../../../generic/src/navigation/activate-nav-link.decorator.ts","../../../../generic/src/navigation/handle-nav-links.decorator.ts","../../../../generic/src/util/import-node.ts","../../../../generic/src/navigation/page-load/caching-page-loader.impl.ts","../../../../generic/src/navigation/page-load/page-load-requests.impl.ts","../../../../generic/src/navigation/page-load/page-load-agent.ts","../../../../generic/src/navigation/page-load/page-load-url-modifier.ts","../../../../generic/src/navigation/page-load/page-loader.impl.ts","../../../../generic/src/navigation/page-load/page-load-param.ts","../../../../generic/src/navigation/page-load/page-cache-buster.impl.ts","../../../../generic/src/navigation/page-load/page-scripts-agent.impl.ts","../../../../generic/src/navigation/page-load/page-style-agent.impl.ts","../../../../generic/src/navigation/page-load/page-title-agent.impl.ts","../../../../generic/src/navigation/page-load/page-load-support.feature.ts","../../../../generic/src/navigation/page-load/include-page.decorator.ts","../../../../generic/src/shares/share-ref.ts","../../../../generic/src/shares/share-registry.impl.ts","../../../../generic/src/shares/share-key.impl.ts","../../../../generic/src/shares/share.impl.ts","../../../../generic/src/shares/shared-value.ts","../../../../generic/src/shares/shared-value.impl.ts","../../../../generic/src/shares/share.ts","../../../../generic/src/shares/share-locator.ts","../../../../generic/src/shares/shareable.ts","../../../../generic/src/shares/share-accessor.impl.ts","../../../../generic/src/shares/shared.decorator.ts","../../../../generic/src/shares/target-share.ts","../../../../generic/src/forms/default.preset.impl.ts","../../../../generic/src/forms/form-preset.ts","../../../../generic/src/forms/form-unit.ts","../../../../generic/src/forms/field.ts","../../../../generic/src/forms/field.share.ts","../../../../generic/src/forms/form.share.ts","../../../../generic/src/forms/adjacent-field.ts","../../../../generic/src/forms/field.impl.ts","../../../../generic/src/forms/field-name.definer.ts","../../../../generic/src/forms/form.ts","../../../../generic/src/forms/form-scope.ts","../../../../generic/src/forms/presets/abstract-form-preset.ts","../../../../generic/src/forms/scoped-form-config.ts","../../../../generic/src/forms/presets/form-css.preset.ts","../../../../generic/src/forms/presets/form-mode.preset.ts","../../../../generic/src/forms/on-submit.decorator.ts","../../../../generic/src/forms/shared-form-unit.decorator.ts","../../../../generic/src/forms/shared-field.decorator.ts","../../../../generic/src/forms/shared-form.decorator.ts"],"sourcesContent":["import { ContextValueSlot } from '@proc7ts/context-values';\nimport { contextDestroyed, ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, digAfter, EventSender, OnEvent, onSupplied } from '@proc7ts/fun-events';\n\n/**\n * @internal\n */\ntype FetchAgent<TResponse extends any[]> = (\n    this: void,\n    next: (this: void, request?: Request) => OnEvent<TResponse>,\n    request: Request,\n) => EventSender<TResponse>;\n\n/**\n * @internal\n */\ntype CombinedFetchAgent<TResponse extends any[]> = (\n    this: void,\n    next: (this: void, request: Request) => OnEvent<TResponse>,\n    request: Request,\n) => OnEvent<TResponse>;\n\n/**\n * @internal\n */\nexport class FetchAgentKey<TResponse extends any[]>\n    extends ContextUpKey<CombinedFetchAgent<TResponse>, FetchAgent<TResponse>>\n    implements ContextUpRef<CombinedFetchAgent<TResponse>, FetchAgent<TResponse>> {\n\n  readonly upKey: ContextUpKey.UpKey<CombinedFetchAgent<TResponse>, FetchAgent<TResponse>>;\n\n  constructor(name: string) {\n    super(name);\n    this.upKey = this.createUpKey(\n        slot => slot.insert(slot.seed.do(digAfter(\n            (...agents) => {\n              if (agents.length) {\n                return afterThe(combineFetchAgents(agents));\n              }\n              if (slot.hasFallback && slot.or) {\n                return slot.or;\n              }\n\n              return afterThe(defaultFetchAgent);\n            },\n        ))),\n    );\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          CombinedFetchAgent<TResponse>,\n          ContextUpKey.Source<FetchAgent<TResponse>>,\n          AfterEvent<FetchAgent<TResponse>[]>>,\n  ): void {\n\n    let delegated: CombinedFetchAgent<TResponse>;\n\n    slot.context.get(\n        this.upKey,\n        slot.hasFallback ? { or: slot.or != null ? afterThe(slot.or) : slot.or } : undefined,\n    )!(\n        agent => delegated = agent,\n    ).whenOff(\n        reason => delegated = contextDestroyed(reason),\n    );\n\n    slot.insert((next, request) => delegated(next, request));\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultFetchAgent<TResponse extends any[]>(\n    next: (this: void, request: Request) => OnEvent<TResponse>,\n    request: Request,\n): OnEvent<TResponse> {\n  return next(request);\n}\n\n/**\n * @internal\n */\nexport function combineFetchAgents<TResponse extends any[]>(\n    agents: FetchAgent<TResponse>[],\n): CombinedFetchAgent<TResponse> {\n  return (next, request) => {\n\n    const fetch: (agentIdx: number, agentRequest: Request) => OnEvent<TResponse> = (\n        agentIdx,\n        agentRequest,\n    ) => {\n\n      const agent = agents[agentIdx];\n\n      if (!agent) {\n        return next(agentRequest);\n      }\n\n      return onSupplied(\n          agent(\n              (nextRequest = agentRequest) => fetch(agentIdx + 1, nextRequest),\n              agentRequest,\n          ),\n      );\n    };\n\n    return fetch(0, request);\n  };\n}\n","import { ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { EventSender, OnEvent } from '@proc7ts/fun-events';\nimport { FetchAgentKey } from './fetch-agent-key.impl';\n\n/**\n * HTTP fetch agent signature.\n *\n * The agent can be used to alter {@link HttpFetch} processing. For that it should be registered in appropriate context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by {@link HttpFetch}.\n */\nexport type HttpFetchAgent =\n/**\n * @param next - Either calls the next agent in chain, or actually fetches the data if this agent is the last one.\n * Accepts an optional `Request` parameter. The original request will be used instead when omitted.\n * @param request - HTTP request.\n *\n * @returns An `EventSender` of response object(s). It is returned either to preceding agent in chain, or as a result of\n * {@link HttpFetch} call.\n */\n    (\n        this: void,\n        next: (this: void, request?: Request) => OnEvent<[Response]>,\n        request: Request,\n    ) => EventSender<[Response]>;\n\nexport namespace HttpFetchAgent {\n\n  /**\n   * Combined HTTP fetch agent signature.\n   *\n   * This is what is available under {@link HttpFetchAgent} key.\n   */\n  export type Combined =\n  /**\n   * @param next - Either calls the next agent in chain, or actually fetches the data if this agent is the last one.\n   * Accepts `Request` parameter.\n   * @param request - HTTP request.\n   *\n   * @returns An `OnEvent` sender of response object(s) receivers. It is returned as a result of {@link HttpFetch} call.\n   */\n      (\n          this: void,\n          next: (this: void, request: Request) => OnEvent<[Response]>,\n          request: Request,\n      ) => OnEvent<[Response]>;\n\n}\n\n/**\n * A key of context value containing an {@link HttpFetchAgent} instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the fetch.\n */\nexport const HttpFetchAgent: ContextUpRef<HttpFetchAgent.Combined, HttpFetchAgent> = (\n    /*#__PURE__*/ new FetchAgentKey<[Response]>('http-fetch-agent')\n);\n","import { DomEventDispatcher } from '@frontmeans/dom-events';\nimport { EventEmitter, onceOn, OnEvent, onEventBy } from '@proc7ts/fun-events';\nimport { Supply } from '@proc7ts/supply';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { HttpFetch } from './http-fetch';\nimport { HttpFetchAgent } from './http-fetch-agent';\n\nconst HttpFetchAborted = {};\n\n/**\n * @internal\n */\nexport function newHttpFetch(context: BootstrapContext): HttpFetch {\n\n  const window = context.get(BootstrapWindow);\n  const agent = context.get(HttpFetchAgent);\n\n  return (input, init) => agent(fetch, new Request(input, init));\n\n  function fetch(request: Request): OnEvent<[Response]> {\n    return onEventBy(receiver => {\n\n      const responseEmitter = new EventEmitter<[Response]>();\n      let supply: Supply;\n\n      if ('AbortController' in window) {\n\n        const abortController = new window.AbortController();\n        const { signal } = abortController;\n\n        supply = new Supply(reason => {\n          if (reason === HttpFetchAborted) {\n            abortController.abort();\n          }\n        });\n        receiver.supply.whenOff(() => supply.off(HttpFetchAborted)).needs(supply);\n        responseEmitter.on({\n          supply,\n          receive(ctx, response) {\n            receiver.receive(ctx, response);\n          },\n        });\n\n        const customSignal = request.signal;\n\n        if (customSignal) {\n          new DomEventDispatcher(customSignal)\n              .on('abort')\n              .do(onceOn)(\n                  () => abortController.abort(),\n              );\n          if (customSignal.aborted) {\n            abortController.abort();\n          }\n        }\n\n        request = new Request(request, { signal });\n      } else {\n        supply = responseEmitter.on(receiver);\n      }\n\n      window.fetch(request)\n          .then(response => {\n            responseEmitter.send(response);\n            supply.off();\n          })\n          .catch(reason => supply.off(reason));\n    });\n  }\n}\n","import { FnContextKey, FnContextRef } from '@proc7ts/context-values/updatable';\nimport { OnEvent } from '@proc7ts/fun-events';\nimport { bootstrapDefault } from '@wesib/wesib';\nimport { newHttpFetch } from './http-fetch.impl';\n\n/**\n * HTTP fetch function signature.\n *\n * This is a function that wraps browser's\n * [fetch()](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch) function and provides\n * additional functionality. E.g. request interception.\n *\n * This function returns an `OnEvent` sender instead of a `Promise`. This allows to report multiple responses.\n * E.g. when the resource refresh requested and delivered. The request is sent whenever a receiver is registered\n * in this sender. When the fetch completes the response supply is cut off, and callbacks registered with its\n * `whenOff()` method are notified. When fetch fails for whatever reason, this reason is passed to these callbacks.\n * The fetch can be aborted by cutting off the response supply. I.e. by calling its `off()` method.\n *\n * An instance of {@link HttpFetch} is available from bootstrap context.\n */\nexport type HttpFetch =\n/**\n * @param input - The resource to fetch. This can either an URL string, or a `Request` object.\n * @param init - Custom settings to apply to the request.\n *\n * @returns An `OnEvent` sender of responses.\n */\n    (this: void, input: RequestInfo, init?: RequestInit) => OnEvent<[Response]>;\n\n/**\n * A key of bootstrap context value containing an {@link HttpFetch} instance.\n */\nexport const HttpFetch: FnContextRef<Parameters<HttpFetch>, ReturnType<HttpFetch>> = (\n    /*#__PURE__*/ new FnContextKey<Parameters<HttpFetch>, ReturnType<HttpFetch>>(\n        'http-fetch',\n        {\n          byDefault: bootstrapDefault(newHttpFetch),\n        },\n    )\n);\n","import { DomEventDispatcher } from '@frontmeans/dom-events';\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { EventEmitter, OnEvent, trackValue, ValueTracker } from '@proc7ts/fun-events';\nimport {\n  BootstrapContext,\n  BootstrapRoot,\n  ComponentContext,\n  ComponentEvent,\n  ComponentSlot__symbol,\n  parentElement,\n} from '@wesib/wesib';\n\n/**\n * @internal\n */\nexport type HierarchyRoot = ValueTracker<ComponentContext | undefined>;\n\n/**\n * @internal\n */\nexport const HierarchyRoot = (/*#__PURE__*/ new SingleContextKey<HierarchyRoot>(\n    'hierarchy-root',\n    {\n      byDefault: bsContext => {\n\n        const root = bsContext.get(BootstrapRoot);\n\n        new DomEventDispatcher(root).on<ComponentEvent>('wesib:component')(\n            ({ context }: ComponentEvent) => context.get(HierarchyUpdates).issue(),\n        );\n\n        return trackValue();\n      },\n    },\n));\n\nconst HierarchyUpdates__key = (/*#__PURE__*/ new SingleContextKey<HierarchyUpdates>(\n    'hierarchy-updates',\n    {\n      byDefault: context => new HierarchyUpdates(context.get(ComponentContext)),\n    },\n));\n\n/**\n * @internal\n */\nexport class HierarchyUpdates {\n\n  static get [ContextKey__symbol](): ContextKey<HierarchyUpdates> {\n    return HierarchyUpdates__key;\n  }\n\n  readonly on: OnEvent<[ComponentContext]>;\n  readonly send: (this: void) => void;\n  readonly issue: () => void;\n\n  constructor(context: ComponentContext) {\n\n    const updates = new EventEmitter<[ComponentContext]>();\n    const hierarchyRoot = context.get(BootstrapContext).get(HierarchyRoot);\n\n    this.on = updates.on;\n    this.send = () => updates.send(context);\n    this.issue = () => {\n\n      const parent = findParentContext(context);\n\n      if (parent) {\n        parent[0].get(HierarchyUpdates).send();\n      } else {\n        hierarchyRoot.it = context;\n      }\n    };\n  }\n\n}\n\n/**\n * @internal\n */\nexport function findParentContext(of: ComponentContext): [ComponentContext, boolean] | undefined {\n\n  const root = of.get(BootstrapContext).get(BootstrapRoot);\n  let { element } = of as { element: Element };\n  let immediate = true;\n\n  if (element === root) {\n    return;\n  }\n\n  for (;;) {\n\n    const parent = parentElement(element);\n\n    if (!parent) {\n      return;\n    }\n\n    const ctx = parent[ComponentSlot__symbol]?.context;\n\n    if (ctx) {\n      return [ctx, immediate];\n    }\n    if (parent === root) {\n      return;\n    }\n\n    immediate = false;\n    element = parent;\n  }\n}\n","import {\n  ContextKey,\n  ContextKey__symbol,\n  ContextRegistry,\n  ContextValues,\n  ContextValueSpec,\n  SingleContextKey,\n} from '@proc7ts/context-values';\nimport {\n  AfterEvent,\n  afterEventBy,\n  consumeEvents,\n  shareAfter,\n  supplyAfter,\n  trackValue,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { Supply, SupplyPeer } from '@proc7ts/supply';\nimport { BootstrapContext, ComponentContext } from '@wesib/wesib';\nimport { newHierarchyRegistry } from './hierarchy-registry.impl';\nimport { findParentContext, HierarchyRoot, HierarchyUpdates } from './hierarchy-updates.impl';\n\n/**\n * @internal\n */\nconst HierarchyContext__key = (/*#__PURE__*/ new SingleContextKey<HierarchyContext>(\n    'hierarchy-context',\n    {\n      byDefault: context => new HierarchyContext$(context.get(ComponentContext)),\n    },\n));\n\n/**\n * Component's hierarchy context.\n *\n * Passes provided values to hierarchy contexts of nested components.\n *\n * Available as component context value.\n *\n * @typeParam T - A type of component.\n */\nexport abstract class HierarchyContext<T extends object = any> extends ContextValues implements SupplyPeer {\n\n  /**\n   * A key of component context value containing its hierarchy context instance.\n   */\n  static get [ContextKey__symbol](): ContextKey<HierarchyContext> {\n    return HierarchyContext__key;\n  }\n\n  /**\n   * Component context.\n   */\n  abstract readonly context: ComponentContext<T>;\n\n  /**\n   * An `AfterEvent` keeper of enclosing component's hierarchy context.\n   *\n   * May send `undefined` when component is outside of hierarchy. E.g. when it is disconnected.\n   */\n  abstract readonly up: AfterEvent<[HierarchyContext?]>;\n\n  get supply(): Supply {\n    return this.context.supply;\n  }\n\n  /**\n   * Assigns enclosing component to use by default.\n   *\n   * The provided component will be treated as enclosing one until component element connected. After that the real\n   * enclosing component will be used instead.\n   *\n   * @param enclosing - Enclosing component's context to assign, or nothing to remove one.\n   *\n   * @returns `this` instance.\n   */\n  abstract inside(enclosing?: ComponentContext): this;\n\n  /**\n   * Provides hierarchy context value.\n   *\n   * If provided value is updatable (i.e. its key implements `ContextUpKey`), then it will be available in this context,\n   * as well as in all nested hierarchy contexts. Otherwise the value will be available in this context only.\n   *\n   * @typeParam TSrc - Source value type.\n   * @typeParam TDeps - Dependencies tuple type.\n   * @param spec - Context value specifier.\n   *\n   * @returns A value supply that that removes the given context value specifier once cut off.\n   */\n  abstract provide<TSrc, TDeps extends any[]>(\n      spec: ContextValueSpec<HierarchyContext<T>, unknown, TSrc, TDeps>,\n  ): Supply;\n\n}\n\nclass HierarchyContext$<T extends object> extends HierarchyContext<T> {\n\n  private readonly _parent: ValueTracker<HierarchyContext | undefined>;\n  private readonly _registry: ContextRegistry<HierarchyContext<T>>;\n  readonly get: HierarchyContext<T>['get'];\n  readonly up: AfterEvent<[HierarchyContext?]>;\n\n  constructor(readonly context: ComponentContext<T>) {\n    super();\n\n    this.up = afterEventBy<[HierarchyContext?]>(\n        receiver => {\n\n          const { supply } = receiver;\n\n          supply.needs(this);\n\n          const parentHierarchy = trackValue<HierarchyContext>();\n\n          parentHierarchy.by(this._parent);\n          supply.cuts(parentHierarchy);\n\n          const rootSupply = new Supply().needs(supply);\n          const parentSupply = new Supply().needs(supply);\n          const updateParent = (): void => {\n\n            const parent = findParentContext(this.context);\n\n            if (parent) {\n\n              const [parentCtx, immediate] = parent;\n\n              parentHierarchy.it = parentCtx.get(HierarchyContext);\n              rootSupply.off();\n              if (immediate) {\n                parentSupply.off();\n              }\n            } else {\n              parentHierarchy.it = undefined;\n            }\n          };\n\n          this.context.get(BootstrapContext).get(HierarchyRoot).read({\n            supply: rootSupply,\n            receive: () => this.context.connected && updateParent(),\n          });\n          parentHierarchy.read.do(\n              supplyAfter(parentSupply),\n              consumeEvents(newParent => newParent && newParent.context.get(HierarchyUpdates).on(updateParent)),\n          );\n          parentHierarchy.read(receiver);\n          this.context.whenConnected({\n            supply: new Supply().needs(supply),\n            receive: updateParent,\n          });\n        },\n    ).do(shareAfter);\n\n    const parent = this._parent = trackValue<HierarchyContext>();\n\n    context.whenConnected(noop).cuts(parent);\n\n    const registry = this._registry = newHierarchyRegistry<T>(this.up);\n\n    this.get = registry.newValues().get;\n  }\n\n  provide<TSrc, TDeps extends any[]>(\n      spec: ContextValueSpec<HierarchyContext<T>, unknown, TSrc, TDeps>,\n  ): Supply {\n    return this._registry.provide(spec).needs(this);\n  }\n\n  inside(enclosing?: ComponentContext): this {\n    this._parent.it = enclosing && enclosing.get(HierarchyContext);\n    return this;\n  }\n\n}\n","import { ContextRegistry, ContextSeedKey } from '@proc7ts/context-values';\nimport { ContextUpKey } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, digAfter } from '@proc7ts/fun-events';\nimport { HierarchyContext } from './hierarchy-context';\n\n/**\n * @internal\n */\nexport function newHierarchyRegistry<T extends object>(\n    up: AfterEvent<[HierarchyContext?]>,\n): ContextRegistry<HierarchyContext<T>> {\n  return new ContextRegistry(\n      <TSrc, TSeed>(key: ContextSeedKey<TSrc, TSeed>) => isContextSeedUpKey(key)\n          ? up.do(digAfter(\n              upper => upper ? upper.get(key) : afterThe(),\n          )) as unknown as TSeed\n          : undefined,\n  );\n}\n\n/**\n * @internal\n */\nfunction isContextSeedUpKey<TSrc>(\n    key: ContextSeedKey<ContextUpKey.Source<TSrc>, unknown>,\n): key is ContextUpKey.SeedKey<TSrc> {\n  return 'upKey' in key;\n}\n","import {\n  AfterEvent,\n  AfterEvent__symbol,\n  EventKeeper,\n  EventSender,\n  OnEvent,\n  OnEvent__symbol,\n} from '@proc7ts/fun-events';\nimport { ElementNode } from './element-node';\n\n/**\n * Dynamically updatable list of selected element nodes.\n *\n * It is an iterable of nodes.\n *\n * Implements an `EventSender` interface by sending added and removed nodes arrays.\n *\n * Implements an `EventKeeper` interface by sending updated node list.\n *\n * @typeParam TNode - A type of element nodes.\n */\nexport abstract class ElementNodeList<TNode extends ElementNode = ElementNode>\n    implements Iterable<TNode>, EventSender<[TNode[], TNode[]]>, EventKeeper<[ElementNodeList<TNode>]> {\n\n  /**\n   * An `OnEvent` sender of this list changes.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly onUpdate: OnEvent<[TNode[], TNode[]]>;\n\n  /**\n   * An `AfterEvent` keeper of current node list.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[ElementNodeList<TNode>]>;\n\n  /**\n   * An `AfterEvent` keeper of tracked list changes.\n   *\n   * Sends current nodes immediately upon receiver registration as added ones.\n   */\n  abstract readonly track: AfterEvent<[readonly TNode[], readonly TNode[]]>;\n\n  /**\n   * An `AfterEvent` keeper of either the first node in this list, or `undefined` when the list is empty.\n   */\n  abstract readonly first: AfterEvent<[TNode?]>;\n\n  abstract [Symbol.iterator](): Iterator<TNode>;\n\n  [OnEvent__symbol](): OnEvent<[TNode[], TNode[]]> {\n    return this.onUpdate;\n  }\n\n  [AfterEvent__symbol](): AfterEvent<[ElementNodeList<TNode>]> {\n    return this.read;\n  }\n\n}\n","import { html__naming } from '@frontmeans/namespace-aliaser';\nimport {\n  AfterEvent,\n  afterEventBy,\n  afterSupplied,\n  EventEmitter,\n  mapAfter,\n  OnEvent,\n  onEventBy,\n  translateAfter,\n} from '@proc7ts/fun-events';\nimport { isPresent, valueProvider } from '@proc7ts/primitives';\nimport {\n  filterArray,\n  filterIt,\n  flatMapArray,\n  iteratorOf,\n  itsEach,\n  itsElements,\n  itsFirst,\n  mapIt,\n  overArray,\n  overIterator,\n  PushIterable,\n  PushIterator,\n  PushIterator__symbol,\n} from '@proc7ts/push-iterator';\nimport {\n  BootstrapContext,\n  ComponentClass,\n  DefaultNamespaceAliaser,\n  ElementObserver,\n  ElementObserverInit,\n  isElement,\n} from '@wesib/wesib';\nimport { ElementNode, ElementPickMode } from './element-node';\nimport { ElementNodeList } from './element-node-list';\n\n/**\n * @internal\n */\nconst WATCH_DEEP: ElementObserverInit = { subtree: true };\n\n/**\n * @internal\n */\nexport function elementNodeList<TNode extends ElementNode>(\n    bsContext: BootstrapContext,\n    root: Element,\n    selectorOrType: string | ComponentClass<any>,\n    nodeOf: (node: Element, optional?: boolean) => TNode | undefined,\n    { deep, all }: ElementPickMode,\n): ElementNodeList<TNode> {\n\n  const updates = new EventEmitter<[TNode[], TNode[]]>();\n  const init = deep ? WATCH_DEEP : undefined;\n  let cache = new Set<Element>();\n  let selector: string | undefined;\n  const overNodes: (nodes: NodeList) => Iterable<Node> = deep ? overNodeSubtree : overArray;\n\n  if (typeof selectorOrType === 'string') {\n    selector = selectorOrType;\n  } else {\n    bsContext.whenDefined(selectorOrType).then(({ elementDef: { name } }) => {\n      if (name) {\n        selector = html__naming.name(name, bsContext.get(DefaultNamespaceAliaser));\n        if (updates.size) {\n          // Refresh selection after component name resolution.\n          // This is needed  when new document loaded.\n\n          const selected = refresh();\n\n          if (selected.size) {\n\n            const added = itsElements(\n                filterIt<TNode | undefined, TNode>(\n                    mapIt(selected, node => nodeOf(node)),\n                    isPresent,\n                ),\n            );\n\n            /* istanbul ignore if. Can not test native custom element */\n            if (added.length) {\n              updates.send(added, []);\n            }\n          }\n        }\n      }\n    }).catch(console.error);\n  }\n\n  if (!all) {\n    root.addEventListener('wesib:component', event => {\n\n      const element = event.target as Element;\n\n      if (cache.has(element)) {\n\n        const node = nodeOf(element) as TNode;\n\n        updates.send([node], []);\n      }\n    });\n  }\n\n  const iterable: PushIterable<TNode> = filterIt<TNode | undefined, TNode>(\n      mapIt(\n          overIterator(elements),\n          element => nodeOf(element),\n      ),\n      isPresent,\n  );\n\n  class ElementNodeList$ extends ElementNodeList<TNode> implements PushIterable<TNode> {\n\n    readonly onUpdate: OnEvent<[TNode[], TNode[]]>;\n    readonly read: AfterEvent<[ElementNodeList<TNode>]>;\n    readonly track: AfterEvent<[readonly TNode[], readonly TNode[]]>;\n    readonly first: AfterEvent<[TNode?]>;\n\n    constructor() {\n      super();\n\n      const observer = bsContext.get(ElementObserver)(update);\n\n      this.onUpdate = onEventBy<[TNode[], TNode[]]>(receiver => {\n\n        const firstReceiver = !updates.size;\n        const supply = updates.on(receiver);\n\n        if (firstReceiver) {\n          refresh();\n          observer.observe(root, init);\n        }\n\n        supply.whenOff(() => {\n          if (!updates.size) {\n            observer.disconnect();\n            clearCache(); // clear cache as there is no more receivers\n          }\n        }).needs(receiver.supply);\n      });\n\n      const returnSelf = valueProvider(this);\n\n      this.read = this.onUpdate.do(mapAfter(returnSelf, returnSelf));\n\n      this.track = afterEventBy<[readonly TNode[], readonly TNode[]]>(receiver => {\n\n        const initialEmitter = new EventEmitter<[readonly TNode[], readonly TNode[]]>();\n\n        initialEmitter.on(receiver);\n        initialEmitter.send(itsElements(this), []);\n\n        this.onUpdate(receiver);\n      });\n\n      this.first = afterSupplied(this.read).do(translateAfter(\n          (send, list) => send(itsFirst(list)),\n      ));\n    }\n\n    [Symbol.iterator](): PushIterator<TNode> {\n      return this[PushIterator__symbol]();\n    }\n\n    [PushIterator__symbol](accept?: PushIterator.Acceptor<TNode>): PushIterator<TNode> {\n      return iterable[PushIterator__symbol](accept);\n    }\n\n  }\n\n  return new ElementNodeList$();\n\n  function elements(): Iterator<Element> {\n    return iteratorOf(updates.size ? cache : refresh());\n  }\n\n  function clearCache(): void {\n    cache.clear();\n  }\n\n  function refresh(): Set<Element> {\n\n    const list = select();\n\n    if (updates.size) {\n      cache = list; // cache is for receivers only\n    }\n\n    return list;\n  }\n\n  function select(): Set<Element> {\n\n    const sel = selector;\n\n    if (!sel) {\n      return new Set();\n    }\n    if (deep) {\n      return new Set(overArray(root.querySelectorAll(sel)));\n    }\n\n    return new Set(filterArray(root.children, item => item.matches(sel)));\n  }\n\n  function update(mutations: MutationRecord[]): void {\n\n    const added: TNode[] = [];\n    const removed: TNode[] = [];\n\n    mutations.forEach(mutation => {\n      itsEach(\n          filterIt<TNode | undefined, TNode>(\n              mapIt(overNodes(mutation.removedNodes), removeNode),\n              isPresent,\n          ),\n          node => removed.push(node),\n      );\n      itsEach(\n          filterIt<TNode | undefined, TNode>(\n              mapIt(overNodes(mutation.addedNodes), addNode),\n              isPresent,\n          ),\n          node => added.push(node),\n      );\n    });\n    if (added.length || removed.length) {\n      updates.send(added, removed);\n    }\n  }\n\n  function addNode(node: Node): TNode | undefined {\n    if (!isElement(node)) {\n      return;\n    }\n    if (selector && node.matches(selector) && !cache.has(node)) {\n      cache.add(node);\n      return nodeOf(node);\n    }\n    return;\n  }\n\n  function removeNode(node: Node): TNode | undefined {\n    if (!isElement(node)) {\n      return;\n    }\n    if (!cache.delete(node)) {\n      return;\n    }\n    return nodeOf(node, true);\n  }\n\n}\n\nfunction overNodeSubtree(nodes: NodeList): Iterable<Node> {\n  return flatMapArray(\n      nodes,\n      node => overArray([node, ...overNodeSubtree(node.childNodes)]),\n  );\n}\n","import { EventEmitter, eventReceiver, EventReceiver, OnEvent, onEventBy, ValueTracker } from '@proc7ts/fun-events';\nimport { neverSupply, Supply } from '@proc7ts/supply';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\n\n/**\n * @internal\n */\nclass AttributesObserver {\n\n  private readonly _emitters = new Map<string, EventEmitter<[string | null, string | null]>>();\n  private _observer?: MutationObserver;\n\n  constructor(private readonly _bs: BootstrapContext, readonly element: Element) {\n  }\n\n  private get observer(): MutationObserver {\n    if (this._observer) {\n      return this._observer;\n    }\n\n    const Observer = this._bs.get(BootstrapWindow).MutationObserver;\n\n    return this._observer = new Observer(mutations => this._update(mutations));\n  }\n\n  observe(name: string, receiver: EventReceiver<[string | null, string | null]>): Supply {\n\n    const self = this;\n    const observer = this.observer;\n    const emitter = this._emitter(name);\n    const rcv = eventReceiver(receiver);\n    const supply = emitter.on({\n      supply: new Supply(() => {\n        this._emitters.delete(name);\n        observer.disconnect();\n        if (this._emitters.size) {\n          reconnect();\n        } else {\n          this._observer = undefined;\n        }\n      }).needs(rcv.supply),\n      receive: (ctx, newValue, oldValue) => rcv.receive(ctx, newValue, oldValue),\n    });\n\n    observer.disconnect();\n    reconnect();\n\n    return supply;\n\n    function reconnect(): void {\n      self._update(observer.takeRecords());\n      observer.observe(self.element, {\n        attributes: true,\n        attributeOldValue: true,\n        attributeFilter: [...self._emitters.keys()],\n      });\n    }\n  }\n\n  private _update(mutations: MutationRecord[]): void {\n    mutations.forEach(mutation => {\n\n      const attributeName = mutation.attributeName as string;\n      const emitter = this._emitters.get(attributeName);\n\n      if (emitter) {\n        emitter.send(this.element.getAttribute(attributeName) as string, mutation.oldValue);\n      }\n    });\n  }\n\n  private _emitter(name: string): EventEmitter<[string | null, string | null]> {\n\n    const emitter = new EventEmitter<[string | null, string | null]>();\n\n    this._emitters.set(name, emitter);\n\n    return emitter;\n  }\n\n}\n\n/**\n * @internal\n */\nclass AttributeTracker extends ValueTracker<string | null> {\n\n  readonly on: OnEvent<[string | null, string | null]>;\n  private readonly _updates = new EventEmitter<[string | null, string | null]>();\n\n  constructor(\n      private readonly _observer: AttributesObserver,\n      private readonly _name: string,\n  ) {\n    super();\n\n    let observeSupply = neverSupply();\n\n    this.on = onEventBy(receiver => {\n      if (!this._updates.size) {\n        observeSupply = this._observer.observe(\n            this._name,\n            (newValue, oldValue) => this._updates.send(newValue, oldValue),\n        );\n      }\n      receiver.supply.needs(observeSupply);\n      this._updates.on(receiver).whenOff(reason => {\n        if (!this._updates.size) {\n          observeSupply.off(reason);\n        }\n      });\n    });\n  }\n\n  get supply(): Supply {\n    return this._updates.supply;\n  }\n\n  get it(): string | null {\n    return this._observer.element.getAttribute(this._name);\n  }\n\n  set it(value: string | null) {\n    if (value != null) {\n      this._observer.element.setAttribute(this._name, value);\n    } else {\n      this._observer.element.removeAttribute(this._name);\n    }\n  }\n\n}\n\n/**\n * @internal\n */\nexport class NodeAttributes {\n\n  private readonly _attrs = new Map<string, AttributeTracker>();\n  private readonly _observer: AttributesObserver;\n\n  constructor(bs: BootstrapContext, element: any) {\n    this._observer = new AttributesObserver(bs, element);\n  }\n\n  get(name: string): ValueTracker<string | null> {\n\n    const existing = this._attrs.get(name);\n\n    if (existing) {\n      return existing;\n    }\n\n    const created = new AttributeTracker(this._observer, name);\n\n    this._attrs.set(name, created);\n\n    return created;\n  }\n\n}\n","import { EventEmitter, OnEvent, ValueTracker } from '@proc7ts/fun-events';\nimport { Supply } from '@proc7ts/supply';\nimport { ComponentContext, ComponentState, domPropertyPathTo } from '@wesib/wesib';\n\n/**\n * @internal\n */\ntype ElementWithProperty<T> = {\n  [key in PropertyKey]: T;\n};\n\n/**\n * @internal\n */\nclass PropertyTracker<T> extends ValueTracker<T> {\n\n  private readonly _updates = new EventEmitter<[T, T]>();\n  private readonly _key: string;\n  constructor(\n      private readonly _element: ElementWithProperty<T>,\n      key: PropertyKey,\n  ) {\n    super();\n    this._key = key as string;\n  }\n\n  get supply(): Supply {\n    return this._updates.supply;\n  }\n\n  get it(): T {\n    return this._element[this._key];\n  }\n\n  set it(value: T) {\n    this._element[this._key] = value;\n  }\n\n  get on(): OnEvent<[T, T]> {\n    return this._updates.on;\n  }\n\n  bind(context: ComponentContext): void {\n\n    const propertyState = context.get(ComponentState).track(domPropertyPathTo(this._key));\n\n    propertyState.onUpdate({\n      supply: this.supply,\n      receive: (_ctx, _path, newValue: any, oldValue: any) => this._updates.send(newValue, oldValue),\n    });\n  }\n\n}\n\n/**\n * @internal\n */\nexport class NodeProperties {\n\n  private readonly _props = new Map<PropertyKey, PropertyTracker<any>>();\n  private _context?: ComponentContext<any>;\n\n  constructor(private readonly _element: any) {\n  }\n\n  bind(context: ComponentContext): void {\n    this._context = context;\n    this._props.forEach(prop => prop.bind(context));\n  }\n\n  get<T>(key: PropertyKey): ValueTracker<T> {\n\n    const existing = this._props.get(key);\n\n    if (existing) {\n      return existing;\n    }\n\n    const created = new PropertyTracker<any>(this._element, key);\n\n    if (this._context) {\n      created.bind(this._context);\n    }\n    this._props.set(key, created);\n\n    return created;\n  }\n\n}\n","import { ValueTracker } from '@proc7ts/fun-events';\nimport {\n  BootstrapContext,\n  ComponentClass,\n  ComponentContext,\n  ComponentElement,\n  ComponentEvent,\n  ComponentSlot__symbol,\n  ElementAdapter,\n} from '@wesib/wesib';\nimport { ComponentNode, ComponentTreeNode, ElementNode, ElementPickMode } from './element-node';\nimport { ElementNodeList } from './element-node-list';\nimport { elementNodeList } from './element-node-list.impl';\nimport { NodeAttributes } from './node-attributes.impl';\nimport { NodeProperties } from './node-properties.impl';\n\n/**\n * @internal\n */\nconst ElementNode__symbol = (/*#__PURE__*/ Symbol('element-node'));\n\n/**\n * @internal\n */\ntype TreeElement = Element & ComponentElement & {\n  [ElementNode__symbol]?: ComponentTreeNode;\n};\n\n/**\n * @internal\n */\nclass ElementNode$ implements ComponentTreeNode {\n\n  private readonly _attrs: NodeAttributes;\n  private readonly _props: NodeProperties;\n\n  constructor(private readonly _bs: BootstrapContext, readonly element: TreeElement) {\n    this._attrs = new NodeAttributes(_bs, element);\n    this._props = new NodeProperties(element);\n    element[ElementNode__symbol] = this;\n\n    const context = this.context;\n\n    if (context) {\n      this._bind(context);\n    } else {\n      element.addEventListener('wesib:component', event => this._bind((event as ComponentEvent).context));\n    }\n  }\n\n  get context(): ComponentContext | undefined {\n    return this.element[ComponentSlot__symbol]?.context;\n  }\n\n  get parent(): ElementNode | null {\n\n    const parent = this.element.parentNode;\n\n    return parent && elementNodeOf(this._bs, parent as Element);\n  }\n\n  select(selector: string | ComponentClass<any>, mode?: ElementPickMode): ElementNodeList<any> {\n    return selectNodes(this._bs, this.element, selector, mode);\n  }\n\n  attribute(name: string): ValueTracker<string | null> {\n    return this._attrs.get(name);\n  }\n\n  property<TValue>(key: PropertyKey): ValueTracker<TValue> {\n    return this._props.get(key);\n  }\n\n  private _bind(context: ComponentContext): void {\n    this._props.bind(context);\n  }\n\n}\n\n/**\n * @internal\n */\nexport function elementNodeOf(\n    bsContext: BootstrapContext,\n    element: TreeElement,\n    optional: true,\n): ElementNode | undefined;\n\n/**\n * @internal\n */\nexport function elementNodeOf(\n    bsContext: BootstrapContext,\n    element: TreeElement,\n    optional?: false,\n): ElementNode;\n\n/**\n * @internal\n */\nexport function elementNodeOf(\n    bsContext: BootstrapContext,\n    element: TreeElement,\n    optional?: boolean,\n): ElementNode | undefined;\n\n\nexport function elementNodeOf(\n    bsContext: BootstrapContext,\n    element: TreeElement,\n    optional?: boolean,\n): ElementNode | undefined {\n\n  const existing = element[ElementNode__symbol];\n\n  return (existing || optional) ? existing : new ElementNode$(bsContext, element);\n}\n\n/**\n * @internal\n */\nfunction selectNodes(\n    bsContext: BootstrapContext,\n    root: Element,\n    selector: string | ComponentClass<any>,\n    mode: ElementPickMode = {},\n): ElementNodeList<any> {\n  if (mode.all) {\n    return elementNodeList<ElementNode>(\n        bsContext,\n        root,\n        selector,\n        (element, optional) => elementNodeOf(bsContext, element, optional),\n        mode,\n    );\n  }\n\n  const adapter = bsContext.get(ElementAdapter);\n\n  return elementNodeList<ComponentNode>(\n      bsContext,\n      root,\n      selector,\n      (element, optional) => adapter(element) && elementNodeOf(bsContext, element, optional) as ComponentNode,\n      mode,\n  );\n}\n","import { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { ValueTracker } from '@proc7ts/fun-events';\nimport { BootstrapContext, ComponentClass, ComponentContext } from '@wesib/wesib';\nimport { ElementNodeList } from './element-node-list';\nimport { elementNodeOf } from './element-node.impl';\n\n/**\n * Arbitrary element node within component tree. Either bound to some component or not.\n */\nexport type ElementNode =\n    | RawElementNode\n    | ComponentNode;\n\n/**\n * Component tree node representing arbitrary element.\n *\n * This is a base interface of all element node implementations.\n */\nexport interface ComponentTreeNode {\n\n  /**\n   * The element itself.\n   */\n  readonly element: any;\n\n  /**\n   * A context of component bound to this element, if any.\n   */\n  readonly context?: ComponentContext<any>;\n\n  /**\n   * Parent element node, or `null` if element has no parent.\n   */\n  readonly parent: ElementNode | null;\n\n  /**\n   * Selects component nodes matching the given selector.\n   *\n   * @param selector - Simple CSS selector of nested components.\n   * @param mode - Component nodes pick mode.\n   *\n   * @returns Dynamically updatable list of matching component nodes.\n   */\n  select(\n      selector: string,\n      mode?: ComponentPickMode,\n  ): ElementNodeList<ComponentNode>;\n\n  /**\n   * Selects component nodes of the given type.\n   *\n   * @param componentType - Nested component type with custom element name.\n   * @param mode - Component nodes pick mode.\n   *\n   * @returns Dynamically updatable list of matching component nodes.\n   */\n  select<T extends object>(\n      componentType: ComponentClass<T>,\n      mode?: ComponentPickMode,\n  ): ElementNodeList<ComponentNode<T>>;\n\n  /**\n   * Selects element nodes matching the given selector.\n   *\n   * @param selector - Simple CSS selector of nested elements. E.g. CSS class selector.\n   * @param mode - A mode of node picking from component tree.\n   *\n   * @returns Dynamically updatable list of matching element nodes.\n   */\n  select(\n      selector: string,\n      mode: ElementPickMode,\n  ): ElementNodeList;\n\n  /**\n   * Tracks element attribute.\n   *\n   * `null` attribute value corresponds to its absence. Setting it to `null` removes attribute.\n   *\n   * @param name - Target attribute name.\n   *\n   * @returns Target attribute's value tracker.\n   */\n  attribute(name: string): ValueTracker<string | null>;\n\n  /**\n   * Tracks element element property.\n   *\n   * The changes are tracked with `StateTracker`. So it is expected that the target property notifies on its changes\n   * with state updater. E.g. when it is defined by `@DomProperty` decorator.\n   *\n   * @typeParam TValue - Property value type.\n   * @param key - Target property key.\n   *\n   * @returns Target property's value tracker.\n   */\n  property<TValue>(key: PropertyKey): ValueTracker<TValue>;\n\n}\n\n/**\n * Element node representing raw element not bound to any component.\n */\nexport interface RawElementNode extends ComponentTreeNode {\n\n  readonly context?: undefined;\n\n}\n\n/**\n * Element node representing an element bound to some component.\n */\nexport interface ComponentNode<T extends object = any> extends ComponentTreeNode {\n\n  readonly context: ComponentContext<T>;\n\n}\n\n/**\n * A key of component context value containing a component node instance.\n */\nexport const ComponentNode: SingleContextRef<ComponentNode> = (\n    /*#__PURE__*/ new SingleContextKey<ComponentNode>(\n        'component-node',\n        {\n          byDefault(context) {\n            return elementNodeOf(\n                context.get(BootstrapContext),\n                context.get(ComponentContext).element,\n            ) as ComponentNode;\n          },\n        },\n    )\n);\n\n/**\n * A mode of node picking from component tree.\n */\nexport interface ElementPickMode {\n\n  /**\n   * Set to `true` to select arbitrary nodes. Otherwise - select only component nodes.\n   */\n  all?: boolean;\n\n  /**\n   * Set to `true` to select from entire subtree. Otherwise - select from element child nodes only.\n   */\n  deep?: boolean;\n\n}\n\n/**\n * A mode that picks component nodes from component tree.\n */\nexport interface ComponentPickMode extends ElementPickMode {\n\n  all?: false;\n\n}\n","/**\n * Extracts URL contained in the hash of another URL.\n *\n * Extracted hash URL is based on origin of the original URL. Still, it may be absolute one.\n *\n * Input URL is never altered.\n *\n * @param url - An URL to extract hash from.\n *\n * @returns URL extracted from hash.\n */\nexport function getHashURL(url: URL): URL {\n  return new URL(url.hash.substring(1), url.origin);\n}\n\n/**\n * Creates an URL based on original one, but with hash substituted by the given hash URL.\n *\n * The hash URL is substituted as following:\n *\n * 1. If the hash URL's origin is not the same as the one of the base one, or if it contains a username,\n *    then absolute hash URL is substituted:\n * 2. Otherwise:\n *    - pathname is substituted, unless it is equal to `/` and no hash and search parameters present,\n *    - search parameters are substituted when at least one present,\n *    - hash is substituted only when present.\n *\n * Input URLs are never altered.\n *\n * @param url - Base URL.\n * @param hashURL - Hash URL to substitute.\n *\n * @returns URL with updated hash.\n */\nexport function setHashURL(url: URL, hashURL: URL): URL {\n  if (hashURL.origin !== url.origin || hashURL.username) {\n    return new URL(`#${hashURL}`, url);\n  }\n\n  const { pathname, search, hash } = hashURL;\n  const result = new URL('', url);\n\n  result.hash = (search || hash || pathname.length > 1) ? (pathname + search + hash) : (search + hash);\n\n  return result;\n}\n","import { Page } from './page';\nimport { PageParamContext } from './page-param-context';\n\n/**\n * A key of {@link PageParam.Ref page parameter request} property containing requested page parameter.\n */\nexport const PageParam__symbol = (/*#__PURE__*/ Symbol('page-param'));\n\n/**\n * Page navigation parameter.\n *\n * Can applied before navigation happened (i.e. to {@link LeavePageEvent}). Then it will be available to the target page\n * both before and after navigation.\n *\n * @typeParam T - Parameter value type.\n * @typeParam TInput - Parameter input type.\n */\nexport abstract class PageParam<T, TInput> implements PageParam.Ref<T, TInput> {\n\n  get [PageParam__symbol](): this {\n    return this;\n  }\n\n  /**\n   * Creates page parameter handle.\n   *\n   * This method is called when {@link Page.put assigning new page parameter}. It is called at most once per request,\n   * unless this parameter is assigned already. A {@link PageParam.Handle.put} method will be called instead\n   * in the latter case.\n   *\n   * @param page - A page to assign navigation parameter to.\n   * @param input - Parameter input used to construct its initial value.\n   * @param context - Page parameter context.\n   *\n   * @returns New page parameter value handle.\n   */\n  abstract create(page: Page, input: TInput, context: PageParamContext): PageParam.Handle<T, TInput>;\n\n  /**\n   * Creates default page parameter handle.\n   *\n   * This method is called when {@link Page.get requesting page parameter} which value is not present in the page.\n   * The value handle returned is assigned to the page.\n   *\n   * Returns nothing by default.\n   *\n   * @param _page - A page to assign navigation parameter to.\n   * @param _context - Page parameter context.\n   *\n   * @returns New page parameter value handle or nothing if there is no default value.\n   */\n  byDefault(_page: Page, _context: PageParamContext): PageParam.Handle<T, TInput> | undefined {\n    return;\n  }\n\n}\n\nexport namespace PageParam {\n\n  /**\n   * Page navigation parameter reference.\n   *\n   * @typeParam T - Parameter value type.\n   * @typeParam TInput - Parameter input type.\n   */\n  export interface Ref<T, TInput> {\n\n    /**\n     * Referred page navigation parameter instance.\n     */\n    readonly [PageParam__symbol]: PageParam<T, TInput>;\n\n  }\n\n  /**\n   * Page navigation parameter that has default value.\n   *\n   * @typeParam T - Parameter value type.\n   * @typeParam TInput - Parameter input type.\n   */\n  export interface WithDefaults<T, TInput> extends PageParam<T, TInput> {\n\n    byDefault(page: Page, context: PageParamContext): PageParam.Handle<T, TInput>;\n\n  }\n\n  export namespace WithDefaults {\n\n    /**\n     * A reference to page navigation parameter that has default value.\n     *\n     * @typeParam T - Parameter value type.\n     * @typeParam TInput - Parameter input type.\n     */\n    export interface Ref<T, TInput> {\n\n      /**\n       * Referred page navigation parameter instance.\n       */\n      readonly [PageParam__symbol]: WithDefaults<T, TInput>;\n\n    }\n\n  }\n\n  /**\n   * Page navigation parameter value handle.\n   *\n   * Holds and maintains parameter value.\n   *\n   * Created by {@link PageParam.create} method.\n   *\n   * @typeParam T - Parameter value type.\n   * @typeParam TInput - Parameter input type.\n   */\n  export interface Handle<T, TInput> {\n\n    /**\n     * Returns current parameter value.\n     *\n     * @returns Parameter value.\n     */\n    get(): T;\n\n    /**\n     * Puts page parameter value.\n     *\n     * This method is called when {@link Page.put re-assigning page parameter}. It is called when page parameter\n     * is assigned already and can be used to update it. The update logic is up to the implementation.\n     *\n     * @param input - Parameter input to use when updating its value.\n     */\n    put(input: TInput): void;\n\n    /**\n     * Transfers parameter to target page.\n     *\n     * This is called right before {@link LeavePageEvent} is fired for each parameter handle of current page.\n     *\n     * @param to - A page to transfer parameter to.\n     * @param when - When the transfer happens. Either `pretend`, `pre-open`, `pre-replace`, `open`, or `return`.\n     * `return` is used when return to page generated by another app version. E.g. from the page that has been\n     * reloaded.\n     *\n     * @returns New parameter handle instance for target page, or `undefined` if nothing to transfer.\n     */\n    transfer?(\n        to: Page, when: 'pretend' | 'pre-open' | 'pre-replace' | 'enter' | 'return',\n    ): Handle<T, TInput> | undefined;\n\n    /**\n     * This method is called when the page this parameter created for is entered.\n     *\n     * @param page - Entered page.\n     * @param when - When the page is entered. Either `init`, `open`, `replace`, `enter`, or `return`.\n     */\n    enter?(page: Page, when: 'init' | 'open' | 'replace' | 'enter' | 'return'): void;\n\n    /**\n     * This method is called when the page this parameter created for is left.\n     */\n    leave?(): void;\n\n    /**\n     * This method is called when page navigation aborted and target page won't be reached.\n     *\n     * The handle won't be accessed after this method call.\n     *\n     * @param at - The page the browser remains at.\n     */\n    stay?(at: Page): void;\n\n    /**\n     * This method is called when the page this parameter is created for is removed from navigation history.\n     *\n     * The handle won't be accessed after this method call.\n     */\n    forget?(): void;\n\n  }\n\n}\n","import { Page } from '../page';\nimport { PageParam } from '../page-param';\n\nclass PageHashURLValueParam$ extends PageParam<URL | undefined | null, URL | string | null | undefined> {\n\n  create(\n      page: Page,\n      input: URL | null | undefined,\n  ): PageParam.Handle<URL | null | undefined, URL | string | null | undefined> {\n\n    let hashURL: URL | null | undefined;\n    const handle: PageParam.Handle<URL | null | undefined, URL | string | null | undefined> = {\n      get() {\n        return hashURL;\n      },\n      put(value) {\n        hashURL = typeof value === 'string' ? new URL(value, page.url.origin) : value;\n      },\n    };\n\n    handle.put(input);\n\n    return handle;\n  }\n\n}\n\n/**\n * @internal\n */\nexport const PageHashURLValueParam: PageParam<URL | null | undefined, URL | string | null | undefined> = (\n    /*#__PURE__*/ new PageHashURLValueParam$()\n);\n","import { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { getHashURL } from './hash-url';\nimport { PageHashURLValueParam } from './page-hash-url-param.impl';\n\n/**\n * @internal\n */\nclass PageHashURLParam$ extends PageParam<URL, URL | string | null | undefined> {\n\n  create(page: Page, input: URL | string | null | undefined): PageParam.Handle<URL, URL | string | null | undefined> {\n\n    const handle: PageParam.Handle<URL, URL | string | null | undefined> = {\n      get() {\n        return page.get(PageHashURLValueParam) || getHashURL(page.url);\n      },\n      put(value) {\n        page.put(PageHashURLValueParam, value);\n      },\n    };\n\n    handle.put(input);\n\n    return handle;\n  }\n\n  byDefault(page: Page): PageParam.Handle<URL, URL> {\n    return this.create(page, null);\n  }\n\n}\n\n/**\n * Page parameter representing its {@link getHashURL hash URL}.\n *\n * When {@link Navigation.with set} to another value while navigating, the hash of target URL is updated, unless set to\n * `null` or `undefined`.\n *\n * Requires {@link PageHashURLSupport} for above to function properly.\n */\nexport const PageHashURLParam: PageParam.WithDefaults<URL, URL | string | null | undefined> = (\n    /*#__PURE__*/ new PageHashURLParam$()\n);\n","import { ContextValueSlot } from '@proc7ts/context-values';\nimport { contextDestroyed, ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, digAfter } from '@proc7ts/fun-events';\nimport { BootstrapWindow } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\nimport { PageParam } from './page-param';\nimport Target = Navigation.Target;\n\n/**\n * Navigation agent signature.\n *\n * The agent is called by navigation methods when leaving current page and may alter navigation processing.\n * E.g. change navigation target. For that it should be registered in appropriate context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by navigation method.\n */\nexport type NavigationAgent =\n/**\n * @param next - Either calls the next agent in chain, or applies the final navigation target if this agent is the last\n * one. Not calling this function effectively prevents navigation.\n * Accepts an optional {@link Navigation.Target} parameter. The original target will be used instead when omitted.\n * @param when - When navigation occurred. Either `pretend`, `pre-open`, or `pre-replace`.\n * @param from - The page to leave.\n * @param to - Navigation target page.\n */\n    (\n        this: void,\n        next: (this: void, target?: Target) => void,\n        when: 'pretend' | 'pre-open' | 'pre-replace',\n        from: Page,\n        to: Page,\n    ) => void;\n\n/**\n * @internal\n */\nclass NavigationAgentKey\n    extends ContextUpKey<NavigationAgent.Combined, NavigationAgent>\n    implements ContextUpRef<NavigationAgent.Combined, NavigationAgent> {\n\n  readonly upKey: ContextUpKey.UpKey<NavigationAgent.Combined, NavigationAgent>;\n\n  constructor(name: string) {\n    super(name);\n    this.upKey = this.createUpKey(\n        slot => {\n\n          const { document } = slot.context.get(BootstrapWindow);\n\n          slot.insert(slot.seed.do(\n              digAfter((...agents) => {\n                if (agents.length) {\n                  return afterThe(combinedAgent);\n                }\n                if (slot.hasFallback && slot.or) {\n                  return slot.or;\n                }\n\n                return afterThe(defaultNavigationAgent);\n\n                function combinedAgent(\n                    next: (this: void, target: Navigation.URLTarget) => void,\n                    when: 'pretend' | 'pre-open' | 'pre-replace',\n                    from: Page,\n                    to: Page,\n                ): void {\n\n                  return navigate(0, to);\n\n                  function navigate(agentIdx: number, agentTo: Page): void {\n\n                    const agent = agents[agentIdx];\n\n                    if (!agent) {\n                      return next(agentTo);\n                    }\n\n                    agent(\n                        (\n                            {\n                              url: nextURL = agentTo.url,\n                              title: nextTitle = agentTo.title,\n                              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                              data: nextData = agentTo.data,\n                            }: Navigation.Target = agentTo,\n                        ) => navigate(\n                            agentIdx + 1,\n                            {\n                              url: new URL(String(nextURL), document.baseURI),\n                              title: nextTitle,\n                              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                              data: nextData,\n                              get visited() {\n                                return agentTo.visited;\n                              },\n                              get current() {\n                                return agentTo.current;\n                              },\n                              get<T>(ref: PageParam.Ref<T, unknown>): T | undefined {\n                                return agentTo.get(ref);\n                              },\n                              put(ref, input) {\n                                agentTo.put(ref, input);\n                              },\n                            },\n                        ),\n                        when,\n                        from,\n                        agentTo,\n                    );\n                  }\n                }\n              }),\n          ));\n        },\n    );\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          NavigationAgent.Combined,\n          ContextUpKey.Source<NavigationAgent>,\n          AfterEvent<NavigationAgent[]>>,\n  ): void {\n\n    let delegated: NavigationAgent.Combined;\n\n    slot.context.get(\n        this.upKey,\n        slot.hasFallback ? { or: slot.or != null ? afterThe(slot.or) : slot.or } : undefined,\n    )!(\n        agent => delegated = agent,\n    ).whenOff(\n        reason => delegated = contextDestroyed(reason),\n    );\n\n    slot.insert((next, when, from, to) => delegated(next, when, from, to));\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultNavigationAgent(\n    next: (this: void, target: Navigation.URLTarget) => void,\n    _when: 'pretend' | 'pre-open' | 'pre-replace',\n    _from: Page,\n    to: Page,\n): void {\n  next(to);\n}\n\nexport namespace NavigationAgent {\n\n  /**\n   * Combined navigation agent signature.\n   *\n   * This is what is available under {@link NavigationAgent} key.\n   */\n  export type Combined =\n  /**\n   * @param next - Either calls the next agent in chain, or applies the final navigation target if this agent is the\n   * last one. Not calling this function effectively prevents navigation.\n   * Accepts an optional {@link Navigation.Target} parameter. The original target will be used instead when omitted.\n   * @param when - When navigation occurred. Either `pretend`, `pre-open`, or `pre-replace`.\n   * @param from - The page to leave.\n   * @param to - Navigation target page.\n   */\n      (\n          this: void,\n          next: (this: void, target: Navigation.URLTarget) => void,\n          when: 'pretend' | 'pre-open' | 'pre-replace',\n          from: Page,\n          to: Page,\n      ) => void;\n\n}\n\n/**\n * A key of context value containing an {@link NavigationAgent} instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the navigation.\n */\nexport const NavigationAgent: ContextUpRef<NavigationAgent.Combined, NavigationAgent> = (\n    /*#__PURE__*/ new NavigationAgentKey('navigation-agent')\n);\n","import { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { Navigation } from '../navigation';\nimport { NavigationAgent } from '../navigation-agent';\nimport { Page } from '../page';\nimport { setHashURL } from './hash-url';\nimport { PageHashURLValueParam } from './page-hash-url-param.impl';\n\nconst PageHashURLSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.provide({ a: NavigationAgent, is: pageHashURLAgent });\n  },\n};\n\n/**\n * {@link PageHashURLParam Page hash URL parameter} support feature.\n */\nexport class PageHashURLSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return PageHashURLSupport__feature;\n  }\n\n}\n\nfunction pageHashURLAgent(\n    next: (this: void, target?: Navigation.Target) => void,\n    _when: 'pretend' | 'pre-open' | 'pre-replace',\n    _from: Page,\n    to: Page,\n): void {\n\n  const hashURL = to.get(PageHashURLValueParam);\n\n  if (hashURL) {\n    next({ url: setHashURL(to.url, hashURL) });\n  } else {\n    next();\n  }\n}\n","import { ContextValues } from '@proc7ts/context-values';\n\n/**\n * Page parameter context.\n *\n * Provides values available in bootstrap context.\n */\nexport abstract class PageParamContext extends ContextValues {\n}\n","import { ContextKey, ContextKey__symbol, ContextRegistry, SingleContextKey } from '@proc7ts/context-values';\nimport { ValueTracker } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { itsEach } from '@proc7ts/push-iterator';\nimport { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\nimport { PageParam, PageParam__symbol } from './page-param';\nimport { PageParamContext } from './page-param-context';\n\n/**\n * @internal\n */\nconst NavHistory__key = (/*#__PURE__*/ new SingleContextKey<NavHistory>(\n    'nav-history',\n    {\n      byDefault: bootstrapDefault(ctx => new NavHistory(ctx)),\n    },\n));\n\n/**\n * @internal\n */\nexport const NAV_DATA_KEY = 'wesib:navigation:data' as const;\n\n/**\n * @internal\n */\nexport interface PartialNavData {\n  readonly uid?: string;\n  readonly id?: number;\n  readonly data: any;\n}\n\n/**\n * @internal\n */\nexport interface NavData extends PartialNavData {\n  readonly uid: string;\n  readonly id: number;\n}\n\n/**\n * @internal\n */\nexport interface NavDataEnvelope {\n  readonly [NAV_DATA_KEY]: NavData;\n}\n\n/**\n * @internal\n */\nfunction extractNavData(state: any): PartialNavData {\n  return state == null || typeof state !== 'object'\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      ? { data: state }\n      : (state as NavDataEnvelope)[NAV_DATA_KEY] as PartialNavData;\n}\n\n/**\n * @internal\n */\nexport class NavHistory {\n\n  static get [ContextKey__symbol](): ContextKey<NavHistory> {\n    return NavHistory__key;\n  }\n\n  private readonly _document: Document;\n  private readonly _location: Location;\n  private readonly _history: History;\n  private readonly _entries = new Map<number, PageEntry>();\n  private readonly _uid: string;\n  private _lastId = 0;\n\n  constructor(private readonly _context: BootstrapContext) {\n    const window = _context.get(BootstrapWindow);\n\n    this._document = window.document;\n    this._location = window.location;\n    this._history = window.history;\n    this._uid = btoa(String(Math.random()));\n  }\n\n  init(): PageEntry {\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const { data } = extractNavData(this._history.state);\n    const entry = this.newEntry({\n      url: new URL(this._location.href),\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      data,\n      title: this._document.title,\n    });\n\n    this._entries.set(entry.id, entry);\n    entry.schedule(() => {\n      entry.enter('init');\n      this._history.replaceState(this._historyState(entry), '');\n    });\n\n    return entry;\n  }\n\n  newEntry(target: Navigation.URLTarget): PageEntry {\n    return new PageEntry(this._context, ++this._lastId, target);\n  }\n\n  open(\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const { page: { title = '', url } } = toEntry;\n\n    this._history.pushState(\n        this._historyState(toEntry),\n        title,\n        url.href,\n    );\n\n    this._enter('open', toEntry, tracker);\n  }\n\n  private _enter(\n      when: 'open' | 'enter',\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const fromEntry = tracker.it;\n\n    this._entries.set(toEntry.id, toEntry);\n\n    try {\n      // Forget all entries starting from next one\n      for (let e = fromEntry.next; e; e = e.next) {\n        this._forget(e);\n      }\n    } finally {\n      toEntry.prev = fromEntry;\n      fromEntry.next = toEntry;\n      toEntry.schedule(() => {\n        try {\n          fromEntry.leave();\n        } finally {\n          toEntry.enter(when);\n        }\n      });\n      tracker.it = toEntry;\n    }\n  }\n\n  replace(\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const fromEntry = tracker.it;\n    const { page: { title = '', url } } = toEntry;\n\n    this._history.replaceState(\n        this._historyState(toEntry),\n        title,\n        url.href,\n    );\n\n    this._entries.set(toEntry.id, toEntry);\n\n    const prev = fromEntry.prev;\n\n    if (prev) {\n      toEntry.prev = prev;\n      prev.next = toEntry;\n    }\n\n    toEntry.schedule(() => {\n      try {\n        fromEntry.leave();\n      } finally {\n        try {\n          this._forget(fromEntry);\n        } finally {\n          toEntry.enter('replace');\n        }\n      }\n    });\n    tracker.it = toEntry;\n  }\n\n  popState(\n      popState: PopStateEvent,\n      tracker: ValueTracker<PageEntry>,\n  ): PageEntry | undefined {\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const { state } = popState;\n\n    if (state == null) {\n      // Hash change\n      if (this._history.state == null) {\n        // Not a return\n        return this._changeHash(tracker);\n      }\n      return; // Already handled by `hashchange` handler\n    }\n\n    const fromEntry = tracker.it;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const { uid, data, id: pageId } = extractNavData(state);\n    let toEntry: PageEntry;\n\n    const existingEntry = uid === this._uid && pageId != null ? this._entries.get(pageId) : undefined;\n\n    if (existingEntry) {\n      toEntry = existingEntry;\n    } else {\n      // Returning to page existed in previous app version\n      toEntry = this.newEntry({\n        url: new URL(this._location.href),\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        data,\n        title: this._document.title,\n      });\n      fromEntry.transfer(toEntry, 'return');\n      this._entries.set(toEntry.id, toEntry);\n      this._history.replaceState(this._historyState(toEntry), '');\n    }\n\n    toEntry.schedule(() => {\n      try {\n        fromEntry.leave();\n      } finally {\n        toEntry.enter('return');\n      }\n    });\n\n    tracker.it = toEntry;\n\n    return toEntry;\n  }\n\n  public hashChange(tracker: ValueTracker<PageEntry>): PageEntry | void {\n    if (this._history.state == null) {\n      // Not a return\n      return this._changeHash(tracker);\n    }\n    // Otherwise, a `popstate` event is also triggered,\n    // and its handler would do the job (or already did).\n  }\n\n  public update(tracker: ValueTracker<PageEntry>, url: URL): PageEntry {\n\n    const oldEntry = tracker.it;\n    const newEntry = new PageEntry(this._context, ++this._lastId, { ...oldEntry.page, url }, oldEntry);\n\n    this._entries.set(newEntry.id, newEntry);\n    this._history.replaceState(this._historyState(newEntry), '', url.href);\n    this._entries.delete(oldEntry.id);\n\n    return tracker.it = newEntry;\n  }\n\n  private _changeHash(tracker: ValueTracker<PageEntry>): PageEntry {\n\n    const fromEntry = tracker.it;\n    const toEntry = this.newEntry({\n      url: new URL(this._location.href),\n      data: null,\n      title: this._document.title,\n    });\n\n    try {\n      fromEntry.transfer(toEntry, 'enter');\n    } finally {\n      this._history.replaceState(this._historyState(toEntry), '');\n      this._enter('enter', toEntry, tracker);\n    }\n\n    return toEntry;\n  }\n\n  private _forget(entry: PageEntry): void {\n    this._entries.delete(entry.id);\n    entry.forget();\n  }\n\n  private _historyState({ id, page: { data } }: PageEntry): NavDataEnvelope {\n    return {\n      [NAV_DATA_KEY]: {\n        uid: this._uid,\n        id,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        data,\n      },\n    };\n  }\n\n}\n\nconst enum PageStatus {\n  New,\n  Visited,\n  Current,\n}\n\n/**\n * @internal\n */\nexport class PageEntry {\n\n  next?: PageEntry;\n  prev?: PageEntry;\n  private _status: PageStatus = PageStatus.New;\n  readonly page: Page;\n  private readonly _params: Map<PageParam<any, any>, PageParam.Handle<any, any>>;\n  private _update: () => void = noop;\n\n  constructor(\n      private readonly _bsContext: BootstrapContext,\n      readonly id: number,\n      target: Navigation.URLTarget,\n      proto?: PageEntry,\n  ) {\n    this._params = proto ? proto._params : new Map<PageParam<any, any>, PageParam.Handle<any, any>>();\n\n    const entry = this;\n\n    this.page = {\n      get url() {\n        return target.url;\n      },\n      get title() {\n        return target.title;\n      },\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      get data(): any {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return target.data;\n      },\n      get visited() {\n        return !!entry._status;\n      },\n      get current() {\n        return entry._status === PageStatus.Current;\n      },\n      get<T>(ref: PageParam.Ref<T, unknown>): T | undefined {\n        return entry.get(ref);\n      },\n      put(ref, input) {\n        entry.put(ref, input);\n      },\n    };\n  }\n\n  get<T>(ref: PageParam.Ref<T, unknown>): T | undefined {\n\n    const param = ref[PageParam__symbol];\n    const handle: PageParam.Handle<T, unknown> | undefined = this._params.get(param);\n\n    if (handle) {\n      return handle.get();\n    }\n\n    const newHandle = param.byDefault(this.page, this._newContext());\n\n    return newHandle && this._init(param, newHandle);\n  }\n\n  put<T, TInput>(ref: PageParam.Ref<T, TInput>, input: TInput): T {\n\n    const param = ref[PageParam__symbol];\n    const handle: PageParam.Handle<T, TInput> | undefined = this._params.get(param);\n\n    if (handle) {\n      handle.put(input);\n      return handle.get();\n    }\n\n    return this._init(param, param.create(this.page, input, this._newContext()));\n  }\n\n  private _newContext(): PageParamContext {\n\n    const registry = new ContextRegistry<ParamContext>(this._bsContext);\n\n    class ParamContext extends PageParamContext {\n\n      readonly get: PageParamContext['get'] = registry.newValues().get;\n\n    }\n\n    return new ParamContext();\n  }\n\n  private _init<T, TInput>(param: PageParam<T, TInput>, handle: PageParam.Handle<T, TInput>): T {\n    this._params.set(param, handle);\n\n    if (this.page.current && handle.enter) {\n      handle.enter(this.page, 'init');\n    }\n\n    return handle.get();\n  }\n\n  transfer(to: PageEntry, when: 'pretend' | 'pre-open' | 'pre-replace' | 'enter' | 'return'): void {\n    itsEach(this._params.entries(), ([param, handle]) => {\n      if (handle.transfer) {\n\n        const transferred = handle.transfer(to.page, when);\n\n        if (transferred) {\n          to._params.set(param, transferred);\n        }\n      }\n    });\n  }\n\n  stay(at: Page): void {\n    itsEach(this._params.values(), handle => handle.stay && handle.stay(at));\n  }\n\n  enter(when: 'init' | 'open' | 'replace' | 'enter' | 'return'): void {\n    this._status = PageStatus.Current;\n    itsEach(this._params.values(), handle => handle.enter && handle.enter(this.page, when));\n  }\n\n  leave(): void {\n    this._status = PageStatus.Visited;\n    itsEach(this._params.values(), handle => handle.leave && handle.leave());\n  }\n\n  forget(): void {\n    itsEach(this._params.values(), handle => handle.forget && handle.forget());\n    this._params.clear();\n  }\n\n  schedule(update: () => void): void {\n    this._update = update;\n  }\n\n  apply(): void {\n\n    const update = this._update;\n\n    this._update = noop;\n    update();\n  }\n\n}\n","import { Navigation } from './navigation';\nimport { Page } from './page';\n\n/**\n * Navigation event.\n */\nexport type NavigationEvent = LeavePageEvent | EnterPageEvent | StayOnPageEvent;\n\n/**\n * Navigation event type.\n */\nexport const enum NavigationEventType {\n\n  /**\n   * {@link EnterPageEvent Enter page event} type.\n   */\n  EnterPage = 'wesib:enterPage',\n\n  /**\n   * {@link LeavePageEvent Leave page event} type.\n   */\n  LeavePage = 'wesib:leavePage',\n\n  /**\n   * {@link StayOnPageEvent Stay on page event} type.\n   */\n  StayOnPage = 'wesib:stayOnPage',\n\n}\n\n/**\n * An event fired when navigation target reached by entering destination page.\n *\n * @event EnterPageEvent#wesib:enterPage\n */\nexport class EnterPageEvent extends Event {\n\n  /**\n   * When navigation event occurred.\n   *\n   * Can be one of:\n   * - `open` when opening a new page,\n   * - `replace` when replacing navigation history entry,\n   * - `enter` when entering new page by user action (e.g. hashchange event),\n   * - `return` when navigated to previously visited entry in navigation history.\n   */\n  readonly when: 'open' | 'replace' | 'enter' | 'return';\n\n  /**\n   * Entered page.\n   */\n  readonly to: Page;\n\n  /**\n   * Constructs enter page event.\n   *\n   * @param type - Event type.\n   * @param init - Initialization options.\n   */\n  constructor(type: string, init: EnterPageEventInit) {\n    super(type, { ...init, cancelable: false });\n    this.when = init.when;\n    this.to = init.to;\n  }\n\n}\n\n/**\n * {@link EnterPageEvent Enter page event} initialization options.\n */\nexport interface EnterPageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * When navigation event occurred.\n   *\n   * Can be one of:\n   * - `open` when opening a new page,\n   * - `replace` when replacing navigation history entry,\n   * - `enter` when entering new page by user action (e.g. hashchange event),\n   * - `return` when navigated to previously visited entry in navigation history.\n   */\n  readonly when: 'open' | 'replace' | 'enter' | 'return';\n\n  /**\n   * Entered page.\n   */\n  readonly to: Page;\n\n}\n\n/**\n * An event fired right before leaving the page in order to navigate to another one.\n *\n * This event can be cancelled in order to prevent actual navigation or history update. The navigation is also\n * cancelled when another navigation initiated by one of the handlers of this event.\n *\n * @event LeavePageEvent#wesib:leavePage\n */\nexport class LeavePageEvent extends Event {\n\n  /**\n   * When navigation event occurred. Either `pre-open` when leaving a page to open a new one, or `pre-replace` when\n   * leaving a page to replace it with another history entry.\n   */\n  readonly when: 'pre-open' | 'pre-replace';\n\n  /**\n   * The page to leave.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target page.\n   */\n  readonly to: Page;\n\n  /**\n   * Constructs leave page event.\n   *\n   * @param type - Event type.\n   * @param init - Initialization options.\n   */\n  constructor(type: string, init: LeavePageEventInit) {\n    super(type, { ...init, cancelable: true });\n    this.when = init.when;\n    this.from = init.from;\n    this.to = init.to;\n  }\n\n}\n\n/**\n * {@link LeavePageEvent Leave page event} initialization options.\n */\nexport interface LeavePageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * When navigation event occurred. Either `pre-open` when leaving a page to open a new one, or `pre-replace` when\n   * leaving a page to replace it with another history entry.\n   */\n  readonly when: 'pre-open' | 'pre-replace';\n\n  /**\n   * The page to leave.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target page.\n   */\n  readonly to: Page;\n\n}\n\n/**\n * An event fired when navigation cancelled or failed.\n *\n * @event StayOnPageEvent#wesib:stayOnPage\n */\nexport class StayOnPageEvent extends Event {\n\n  /**\n   * When navigation event occurred. Always `stay`.\n   */\n  get when(): 'stay' {\n    return 'stay';\n  }\n\n  /**\n   * The page to stay at.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target.\n   */\n  readonly to: Navigation.URLTarget;\n\n  /**\n   * A reason of navigation failure. This is set when navigation failed due to some error.\n   */\n  readonly reason?: any;\n\n  /**\n   * Constructs stay on page event.\n   *\n   * @param type - Event type.\n   * @param init - Initialization options.\n   */\n  constructor(type: string, init: StayOnPageEventInit) {\n    super(type, { ...init, cancelable: true });\n    this.from = init.from;\n    this.to = init.to;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this.reason = init.reason;\n  }\n\n}\n\n/**\n * {@link StayOnPageEvent Stay on page event} initialization options.\n */\nexport interface StayOnPageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * The page to stay at.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target.\n   */\n  readonly to: Navigation.URLTarget;\n\n  /**\n   * A reason of navigation failure. This is set when navigation failed due to some error.\n   */\n  readonly reason?: any;\n\n}\n","import { DomEventDispatcher, OnDomEvent } from '@frontmeans/dom-events';\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  EventKeeper,\n  EventSender,\n  mapAfter,\n  onAny,\n  OnEvent,\n  OnEvent__symbol,\n  onSupplied,\n  trackValue,\n} from '@proc7ts/fun-events';\nimport { mergeFunctions, noop } from '@proc7ts/primitives';\nimport { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { NavHistory, PageEntry } from './nav-history.impl';\nimport { NavigationAgent } from './navigation-agent';\nimport {\n  EnterPageEvent,\n  LeavePageEvent,\n  NavigationEvent,\n  NavigationEventType,\n  StayOnPageEvent,\n} from './navigation.event';\nimport { Page } from './page';\nimport { PageParam } from './page-param';\n\n/**\n * @internal\n */\nconst Navigation__key = (/*#__PURE__*/ new SingleContextKey<Navigation>(\n    'navigation',\n    {\n      byDefault: bootstrapDefault(createNavigation),\n    },\n));\n\n/**\n * Browser navigation service.\n *\n * Expected to be used as a [History] and [Location] APIs replacement.\n *\n * Fires additional navigation events the browser does not support natively.\n *\n * Implements an `EventSender` interface by sending {@link NavigationEvent navigation events} to registered receivers.\n *\n * Implements an `EventKeeper` interface by sending current {@link Page page} to registered receivers.\n *\n * Available as bootstrap context value.\n *\n * [History]: https://developer.mozilla.org/en-US/docs/Web/API/History\n * [Location]: https://developer.mozilla.org/en-US/docs/Web/API/Location\n */\nexport abstract class Navigation implements EventSender<[NavigationEvent]>, EventKeeper<[Page]> {\n\n  static get [ContextKey__symbol](): ContextKey<Navigation> {\n    return Navigation__key;\n  }\n\n  /**\n   * Current page.\n   */\n  abstract readonly page: Page;\n\n  /**\n   * The number of element in navigation history.\n   */\n  abstract readonly length: number;\n\n  /**\n   * An `OnDomEvent` sender of {@link EnterPageEvent enter page events}.\n   */\n  abstract readonly onEnter: OnDomEvent<EnterPageEvent>;\n\n  /**\n   * An `OnDomEvent` sender of {@link LeavePageEvent leave page events}.\n   *\n   * The registered listener may cancel navigation by calling `preventDefault()` method of received event.\n   */\n  abstract readonly onLeave: OnDomEvent<LeavePageEvent>;\n\n  /**\n   * An `OnDomEvent` {@link StayOnPageEvent stay on page events}.\n   *\n   * The registered listener is informed when navigation has been cancelled by one of leave page event receivers,\n   * navigation failed due to e.g. invalid URL, or when another navigation request initiated before the page left.\n   *\n   * @returns `OnDomEvent` sender of {@link StayOnPageEvent stay on page events}.\n   */\n  abstract readonly onStay: OnDomEvent<StayOnPageEvent>;\n\n  /**\n   * An `OnEvent` sender of {@link NavigationEvent navigation events}.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly on: OnEvent<[NavigationEvent]>;\n\n  [OnEvent__symbol](): OnEvent<[NavigationEvent]> {\n    return this.on;\n  }\n\n  /**\n   * An `AfterEvent` keeper of {@link page current page}.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[Page]>;\n\n  [AfterEvent__symbol](): AfterEvent<[Page]> {\n    return this.read;\n  }\n\n  /**\n   * Goes to the previous page in navigation history.\n   *\n   * Calling this method is the same as calling `go(-1)`.\n   */\n  back(): void {\n    this.go(-1);\n  }\n\n  /**\n   * Goes to the next page in navigation history.\n   *\n   * Calling this method is the same as calling `go(1)`.\n   */\n  forward(): void {\n    this.go(1);\n  }\n\n  /**\n   * Loads a page from navigation history, identified by its relative location to the current page.\n   *\n   * For example `-1` navigates to previous page, while `1` navigates to the next one. If you specify an out-of-bounds\n   * value (for instance, specifying -1 when there are no previously-visited pages in navigation history), this method\n   * silently has no effect.\n   *\n   * @param delta - Relative location in navigation history to navigate to. The absent value or value of `0` reloads\n   * the current page.\n   */\n  abstract go(delta?: number): void;\n\n  /**\n   * Reloads current page.\n   *\n   * Calling this method is the same as calling `go()`.\n   */\n  reload(): void {\n    this.go();\n  }\n\n  /**\n   * Opens a page by navigating to the given `target`.\n   *\n   * Appends an entry to navigation history.\n   *\n   * @param target - Either navigation target or URL to navigate to.\n   * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually navigate.\n   * Then navigates to the `target`, unless the event cancelled.\n   * @fires NavigateEvent@wesib:navigate  On window object when navigation succeed.\n   *\n   * @returns A promise resolved to navigated page, or to `null` otherwise.\n   */\n  abstract open(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  /**\n   * Replaces current navigation history entry with the given `target`.\n   *\n   * @param target - Either navigation target or URL to replace current history entry with.\n   * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually update the history.\n   * Then navigates to the `target`, unless the event cancelled.\n   * @fires NavigateEvent@wesib:navigate  On window object when history updated.\n   *\n   * @returns A promise resolved to navigated page, or to `null` otherwise.\n   */\n  abstract replace(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  /**\n   * Replaces current page URL with the given one.\n   *\n   * Does not alter current page state, and does not trigger any events.\n   *\n   * @param url - An URL to replace the the current one with.\n   *\n   * @returns Current page with updated URL.\n   */\n  abstract update(url: string | URL): Page;\n\n  /**\n   * Creates parameterized navigation instance and assigns a page parameter to apply to target page.\n   *\n   * @typeParam T - Parameter value type.\n   * @typeParam TInput - Parameter input type.\n   * @param ref - A reference to page navigation parameter to apply.\n   * @param input - Parameter input to use when constructing its value.\n   *\n   * @returns New parameterized navigation instance.\n   */\n  abstract with<T, TInput>(ref: PageParam.Ref<T, TInput>, input: TInput): Navigation.Parameterized;\n\n}\n\nexport namespace Navigation {\n\n  /**\n   * Parameterized navigation.\n   *\n   * Allows to assign target page parameters prior to navigating to it.\n   */\n  export interface Parameterized {\n\n    /**\n     * Applies parameter to navigation target page.\n     *\n     * @typeParam T - Parameter value type.\n     * @typeParam TInput - Parameter input type.\n     * @param ref - A reference to page navigation parameter to apply.\n     * @param input - Parameter input to use when constructing its value.\n     *\n     * @returns New parameterized navigation instance.\n     */\n    with<T, TInput>(ref: PageParam.Ref<T, TInput>, input: TInput): Parameterized;\n\n    /**\n     * Opens a page by navigating to the given `target` with provided page parameters.\n     *\n     * Appends an entry to navigation history.\n     *\n     * @param target - Either navigation target or URL to navigate to. Navigates to current page URL when omitted.\n     * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually navigate.\n     * Then navigates to the `target`, unless the event cancelled.\n     * @fires NavigateEvent@wesib:navigate  On window object when navigation succeed.\n     *\n     * @returns A promise resolved to navigated page, or to `null` otherwise.\n     */\n    open(target?: Navigation.Target | string | URL): Promise<Page | null>;\n\n    /**\n     * Replaces the most recent entry in navigation history with the given `target` and provided page parameters.\n     *\n     * @param target - Either navigation target or URL to replace the latest history entry with. Navigates to current\n     * page URL when omitted.\n     * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually update the history.\n     * Then navigates to the `target`, unless the event cancelled.\n     * @fires NavigateEvent@wesib:navigate  On window object when history updated.\n     *\n     * @returns A promise resolved to navigated page, or to `null` otherwise.\n     */\n    replace(target?: Navigation.Target | string | URL): Promise<Page | null>;\n\n    /**\n     * Pretends navigation.\n     *\n     * Prepares navigation and parameters, but does not actually navigate. Instead it calls the provided callback\n     * function.\n     *\n     * This is useful e.g. to build target URL or evaluate target page parameter.\n     *\n     * @param target - Either navigation target or URL to pretend navigation to.\n     * @param callback - A callback function receiving two pages as parameters: the page to leave, and the page to open.\n     * The latter one is valid only inside callback, as its parameters will be cleaned up right after callback returns.\n     * The value returned from callback is then returned from this method call. It may be used to collect some data\n     * from target page.\n     *\n     * @returns Either the value returned by callback, or `undefined` when navigation failed.\n     */\n    pretend<T>(\n        target: Navigation.Target | string | URL,\n        callback: (this: void, from: Page, to: Page) => T,\n    ): T | undefined;\n\n    /**\n     * Pretends navigation to the same page.\n     *\n     * Prepares navigation and parameters, but does not actually navigate. Instead it calls the provided callback\n     * function.\n     *\n     * This is useful e.g. to build target URL or evaluate target page parameter.\n     *\n     * @param callback - A callback function receiving two pages as parameters: the page to leave, and the page to open.\n     * The latter one is valid only inside callback, as its parameters will be cleaned up right after callback returns.\n     * The value returned from callback is then returned from this method call. It may be used to collect some data\n     * from target page.\n     *\n     * @returns Either the value returned by callback, or `undefined` when navigation failed.\n     */\n    pretend<T>(\n        callback: (this: void, from: Page, to: Page) => T,\n    ): T | undefined;\n\n    /**\n     * Pretends navigation and builds navigation target.\n     *\n     * Prepares navigation and parameters, but does not actually navigate. Instead it calls the provided callback\n     * function.\n     *\n     * This is useful e.g. to build target URL or evaluate target page parameter.\n     *\n     * @param target - Either navigation target or URL to pretend navigation to. Prepends navigation to current page\n     * when omitted.\n     *\n     * @returns Either Navigation target with URL value, or `undefined` when navigation failed.\n     */\n    pretend(\n        target?: Navigation.Target | string | URL,\n    ): URLTarget | undefined;\n\n  }\n\n  /**\n   * Navigation target.\n   *\n   * This is passed to {@link Navigation.open} and {@link Navigation.replace} methods.\n   */\n  export interface Target {\n\n    /**\n     * An URL to update the browser location string to.\n     */\n    readonly url?: string | URL;\n\n    /**\n     * Opaque data to apply to session history. I.e. either push or replace.\n     */\n    readonly data?: any;\n\n    /**\n     * New window title.\n     */\n    readonly title?: string;\n\n  }\n\n  /**\n   * Navigation target with URL value.\n   */\n  export interface URLTarget extends Target {\n\n    readonly url: URL;\n\n  }\n\n}\n\nfunction createNavigation(context: BootstrapContext): Navigation {\n\n  const window = context.get(BootstrapWindow);\n  const { document, history } = window;\n  const dispatcher = new DomEventDispatcher(window);\n  const navHistory = context.get(NavHistory);\n  const agent = context.get(NavigationAgent);\n  const nav = trackValue<PageEntry>(navHistory.init());\n\n  nav.read(nextEntry => nextEntry.apply()); // The very first page entry receiver applies scheduled updates to page\n\n  let next: Promise<any> = Promise.resolve();\n\n  dispatcher.on<PopStateEvent>('popstate')(popState => {\n\n    const entry = navHistory.popState(popState, nav);\n\n    if (entry) {\n      dispatcher.dispatch(new EnterPageEvent(\n          NavigationEventType.EnterPage,\n          {\n            when: popState.state != null ? 'return' : 'enter',\n            to: entry.page,\n          },\n      ));\n    }\n  });\n\n  dispatcher.on('hashchange')(() => {\n\n    const entry = navHistory.hashChange(nav);\n\n    if (entry) {\n      dispatcher.dispatch(new EnterPageEvent(\n          NavigationEventType.EnterPage,\n          {\n            when: 'enter',\n            to: entry.page,\n          },\n      ));\n    }\n  });\n\n  type NavTarget = { -readonly [K in keyof Navigation.URLTarget]: Navigation.URLTarget[K] };\n\n  class Navigation$ extends Navigation {\n\n    readonly onEnter: OnDomEvent<EnterPageEvent>;\n    readonly onLeave: OnDomEvent<LeavePageEvent>;\n    readonly onStay: OnDomEvent<StayOnPageEvent>;\n    readonly on: OnEvent<[NavigationEvent]>;\n    readonly read: AfterEvent<[Page]>;\n\n    constructor() {\n      super();\n      this.onEnter = dispatcher.on<EnterPageEvent>(NavigationEventType.EnterPage);\n      this.onLeave = dispatcher.on<LeavePageEvent>(NavigationEventType.LeavePage);\n      this.onStay = dispatcher.on<StayOnPageEvent>(NavigationEventType.StayOnPage);\n      this.on = onAny<[NavigationEvent]>(\n          onSupplied(this.onEnter),\n          onSupplied(this.onLeave),\n          onSupplied(this.onStay),\n      );\n      this.read = nav.read.do(\n          mapAfter(({ page }) => page),\n      );\n    }\n\n    get page(): Page {\n      return nav.it.page;\n    }\n\n    get length(): number {\n      return history.length;\n    }\n\n    go(delta?: number): void {\n      history.go(delta);\n    }\n\n    open(target: Navigation.Target | string | URL): Promise<Page | null> {\n      return navigate('pre-open', 'open', target);\n    }\n\n    replace(target: Navigation.Target | string | URL): Promise<Page | null> {\n      return navigate('pre-replace', 'replace', target);\n    }\n\n    update(url: string | URL): Page {\n      return navHistory.update(nav, toURL(url)).page;\n    }\n\n    with<T, TInput>(ref: PageParam.Ref<T, TInput>, input: TInput): Navigation.Parameterized {\n      return withParam(page => page.put(ref, input));\n    }\n\n  }\n\n  return new Navigation$();\n\n  function withParam(applyParams: (page: Page) => void): Navigation.Parameterized {\n    return {\n      with<T, TInput>(ref: PageParam.Ref<T, TInput>, input: TInput): Navigation.Parameterized {\n        return withParam(mergeFunctions(applyParams, page => page.put(ref, input)));\n      },\n      open(target?: Navigation.Target | string | URL) {\n        return navigate('pre-open', 'open', target, applyParams);\n      },\n      replace(target?: Navigation.Target | string | URL) {\n        return navigate('pre-replace', 'replace', target, applyParams);\n      },\n      pretend<T>(\n          targetOrCallback?: Navigation.Target | string | URL | ((this: void, from: Page, to: Page) => T),\n          callback: (this: void, from: Page, to: Page) => T = (_from, to) => to as unknown as T,\n      ): T | undefined {\n\n        let target: Navigation.Target | string | URL | undefined;\n\n        if (typeof targetOrCallback === 'function') {\n          callback = targetOrCallback;\n          target = undefined;\n        } else {\n          target = targetOrCallback;\n        }\n\n        const navTarget = navTargetOf(target);\n        const fromEntry = nav.it;\n        const toEntry = newEntry('pretend', fromEntry, navTarget, applyParams);\n\n        try {\n          return applyAgent('pretend', fromEntry, navTarget, toEntry)\n              ? callback(fromEntry.page, toEntry.page)\n              : undefined;\n        } finally {\n          toEntry.stay(nav.it.page);\n        }\n      },\n    };\n  }\n\n  function toURL(url: string | URL | undefined): URL {\n    if (typeof url === 'string') {\n      return new URL(url, document.baseURI);\n    }\n    return url || nav.it.page.url;\n  }\n\n  function navTargetOf(target?: Navigation.Target | string | URL): NavTarget {\n    if (target == null || typeof target === 'string' || target instanceof URL) {\n      return { url: toURL(target) };\n    }\n    if (target.url instanceof URL) {\n      return target as Navigation.URLTarget;\n    }\n    return { ...target, url: toURL(target.url) };\n  }\n\n  function navigate(\n      whenLeave: 'pre-open' | 'pre-replace',\n      when: 'open' | 'replace',\n      target?: Navigation.Target | string | URL,\n      applyParams: (page: Page) => void = noop,\n  ): Promise<Page | null> {\n\n    const navTarget = navTargetOf(target);\n    const promise = next = next.then(doNavigate, doNavigate);\n\n    return promise;\n\n    function doNavigate(): Page | null {\n\n      let toEntry: PageEntry | undefined = undefined;\n\n      try {\n\n        const prepared = prepare();\n\n        if (!prepared) {\n          return prepared; // Navigation cancelled\n        }\n\n        toEntry = prepared;\n        navHistory[when](toEntry, nav);\n        dispatcher.dispatch(new EnterPageEvent(\n            NavigationEventType.EnterPage,\n            {\n              when,\n              to: toEntry.page,\n            },\n        ));\n\n        return toEntry.page;\n      } catch (e) {\n        stay(toEntry, e);\n        throw e;\n      }\n    }\n\n    function prepare(): PageEntry | null {\n      if (next !== promise) {\n        return stay();\n      }\n\n      const fromEntry = nav.it;\n      const toEntry = newEntry(whenLeave, fromEntry, navTarget, applyParams);\n      const leavePage = new LeavePageEvent(\n          NavigationEventType.LeavePage,\n          {\n            when: whenLeave,\n            from: fromEntry.page,\n            to: toEntry.page,\n          },\n      );\n\n      if (!dispatcher.dispatch(leavePage)\n          || next !== promise\n          || !applyAgent(whenLeave, fromEntry, navTarget, toEntry)) {\n        return stay(toEntry);\n      }\n\n      return toEntry;\n    }\n\n    function stay(toEntry?: PageEntry, reason?: any): null {\n      if (toEntry) {\n        toEntry.stay(nav.it.page);\n      }\n\n      dispatcher.dispatch(new StayOnPageEvent(\n          NavigationEventType.StayOnPage,\n          {\n            from: nav.it.page,\n            to: navTarget,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            reason,\n          },\n      ));\n\n      return null;\n    }\n\n  }\n\n  function newEntry(\n      whenLeave: 'pretend' | 'pre-open' | 'pre-replace',\n      fromEntry: PageEntry,\n      navTarget: NavTarget,\n      applyParams: (page: Page) => void,\n  ): PageEntry {\n\n    const toEntry = navHistory.newEntry(navTarget);\n\n    try {\n      fromEntry.transfer(toEntry, whenLeave);\n      applyParams(toEntry.page);\n    } catch (e) {\n      toEntry.stay(nav.it.page);\n      throw e;\n    }\n\n    return toEntry;\n  }\n\n  function applyAgent(\n      whenLeave: 'pretend' | 'pre-open' | 'pre-replace',\n      fromEntry: PageEntry,\n      navTarget: NavTarget,\n      toEntry: PageEntry,\n  ): boolean {\n\n    let navigated = false;\n\n    agent(\n        ({ url, data, title }) => {\n          navigated = true;\n          navTarget.url = url;\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          navTarget.data = data;\n          navTarget.title = title;\n        },\n        whenLeave,\n        fromEntry.page,\n        toEntry.page,\n    );\n\n    return navigated;\n  }\n\n}\n","import { css__naming, QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { RenderSchedule } from '@frontmeans/render-scheduler';\nimport {\n  afterEach,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterEventBy,\n  afterThe,\n  consumeEvents,\n  digAfter_,\n  EventKeeper,\n  supplyAfter,\n  translateAfter_,\n} from '@proc7ts/fun-events';\nimport { Class, noop } from '@proc7ts/primitives';\nimport { mapIt } from '@proc7ts/push-iterator';\nimport { Supply } from '@proc7ts/supply';\nimport {\n  Component,\n  ComponentClass,\n  ComponentContext,\n  ComponentDecorator,\n  DefaultNamespaceAliaser,\n  ElementRenderScheduler,\n  RenderDef,\n  Wesib__NS,\n} from '@wesib/wesib';\nimport { ComponentNode, ElementNode, ElementPickMode } from '../tree';\nimport { getHashURL } from './hash-url';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\n\n/**\n * @internal\n */\ninterface ActiveNavLink {\n  supply(): Supply;\n}\n\n/**\n * Creates component decorator that marks navigation link(s) inside decorated component active.\n *\n * Marks navigation links with highest weight.\n *\n * @typeParam T - A type of decorated component class.\n * @param def - Navigation link activation definition.\n *\n * @returns New component decorator.\n */\nexport function ActivateNavLink<T extends ComponentClass = Class>(\n    def: ActivateNavLinkDef<InstanceType<T>> = {},\n): ComponentDecorator<T> {\n\n  const { select = 'a', pick = { all: true, deep: true } } = def;\n\n  return Component({\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const activate = activateNavLink(context, def);\n        const weigh = navLinkWeight(def);\n        const navigation = context.get(Navigation);\n        const componentNode = context.get(ComponentNode);\n\n        context.whenConnected(() => {\n\n          let active = new Map<ElementNode, ActiveNavLink>();\n\n          navigation.read.do(\n              supplyAfter(context),\n              consumeEvents(\n                  page => componentNode.select(select, pick).read.do(\n                      digAfter_(nodes => afterEach(\n                          ...mapIt(nodes, node => weigh({ node, context, page })),\n                      )),\n                      consumeEvents((...weights: NavLinkWeight[]) => {\n\n                        const selected = selectActiveNavLinks(weights);\n                        const newActive = new Map<ElementNode, ActiveNavLink>();\n                        const result = new Supply();\n\n                        selected.forEach(node => {\n\n                          let activeLink: ActiveNavLink;\n                          const existing = active.get(node);\n\n                          if (existing) {\n                            newActive.set(node, existing);\n                            activeLink = existing;\n                          } else {\n                            activeLink = activate({ node, context, page });\n                            newActive.set(node, activeLink);\n                          }\n\n                          activeLink.supply().needs(result);\n                        });\n\n                        active = newActive;\n\n                        return result;\n                      }),\n                  ),\n              ),\n          );\n        });\n      });\n    },\n  });\n}\n\n/**\n * Navigation link activation definition.\n *\n * Defines a set of element nodes considered to be navigation links. Each matching node is {@link weigh weighed}\n * against {@link Navigation.read current page}, and the link with highest weight is marked {@link active}.\n *\n * @typeParam T - A type of component.\n */\nexport interface ActivateNavLinkDef<T extends object = any> {\n\n  /**\n   * Navigation links CSS selector.\n   *\n   * `a` by default.\n   */\n  readonly select?: string;\n\n  /**\n   * A mode of navigation link node picking from component tree.\n   *\n   * By default picks any matching element from entire subtree.\n   */\n  readonly pick?: ElementPickMode;\n\n  /**\n   * Qualified name of CSS class to mark the active element with.\n   *\n   * The `active` class in Wesib namespace is used by default.\n   */\n  readonly active?: QualifiedName;\n\n  /**\n   * Rendering definition options to pass to nav links render scheduler.\n   */\n  readonly render?: RenderDef.Options;\n\n  /**\n   * Weighs matching navigation link.\n   *\n   * This method will be called for each navigation link on each current page update.\n   *\n   * By default:\n   * 1. If the link path has neither hash, nor search parameters, then:\n   * 1.1. Checks whether page URL path starts with the link's one.\n   * 1.2. If so, then uses link path length as weight.\n   * 2. If the link path has search parameters, but has no hash, then requires the page path to be the same as link's\n   *    one, and page search parameters include all of the link's ones. The number of link search parameters plus the\n   *    link path length is used as weight.\n   * 3. If the link path has a hash, then requires the page path and search parameters to be the same as link's ones,\n   *    and their hashes are treated as {@link getHashURL URLs}. The weight is calculated by applying steps 1, 2, and 3\n   *    to hash URLs increased by the link path length and the number of search parameters.\n   *\n   * Ignores search parameters with names starting and ending with double underscores. Like `__wesib_app_rev__`.\n   *\n   * @param node - Navigation link node to weigh.\n   * @param page - Current navigation page.\n   * @param context - Decorated component context.\n   *\n   * @returns Either navigation link weight, or its keeper. Non-positive wights means the page URL doesn't match\n   * the link at all.\n   */\n  weigh?(\n      {\n        node,\n        page,\n        context,\n      }: {\n        node: ElementNode;\n        page: Page;\n        context: ComponentContext<T>;\n      },\n  ): number | EventKeeper<[number]>;\n\n  /**\n   * Changes navigation link activity state.\n   *\n   * This method is called each time the active link changed.\n   *\n   * @param active - Whether to make target link active (`true`), or inactive (`false`).\n   * @param node - Navigation link node to update activity state of.\n   * @param page - Current navigation page.\n   * @param context - Decorated component context.\n   */\n  activate?(\n      active: boolean,\n      {\n        node,\n        page,\n        context,\n      }: {\n        node: ElementNode;\n        page: Page;\n        context: ComponentContext<T>;\n      },\n  ): void;\n\n}\n\n/**\n * @internal\n */\ntype NavLinkWeight = [ElementNode, number];\n\n/**\n * @internal\n */\ninterface NavLinkOpts {\n  node: ElementNode;\n  page: Page;\n  context: ComponentContext;\n}\n\n/**\n * @internal\n */\nfunction selectActiveNavLinks(weights: NavLinkWeight[]): ElementNode[] {\n\n  let maxWeight = 0;\n  let active: ElementNode[] = [];\n\n  weights.forEach(([node, weight]) => {\n    if (weight > maxWeight) {\n      maxWeight = weight;\n      active = [node];\n    } else if (weight === maxWeight) {\n      active.push(node);\n    }\n  });\n\n  return active;\n}\n\n/**\n * @internal\n */\nfunction navLinkWeight(\n    def: ActivateNavLinkDef,\n): (opts: NavLinkOpts) => AfterEvent<NavLinkWeight> {\n  if (!def.weigh) {\n    return defaultNavLinkWeight;\n  }\n\n  return opts => {\n\n    const weight = def.weigh!(opts);\n\n    if (typeof weight === 'number') {\n      return afterThe(opts.node, weight);\n    }\n\n    let supplier: AfterEvent<NavLinkWeight> = weight[AfterEvent__symbol]().do(\n        translateAfter_((send, weight) => send(opts.node, weight)),\n    );\n\n    return afterEventBy<NavLinkWeight>(receiver => {\n      supplier({\n        supply: new Supply()\n            .needs(receiver.supply)\n            .whenOff(() => {\n              // Fall back to zero weight once the weight supply cut off\n              supplier = afterThe(opts.node, 0);\n              supplier(receiver);\n            }),\n        receive: receiver.receive,\n      });\n    });\n  };\n}\n\n/**\n * @internal\n */\nfunction defaultNavLinkWeight(\n    {\n      node,\n      page,\n    }: NavLinkOpts,\n): AfterEvent<NavLinkWeight> {\n\n  const { element } = node as { element: Element };\n  const href = element.getAttribute('href');\n\n  if (href == null) {\n    return afterThe(node, -1);\n  }\n\n  const linkURL = new URL(href, element.ownerDocument.baseURI);\n\n  return afterThe(node, calcNavLinkWeight(linkURL, page.url));\n}\n\n/**\n * @internal\n */\nfunction calcNavLinkWeight(linkURL: URL, pageURL: URL): number {\n  if (linkURL.origin !== pageURL.origin) {\n    return -1;\n  }\n\n  const linkDir = navLinkPath2dir(linkURL);\n  const pageDir = navLinkPath2dir(pageURL);\n\n  if (linkURL.hash) {\n    if (linkDir !== pageDir) {\n      return -1;\n    }\n    // Require search parameters to be equal\n\n    const searchParamWeight = navLinkSearchParamsWeight(linkURL, pageURL);\n\n    if (searchParamWeight < 0 || navLinkSearchParamsWeight(pageURL, linkURL) < 0) {\n      return -1;\n    }\n\n    return linkURL.pathname.length\n        + searchParamWeight\n        + calcNavLinkWeight(getHashURL(linkURL), getHashURL(pageURL));\n  }\n\n  const searchParamWeight = navLinkSearchParamsWeight(linkURL, pageURL);\n\n  if (searchParamWeight) {\n    if (searchParamWeight < 0) {\n      return -1;\n    }\n    if (linkDir !== pageDir) {\n      return -1;\n    }\n    return linkURL.pathname.length + searchParamWeight;\n  }\n\n  if (!pageDir.startsWith(linkDir)) {\n    return -1;\n  }\n\n  return linkURL.pathname.length;\n}\n\n/**\n * @internal\n */\nfunction navLinkPath2dir(url: URL): string {\n\n  const path = url.pathname;\n\n  return path.endsWith('/') ? path : path + '/';\n}\n\n/**\n * @internal\n */\nfunction navLinkSearchParamsWeight(\n    { searchParams: linkParams }: URL,\n    { searchParams: pageParams }: URL,\n): number {\n\n  let weight = 0;\n\n  linkParams.forEach((value, key) => {\n    if (!isIgnoredSearchParam(key)) {\n      if (weight >= 0) {\n        if (pageParams.getAll(key).includes(value)) {\n          weight += 1;\n        } else {\n          weight = -1;\n        }\n      }\n    }\n  });\n\n  return weight;\n}\n\n/**\n * @internal\n */\nfunction isIgnoredSearchParam(key: string): boolean {\n  return key.startsWith('__') && key.endsWith('__');\n}\n\n/**\n * @internal\n */\nconst NavLinkRenderSchedule__symbol = (/*#__PURE__*/ Symbol('nav-link-render-schedule'));\n\n/**\n * @internal\n */\nconst defaultActiveNavLinkClass: QualifiedName = ['active', Wesib__NS];\n\n/**\n * @internal\n */\ninterface RenderedElement extends Element {\n\n  [NavLinkRenderSchedule__symbol]?: RenderSchedule;\n\n}\n\n/**\n * @internal\n */\nfunction activateNavLink(\n    context: ComponentContext,\n    def: ActivateNavLinkDef,\n): (opts: NavLinkOpts) => ActiveNavLink {\n\n  const scheduler = context.get(ElementRenderScheduler);\n  const { render, active = defaultActiveNavLinkClass } = def;\n  const activeClass = css__naming.name(active, context.get(DefaultNamespaceAliaser));\n  const activate = def.activate ? def.activate.bind(def) : noop;\n  const assignClass = (active: boolean, { node }: { node: ElementNode }): void => {\n\n    const { element } = node as { element: Element };\n    const { classList } = element;\n\n    if (active) {\n      classList.add(activeClass);\n    } else {\n      classList.remove(activeClass);\n    }\n  };\n\n  return opts => {\n\n    const { element } = opts.node as { element: RenderedElement };\n    const schedule = element[NavLinkRenderSchedule__symbol]\n        || (element[NavLinkRenderSchedule__symbol] = scheduler(render));\n    const makeActive = (active: boolean): void => {\n      schedule(() => assignClass(active, opts));\n      activate(active, opts);\n    };\n\n    makeActive(true);\n\n    let lastSupply: Supply | undefined;\n\n    return {\n      supply(): Supply {\n\n        const supply = lastSupply = new Supply(() => {\n          if (lastSupply === supply) {\n            makeActive(false);\n          }\n        });\n\n        return supply;\n      },\n    };\n  };\n}\n","import { onceAfter } from '@proc7ts/fun-events';\nimport { Class, setOfElements } from '@proc7ts/primitives';\nimport { Component, ComponentClass, ComponentContext, ComponentDecorator } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\n\n/**\n * Creates component decorator that handles events (e.g. clicks) on navigation links.\n *\n * Such events would lead to {@link Navigation navigation actions} instead of default ones.\n *\n * @typeParam T - A type of decorated component class.\n * @param def - Navigation links handler definition.\n *\n * @returns New component decorator.\n */\nexport function HandleNavLinks<T extends ComponentClass = Class>(\n    def: HandleNavLinksDef<InstanceType<T>> = {},\n): ComponentDecorator<T> {\n\n  const handle = def.handle ? def.handle.bind(def) : defaultHandleNavLinks(def);\n  const events = setOfElements(def.event || 'click');\n\n  return Component({\n    define(defContext) {\n      defContext.whenComponent(context => {\n        context.whenConnected(() => {\n\n          const navigation = context.get(Navigation);\n\n          for (const eventType of events) {\n            context.on(eventType)(event => {\n              navigation.read.do(onceAfter)(\n                  page => handle({\n                    event,\n                    page,\n                    context,\n                    navigation,\n                  }),\n              );\n            });\n          }\n        });\n      });\n    },\n  });\n}\n\n/**\n * Navigation links handler definition.\n *\n * @typeParam T - A type of component.\n */\nexport interface HandleNavLinksDef<T extends object = any> {\n\n  /**\n   * Type or types of events to handle.\n   *\n   * `click` by default.\n   */\n  readonly event?: string | readonly string[];\n\n  /**\n   * Handles event by performing navigation action.\n   *\n   * Every {@link event} sent by one of elements inside decorated component is passed to this function. In response\n   * it may perform a navigation event.\n   *\n   * By default handles events on anchor tags. When such tag contains an `href` attribute containing same-origin URL\n   * it {@link Navigation.open opens} a page at this URL instead of default action. It also prevents navigation\n   * if URL didn't change.\n   *\n   * @param event - A click event to handle.\n   * @param page - Current navigation page.\n   * @param navigation - Navigation service to use.\n   * @param context - Component context.\n   */\n  handle?(\n      {\n        event,\n        page,\n        navigation,\n        context,\n      }: {\n        event: Event;\n        page: Page;\n        navigation: Navigation;\n        context: ComponentContext<T>;\n      },\n  ): void;\n\n  /**\n   * Extracts hyper-reference of clicked element.\n   *\n   * Extracts hyper-reference from `href` attribute of event target.\n   *\n   * @param event - A click event to handle.\n   *\n   * @returns Extracted hyper-reference, or nothing if it can not be extracted. Event will be ignored in this case.\n   */\n  href?(event: Event): string | undefined | null;\n\n}\n\n/**\n * @internal\n */\nfunction defaultNavLinkHref(event: Event): string | null {\n\n  const target = event.target as Element;\n\n  return target.getAttribute('href');\n}\n\n/**\n * @internal\n */\nfunction defaultHandleNavLinks(\n    def: HandleNavLinksDef,\n): (\n    opts: {\n      event: Event;\n      page: Page;\n      navigation: Navigation;\n    },\n) => void {\n\n  const getHref = def.href ? def.href.bind(def) : defaultNavLinkHref;\n\n  return ({\n    event,\n    page,\n    navigation,\n  }) => {\n\n    const href = getHref(event);\n\n    if (href == null) {\n      return;\n    }\n\n    const target = event.target as Element;\n    const pageURL = page.url;\n    const url = new URL(href, target.ownerDocument.baseURI);\n\n    if (url.origin !== pageURL.origin) {\n      return; // External link\n    }\n\n    event.preventDefault();\n    if (pageURL.href !== url.href) {\n      navigation.open(href).catch(console.error);\n    }\n  };\n}\n","import { itsEach, overArray } from '@proc7ts/push-iterator';\nimport { isElement } from '@wesib/wesib';\n\n/**\n * Imports DOM node from one document to another.\n *\n * @typeParam TNode - DOM node type.\n * @param from - The node to import.\n * @param to - The node to append imported node to.\n * @param importContent - A function that imports nodes nested in parent element. {@link importNodeContent} by default.\n *\n * @returns Imported node.\n */\nexport function importNode<TNode extends Node>(\n    from: TNode,\n    to: Node,\n    importContent?: (this: void, from: TNode, to: TNode) => void,\n): TNode;\n\n/**\n * Imports DOM node from one document to another and inserts it before the given node.\n *\n * @typeParam TNode - DOM node type.\n * @param from - The node to import.\n * @param to - The node to append imported node to.\n * @param before - The node to insert imported node before, or `null` to append it to the end of target one.\n * @param importContent - A function that imports nodes nested in parent element. {@link importNodeContent} by default.\n *\n * @returns Imported node.\n */\nexport function importNode<TNode extends Node>(\n    from: TNode,\n    to: Node,\n    before?: Node | null,\n    importContent?: (this: void, from: TNode, to: TNode) => void,\n): TNode;\n\nexport function importNode<TNode extends Node>(\n    from: TNode,\n    to: Node,\n    beforeOrImport?: Node | null | ((this: void, from: TNode, to: TNode) => void),\n    importContent: (this: void, from: TNode, to: TNode) => void = importNodeContent,\n): TNode {\n\n  let before: Node | null;\n\n  if (typeof beforeOrImport === 'function') {\n    importContent = beforeOrImport;\n    before = null;\n  } else {\n    before = beforeOrImport || null;\n  }\n\n  const doc = to.ownerDocument!;\n\n  if (isElement(from)) {\n\n    const elementClone = doc.createElement(from.tagName.toLowerCase()) as Node as (Element & TNode);\n\n    from.getAttributeNames().forEach(attr => elementClone.setAttribute(attr, from.getAttribute(attr)!));\n    importContent(from, elementClone);\n    to.insertBefore(elementClone, before);\n\n    return elementClone;\n  }\n\n  const nodeClone = doc.importNode(from, false);\n\n  to.insertBefore(nodeClone, before);\n\n  return nodeClone;\n}\n\n/**\n * Imports DOM node contents from one document to another.\n *\n * @param from - The node which contents to import.\n * @param to - The node to append imported nodes to.\n */\nexport function importNodeContent(from: Node, to: Node): void {\n  itsEach(\n      overArray(from.childNodes),\n      node => importNode(node, to),\n  );\n}\n","import { OnEvent, onEventBy, supplyOn, trackValue, valueOn_ } from '@proc7ts/fun-events';\nimport { asis } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { Page } from '../page';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nexport function cachingPageLoader(loader: PageLoader): PageLoader {\n\n  let state: {\n    readonly url: string;\n    readonly on: OnEvent<[PageLoadResponse]>;\n    readonly sup: Supply;\n  } | undefined;\n\n  return page => {\n\n    const url = pageUrl(page);\n\n    if (state) {\n      if (state.url === url) {\n        return state.on;\n      }\n      state.sup.off();\n    }\n\n    let tracked: {\n      readonly on: OnEvent<[PageLoadResponse]>;\n      num: number;\n    } | undefined;\n    const supply = new Supply(() => {\n      state = undefined;\n      tracked = undefined;\n    });\n\n    const on = onEventBy<[PageLoadResponse]>(receiver => {\n      if (!tracked) {\n\n        const onLoad = loader(page);\n        const tracker = trackValue<PageLoadResponse>();\n        const trackSupply = onLoad(resp => {\n          tracker.it = resp;\n        }).whenOff(reason => {\n          // Error drops page cache, unlike successful page load.\n          if (reason != null) {\n            supply.off(reason);\n          }\n        });\n\n        supply.cuts(trackSupply).cuts(tracker);\n\n        tracked = {\n          on: tracker.read.do(valueOn_(asis)),\n          num: 0,\n        };\n      }\n\n      const requested = tracked;\n\n      ++requested.num;\n\n      return requested.on.do(supplyOn(supply))(receiver).whenOff(reason => {\n        if (!--requested.num) {\n          // Allow to request the same page again\n          Promise.resolve().then(() => {\n            if (!requested.num && requested === tracked) {\n              supply.off(reason);\n            }\n          }).catch(console.error);\n        }\n      });\n    });\n\n    state = { url, on, sup: supply };\n\n    return on;\n  };\n}\n\nfunction pageUrl(page: Page): string {\n  return new URL('', page.url).href;\n}\n","import {\n  EventEmitter,\n  eventReceiver,\n  EventReceiver,\n  mapOn_,\n  OnEvent,\n  onEventBy,\n  shareOn,\n  supplyOn,\n} from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { flatMapIt, itsEach, itsEvery, overIterator, PushIterable } from '@proc7ts/push-iterator';\nimport { neverSupply, Supply } from '@proc7ts/supply';\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { PageFragmentRequest, PageLoadRequest } from './page-load-request';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nexport interface PageLoadReq extends PageLoadRequest {\n\n  readonly receiver: EventReceiver.Generic<[PageLoadResponse]>;\n\n}\n\nclass PageLoadAbortError extends Error {}\n\nclass PageLoadRequestsParam$ extends PageParam<PageLoadRequests, PageLoadRequests> {\n\n  create(\n      _page: Page,\n      requests: PageLoadRequests,\n  ): PageParam.Handle<PageLoadRequests, PageLoadRequests> {\n    return {\n      get() {\n        return requests;\n      },\n      put: noop,\n    };\n  }\n\n}\n\n/**\n * @internal\n */\nexport const PageLoadRequestsParam: PageParam<PageLoadRequests, PageLoadRequests> = new PageLoadRequestsParam$();\n\n/**\n * @internal\n */\nexport class PageLoadRequests {\n\n  private readonly _map = new Map<Supply, PageLoadReq[]>();\n  private readonly _requests: PushIterable<PageLoadReq>;\n\n  constructor(\n      private readonly _navigation: Navigation,\n      private readonly _loader: PageLoader,\n  ) {\n    this._requests = flatMapIt(overIterator(() => this._map.values()));\n  }\n\n  get fragments(): readonly PageFragmentRequest[] {\n\n    const result: PageFragmentRequest[] = [];\n\n    if (!itsEvery(\n        this._requests,\n        request => {\n          if (!request.fragment) {\n            return false;\n          }\n          result.push(request.fragment);\n          return true;\n        },\n    )) {\n      return [];\n    }\n\n    return result;\n  }\n\n  handle(): PageParam.Handle<void, PageLoadRequest> {\n\n    const self = this;\n    const pageSupply = new Supply(noop);\n    let loadSupply = neverSupply();\n\n    return {\n      get() {/* void */},\n      put(request: PageLoadRequest): void {\n        self._add(request);\n      },\n      transfer(to: Page, when) {\n        if (when === 'pretend') {\n          return;\n        }\n\n        const transferred = self._transfer();\n\n        to.put(PageLoadRequestsParam, transferred);\n\n        return transferred.handle();\n      },\n      enter(page: Page, when: 'init' | 'open' | 'replace' | 'return'): void {\n        if (when === 'init') {\n          // The page is loaded already. No need to fetch it.\n          return;\n        }\n\n        loadSupply = new Supply(noop).needs(pageSupply);\n\n        const onLoad = onEventBy<[PageLoadResponse]>(responseReceiver => {\n\n          const emitter = new EventEmitter<[PageLoadResponse]>();\n          const supply = emitter.on(responseReceiver);\n\n          self._loader(page).do(supplyOn(loadSupply))(\n              response => emitter.send(response),\n          ).whenOff(error => {\n            if (error !== undefined && !(error instanceof PageLoadAbortError)) {\n              // Report current page load error as failed load response\n              emitter.send({\n                ok: false as const,\n                page,\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                error,\n              });\n            }\n          });\n\n          return supply;\n        }).do(shareOn);\n\n        itsEach(\n            self._requests,\n            ({ fragment, receiver }) => onFragment(onLoad, fragment)({\n              supply: new Supply().needs(receiver.supply),\n              receive(context, response): void {\n                receiver.receive(context, response);\n              },\n            }),\n        );\n      },\n      leave(): void {\n        loadSupply.off(new PageLoadAbortError('page left'));\n      },\n      stay() {\n        pageSupply.off(new PageLoadAbortError('navigation cancelled'));\n      },\n      forget() {\n        pageSupply.off(new PageLoadAbortError('page forgotten'));\n      },\n    };\n\n  }\n\n  private _add(request: PageLoadRequest): void {\n\n    const req = { ...request, receiver: eventReceiver(request.receiver) };\n    const { supply } = req.receiver;\n    const list = this._map.get(supply);\n\n    if (list) {\n      list.push(req);\n    } else {\n      this._map.set(supply, [req]);\n      supply.whenOff(() => this._map.delete(supply));\n    }\n  }\n\n  private _transfer(): PageLoadRequests {\n\n    const transferred = new PageLoadRequests(this._navigation, this._loader);\n\n    for (const [supply, list] of this._map.entries()) {\n      transferred._map.set(supply, list.slice());\n    }\n\n    return transferred;\n  }\n\n}\n\nfunction onFragment(\n    onLoad: OnEvent<[PageLoadResponse]>,\n    fragment?: PageFragmentRequest,\n): OnEvent<[PageLoadResponse]> {\n  return fragment\n      ? onLoad.do(\n          mapOn_(\n              response => response.ok\n                  ? {\n                    ...response,\n                    fragment: (\n                        fragment.tag != null\n                            ? response.document.getElementsByTagName(fragment.tag)[0]\n                            : response.document.getElementById(fragment.id)\n                    ) || undefined,\n                  }\n                  : response,\n          ),\n      )\n      : onLoad;\n}\n","import { ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { EventSender, OnEvent } from '@proc7ts/fun-events';\nimport { FetchAgentKey } from '../../fetch/fetch-agent-key.impl';\nimport { PageLoadResponse } from './page-load-response';\n\n/**\n * Page load agent signature.\n *\n * The agent can be used to alter loaded page document processing. For that it should be registered in appropriate\n * context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by page loader.\n */\nexport type PageLoadAgent =\n/**\n * @param next - Either calls the next agent in chain, or actually loads page document if this agent is the last one.\n * Accepts an optional `Request` parameter. The original request will be used instead when omitted.\n * @param request - HTTP request.\n *\n * @returns An `EventSender` of page load response. It is returned either to preceding agent in chain, or as a loaded\n * document.\n */\n    (\n        this: void,\n        next: (this: void, request?: Request) => OnEvent<[PageLoadResponse]>,\n        request: Request,\n    ) => EventSender<[PageLoadResponse]>;\n\nexport namespace PageLoadAgent {\n\n  /**\n   * Combined page load agent signature.\n   *\n   * This is what is available under {@link PageLoadAgent} key.\n   */\n  export type Combined =\n  /**\n   * @param next - Either calls the next agent in chain, or actually loads page document if this agent is the last one.\n   * Accepts `Request` parameter.\n   * @param request - HTTP request.\n   *\n   * @returns An `OnEvent` sender of page load response.\n   */\n      (\n          this: void,\n          next: (this: void, request: Request) => OnEvent<[PageLoadResponse]>,\n          request: Request,\n      ) => OnEvent<[PageLoadResponse]>;\n\n}\n\n/**\n * A key of context value containing an {@link PageLoadAgent} instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the fetch.\n */\nexport const PageLoadAgent: ContextUpRef<PageLoadAgent.Combined, PageLoadAgent> = (\n    /*#__PURE__*/ new FetchAgentKey<[PageLoadResponse]>('page-load-agent')\n);\n","import { ContextUpRef, FnContextKey } from '@proc7ts/context-values/updatable';\nimport { noop, valueProvider } from '@proc7ts/primitives';\n\n/**\n * A signature of page load URL modifier function.\n *\n * All such functions registered in bootstrap context are called in order of their registration with current page URL.\n * They are able to modify it, e.g. by applying additional URL search parameters. The modified URL is used then to load\n * the page.\n */\nexport type PageLoadURLModifier =\n/**\n * @param url - An URL of page to load.\n */\n    (this: void, url: URL) => void;\n\n/**\n * A key of bootstrap context value containing a page load URL modifier.\n *\n * Does not modify URL by default.\n */\nexport const PageLoadURLModifier: ContextUpRef<PageLoadURLModifier, PageLoadURLModifier> = (\n    /*#__PURE__*/ new FnContextKey('page-load-url', { byDefault: valueProvider(noop) })\n);\n","import { hthvParse, hthvQuote } from '@hatsy/http-header-value';\nimport { SingleContextKey } from '@proc7ts/context-values';\nimport { afterThe, digOn_, EventNotifier, mapOn_, OnEvent, onEventBy, resolveOnOrdered } from '@proc7ts/fun-events';\nimport { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { HttpFetch } from '../../fetch';\nimport { Page } from '../page';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadRequestsParam } from './page-load-requests.impl';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\n\n/**\n * @internal\n */\nexport type PageLoader = (this: void, page: Page) => OnEvent<[PageLoadResponse]>;\n\n/**\n * @internal\n */\nexport const PageLoader = (/*#__PURE__*/ new SingleContextKey<PageLoader>(\n    'page-loader',\n    {\n      byDefault: bootstrapDefault(newPageLoader),\n    },\n));\n\nfunction newPageLoader(context: BootstrapContext): PageLoader {\n\n  const window = context.get(BootstrapWindow);\n  const httpFetch = context.get(HttpFetch);\n  const modifyURL = context.get(PageLoadURLModifier);\n  const agent = context.get(PageLoadAgent);\n  const parser = new window.DOMParser();\n\n  return page => {\n\n    const url = new URL(page.url.href);\n\n    modifyURL(url);\n\n    const request = new Request(\n        url.href,\n        {\n          mode: 'same-origin',\n          credentials: 'same-origin',\n          headers: new Headers({ Accept: 'text/html' }),\n        },\n    );\n\n    return onEventBy(receiver => agent(fetch, request)(receiver));\n\n    function fetch(fetchRequest: Request): OnEvent<[PageLoadResponse]> {\n      requestPageFragments(page, fetchRequest);\n\n      return onEventBy<[PageLoadResponse]>(receiver => {\n\n        const dispatcher = new EventNotifier<[PageLoadResponse]>();\n\n        dispatcher.on(receiver);\n        dispatcher.send({ page });\n\n        httpFetch(fetchRequest).do(\n            mapOn_(response => Promise.all([response, response.text()])),\n            resolveOnOrdered,\n            digOn_((...batch: [Response, string][]) => afterThe<[Response, string][]>(...batch)),\n            mapOn_(([response, text]): PageLoadResponse => {\n              if (!response.ok) {\n                return {\n                  ok: false as const,\n                  page,\n                  response,\n                  error: response.status,\n                };\n              }\n              try {\n                return {\n                  ok: true as const,\n                  page,\n                  response,\n                  document: parsePageDocument(parser, url, response, text),\n                };\n              } catch (error) {\n                return {\n                  ok: false as const,\n                  page,\n                  response,\n                  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                  error,\n                };\n              }\n            }),\n        )(receiver);\n      });\n    }\n  };\n}\n\nfunction requestPageFragments(page: Page, request: Request): void {\n\n  const fragments = page.get(PageLoadRequestsParam)?.fragments;\n\n  if (fragments && fragments.length) {\n    request.headers.set(\n        'Accept-Fragment',\n        fragments.reduce(\n            (header, fragment) => (header ? header + ', ' : '') + (\n                fragment.tag != null\n                    ? 'tag=' + hthvQuote(fragment.tag)\n                    : 'id=' + hthvQuote(fragment.id)\n            ),\n            '',\n        ),\n    );\n  }\n}\n\nfunction parsePageDocument(parser: DOMParser, url: URL, response: Response, text: string): Document {\n\n  const doc = parser.parseFromString(\n      text,\n      hthvParse(response.headers.get('Content-Type') || 'text/html')[0].v as DOMParserSupportedType,\n  );\n\n  if (doc.head) {\n\n    const base = doc.head.querySelector('base');\n\n    if (base) {\n      base.href = new URL(base.getAttribute('href')!, url).href;\n    } else {\n\n      const newBase = doc.createElement('base');\n\n      newBase.href = url.href;\n\n      doc.head.appendChild(newBase);\n    }\n  }\n\n  return doc;\n}\n","import { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { PageParamContext } from '../page-param-context';\nimport { cachingPageLoader } from './caching-page-loader.impl';\nimport { PageLoadRequest } from './page-load-request';\nimport { PageLoadRequests, PageLoadRequestsParam } from './page-load-requests.impl';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nclass PageLoadParam$ extends PageParam<void, PageLoadRequest> {\n\n  create(page: Page, request: PageLoadRequest, context: PageParamContext): PageParam.Handle<void, PageLoadRequest> {\n\n    const requests = new PageLoadRequests(context.get(Navigation), cachingPageLoader(context.get(PageLoader)));\n    const handle = requests.handle();\n\n    page.put(PageLoadRequestsParam, requests);\n    handle.put(request);\n\n    return handle;\n  }\n\n}\n\n/**\n * Page load parameter.\n *\n * Accepts a {@link PageLoadRequest page load request} as input.\n *\n * A page load is initiated whenever a page with new address is {@link Navigation.onEnter entered}.\n *\n * Page load won't be initiated if:\n * - page load parameter is not {@link Page.put} added,\n * - all added {@link PageLoadRequest.receiver response receiver}s supplies are cut off, or\n * - the entered page address is the the same one as previous one, except the hash,\n */\nexport const PageLoadParam: PageParam<void, PageLoadRequest> = (/*#__PURE__*/ new PageLoadParam$());\n","import { ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { AfterEvent, afterThe, mapOn_ } from '@proc7ts/fun-events';\nimport { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { Navigation } from '../navigation';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\n\nconst PageCacheBuster__key = (/*#__PURE__*/ new SingleContextKey<PageCacheBuster>(\n    'page-cache-buster',\n    {\n      byDefault: bootstrapDefault(context => new PageCacheBuster(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport const appRevSearchParam = '__wesib_app_rev__';\n\n/**\n * @internal\n */\nexport class PageCacheBuster {\n\n  static get [ContextKey__symbol](): SingleContextKey<PageCacheBuster> {\n    return PageCacheBuster__key;\n  }\n\n  readonly urlModifier: AfterEvent<PageLoadURLModifier[]>;\n  readonly agent: AfterEvent<PageLoadAgent[]>;\n\n  constructor(context: BootstrapContext) {\n\n    const rev = appRev(context.get(BootstrapWindow).document);\n\n    if (!rev) {\n      this.urlModifier = afterThe();\n      this.agent = afterThe();\n    } else {\n\n      const navigation = context.get(Navigation);\n\n      this.urlModifier = afterThe(url => url.searchParams.set(appRevSearchParam, rev));\n      this.agent = afterThe(\n          (next, request) => next(new Request(request.url, request)).do(\n              mapOn_(response => {\n                    if (response.ok) {\n\n                      const newRev = appRev(response.document);\n\n                      if (newRev && newRev !== rev) {\n\n                        const url = new URL(response.page.url.href);\n\n                        url.searchParams.set(appRevSearchParam, newRev);\n                        navigation.update(url);\n                        navigation.reload();\n                      }\n                    }\n\n                    return response;\n                  }),\n          ),\n      );\n    }\n  }\n\n}\n\nfunction appRev(doc: Document): string | null | undefined {\n  return doc.querySelector('meta[name=wesib-app-rev]')?.getAttribute('content');\n}\n","import { mapOn_ } from '@proc7ts/fun-events';\nimport { filterArray, filterIt, itsEach, mapIt, PushIterable } from '@proc7ts/push-iterator';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { importNode } from '../../util';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageScriptsAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().do(\n      mapOn_(response => {\n        if (response.ok) {\n\n          const allScripts = new Set<string>(mapIt(\n              externalScripts(doc, doc.scripts),\n              ([src]) => src,\n          ));\n\n          itsEach(\n              filterIt(\n                  externalScripts(response.document, response.document.querySelectorAll('script')),\n                  ([src]) => !allScripts.has(src),\n              ),\n              ([src, script]) => {\n                importNode(script, doc.head, (_from, to) => to.src = src);\n                allScripts.add(src);\n              },\n          );\n        }\n        return response;\n      }),\n  );\n}\n\nfunction externalScripts(\n    doc: Document,\n    scripts: ArrayLike<HTMLScriptElement>,\n): PushIterable<readonly [string, HTMLScriptElement]> {\n  return mapIt(\n      filterArray(scripts, ({ src }) => !!src),\n      script => [new URL(script.src, doc.baseURI).href, script] as const,\n  );\n}\n","import { mapOn_ } from '@proc7ts/fun-events';\nimport { itsEach, itsFirst, overArray } from '@proc7ts/push-iterator';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { importNode } from '../../util';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageStyleAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().do(\n      mapOn_(response => {\n        if (!response.ok) {\n          return response;\n        }\n\n        const newStyles = response.document.querySelectorAll<HTMLLinkElement>('link[rel=stylesheet]');\n\n        if (!newStyles.length) {\n          return response;\n        }\n\n        let target: Node = doc.head;\n        let before: Node | null = null;\n        const oldStyles = doc.querySelectorAll<HTMLLinkElement>('link[rel=stylesheet]');\n        const oldStylesByHref = new Map<string, HTMLLinkElement>();\n        const firstOldStyle = oldStyles.item(0);\n\n        if (firstOldStyle) {\n          target = firstOldStyle.parentNode!;\n          before = firstOldStyle;\n          itsEach(\n              overArray(oldStyles),\n              link => oldStylesByHref.set(new URL(link.href, doc.baseURI).href, link),\n          );\n        }\n\n        itsEach(\n            overArray(newStyles),\n            newStyle => {\n\n              const href = new URL(newStyle.href, doc.baseURI).href;\n              const oldStyle = oldStylesByHref.get(href);\n\n              if (oldStyle) {\n                // Style already exists.\n                if (itsFirst(oldStylesByHref.keys()) === href) {\n                  // In proper position already.\n                  // Insert the remaining styles after it.\n                  target = oldStyle.parentNode!;\n                  before = oldStyle.nextSibling;\n                } else {\n                  // Move to proper position.\n                  target.insertBefore(oldStyle, before);\n                }\n                oldStylesByHref.delete(href);\n              } else {\n                // Import new style\n                importNode(newStyle, target, before, (_from, to) => to.href = href);\n              }\n            },\n        );\n\n        // Remove remaining old styles\n        itsEach(oldStylesByHref.values(), style => style.parentNode!.removeChild(style));\n\n        return response;\n      }),\n  );\n}\n","import { mapOn_ } from '@proc7ts/fun-events';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageTitleAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().do(mapOn_(response => {\n    if (response.ok) {\n\n      const title = response.document.getElementsByTagName('title').item(0);\n\n      if (title && title.textContent) {\n        doc.title = title.textContent;\n      }\n    }\n\n    return response;\n  }));\n}\n","import { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { PageCacheBuster } from './page-cache-buster.impl';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\nimport { pageScriptsAgent } from './page-scripts-agent.impl';\nimport { pageStyleAgent } from './page-style-agent.impl';\nimport { pageTitleAgent } from './page-title-agent.impl';\n\n/**\n * @internal\n */\nconst PageLoadSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.provide({\n      a: PageLoadURLModifier,\n      by: (buster: PageCacheBuster) => buster.urlModifier,\n      with: [PageCacheBuster],\n    });\n    setup.provide({\n      a: PageLoadAgent,\n      by: (buster: PageCacheBuster) => buster.agent,\n      with: [PageCacheBuster],\n    });\n    setup.provide({ a: PageLoadAgent, by: pageScriptsAgent });\n    setup.provide({ a: PageLoadAgent, by: pageStyleAgent });\n    setup.provide({ a: PageLoadAgent, by: pageTitleAgent });\n  },\n};\n\n/**\n * Page load support feature.\n *\n * Enables default {@link PageLoadAgent page load agents}:\n * 1. Page cache busting agent.\n *    If `<meta name=\"wesib-app-rev\">` tag is present in initial page, then sends this tag's content with each page load\n *    request as `__wesib_app_rev__` search parameter. If the loaded page contains the same named meta tag with\n *    different content, then reloads the page.\n *    This serves both as cache busting technique, and as server-side application updates handler.\n * 2. Scripts agent.\n *    Includes external scripts from loaded page into main document.\n * 3. Style agent.\n *    Replaces external styles of main document styles with the ones from loaded page.\n *    Unless loaded page has no external styles.\n * 4. Title agent.\n *    Applies loaded page title to bootstrap window. If there is one.\n */\nexport class PageLoadSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return PageLoadSupport__feature;\n  }\n\n}\n","import { onceAfter } from '@proc7ts/fun-events';\nimport { Class, noop, valueProvider } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport {\n  BootstrapWindow,\n  Component,\n  ComponentClass,\n  ComponentContext,\n  ComponentDecorator,\n  ElementRenderScheduler,\n  RenderDef,\n} from '@wesib/wesib';\nimport { importNodeContent } from '../../util';\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageLoadParam } from './page-load-param';\nimport { PageFragmentRequest } from './page-load-request';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoadSupport } from './page-load-support.feature';\n\n/**\n * Creates component decorator that includes page contents into decorated component's element.\n *\n * The page is loaded and included whenever it is {@link Navigation.onEnter entered}.\n *\n * Utilizes {@link PageLoadParam} navigation parameter.\n *\n * Enables {@link PageLoadSupport} feature.\n *\n * @typeParam T - A type of decorated component class.\n * @param def - Page inclusion definition.\n *\n * @returns New component decorator.\n */\nexport function IncludePage<T extends ComponentClass = Class>(\n    def: IncludePageDef<InstanceType<T>> = {},\n): ComponentDecorator<T> {\n\n  const onResponse = def.onResponse ? def.onResponse.bind(def) : noop;\n  const contentKey: (page: Page) => string | undefined = def.contentKey\n      ? def.contentKey.bind(def)\n      : defaultPageContentKey;\n\n  return Component({\n    feature: {\n      needs: [PageLoadSupport],\n    },\n    define(context) {\n      context.whenComponent(context => {\n\n        const { fragment, render } = def;\n        const document = context.get(BootstrapWindow).document;\n        const schedule = context.get(ElementRenderScheduler)(render);\n        const navigation = context.get(Navigation);\n        let lastPageURL = contentKey(navigation.page);\n        let detectFragment: () => PageFragmentRequest;\n\n        if (fragment) {\n          detectFragment = valueProvider(fragment);\n        } else {\n          detectFragment = () => {\n\n            const { element: { id, tagName: tag } } = context as { element: Element };\n\n            return id ? { id } : { tag };\n          };\n        }\n\n        context.whenConnected(() => {\n\n          const range = document.createRange();\n\n          range.selectNodeContents(context.contentRoot);\n\n          navigation.read.do(onceAfter)(page => {\n            page.put(\n                PageLoadParam,\n                {\n                  fragment: detectFragment(),\n                  receiver: {\n                    supply: new Supply().needs(context),\n                    receive: (_ctx, response) => handleResponse(response),\n                  },\n                },\n            );\n          });\n\n          function handleResponse(response: PageLoadResponse): void {\n\n            const newPageURL = contentKey(response.page);\n\n            if (newPageURL === lastPageURL) {\n              return; // Only hash changed. Do not refresh the page.\n            }\n\n            if (!response.ok) {\n              schedule(() => onResponse({ context, range, response }));\n              return;\n            }\n\n            lastPageURL = newPageURL;\n            schedule(() => {\n              range.deleteContents();\n\n              const target = document.createDocumentFragment();\n              const { fragment } = response;\n\n              if (fragment) {\n                importNodeContent(fragment, target);\n                range.insertNode(target);\n              }\n\n              onResponse({ context, range, response });\n            });\n          }\n        });\n      });\n    },\n  });\n}\n\n/**\n * @internal\n */\nfunction defaultPageContentKey({ url }: Page): string {\n  return new URL('', url).href;\n}\n\n/**\n * Page inclusion definition.\n *\n * Configures {@link IncludePage @LoadPage} decorator.\n *\n * @typeParam T - A type of component.\n */\nexport interface IncludePageDef<T extends object = any> {\n\n  /**\n   * Page fragment to include.\n   *\n   * By default uses custom element identifier if present, or element tag name otherwise.\n   */\n  readonly fragment?: PageFragmentRequest;\n\n  /**\n   * Rendering options.\n   */\n  readonly render?: RenderDef.Options;\n\n  /**\n   * Builds content key for the given page.\n   *\n   * The loaded content will replace already included one only when their content key differ.\n   *\n   * By default uses page URL without hash part as a key. This prevents content refresh when only URL hash changes.\n   *\n   * @param page - Target page. Either loaded or not.\n   *\n   * @returns Content key.\n   */\n  contentKey?(page: Page): any;\n\n  /**\n   * Performs additional actions during page load.\n   *\n   * This method is called inside page contents render schedule for {@link PageLoadResponse each stage} of page\n   * load. At the final stage it is called after loaded page contents included.\n   *\n   * This method can be used e.g. to indicate the page load progress.\n   *\n   * @param context - Decorated component context.\n   * @param response - Page load response.\n   * @param range - Document range the loaded page contents going to replace.\n   */\n  onResponse?(\n      {\n        context,\n        response,\n        range,\n      }: {\n        context: ComponentContext<T>;\n        response: PageLoadResponse;\n        range: Range;\n      },\n  ): void;\n\n}\n","import { Share } from './share';\n\n/**\n * A key of {@link ShareRef component share reference} property containing a {@link Share component\n * share} instance.\n */\nexport const Share__symbol = (/*#__PURE__*/ Symbol('Share'));\n\n/**\n * A reference to {@link Share component share}.\n *\n * @typeParam T - Shared value type.\n */\nexport interface ShareRef<T> {\n\n  /**\n   * Component share instance.\n   */\n  readonly [Share__symbol]: Share<T>;\n\n}\n\n/**\n * Checks whether the given value is a {@link ShareRef component share reference}.\n *\n * @typeParam T - Shared value type.\n * @typeParam TOther - Another type the value may have.\n * @param value - A value to check.\n *\n * @returns `true` if the value has a {@link Share__symbol} property, or `false` otherwise.\n */\nexport function isShareRef<T, TOther>(value: ShareRef<T> | TOther): value is ShareRef<T> {\n  return !!value\n      && (typeof value === 'object' || typeof value === 'function')\n      && !!(value as Partial<ShareRef<T>>)[Share__symbol];\n}\n","import { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { trackValue, ValueTracker } from '@proc7ts/fun-events';\nimport { Supply } from '@proc7ts/supply';\nimport { bootstrapDefault, ComponentClass, DefaultNamespaceAliaser } from '@wesib/wesib';\nimport { Share } from './share';\n\nconst ShareRegistry__key = (/*#__PURE__*/ new SingleContextKey(\n    'share-registry',\n    {\n      byDefault: bootstrapDefault(bsContext => new ShareRegistry(bsContext.get(DefaultNamespaceAliaser))),\n    },\n));\n\n/**\n * @internal\n */\nexport class ShareRegistry {\n\n  static get [ContextKey__symbol](): ContextKey<ShareRegistry> {\n    return ShareRegistry__key;\n  }\n\n  private readonly _sharers = new Map<Share<unknown>, ValueTracker<Sharers>>();\n\n  constructor(readonly nsAlias: DefaultNamespaceAliaser) {\n  }\n\n  addSharer(\n      share: Share<unknown>,\n      componentType: ComponentClass,\n      elementName: string | undefined,\n      supply: Supply,\n  ): void {\n\n    let sharers = this._sharers.get(share);\n\n    if (!sharers) {\n      sharers = Sharers$new();\n      this._sharers.set(share, sharers);\n      Sharers$addSharer(sharers, componentType, supply);\n      Sharers$addName(sharers, elementName, supply);\n    } else {\n      Sharers$addSharer(sharers, componentType, supply);\n      Sharers$addName(sharers, elementName, supply);\n      sharers.it = { ...sharers.it };\n    }\n  }\n\n  sharers(share: Share<unknown>): ValueTracker<Sharers> {\n\n    let sharers = this._sharers.get(share);\n\n    if (!sharers) {\n      sharers = Sharers$new();\n      this._sharers.set(share, sharers);\n    }\n\n    return sharers;\n  }\n\n}\n\n/**\n * @internal\n */\nexport interface Sharers {\n\n  readonly names: Map<string, number>;\n  readonly sharers: Map<ComponentClass, number>;\n\n}\n\nfunction Sharers$new(): ValueTracker<Sharers> {\n  return trackValue({ names: new Map(), sharers: new Map() });\n}\n\nfunction Sharers$addName(\n    tracker: ValueTracker<Sharers>,\n    name: string | undefined,\n    supply: Supply,\n): void {\n  if (!name) {\n    return;\n  }\n\n  const sharers = tracker.it;\n  const counter = sharers.names.get(name) || 0;\n\n  sharers.names.set(name, counter + 1);\n  supply.whenOff(() => {\n\n    const counter = sharers.names.get(name)! - 1;\n\n    if (counter > 0) {\n      sharers.names.set(name, counter);\n    } else {\n      sharers.names.delete(name);\n    }\n\n    tracker.it = { ...sharers };\n  });\n}\n\nfunction Sharers$addSharer(\n    tracker: ValueTracker<Sharers>,\n    componentType: ComponentClass,\n    supply: Supply,\n): void {\n\n  const sharers = tracker.it;\n  const counter = sharers.sharers.get(componentType) || 0;\n\n  sharers.sharers.set(componentType, counter + 1);\n  supply.whenOff(() => {\n\n    const counter = sharers.sharers.get(componentType)! - 1;\n\n    if (counter > 0) {\n      sharers.sharers.set(componentType, counter);\n    } else {\n      sharers.sharers.delete(componentType);\n    }\n\n    tracker.it = { ...sharers };\n  });\n}\n","import { ContextValueSlot } from '@proc7ts/context-values';\nimport { ContextUpKey } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, digAfter } from '@proc7ts/fun-events';\nimport { Share } from './share';\nimport { SharedValue } from './shared-value';\n\n/**\n * @internal\n */\nexport class ShareKey<T> extends ContextUpKey<AfterEvent<[T?]>, SharedValue<T>> {\n\n  constructor(name: string, private readonly _share: Share<T>) {\n    super(`${name}:share`);\n  }\n\n  get upKey(): this {\n    return this;\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          AfterEvent<[T?]>,\n          Share.Source<T>,\n          AfterEvent<SharedValue<T>[]>>,\n  ): void {\n    slot.insert(\n        slot.seed.do(\n            digAfter((...values) => this._share.selectValue(...values)),\n        ),\n    );\n  }\n\n}\n","import { html__naming } from '@frontmeans/namespace-aliaser';\nimport { ContextUpKey } from '@proc7ts/context-values/updatable';\nimport { AfterEvent } from '@proc7ts/fun-events';\nimport { arrayOfElements } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { BootstrapContext, DefinitionContext } from '@wesib/wesib';\nimport { Share } from './share';\nimport { ShareKey } from './share-key.impl';\nimport { Share__symbol } from './share-ref';\nimport { ShareRegistry } from './share-registry.impl';\nimport { SharedValue } from './shared-value';\n\n/**\n * @internal\n */\nexport const Share$impl__symbol = (/*#__PURE__*/ Symbol('Share.impl'));\n\n/**\n * @internal\n */\nexport class Share$<T> {\n\n  readonly key: ContextUpKey<AfterEvent<[T?]>, SharedValue<T>>;\n  private readonly _aliases: readonly Share<T>[];\n\n  constructor(\n      private readonly _share: Share<T>,\n      readonly name: string,\n      options: Share.Options<T>,\n  ) {\n    this.key = new ShareKey(name, _share);\n    this._aliases = arrayOfElements(options.as).map(alias => alias[Share__symbol]);\n  }\n\n  addSharer(defContext: DefinitionContext, options: SharedValue.Options = {}): Supply {\n\n    const { local, name = defContext.elementDef.name } = options;\n    const registry = defContext.get(BootstrapContext).get(ShareRegistry);\n    const supply = new Supply();\n    const { componentType } = defContext;\n    const elementName = local\n        ? undefined\n        : name && html__naming.name(name, registry.nsAlias).toLowerCase();\n\n    registry.addSharer(this._share, componentType, elementName, supply);\n    for (const alias of this._aliases) {\n      registry.addSharer(alias, componentType, elementName, supply);\n    }\n\n    return supply;\n  }\n\n  shareValue(\n      registrar: SharedValue.Registrar<T>,\n  ): void {\n    registrar.shareAs(this._share);\n\n    const priorityOffset = registrar.priority + 1;\n\n    this._aliases.forEach((alias, index) => {\n      alias.shareValue(registrar.withPriority(priorityOffset + index));\n    });\n  }\n\n}\n","import { QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { AfterEvent } from '@proc7ts/fun-events';\nimport { Supply, SupplyPeer } from '@proc7ts/supply';\nimport { ComponentContext } from '@wesib/wesib';\nimport { ShareRef } from './share-ref';\n\n/**\n * A key of the {@link SharedValue.Detailed detailed shared value descriptor} containing the\n * {@link SharedValue.Details shared value details}.\n */\nexport const SharedValue__symbol = (/*#__PURE__*/ Symbol('SharedValue'));\n\n/**\n * A value shared by component.\n *\n * Either a pure value, or its {@link SharedValue.Detailed detailed descriptor}.\n *\n * @typeParam T - Shared value type.\n */\nexport type SharedValue<T> = T | SharedValue.Detailed<T>;\n\nexport namespace SharedValue {\n\n  /**\n   * Value sharing options.\n   *\n   * Declare availability of the shared value.\n   */\n  export interface Options {\n\n    /**\n     * The name of the element the sharer component is bound to. Defaults to component's element name.\n     *\n     * Ignored for {@link local} shares\n     */\n    readonly name?: QualifiedName;\n\n    /**\n     * Whether the share is local.\n     *\n     * - `true` to make the value available only locally, i.e. only when requested by sharer context.\n     * - `false` (by default) to make the value available to nested components too.\n     */\n    readonly local?: boolean;\n\n  }\n\n  /**\n   * A detailed descriptor of the value shared by component.\n   *\n   * @typeParam T - Shared value type.\n   */\n  export interface Detailed<T> {\n\n    /**\n     * Shared value details.\n     */\n    readonly [SharedValue__symbol]: Details<T>;\n\n  }\n\n  /**\n   * Details of the shared value.\n   */\n  export interface Details<T> {\n\n    /**\n     * A priority of the shared value.\n     *\n     * Never negative. The lesser value means higher priority. The shared value with higher priority\n     * {@link Share.selectValue takes precedence}.\n     */\n    readonly priority: number;\n\n    /**\n     * Builds the shared value.\n     *\n     * @returns Either the shared value, or its `AfterEvent` keeper.\n     */\n    get(): T | AfterEvent<[T?]>;\n\n  }\n\n  /**\n   * Shared value registrar.\n   *\n   * Passed to {@link Share.shareValue} method in order to share the value.\n   *\n   * @typeParam T - Shared value type.\n   */\n  export interface Registrar<T> extends SupplyPeer {\n\n    /**\n     * The default priority of the shared value.\n     *\n     * Never negative.\n     */\n    readonly priority: number;\n\n    /**\n     * Shared value supply.\n     *\n     * Stops value sharing once cut off.\n     */\n    readonly supply: Supply;\n\n    /**\n     * Shares the value under the given alias.\n     *\n     * @param alias - A reference to share alias.\n     * @param priority - Shared value priority. Equals to {@link priority default one} when omitted.\n     */\n    shareAs(this: void, alias: ShareRef<T>, priority?: number): void;\n\n    /**\n     * Builds a shared value registrar instance with another default priority.\n     *\n     * @param priority - New default shared value priority.\n     *\n     * @returns New registrar instance with {@link priority} set to the given value.\n     */\n    withPriority(this: void, priority: number): Registrar<T>;\n\n  }\n\n  /**\n   * Shared value provider.\n   *\n   * Can be used to {@link Share.createRegistrar create} a {@link SharedValue.Registrar} instance.\n   *\n   * @typeParam TSharer - Supported sharer component type.\n   * @typeParam T - Shared value type.\n   */\n  export interface Provider<T, TSharer extends object = any> {\n\n    /**\n     * The default priority of the shared value.\n     *\n     * Equals to `0` when absent or negative.\n     */\n    readonly priority?: number;\n\n    /**\n     * Shared value supply.\n     *\n     * Stops value sharing once cut off.\n     *\n     * New supply instance will be created when absent.\n     */\n    readonly supply?: Supply;\n\n    /**\n     * Provides shared value for the given component context.\n     *\n     * @typeParam TComponent - Actual sharer component type.\n     * @param context - Sharer component context to provide value for.\n     *\n     * @returns Either a shared value, or its `AfterEvent` keeper.\n     */\n    provide<TComponent extends TSharer>(context: ComponentContext<TComponent>): T | AfterEvent<[T?]>;\n\n  }\n\n}\n\nexport const SharedValue = {\n\n  /**\n   * Checks whether the given value shared by component is has details.\n   *\n   * @typeParam T - Shared value type.\n   * @param value - Shared value to check.\n   *\n   * @returns `true` if the given value is an object implementing a {@link SharedValue.Detailed} interface.\n   */\n  hasDetails<T>(\n      this: void,\n      value: SharedValue<T>,\n  ): value is SharedValue.Detailed<T> {\n    return !!value\n        && typeof value === 'object'\n        && typeof (value as SharedValue.Detailed<T>)[SharedValue__symbol] === 'object';\n  },\n\n};\n","import { applyContextTo, ContextBuilder, ContextBuilder__symbol, ContextRegistry } from '@proc7ts/context-values';\nimport { applyContextAfter } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, isAfterEvent, translateAfter } from '@proc7ts/fun-events';\nimport { Supply } from '@proc7ts/supply';\nimport { ComponentContext } from '@wesib/wesib';\nimport { Share } from './share';\nimport { Share__symbol } from './share-ref';\nimport { SharedValue, SharedValue__symbol } from './shared-value';\n\n/**\n * @internal\n */\nexport function SharedValue$ContextBuilder<T, TSharer extends object>(\n    share: Share<T>,\n    provider: SharedValue.Provider<T, TSharer>,\n): ContextBuilder<ComponentContext<TSharer>> {\n  return {\n    [ContextBuilder__symbol]: registry => {\n\n      const registrar = share.createRegistrar(registry, provider);\n\n      share.shareValue(registrar);\n\n      return registrar.supply;\n    },\n  };\n}\n\n/**\n * @internal\n */\nexport function SharedValue$Registrar<T, TSharer extends object>(\n    registry: ContextRegistry<ComponentContext<TSharer>>,\n    provider: SharedValue.Provider<T, TSharer>,\n): SharedValue.Registrar<T> {\n  return SharedValue$BoundRegistrar(registry, SharedValue$bindProvider(provider));\n}\n\nfunction SharedValue$BoundRegistrar<T, TSharer extends object>(\n    registry: ContextRegistry<ComponentContext<TSharer>>,\n    provider: SharedValue$BoundProvider<T, TSharer>,\n): SharedValue.Registrar<T> {\n\n  const { priority, supply, provide } = provider;\n\n  return {\n    priority,\n    supply,\n    shareAs: (alias, newPriority = priority) => {\n      newPriority = Math.max(0, newPriority);\n      registry.provide({\n        a: alias[Share__symbol],\n        by: newPriority\n            ? SharedValue$detailedProvider(provide, newPriority)\n            : SharedValue$bareProvider(provide),\n      }).as(supply);\n    },\n    withPriority: newPriority => SharedValue$BoundRegistrar(\n        registry,\n        { ...provider, priority: Math.max(0, newPriority) },\n    ),\n  };\n}\n\ninterface SharedValue$BoundProvider<T, TSharer extends object> {\n  readonly priority: number;\n  readonly supply: Supply;\n  provide(this: void, context: ComponentContext<TSharer>): T | AfterEvent<[T?]>;\n}\n\nfunction SharedValue$bindProvider<T, TSharer extends object>(\n    provider: SharedValue.Provider<T>,\n): SharedValue$BoundProvider<T, TSharer> {\n\n  const priority = provider.priority ? Math.max(0, provider.priority) : 0;\n  const { supply = new Supply() } = provider;\n\n  return {\n    priority,\n    supply,\n    provide: (context: ComponentContext): T | AfterEvent<[T?]> => {\n\n      const value = provider.provide(context);\n\n      if (isAfterEvent(value)) {\n        return value.do(\n            applyContextAfter(context),\n        );\n      }\n\n      return applyContextTo(value)(context);\n    },\n  };\n}\n\nfunction SharedValue$bareProvider<T, TComponent extends object>(\n    provider: (context: ComponentContext<TComponent>) => T | AfterEvent<[T?]>,\n): (\n    context: ComponentContext<TComponent>,\n) => T | AfterEvent<T[]> | null | undefined {\n  return context => {\n\n    const value = provider(context);\n\n    if (isAfterEvent(value)) {\n      return value.do(\n          translateAfter((send, value?) => value !== undefined ? send(value) : send()),\n      );\n    }\n\n    return value;\n  };\n}\n\nfunction SharedValue$detailedProvider<T, TComponent extends object>(\n    provider: (context: ComponentContext<TComponent>) => T | AfterEvent<[T?]>,\n    priority: number,\n): (\n    context: ComponentContext<TComponent>,\n) => SharedValue.Detailed<T> {\n  return context => ({\n    [SharedValue__symbol]: {\n      priority,\n      get: () => provider(context),\n    },\n  });\n}\n","import { ContextKey__symbol, ContextRegistry } from '@proc7ts/context-values';\nimport { ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport {\n  afterAll,\n  AfterEvent,\n  afterEventBy,\n  afterThe,\n  deduplicateAfter,\n  deduplicateAfter_,\n  digAfter_,\n  isAfterEvent,\n  sendEventsTo,\n  shareAfter,\n  translateAfter_,\n} from '@proc7ts/fun-events';\nimport { Supply } from '@proc7ts/supply';\nimport {\n  BootstrapContext,\n  ComponentContext,\n  ComponentElement,\n  ComponentSlot,\n  DefinitionContext,\n  parentElement,\n} from '@wesib/wesib';\nimport { ShareLocator } from './share-locator';\nimport { Share__symbol, ShareRef } from './share-ref';\nimport { ShareRegistry } from './share-registry.impl';\nimport { Share$, Share$impl__symbol } from './share.impl';\nimport { SharedValue, SharedValue__symbol } from './shared-value';\nimport { SharedValue$Registrar } from './shared-value.impl';\n\n/**\n * A kind of the value a component shares with the nested ones.\n *\n * The sharing implies the following:\n *\n * - The sharer component {@link addSharer registers} its element name as the one bound to sharer.\n * - The sharer component {@link shareValue provides} an (updatable) shared value within its context.\n * - The consumer component {@link valueFor obtains} the shared value by searching the parent element with a sharer\n *   bound to it.\n *\n * A share instance is used as an identifier in all these steps.\n *\n * A {@link Shared @Shared} component property decorator may be used to automate this.\n *\n * @typeParam T - Shared value type.\n */\nexport class Share<T> implements ShareRef<T>, ContextUpRef<AfterEvent<[T?]>, SharedValue<T>> {\n\n  /**\n   * @internal\n   */\n  readonly [Share$impl__symbol]: Share$<T>;\n\n  /**\n   * Constructs new component share.\n   *\n   * @param name - A human-readable name of the share.\n   * @param options - Constructed share options.\n   */\n  constructor(name: string, options: Share.Options<T> = {}) {\n    this[Share$impl__symbol] = new Share$(this, name, options);\n  }\n\n  /**\n   * Refers to itself.\n   */\n  get [Share__symbol](): this {\n    return this;\n  }\n\n  /**\n   * A human-readable name of the name.\n   */\n  get name(): string {\n    return this[Share$impl__symbol].name;\n  }\n\n  /**\n   * A key of the sharer component context value containing an `AfterEvent` keeper of the shared value.\n   */\n  get [ContextKey__symbol](): ContextUpKey<AfterEvent<[T?]>, SharedValue<T>> {\n    return this[Share$impl__symbol].key;\n  }\n\n  /**\n   * Registers a sharer component.\n   *\n   * The registration is necessary for consumers to be able to find the element bound to sharer by that element's name.\n   *\n   * @param defContext - The definition context of the sharer component.\n   * @param options - Value sharing options.\n   *\n   * @returns Sharer registration supply. Revokes the sharer registration once cut off.\n   */\n  addSharer(defContext: DefinitionContext, options?: SharedValue.Options): Supply {\n    return this[Share$impl__symbol].addSharer(defContext, options);\n  }\n\n  /**\n   * Shares a value by providing it for the sharer component context.\n   *\n   * @param registrar - Shared value registrar.\n   *\n   * @return A builder of shared value for component context.\n   */\n  shareValue(\n      registrar: SharedValue.Registrar<T>,\n  ): void {\n    this[Share$impl__symbol].shareValue(registrar);\n  }\n\n  /**\n   * Creates a shared value registrar that shares a value created by the given provider.\n   *\n   * @typeParam TSharer - Sharer component type.\n   * @param registry - Target component context registry.\n   * @param provider - Shared value provider.\n   *\n   * @returns New shared value registrar.\n   */\n  createRegistrar<TSharer extends object>(\n      registry: ContextRegistry<ComponentContext<TSharer>>,\n      provider: SharedValue.Provider<T, TSharer>,\n  ): SharedValue.Registrar<T> {\n    return SharedValue$Registrar(registry, provider);\n  }\n\n  /**\n   * Locates a shared value for the consuming component.\n   *\n   * Searches among parent elements for the one bound to the sharer component, then obtains the shared value from\n   * the sharer's context.\n   *\n   * @param consumer - Consumer component context.\n   * @param options - Location options.\n   *\n   * @returns An `AfterEvent` keeper of the shared value and its sharer context, if found.\n   */\n  valueFor(\n      consumer: ComponentContext,\n      options: ShareLocator.Options = {},\n  ): AfterEvent<[T, ComponentContext] | []> {\n\n    const { local } = options;\n    const sharers = consumer.get(BootstrapContext).get(ShareRegistry).sharers(this);\n    const status = consumer.readStatus.do(\n        deduplicateAfter_(\n            (a, b) => a === b,\n            Share$consumerStatus,\n        ),\n    );\n\n    return afterAll({\n      sharers,\n      status,\n    }).do(\n        digAfter_(({ sharers: [sharers] }): AfterEvent<[T, ComponentContext] | []> => {\n          if (local) {\n            if (sharers.sharers.has(consumer.componentType)) {\n              return Share$sharedValue(this, consumer);\n            }\n            if (local === true) {\n              return afterThe();\n            }\n          }\n\n          let element: ComponentElement | null = parentElement(consumer.element);\n\n          while (element) {\n            if (sharers.names.has(element.tagName.toLowerCase())) {\n              return ComponentSlot.of(element).read.do(\n                  digAfter_(sharer => sharer ? Share$sharedValue(this, sharer) : afterThe()),\n              );\n            }\n\n            element = parentElement(element);\n          }\n\n          return afterThe();\n        }),\n        deduplicateAfter(),\n    );\n  }\n\n  /**\n   * Selects a shared value among candidates.\n   *\n   * It is especially useful when the value shared by multiple sharers.\n   *\n   * By default:\n   *\n   * - Prefers bare value.\n   * - Prefers the value from {@link SharedValue.Detailed detailed specifier} with higher priority\n   *   (i.e. lesser {@link SharedValue.Details.priority priority value}).\n   * - Prefers the value declared last.\n   *\n   * @param values - The values shared by sharers. May contain a {@link SharedValue.Detailed detailed value\n   * specifiers} in addition to pure values.\n   *\n   * @returns An `AfterEvent` keeper of selected value, if present.\n   */\n  selectValue(...values: SharedValue<T>[]): AfterEvent<[T?]> {\n\n    let selected: SharedValue.Details<T> | undefined;\n\n    for (let i = values.length - 1; i >= 0; --i) {\n\n      const value = values[i];\n\n      if (!SharedValue.hasDetails(value)) {\n        return afterThe(value);\n      }\n\n      const details = value[SharedValue__symbol];\n\n      if (!selected || selected.priority > details.priority) {\n        selected = details;\n      }\n    }\n\n    if (!selected) {\n      return afterThe();\n    }\n\n    return afterEventBy<[T?]>(receiver => {\n\n      const value = selected!.get();\n\n      if (isAfterEvent(value)) {\n        value(receiver);\n      } else {\n        sendEventsTo(receiver)(value);\n      }\n    }).do(\n        shareAfter,\n    );\n  }\n\n}\n\nexport namespace Share {\n\n  /**\n   * {@link Share Component share} options.\n   *\n   * @typeParam T - Shared value type.\n   */\n  export interface Options<T> {\n\n    /**\n     * Component share reference(s) the share provides a value for in addition to the one it provides for itself.\n     *\n     * The order of aliases is important. It defines the {@link SharedValue.Details.priority priority} of the\n     * value shared for the corresponding share.\n     */\n    readonly as?: ShareRef<T> | readonly ShareRef<T>[];\n\n  }\n\n  /**\n   * A key of context value containing an `AfterEvent` keeper of shared value.\n   *\n   * @typeParam T - Shared value type.\n   */\n  export type Key<T> = ContextUpKey<AfterEvent<[T?]>, SharedValue<T>>;\n\n  /**\n   * A source value accepted by {@link Share component share} context value.\n   *\n   * Either a single shared value, its {@link SharedValue.Detailed detailed descriptor}, or an `AfterEvent`\n   * keeper of the above.\n   *\n   * @typeParam T - Shared value type.\n   */\n  export type Source<T> = ContextUpKey.Source<SharedValue<T>>;\n\n}\n\nfunction Share$consumerStatus([{ settled, connected }]: [ComponentContext]): 0 | 1 | 2 {\n  return connected ? 2 : settled ? 1 : 0;\n}\n\nfunction Share$sharedValue<T>(\n    share: Share<T>,\n    sharer: ComponentContext,\n): AfterEvent<[T, ComponentContext] | []> {\n  return sharer.get(share).do(\n      translateAfter_((send, value?) => value ? send(value, sharer) : send()),\n  );\n}\n","import { AfterEvent } from '@proc7ts/fun-events';\nimport { ComponentContext } from '@wesib/wesib';\nimport { isShareRef, Share__symbol, ShareRef } from './share-ref';\n\n/**\n * Shared value locator.\n *\n * Can be one of:\n *\n * - component share {@link ShareRef reference},\n * - shared value locator specified {@link ShareLocator.Spec},\n * - {@link ShareLocator.CustomWithFallback custom} shared value locator, or\n * - `null`/`undefined` to locate a fallback share.\n *\n * A {@link shareLocator} function can be used to convert arbitrary locator to a function.\n *\n * @typeParam T - Shared value type.\n */\nexport type ShareLocator<T> =\n    | ShareRef<T>\n    | ShareLocator.Spec<T>\n    | ShareLocator.CustomWithFallback<T>\n    | null\n    | undefined;\n\n/**\n * Converts mandatory shared value locator to locator function.\n *\n * @typeParam T - Shared value type.\n * @param locator - Shared value locator to convert.\n * @param defaultOptions - Default shared value locator options.\n *\n * @returns Shared value locator function.\n */\nexport function shareLocator<T>(\n    locator: ShareLocator.Mandatory<T>,\n    defaultOptions?: ShareLocator.Options,\n): ShareLocator.Fn<T>;\n\n/**\n * Converts arbitrary shared value locator to locator function.\n *\n * @typeParam T - Shared value type.\n * @param locator - Shared value locator to convert.\n * @param defaultSpec - Default shared value locator specifier including fallback share reference.\n *\n * @returns Shared value locator function.\n */\nexport function shareLocator<T>(\n    locator: ShareLocator<T>,\n    defaultSpec: ShareLocator.MandatorySpec<T>,\n): ShareLocator.Fn<T>;\n\nexport function shareLocator<T>(\n    locator:\n        | ShareRef<T>\n        | Partial<ShareLocator.MandatorySpec<T>>\n        | ShareLocator.CustomWithFallback<T>\n        | null\n        | undefined,\n    defaultSpec: ShareLocator.Spec<T> = {},\n): ShareLocator.Fn<T> {\n  if (isShareRef(locator)) {\n\n    const share = locator[Share__symbol];\n\n    return (consumer, options = {}) => {\n\n      const { local = defaultSpec.local } = options;\n\n      return share.valueFor(consumer, { local });\n    };\n  }\n\n  if (typeof locator === 'function') {\n\n    const { local: localByDefault = false, share: shareByDefault } = defaultSpec;\n\n    return (consumer, options = {}) => {\n\n      const { share = shareByDefault!, local = localByDefault } = options;\n\n      return locator(consumer, { share, local });\n    };\n  }\n\n  const { share: shareRef = defaultSpec.share!, local: localByDefault = defaultSpec.local } = locator || {};\n  const share = shareRef[Share__symbol];\n\n  return (consumer, options = {}) => {\n\n    const { local = localByDefault } = options;\n\n    return share.valueFor(consumer, { local });\n  };\n}\n\nexport namespace ShareLocator {\n\n  /**\n   * Mandatory shared value locator.\n   *\n   * Can be one of:\n   *\n   * - component share {@link ShareRef reference},\n   * - shared value locator specified {@link ShareLocator.Spec}, or\n   * - {@link ShareLocator.Custom custom} shared value locator.\n   *\n   * A {@link shareLocator} function can be used to convert arbitrary locator to a function.\n   *\n   * @typeParam T - Shared value type.\n   */\n  export type Mandatory<T> =\n      | ShareRef<T>\n      | MandatorySpec<T>\n      | Custom<T>;\n\n  /**\n   * Shared value location options.\n   */\n  export interface Options {\n\n    /**\n     * Whether to search locally, in consumer component itself.\n     *\n     * - `false` (by default), to start the search from consumer's parent,\n     * - `true` to search locally, i.e. only in consumer component, or\n     * - `'too'` to start the search from consumer component.\n     */\n    readonly local?: boolean | 'too';\n\n  }\n\n  /**\n   * Shared value location options with all properties present.\n   */\n  export type FullOptions = Required<Options>;\n\n  /**\n   * Shared value locator specifier.\n   *\n   * @typeParam T - Share value type.\n   */\n  export interface Spec<T> extends Options {\n\n    /**\n     * Target share.\n     */\n    readonly share?: ShareRef<T>;\n\n  }\n\n  /**\n   * Mandatory shared value locator specifier.\n   *\n   * @typeParam T - Share value type.\n   */\n  export interface MandatorySpec<T> extends Spec<T> {\n\n    /**\n     * Target share.\n     */\n    readonly share: ShareRef<T>;\n\n  }\n\n  /**\n   * Shared value locator specifier with all properties set.\n   *\n   * @typeParam T - Share value type.\n   */\n  export type FullSpec<T> = Required<MandatorySpec<T>>;\n\n  /**\n   * Signature of custom shared value locator.\n   *\n   * @typeParam T - Shared value type.\n   * @typeParam consumer - Consumer component context.\n   * @typeParam options - Shared value location options.\n   *\n   * @returns An `AfterEvent` keeper of the shared value and its sharer context, if found.\n   */\n  export type Custom<T> =\n  /**\n   * @param consumer - Consumer component context.\n   * @param options - Full shared value location options.\n   *\n   * @returns An `AfterEvent` keeper of the shared value and its sharer context, if found.\n   */\n      (\n          this: void,\n          consumer: ComponentContext,\n          options: FullOptions,\n      ) => AfterEvent<[] | [T, ComponentContext]>;\n\n  /**\n   * Signature of custom shared value locator that expects a fallback share reference to be specified.\n   *\n   * @typeParam T - Shared value type.\n   */\n  export type CustomWithFallback<T> =\n  /**\n   * @param consumer - Consumer component context.\n   * @param options - Full shared value location specifier, including fallback share reference.\n   *\n   * @returns An `AfterEvent` keeper of the shared value and its sharer context, if found.\n   */\n      (\n          this: void,\n          consumer: ComponentContext,\n          spec: FullSpec<T>,\n      ) => AfterEvent<[] | [T, ComponentContext]>;\n\n  /**\n   * Signature of shared value locator function.\n   *\n   * Can be constructed by {@link shareLocator} function.\n   *\n   * @typeParam T - Shared value type.\n   */\n  export type Fn<T> =\n  /**\n   * @param consumer - Consumer component context.\n   * @param options - Shared value location options.\n   *\n   * @returns An `AfterEvent` keeper of the shared value and its sharer context, if found.\n   */\n      (\n          this: void,\n          consumer: ComponentContext,\n          defaultSpec?: Spec<T>,\n      ) => AfterEvent<[] | [T, ComponentContext]>;\n\n}\n","import { Contextual, Contextual__symbol } from '@proc7ts/context-values';\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  afterValue,\n  EventKeeper,\n  trackValueBy,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { noop, valueProvider, valueRecipe } from '@proc7ts/primitives';\nimport { ComponentContext } from '@wesib/wesib';\n\nconst Shareable$Internals__symbol = (/*#__PURE__*/ Symbol('Shareable.internals'));\n\n/**\n * Abstract implementation of value shareable by component.\n *\n * Shareable instance contains a {@link body} that become usable only when bound to sharer component.\n *\n * @typeParam TBody - Shareable body type.\n * @typeParam TSharer - Sharer component type.\n */\nexport class Shareable<TBody = unknown, TSharer extends object = any>\n    implements EventKeeper<[TBody]>, Contextual<Shareable<TBody, TSharer>> {\n\n  /**\n   * Converts shareable body or its provider to provider that always returns an `AfterEvent` keeper of shareable body.\n   *\n   * @typeParam TBody - Shareable body type.\n   * @typeParam TSharer - Sharer component type.\n   * @param body - Either shareable body, or its provider.\n   *\n   * @returns Shareable body provider.\n   */\n  static provider<TBody = unknown, TSharer extends object = any>(\n      body: TBody | Shareable.Provider<TBody, TSharer>,\n  ): (\n      this: void,\n      sharer: ComponentContext<TSharer>,\n  ) => AfterEvent<[TBody]> {\n\n    const provider = valueRecipe(body);\n\n    return context => afterValue(provider(context));\n  }\n\n  /**\n   * @internal\n   */\n  private [Shareable$Internals__symbol]: Shareable$Internals<TBody, TSharer>;\n\n  /**\n   * Constructs shareable instance.\n   *\n   * @param body - Either shareable body, or its provider.\n   */\n  constructor(body: TBody | Shareable.Provider<TBody, TSharer>) {\n    this[Shareable$Internals__symbol] = new Shareable$Internals(this, body);\n  }\n\n  /**\n   * Sharer component context.\n   *\n   * Accessing it throws an exception until bound to sharer.\n   */\n  get sharer(): ComponentContext<TSharer> {\n    return this[Shareable$Internals__symbol].sharer();\n  }\n\n  /**\n   * An `AfterEvent` keeper of shareable body.\n   *\n   * An `[AfterEvent__symbol]` method always returns this value.\n   */\n  get read(): AfterEvent<[TBody]> {\n    return this[Shareable$Internals__symbol].get().read;\n  }\n\n  /**\n   * Binds this shareable instance to sharer component.\n   *\n   * @param sharer - Sharer component context.\n   *\n   * @returns `this` instance.\n   */\n  [Contextual__symbol](sharer: ComponentContext): this {\n    this[Shareable$Internals__symbol].bind(sharer);\n    return this;\n  }\n\n  [AfterEvent__symbol](): AfterEvent<[TBody]> {\n    return this.read;\n  }\n\n  /**\n   * Shareable body.\n   *\n   * Accessing is throws an exception until bound to sharer.\n   */\n  get body(): TBody {\n    return this[Shareable$Internals__symbol].get().it;\n  }\n\n}\n\nexport namespace Shareable {\n\n  /**\n   * Shareable provider signature.\n   *\n   * Provides shareable body rather the shareable instance itself.\n   *\n   * @typeParam TBody - Shareable body type.\n   * @typeParam TSharer - Sharer component type.\n   */\n  export type Provider<TBody = unknown, TSharer extends object = any> =\n  /**\n   * @param sharer - Sharer component context.\n   *\n   * @returns Either shareable body instance, or an `AfterEvent` keeper reporting one.\n   */\n      (\n          this: void,\n          sharer: ComponentContext<TSharer>,\n      ) => TBody | AfterEvent<[TBody]>;\n\n}\n\nclass Shareable$Internals<TBody, TSharer extends object> {\n\n  private readonly _get: (\n      this: void,\n      sharer: ComponentContext<TSharer>,\n  ) => AfterEvent<[TBody]>;\n\n  constructor(\n      private readonly _source: Shareable<TBody, TSharer>,\n      body: TBody | Shareable.Provider<TBody, TSharer>,\n  ) {\n    this._get = Shareable.provider(body);\n  }\n\n  sharer(): ComponentContext<TSharer> {\n    this._notBound();\n  }\n\n  get(): ValueTracker<TBody> {\n    this._notBound();\n  }\n\n  bind(sharer: ComponentContext<TSharer>): void {\n    this.bind = noop;\n    this.sharer = valueProvider(sharer);\n    this.get = () => {\n\n      const tracker = trackValueBy(this._get(sharer));\n\n      this.get = valueProvider(tracker);\n\n      return tracker;\n    };\n  }\n\n  private _notBound(): never {\n    throw new TypeError(`${String(this._source)} is not properly shared yet`);\n  }\n\n}\n","import { Contextual__symbol, isContextual } from '@proc7ts/context-values';\nimport { AfterEvent, isAfterEvent, trackValue, trackValueBy, ValueTracker } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { ComponentClass, ComponentContext, ComponentInstance, ComponentProperty } from '@wesib/wesib';\n\n/**\n * @internal\n */\nexport class ShareAccessor<T, TClass extends ComponentClass> {\n\n  private readonly _get: () => T | AfterEvent<[T?]>;\n  private readonly _set: (value: T | AfterEvent<[T?]>) => void;\n  private readonly _ctx: ComponentContext<InstanceType<TClass>>;\n  private _valSupply?: Supply;\n  readonly val: ValueTracker<T | undefined>;\n\n  constructor(\n      desc: ComponentProperty.Descriptor<T | AfterEvent<[T?]>, TClass>,\n      component: ComponentInstance<InstanceType<TClass>>,\n  ) {\n    this._get = desc.get.bind(undefined, component);\n    this._set = desc.writable ? desc.set.bind(undefined, component) : noop;\n    this._ctx = ComponentContext.of(component);\n\n    const value = this._get();\n    let dynSync = false;\n\n    if (isAfterEvent(value)) {\n      dynSync = true;\n      this.val = trackValueBy(value);\n    } else {\n      this.val = trackValue(value);\n    }\n\n    this.val.supply.needs(this._ctx);\n\n    // Bind to context as the very first operation\n    this.val.read(value => isContextual(value) && value[Contextual__symbol](this._ctx));\n\n    if (dynSync) {\n      this._syncDyn();\n    } else {\n      this._syncVal();\n    }\n  }\n\n  get(): T | AfterEvent<[T?]> {\n    return this._valSupply ? this.val.it! : this.val.read;\n  }\n\n  set(value: T | AfterEvent<[T?]>): void {\n    if (isAfterEvent(value)) {\n      this.val.by(value);\n      this._syncDyn();\n    } else {\n      this.val.it = value;\n      this._syncVal();\n    }\n  }\n\n  private _syncVal(): void {\n    if (!this._valSupply) {\n      this._valSupply = this.val.read(value => this._set(value!));\n    }\n  }\n\n  private _syncDyn(): void {\n    if (this._valSupply) {\n      this._valSupply.off();\n      this._valSupply = undefined;\n      this._set(this.val.read);\n    }\n  }\n\n}\n","import { AfterEvent, digAfter_ } from '@proc7ts/fun-events';\nimport { Class, valuesProvider } from '@proc7ts/primitives';\nimport {\n  ComponentClass,\n  ComponentInstance,\n  ComponentProperty,\n  ComponentPropertyDecorator,\n  DefinitionContext,\n  DefinitionSetup,\n} from '@wesib/wesib';\nimport { Share } from './share';\nimport { ShareAccessor } from './share-accessor.impl';\nimport { Share__symbol } from './share-ref';\nimport { SharedValue$ContextBuilder } from './shared-value.impl';\nimport { targetShare, TargetShare } from './target-share';\n\n/**\n * Builds a decorator of component property that {@link Share shares} its value.\n *\n * The decorated property should return either a static value, or its `AfterEvent` keeper if the case the value is\n * updatable.\n *\n * Applies current component context to `Contextual` shared values.\n *\n * @typeParam T - Shared value type.\n * @typeParam TClass - A type of decorated component class.\n * @param share - Target component share.\n * @param define - Sharing property definition builders.\n *\n * @returns Component property decorator.\n */\nexport function Shared<T, TClass extends ComponentClass = Class>(\n    share: TargetShare<T>,\n    ...define: Shared.Definer<T, TClass>[]\n): ShareDecorator<T, TClass> {\n\n  const { share: { [Share__symbol]: shr }, local } = targetShare(share);\n\n  return ComponentProperty(\n      descriptor => {\n\n        const accessorKey = Symbol(`${String(descriptor.key)}:shared`);\n\n        type Component = ComponentInstance<InstanceType<TClass>> & {\n          [accessorKey]?: ShareAccessor<T, TClass>;\n        };\n\n        const accessor = (component: Component): ShareAccessor<T, TClass> => component[accessorKey]\n            || (component[accessorKey] = new ShareAccessor(descriptor, component));\n\n        return {\n          get: component => accessor(component).get(),\n          set: descriptor.writable\n              ? (component, value) => accessor(component).set(value)\n              : undefined,\n          componentDef: {\n            setup(setup: DefinitionSetup<InstanceType<TClass>>): void {\n              setup.perComponent(SharedValue$ContextBuilder(\n                  shr,\n                  {\n                    provide: context => context.onceReady.do(\n                        digAfter_(\n                            ({ component }) => accessor(component).val,\n                            valuesProvider<[T?]>(),\n                        ),\n                    ),\n                  },\n              ));\n            },\n            define(defContext: DefinitionContext<InstanceType<TClass>>) {\n              shr.addSharer(defContext, { local });\n            },\n          },\n        };\n\n\n      },\n      ...define.map(define => (\n          descriptor: ComponentProperty.Descriptor<T | AfterEvent<[T?]>, TClass>,\n      ) => define({ ...descriptor, share: shr })),\n  );\n}\n\n/**\n * Decorator of component property that {@link Share shares} its value.\n *\n * Built by {@link Shared @Shared} decorator.\n *\n * @typeParam T - Shared value type.\n * @typeParam TClass - A type of decorated component class.\n */\nexport type ShareDecorator<T, TClass extends ComponentClass = Class> =\n    ComponentPropertyDecorator<T | AfterEvent<[T?]>, TClass>;\n\nexport namespace Shared {\n\n  /**\n   * A descriptor of the component property that {@link Share shares} its value.\n   *\n   * Passed to {@link Definer property definer} by {@link Shared @Shared} decorator to build a {@link Definition\n   * property definition}.\n   *\n   * @typeParam T - Shared value type.\n   * @typeParam TClass - A type of decorated component class.\n   */\n  export interface Descriptor<T, TClass extends ComponentClass = Class>\n      extends ComponentProperty.Descriptor<T | AfterEvent<[T?]>, TClass> {\n\n    /**\n     * Target share instance.\n     */\n    readonly share: Share<T>;\n\n  }\n\n  /**\n   * A signature of definition builder of the component property that {@link Share shares} its value.\n   *\n   * This is a function called by {@link Shared @Shared} decorator to apply additional definitions.\n   *\n   * @typeParam T - Shared value type.\n   * @typeParam TClass - A type of decorated component class.\n   */\n  export type Definer<T, TClass extends ComponentClass = Class> =\n  /**\n   * @param descriptor - Decorated component property descriptor.\n   *\n   * @returns Component property definition, or nothing if the property definition is not to be changed.\n   */\n      (\n          this: void,\n          descriptor: Descriptor<T, TClass>,\n      ) => Definition<T, TClass> | void;\n\n  /**\n   * A definition of component property that {@link Share shares} its value.\n   *\n   * @typeParam T - Shared value type.\n   * @typeParam TClass - A type of component class.\n   */\n  export type Definition<T, TClass extends ComponentClass = Class> =\n      ComponentProperty.Definition<T | AfterEvent<[T?]>, TClass>;\n\n}\n","import { isShareRef, ShareRef } from './share-ref';\n\n/**\n * A specifier of component share to share the value of.\n *\n * Can be one of:\n *\n * - component share {@link ShareRef reference}, or\n * - detailed target component share {@link TargetShare.Spec specifier}.\n *\n * @typeParam T - Shared value type.\n */\nexport type TargetShare<T> =\n    | ShareRef<T>\n    | TargetShare.Spec<T>;\n\nexport namespace TargetShare {\n\n  /**\n   * A detailed specifier of the component share to share the value of.\n   *\n   * @typeParam T - Shared value type.\n   */\n  export interface Spec<T> {\n\n    /**\n     * Target component share reference.\n     */\n    readonly share: ShareRef<T>;\n\n    /**\n     * Whether to share is local.\n     *\n     * - `true` to make the value available only locally, i.e. only when requested by sharer context.\n     * - `false` (by default) to make the value available to nested components too.\n     */\n    readonly local?: boolean;\n\n  }\n\n}\n\n/**\n * Converts arbitrary {@link TargetShare target component share} to its detailed {@link TargetShare.Spec specifier}.\n *\n * @typeParam T - Share value type.\n * @param target\n */\nexport function targetShare<T>(target: TargetShare<T>): TargetShare.Spec<T> {\n  return isShareRef(target) ? { share: target } : target;\n}\n","import {\n  InAspect,\n  InBuilder,\n  InControl,\n  InNamespaceAliaser,\n  InRenderScheduler,\n  knownInAspect,\n} from '@frontmeans/input-aspects';\nimport { ComponentContext, DefaultNamespaceAliaser, ElementRenderScheduler } from '@wesib/wesib';\nimport { Field } from './field';\nimport { Form } from './form';\nimport { FormPreset } from './form-preset';\n\n/**\n * @internal\n */\nexport const DefaultFormPreset: FormPreset.Spec = {\n\n  setupField<TValue, TSharer extends object>(\n      { sharer, control }: Field.Builder<TValue, TSharer>,\n  ): void {\n    DefaultFormPreset$setup(sharer, control);\n  },\n\n  setupForm<TModel, TElt extends HTMLElement, TSharer extends object>(\n      { sharer, control, element }: Form.Builder<TModel, TElt, TSharer>,\n  ): void {\n    DefaultFormPreset$setup(sharer, control);\n    DefaultFormPreset$setup(sharer, element);\n  },\n\n};\n\nfunction DefaultFormPreset$setup<TValue, TSharer extends object>(\n    sharer: ComponentContext<TSharer>,\n    builder: InBuilder<InControl<TValue>>,\n): void {\n\n  const nsAliaser = sharer.get(DefaultNamespaceAliaser);\n  const renderScheduler = sharer.get(ElementRenderScheduler);\n\n  builder\n      .addAspect(\n          InNamespaceAliaser,\n          {\n            applyAspect<TInstance, TKind extends InAspect.Application.Kind>(\n                _aspect: InAspect<TInstance, TKind>,\n            ): InAspect.Application.Result<TInstance, TValue, TKind> {\n              return knownInAspect(nsAliaser) as InAspect.Application.Result<TInstance, TValue, TKind>;\n            },\n          },\n      ).addAspect(\n      InRenderScheduler,\n      {\n        applyAspect<TInstance, TKind extends InAspect.Application.Kind>(\n            _aspect: InAspect<TInstance, TKind>,\n        ): InAspect.Application.Result<TInstance, TValue, TKind> {\n          return knownInAspect(renderScheduler) as InAspect.Application.Result<TInstance, TValue, TKind>;\n        },\n      },\n  );\n}\n","import { ContextKey__symbol, ContextSupply, ContextValueSlot } from '@proc7ts/context-values';\nimport { ContextUpKey } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, AfterEvent__symbol, EventKeeper, mapAfter, supplyAfter } from '@proc7ts/fun-events';\nimport { DefaultFormPreset } from './default.preset.impl';\nimport { Field } from './field';\nimport { Form } from './form';\n\nclass FormPresetKey extends ContextUpKey<FormPreset, FormPreset.Spec> {\n\n  constructor() {\n    super('form-preset');\n  }\n\n  get upKey(): this {\n    return this;\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          FormPreset,\n          ContextUpKey.Source<FormPreset.Spec>,\n          AfterEvent<FormPreset.Spec[]>>,\n  ): void {\n    slot.insert(new FormPreset(slot.seed.do(\n        mapAfter((...specs) => FormPreset.combine(...specs, DefaultFormPreset)),\n        supplyAfter(slot.context.get(ContextSupply)),\n    )));\n  }\n\n}\n\nconst FormPreset__key = (/*#__PURE__*/ new FormPresetKey());\nconst FormPreset$rules__symbol = (/*#__PURE__*/ Symbol('FormPreset.rules'));\n\n/**\n * Form controls preset.\n *\n * Any number of presets can be {@link FormPreset.Spec specified} in component context to be applies to forms\n * and fields. They would be combined into single preset available in component context.\n */\nexport class FormPreset implements FormPreset.Rules, EventKeeper<[FormPreset.Rules]> {\n\n  /**\n   * A key of component context value containing default form preset combined from all provided {@link FormPreset.Spec\n   * specifiers}.\n   *\n   * As a bare minimum it attaches the following aspects to controls:\n   *\n   * - `InRenderScheduler` set to `ElementRenderScheduler`,\n   * - `InNamespaceAliaser` set to `DefaultNamespaceAliaser.\n   */\n  static get [ContextKey__symbol](): ContextUpKey<FormPreset, FormPreset.Spec> {\n    return FormPreset__key;\n  }\n\n  /**\n   * Combines form preset specifiers.\n   *\n   * @param specs - Form preset specifiers to combine.\n   *\n   * @returns Form preset rules instance combining the given specifiers.\n   */\n  static combine(...specs: FormPreset.Spec[]): FormPreset.Rules {\n    return {\n      setupField: FormPreset$setupField(specs),\n      setupForm: FormPreset$setupForm(specs),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  private [FormPreset$rules__symbol]: FormPreset.Rules;\n\n  /**\n   * Constructs form preset.\n   *\n   * @param rules - An `AfterEvent` keeper of form preset {@link FormPreset.Rules rules}.\n   */\n  constructor(readonly rules: AfterEvent<[FormPreset.Rules]>) {\n    rules(rules => {\n      this[FormPreset$rules__symbol] = rules;\n    });\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of this form preset {@link FormPreset.Rules rules}.\n   */\n  [AfterEvent__symbol](): AfterEvent<[FormPreset.Rules]> {\n    return this.rules;\n  }\n\n  /**\n   * Sets up form field controls.\n   *\n   * @param builder - Target field builder.\n   */\n  setupField<TValue, TSharer extends object>(\n      builder: Field.Builder<TValue, TSharer>,\n  ): void {\n    this[FormPreset$rules__symbol].setupField(builder);\n  }\n\n  /**\n   * Sets up form controls.\n   *\n   * @param builder - Target form builder.\n   */\n  setupForm<TModel, TElt extends HTMLElement, TSharer extends object>(\n      builder: Form.Builder<TModel, TElt, TSharer>,\n  ): void {\n    this[FormPreset$rules__symbol].setupForm(builder);\n  }\n\n}\n\nexport namespace FormPreset {\n\n  /**\n   * A {@link FormPreset form preset} specifier.\n   *\n   * Contains a partial form preset implementation.\n   */\n  export interface Spec {\n\n    /**\n     * Sets up form field controls.\n     *\n     * @param builder - Target field builder.\n     */\n    setupField?<TValue, TSharer extends object>(\n        builder: Field.Builder<TValue, TSharer>,\n    ): void;\n\n    /**\n     * Sets up form controls.\n     *\n     * @param builder - Target form builder.\n     */\n    setupForm?<TModel, TElt extends HTMLElement, TSharer extends object>(\n        builder: Form.Builder<TModel, TElt, TSharer>,\n    ): void;\n\n  }\n\n  /**\n   * {@link FormPreset Form preset} rules.\n   *\n   * Multiple {@link Spec specifiers} could be combined into single rule instance by {@link FormPreset.combine} static\n   * method.\n   */\n  export interface Rules extends FormPreset.Spec {\n\n    setupField<TValue, TSharer extends object>(\n        this: void,\n        builder: Field.Builder<TValue, TSharer>,\n    ): void;\n\n    setupForm<TModel, TElt extends HTMLElement, TSharer extends object>(\n        this: void,\n        builder: Form.Builder<TModel, TElt, TSharer>,\n    ): void;\n\n  }\n\n}\n\nfunction FormPreset$setupField(\n    specs: readonly FormPreset.Spec[],\n): <TValue, TSharer extends object>(\n    builder: Field.Builder<TValue, TSharer>,\n) => void {\n  return specs.reduce(\n      (prev, spec) => spec.setupField\n          ? <TValue, TSharer extends object>(\n              builder: Field.Builder<TValue, TSharer>,\n          ): void => {\n            prev(builder);\n            spec.setupField!(builder);\n          }\n          : prev,\n      FormPreset$noFieldSetup,\n  );\n}\n\nfunction FormPreset$noFieldSetup<TValue, TSharer extends object>(\n    _builder: Field.Builder<TValue, TSharer>,\n): void {\n  // No field setup\n}\n\nfunction FormPreset$setupForm(\n    specs: readonly FormPreset.Spec[],\n): <TModel, TElt extends HTMLElement, TSharer extends object>(\n    builder: Form.Builder<TModel, TElt, TSharer>,\n) => void {\n  return specs.reduce(\n      (prev, spec) => spec.setupForm\n          ? <TModel, TElt extends HTMLElement, TSharer extends object>(\n              builder: Form.Builder<TModel, TElt, TSharer>,\n          ): void => {\n            prev(builder);\n            spec.setupForm!(builder);\n          }\n          : prev,\n      FormPreset$noFormSetup,\n  );\n}\n\nfunction FormPreset$noFormSetup<TModel, TElt extends HTMLElement, TSharer extends object>(\n    _builder: Form.Builder<TModel, TElt, TSharer>,\n): void {\n  // No form setup\n}\n","import { InControl } from '@frontmeans/input-aspects';\nimport { Contextual__symbol } from '@proc7ts/context-values';\nimport { noop } from '@proc7ts/primitives';\nimport { ComponentContext } from '@wesib/wesib';\nimport { Shareable } from '../shares';\n\n/**\n * Abstract unit of input {@link Form form}.\n *\n * Represents a form or its field control and contains its value.\n *\n * @typeParam TValue - Input value type.\n * @typeParam TControls - A type of input controls this unit represents.\n * @typeParam TSharer - Unit sharer component type.\n */\nexport abstract class FormUnit<\n    TValue,\n    TControls extends FormUnit.Controls<TValue> = FormUnit.Controls<TValue>,\n    TSharer extends object = any>\n    extends Shareable<TControls | undefined, TSharer> {\n\n  /**\n   * Constructs form unit.\n   *\n   * @param controls - Either input controls, or their provider.\n   */\n  constructor(// eslint-disable-line @typescript-eslint/no-useless-constructor\n      controls: TControls | Shareable.Provider<TControls | undefined, TSharer>,\n  ) {\n    super(controls);\n  }\n\n  /**\n   * Input control of the field, if present.\n   */\n  get control(): InControl<TValue> | undefined {\n    return this.body?.control;\n  }\n\n  [Contextual__symbol](sharer: ComponentContext): this {\n    super[Contextual__symbol](sharer);\n    this.read(noop).needs(sharer); // Create controls eagerly.\n    return this;\n  }\n\n}\n\nexport namespace FormUnit {\n\n  /**\n   * A value type for the given form unit type.\n   *\n   * @typeParam TUnit - Target unit type.\n   */\n  export type ValueType<TUnit extends FormUnit<any, any, any>> =\n      TUnit extends FormUnit<infer TValue, any, any> ? TValue : never;\n\n  /**\n   * A type of controls type for the given form unit type.\n   *\n   * @typeParam TUnit - Target unit type.\n   */\n  export type ControlsType<TUnit extends FormUnit<any, any, any>> =\n      TUnit extends FormUnit<any, infer TControls, any> ? TControls : never;\n\n  /**\n   * A type of the sharer for the given form unit type.\n   *\n   * @typeParam TUnit - Target unit type.\n   */\n  export type SharerType<TUnit extends FormUnit<any, any, any>> =\n      TUnit extends FormUnit<any, any, infer TSharer> ? TSharer : never;\n\n  /**\n   * Form unit controls.\n   *\n   * @typeParam TValue - Input value type.\n   */\n  export interface Controls<TValue> {\n\n    /**\n     * An input control of the unit.\n     */\n    readonly control: InControl<TValue>;\n\n  }\n\n}\n","import { InBuilder, InControl } from '@frontmeans/input-aspects';\nimport { AfterEvent, afterValue, deduplicateAfter_, digAfter_, mapAfter } from '@proc7ts/fun-events';\nimport { valueRecipe } from '@proc7ts/primitives';\nimport { ComponentContext } from '@wesib/wesib';\nimport { Shareable } from '../shares';\nimport { FormPreset } from './form-preset';\nimport { FormUnit } from './form-unit';\n\n/**\n * A field of the user input {@link Form form}.\n *\n * A component {@link FieldShare shares} field (e.g. using {@link SharedField @SharedField} decorator) to make it\n * accessible by component itself and nested ones. E.g. to add it to {@link Form form} or to manipulate its value.\n *\n * The field instance is not usable until it is bound to its sharer component. The latter is done automatically when\n * the field is shared by {@link FieldShare}.\n *\n * @typeParam TValue - Field value type.\n * @typeParam TSharer - Field sharer component type.\n */\nexport class Field<TValue, TSharer extends object = any> extends FormUnit<TValue, Field.Body<TValue>, TSharer> {\n\n  /**\n   * Creates a form field by the given field control factory.\n   *\n   * @param factory - Field control factory.\n   *\n   * @returns New field instance.\n   */\n  static by<TValue, TSharer extends object = any>(\n      factory: InControl.Factory<InControl<TValue>>,\n  ): Field<TValue, TSharer> {\n    return new this(this.providerBy(factory));\n  }\n\n  /**\n   * Creates a form field controls provider by the given control factory.\n   *\n   * @param factory - Field control factory.\n   *\n   * @returns New form field controls provider.\n   */\n  static providerBy<TValue, TSharer extends object = any>(\n      factory: InControl.Factory<InControl<TValue>>,\n  ): Field.Provider<TValue, TSharer> {\n    return builder => ({\n      control: builder.control.build(factory),\n    });\n  }\n\n  /**\n   * Constructs form field.\n   *\n   * @param controls - Either a field controls instance, or its provider.\n   */\n  constructor(controls: Field.Controls<TValue> | Field.Provider<TValue, TSharer>) {\n    super(Field$provider(() => this, valueRecipe(controls)));\n  }\n\n  toString(): string {\n    return 'Field';\n  }\n\n}\n\nexport namespace Field {\n\n  /**\n   * A value type of the given form field.\n   *\n   * @typeParam TField - Field type.\n   */\n  export type ValueType<TField extends Field<any>> = FormUnit.ValueType<TField>;\n\n  /**\n   * Form field controls.\n   *\n   * @typeParam TValue - Input value type.\n   */\n  export interface Controls<TValue> extends FormUnit.Controls<TValue> {\n\n    /**\n     * Field input control.\n     */\n    readonly control: InControl<TValue>;\n\n  }\n\n  /**\n   * Form field body containing its input control.\n   *\n   * @typeParam TValue - Input value type.\n   */\n  export interface Body<TValue, TSharer extends object = any> extends FormUnit.Controls<TValue> {\n\n    /**\n     * A field the input control belongs to.\n     */\n    readonly field: Field<TValue, TSharer>;\n\n    /**\n     * Field input control.\n     */\n    readonly control: InControl<TValue>;\n\n  }\n\n  /**\n   * Form field builder.\n   *\n   * @typeParam TValue - Field value type.\n   * @typeParam TSharer - Field sharer component type.\n   */\n  export interface Builder<TValue, TSharer extends object> {\n\n    /**\n     * Sharer component context.\n     */\n    readonly sharer: ComponentContext<TSharer>;\n\n    /**\n     * Target field.\n     */\n    readonly field: Field<TValue, TSharer>;\n\n    /**\n     * Field input control builder.\n     */\n    readonly control: InBuilder<InControl<TValue>, TValue>;\n\n  }\n\n  /**\n   * Form field controls provider signature.\n   *\n   * @typeParam TValue - Field value type.\n   * @typeParam TSharer - Field sharer component type.\n   */\n  export type Provider<TValue, TSharer extends object = any> =\n  /**\n   * @param builder - Field builder.\n   *\n   * @returns Either field controls instance, or an `AfterEvent` keeper reporting one.\n   */\n      (\n          this: void,\n          builder: Builder<TValue, TSharer>,\n      ) => Controls<TValue> | AfterEvent<[Controls<TValue>?]>;\n\n}\n\nfunction Field$provider<TValue, TSharer extends object>(\n    field: () => Field<TValue, TSharer>,\n    provider: Field.Provider<TValue>,\n): Shareable.Provider<Field.Body<TValue> | undefined, TSharer> {\n  return sharer => sharer.get(FormPreset).rules.do(\n      digAfter_(preset => {\n\n        const builder: Field.Builder<TValue, TSharer> = {\n          sharer,\n          field: field(),\n          control: new InBuilder<InControl<TValue>, TValue>(),\n        };\n\n        preset.setupField(builder);\n\n        return afterValue(provider(builder));\n      }),\n      deduplicateAfter_(Field$isDuplicateControls, ([controls]) => controls),\n      mapAfter(controls => controls && { field: field(), control: controls.control }),\n  );\n}\n\nfunction Field$isDuplicateControls<TValue>(\n    prior?: Field.Controls<TValue>,\n    next?: Field.Controls<TValue>,\n): boolean {\n  if (prior?.control !== next?.control) {\n    prior?.control.supply.off();\n    return false;\n  }\n  return true;\n}\n","import { ContextKey__symbol } from '@proc7ts/context-values';\nimport { Class } from '@proc7ts/primitives';\nimport { Share, Share__symbol } from '../shares';\nimport { Field } from './field';\n\nconst FieldShare$map = (/*#__PURE__*/ new WeakMap<Class, FieldShare<any>>());\n\n/**\n * A kind of component share containing a {@link Field form field}.\n *\n * This class may be inherited to represent a specific type of forms. E.g. to distinguish multiple fields defined\n * within the same component.\n *\n * @typeParam TValue - Field value type.\n */\nexport class FieldShare<TValue = any> extends Share<Field<TValue>> {\n\n  /**\n   * Default field share instance.\n   */\n  static get [Share__symbol](): FieldShare {\n\n    let instance = FieldShare$map.get(this);\n\n    if (!instance) {\n      instance = new this('field');\n      FieldShare$map.set(this, instance);\n    }\n\n    return instance;\n  }\n\n  /**\n   * A key of component context value containing default field instance.\n   */\n  static get [ContextKey__symbol](): Share.Key<Field<any>> {\n    return this[Share__symbol][ContextKey__symbol];\n  }\n\n}\n","import { ContextKey__symbol } from '@proc7ts/context-values';\nimport { Class } from '@proc7ts/primitives';\nimport { Share, Share__symbol } from '../shares';\nimport { Form } from './form';\n\nconst FormShare$map = (/*#__PURE__*/ new WeakMap<Class, FormShare<any, any>>());\n\n/**\n * A kind of component share containing a user input form.\n *\n * This class may be inherited to represent a specific type of forms. E.g. to support multiple forms within the same\n * component tree.\n *\n * @typeParam TModel - A model type of the form.\n * @typeParam TElt - A type of HTML form element.\n */\nexport class FormShare<TModel = any, TElt extends HTMLElement = HTMLElement> extends Share<Form<TModel, TElt>> {\n\n  /**\n   * Default form share instance.\n   */\n  static get [Share__symbol](): FormShare<any, any> {\n\n    let instance = FormShare$map.get(this);\n\n    if (!instance) {\n      instance = new this('form');\n      FormShare$map.set(this, instance);\n    }\n\n    return instance;\n  }\n\n  /**\n   * A key of component context value containing default form instance.\n   */\n  static get [ContextKey__symbol](): Share.Key<Form> {\n    return this[Share__symbol][ContextKey__symbol];\n  }\n\n}\n","import { InBuilder, InControl } from '@frontmeans/input-aspects';\nimport { AfterEvent, afterThe, afterValue, digAfter } from '@proc7ts/fun-events';\nimport { valueRecipe } from '@proc7ts/primitives';\nimport { ComponentContext } from '@wesib/wesib';\nimport { shareLocator, ShareLocator } from '../shares';\nimport { Field } from './field';\nimport { FieldShare } from './field.share';\nimport { Form } from './form';\nimport { FormUnit } from './form-unit';\nimport { FormShare } from './form.share';\n\n/**\n * Creates a field adjacent to some form unit.\n *\n * Suitable e.g. for buttons or error indicators.\n *\n * The controls of adjacent field are based on the ones of the unit it is adjacent to.\n *\n * @typeParam TValue - Adjacent field value type.\n * @typeParam TAdjacentTo - A type of form unit the field is adjacent to.\n * @typeParam TAdjusted - A type of controls to adjust. I.e. the ones of the form unit the field is adjacent to.\n * @typeParam TSharer - Adjacent field sharer component type.\n */\nexport function adjacentField<\n    TValue,\n    TAdjacentTo extends FormUnit<unknown, TAdjusted>,\n    TAdjusted extends FormUnit.Controls<unknown> = FormUnit.ControlsType<TAdjacentTo>,\n    TSharer extends object = FormUnit.SharerType<TAdjacentTo>,\n    >(\n    controls: Field.Controls<TValue> | AdjacentField.Provider<TValue, TAdjacentTo, TAdjusted, TSharer>,\n    adjacentTo: ShareLocator.Mandatory<TAdjacentTo>,\n): Field<TValue, TSharer> {\n  return new Field(AdjacentField$provider(\n      valueRecipe(controls),\n      shareLocator(adjacentTo, { local: 'too' }),\n  ));\n}\n\n/**\n * Creates a field adjacent to another one.\n *\n * @typeParam TValue - Adjacent field value type.\n * @typeParam TSharer - Adjacent field sharer component type.\n * @param controls - Either a field controls instance, or its provider.\n * @param adjacentTo - A locator of the field share the created field is adjacent to. Includes local shares by\n * default. Defaults to {@link FieldShare}.\n */\nexport function adjacentToField<TValue, TSharer extends object = any>(\n    controls:\n        | Field.Controls<TValue>\n        | AdjacentField.Provider<TValue, Field<unknown>, Field.Controls<unknown>, TSharer>,\n    adjacentTo: ShareLocator.Mandatory<Field<unknown>> = FieldShare,\n): Field<TValue, TSharer> {\n  return adjacentField(controls, adjacentTo);\n}\n\n/**\n * Creates a field adjacent to form.\n *\n * @typeParam TValue - Adjacent field value type.\n * @typeParam TSharer - Adjacent field sharer component type.\n * @param controls - Either a field controls instance, or its provider.\n * @param adjacentTo - A locator of the form share the created field is adjacent to. Includes local shares by default.\n * Defaults to {@link FormShare}.\n */\nexport function adjacentToForm<TValue, TSharer extends object = any>(\n    controls:\n        | Field.Controls<TValue>\n        | AdjacentField.Provider<TValue, Form<unknown>, Form.Body<unknown>, TSharer>,\n    adjacentTo: ShareLocator.Mandatory<Form<unknown>> = FormShare,\n): Field<TValue, TSharer> {\n  return adjacentField(controls, adjacentTo);\n}\n\nexport namespace AdjacentField {\n\n  /**\n   * Adjacent field builder.\n   *\n   * @typeParam TValue - Adjacent field value type.\n   * @typeParam TAdjacentTo - A type of form unit the field is adjacent to.\n   * @typeParam TAdjusted - A type of controls to adjust. I.e. the ones of the form unit the field is adjacent to.\n   * @typeParam TSharer - Adjacent field sharer component type.\n   */\n  export interface Builder<\n      TValue,\n      TAdjacentTo extends FormUnit<unknown, TAdjusted>,\n      TAdjusted extends FormUnit.Controls<unknown> = FormUnit.ControlsType<TAdjacentTo>,\n      TSharer extends object = any,\n      > extends Field.Builder<TValue, TSharer> {\n\n    /**\n     * Sharer component context.\n     */\n    readonly sharer: ComponentContext<TSharer>;\n\n    /**\n     * Target field.\n     */\n    readonly field: Field<TValue, TSharer>;\n\n    /**\n     * Field input control builder.\n     */\n    readonly control: InBuilder<InControl<TValue>, TValue>;\n\n    /**\n     * Form unit the field is adjacent to.\n     */\n    readonly adjacentTo: TAdjacentTo;\n\n    /**\n     * Adjusted form unit control.\n     */\n    readonly adjusted: TAdjusted;\n\n  }\n\n  /**\n   * Adjacent field controls provider signature.\n   *\n   * @typeParam TValue - Adjacent field value type.\n   * @typeParam TAdjacentTo - A type of form unit the field is adjacent to.\n   * @typeParam TAdjusted - A type of controls to adjust. I.e. the ones of the form unit the field is adjacent to.\n   * @typeParam TSharer - Adjacent field sharer component type.\n   */\n  export type Provider<\n      TValue,\n      TAdjacentTo extends FormUnit<unknown, TAdjusted>,\n      TAdjusted extends FormUnit.Controls<unknown> = FormUnit.ControlsType<TAdjacentTo>,\n      TSharer extends object = any,\n      > =\n  /**\n   * @param builder - Adjacent field builder.\n   *\n   * @returns Either field controls instance, or an `AfterEvent` keeper reporting one.\n   */\n      (\n          this: void,\n          builder: Builder<TValue, TAdjacentTo, TAdjusted, TSharer>,\n      ) => Field.Controls<TValue> | AfterEvent<[Field.Controls<TValue>?]>;\n\n}\n\nfunction AdjacentField$provider<\n    TValue,\n    TAdjacentTo extends FormUnit<unknown, TAdjusted>,\n    TAdjusted extends FormUnit.Controls<unknown> = FormUnit.ControlsType<TAdjacentTo>,\n    TSharer extends object = any>(\n    provider: AdjacentField.Provider<TValue, TAdjacentTo, TAdjusted, TSharer>,\n    adjacentLocator: ShareLocator.Fn<TAdjacentTo>,\n): Field.Provider<TValue, TSharer> {\n  return builder => adjacentLocator(builder.sharer).do(\n      digAfter((adjacentTo?: TAdjacentTo, _sharer?): AfterEvent<[Field.Controls<TValue>?]> => adjacentTo\n          ? adjacentTo.read.do(\n              digAfter((adjusted?: TAdjusted): AfterEvent<[Field.Controls<TValue>?]> => adjusted\n                  ? afterValue(provider({\n                    ...builder,\n                    adjacentTo,\n                    adjusted,\n                  }))\n                  : afterThe()),\n          )\n          : afterThe()),\n  );\n}\n","/**\n * @internal\n */\nexport function Field$name(key: string | symbol, name: string | undefined): string | null {\n  if (name === '') {\n    return null;\n  }\n  if (name) {\n    return name;\n  }\n  return Field$nameByKey(key);\n}\n\n/**\n * @internal\n */\nexport function Field$nameByKey(key: string | symbol): string | null {\n  return typeof key === 'string' ? key : null;\n}\n","import { InGroup } from '@frontmeans/input-aspects';\nimport { afterAll, consumeEvents, digAfter_ } from '@proc7ts/fun-events';\nimport { asis, Class, valuesProvider } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { ComponentClass } from '@wesib/wesib';\nimport { shareLocator, ShareLocator } from '../shares';\nimport { Field } from './field';\nimport { Field$nameByKey } from './field.impl';\nimport { Form } from './form';\nimport { FormUnit } from './form-unit';\nimport { FormShare } from './form.share';\nimport { SharedField } from './shared-field.decorator';\nimport { SharedFormUnit } from './shared-form-unit.decorator';\nimport { SharedForm } from './shared-form.decorator';\n\n/**\n * Builds a {@link SharedForm shared form} definition builder that adds nested form to enclosing one.\n *\n * @typeParam TForm - Nested form type.\n * @typeParam TModel - Nested form model type.\n * @typeParam TElt - A type of nested HTML form element.\n * @typeParam TClass - A type of decorated component class.\n * @param def - Nested form naming definition.\n *\n * @returns Shared form definition builder.\n */\nexport function FormName<\n    TForm extends Form<TModel, TElt>,\n    TModel = Form.ModelType<TForm>,\n    TElt extends HTMLElement = Form.ElementType<TForm>,\n    TClass extends ComponentClass = Class>(\n    def?: FieldNameDef,\n): SharedForm.Definer<TForm, TModel, TElt, TClass> {\n  return FormUnitName<TForm, TModel, Form.Body<TModel, TElt>, TClass>(def);\n}\n\n/**\n * Builds a {@link SharedField shared form field} definition builder that adds the field to enclosing form.\n *\n * @typeParam TField - Field type.\n * @typeParam TValue - Field value type.\n * @typeParam TClass - A type of decorated component class.\n * @param def - Field naming definition.\n *\n * @returns Shared field definition builder.\n */\nexport function FieldName<\n    TField extends Field<TValue>,\n    TValue = Field.ValueType<TField>,\n    TClass extends ComponentClass = Class>(\n    def: FieldNameDef = {},\n): SharedField.Definer<TField, TValue, TClass> {\n  return FormUnitName<TField, TValue, Field.Controls<TValue>, TClass>(def);\n}\n\nfunction FormUnitName<\n    TUnit extends FormUnit<TValue, TControls, any>,\n    TValue,\n    TControls extends FormUnit.Controls<TValue>,\n    TClass extends ComponentClass = Class>(\n    def: FieldNameDef = {},\n): SharedFormUnit.Definer<TUnit, TValue, TControls, TClass> {\n  return ({\n    key,\n    share,\n    locateForm: defaultForm,\n    name: defaultName,\n  }) => {\n\n    const { name = defaultName } = def;\n    let fieldName: string;\n\n    if (name) {\n      fieldName = name;\n    } else if (name != null) {\n      return; // Empty field name. Do not ad it to form.\n    } else {\n\n      const autoName = Field$nameByKey(key);\n\n      if (!autoName) {\n        return;\n      }\n\n      fieldName = autoName;\n    }\n\n    const locateForm = shareLocator(def.form || defaultForm, { share: FormShare });\n\n    return {\n      componentDef: {\n        setup(setup) {\n          setup.whenComponent(context => {\n            afterAll({\n              unit: context.get(share).do(\n                  digAfter_(asis, valuesProvider<[TControls?]>()),\n              ),\n              form: locateForm(context).do(\n                  digAfter_((form?, _sharer?) => form, valuesProvider<[FormUnit.Controls<any>?]>()),\n              ),\n            }).do(\n                consumeEvents(({ unit: [field], form: [form] }): Supply | undefined => {\n                  if (!form || !field) {\n                    return;\n                  }\n\n                  const group = form.control.aspect(InGroup);\n\n                  if (!group) {\n                    return;\n                  }\n\n                  return group.controls.set(fieldName, field.control);\n                }),\n            );\n          });\n        },\n      },\n    };\n  };\n}\n\n/**\n * Form field naming definition.\n */\nexport interface FieldNameDef {\n\n  /**\n   * A locator of form unit to add the field to.\n   *\n   * Either {@link SharedFieldDef.form predefined}, or {@link FormShare default} form share is used when omitted.\n   */\n  readonly form?: ShareLocator<FormUnit<any>>;\n\n  /**\n   * Field name.\n   *\n   * The shared field will be added to the input control group (`InGroup`) within the {@link form target form},\n   * unless the name is empty string.\n   *\n   * Either {@link SharedFieldDef.name predefined}, or property name is used when omitted.\n   */\n  readonly name?: string;\n\n}\n","import {\n  InAspect,\n  InAspect__symbol,\n  InBuilder,\n  InControl,\n  InConverter,\n  inconvertibleInAspect,\n  inFormElement,\n  InFormElement,\n  nullInAspect,\n} from '@frontmeans/input-aspects';\nimport { AfterEvent, afterValue, deduplicateAfter_, digAfter_, mapAfter } from '@proc7ts/fun-events';\nimport { lazyValue, valueRecipe } from '@proc7ts/primitives';\nimport { ComponentContext } from '@wesib/wesib';\nimport { Shareable } from '../shares';\nimport { FormPreset } from './form-preset';\nimport { FormUnit } from './form-unit';\n\nconst Form__aspect: Form$Aspect = {\n\n  applyTo<TValue>(_control: InControl<TValue>): Form$Applied<TValue> {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return nullInAspect();\n  },\n\n};\n\n/**\n * User input form.\n *\n * A component {@link FormShare shares} form (e.g. using {@link SharedForm @SharedForm} decorator) to make its\n * accessible by component itself and nested ones. E.g. to add {@link Field fields} to it or submit it.\n *\n * A form may be nested within another one, as it implements a {@link Field} interface.\n *\n * The form instance is not usable until it is bound to its sharer component. The latter is done automatically when the\n * form is shared by {@link FormShare}.\n *\n * @typeParam TModel - A model type of the form, i.e. a type of its control value.\n * @typeParam TElt - A type of HTML form element.\n * @typeParam TSharer - Form sharer component type.\n */\nexport class Form<TModel = any, TElt extends HTMLElement = HTMLElement, TSharer extends object = any>\n    extends FormUnit<TModel, Form.Body<TModel, TElt>, TSharer> {\n\n  /**\n   * Builds a user input form for the given form control and HTML element.\n   *\n   * @param control - Submitted control. Typically a container one.\n   * @param element - HTML element to create control for.\n   * @param options - Form element control options.\n   *\n   * @returns New form instance.\n   */\n  static forElement<TModel, TElt extends HTMLElement>(\n      control: InControl<TModel>,\n      element: TElt,\n      options?: Omit<InFormElement.Options, 'form'>,\n  ): Form.Controls<TModel, TElt> {\n    return {\n      control,\n      element: inFormElement(element, { ...options, form: control }),\n    };\n  }\n\n  /**\n   * Creates a form instance by the given control factories.\n   *\n   * @param factory - Submittable form control factory.\n   * @param elementFactory - Form element control factory or options.\n   *\n   * @returns New form instance.\n   */\n  static by<\n      TModel,\n      TElt extends HTMLElement = HTMLElement,\n      TSharer extends object = any>(\n      factory: InControl.Factory<InControl<TModel>, TModel>,\n      elementFactory: (\n          this: void,\n          options: Parameters<InControl.Factory<InFormElement<TElt>, void>>[0] & { form: InControl<TModel>},\n      ) => InFormElement<TElt>,\n  ): Form<TModel, TElt, TSharer> {\n    return new this(this.providerBy(factory, elementFactory));\n  }\n\n  /**\n   * Creates a form controls provider by the given control factories.\n   *\n   * @param factory - Submittable form control factory.\n   * @param elementFactory - Form element control factory or options.\n   *\n   * @returns New form controls provider.\n   */\n  static providerBy<\n      TModel,\n      TElt extends HTMLElement = HTMLElement,\n      TSharer extends object = any>(\n      factory: InControl.Factory<InControl<TModel>, TModel>,\n      elementFactory: (\n          this: void,\n          options: Parameters<InControl.Factory<InFormElement<TElt>, void>>[0] & { form: InControl<TModel>},\n      ) => InFormElement<TElt>,\n  ): Form.Provider<TModel, TElt, TSharer> {\n    return builder => {\n\n      let control = (): InControl<TModel> => builder.control.build(\n          // Allow recurrent access to `Form` aspect during control setup.\n          opts => (control = lazyValue(() => factory(opts)))(),\n      );\n      let element = (): InFormElement<TElt> => builder.element.build(\n          // Allow recurrent access to `Form` aspect during control setup.\n          opts => (element = lazyValue(() => elementFactory({\n            form: control(),\n            ...opts,\n          })))(),\n      );\n\n      return {\n        get control() {\n          return control();\n        },\n        get element() {\n          return element();\n        },\n      };\n    };\n  }\n\n  /**\n   * An input control aspect representing a form this control belongs to.\n   *\n   * This aspect is available in {@link Form.Body.control submittable form control} and {@link Form.Body.element form\n   * element control}.\n   */\n  static get [InAspect__symbol](): InAspect<Form.Whole | null> {\n    return Form__aspect;\n  }\n\n  /**\n   * Constructs form.\n   *\n   * @param controls - Either form controls instance, or its provider.\n   */\n  constructor(\n      controls: Form.Controls<TModel, TElt> | Form.Provider<TModel, TElt, TSharer>,\n  ) {\n    super(Form$provider(() => this, valueRecipe(controls)));\n  }\n\n  /**\n   * Form element control, if present.\n   *\n   * Unlike {@link control input control} this one is not supposed to be submitted, but rather contains a `<form>`\n   * element issuing a `submit` event.\n   */\n  get element(): InFormElement<TElt> | undefined {\n    return this.body?.element;\n  }\n\n  toString(): string {\n    return 'Form';\n  }\n\n}\n\nfunction Form$provider<TModel, TElt extends HTMLElement, TSharer extends object>(\n    form: () => Form<TModel, TElt, TSharer>,\n    provider: Form.Provider<TModel, TElt, TSharer>,\n): Shareable.Provider<Form.Body<TModel, TElt> | undefined, TSharer> {\n\n  const formAspect: InConverter.Aspect.Factory<any> = control => ({\n    applyAspect<TInstance, TKind extends InAspect.Application.Kind>(\n        _aspect: InAspect<any, any>,\n    ): InAspect.Application.Result<TInstance, any, TKind> | undefined {\n      return inconvertibleInAspect(\n          control,\n          Form,\n          form() as Form.Whole,\n      ) as InAspect.Application.Result<TInstance, any, TKind>;\n    },\n  });\n\n  return sharer => sharer.get(FormPreset).rules.do(\n      digAfter_(preset => {\n\n        const builder: Form.Builder<TModel, TElt, TSharer> = {\n          sharer,\n          form: form(),\n          control: new InBuilder<InControl<TModel>, TModel>().addAspect(Form, formAspect),\n          element: new InBuilder<InFormElement<TElt>, void>().addAspect(Form, formAspect),\n        };\n\n        preset.setupForm(builder);\n\n        return afterValue(provider(builder));\n      }),\n      deduplicateAfter_(Form$isDuplicateControls, ([controls]) => controls),\n      mapAfter(controls => controls && {\n        get form() {\n          return form();\n        },\n        get control() {\n          return controls!.control;\n        },\n        get element() {\n          return controls!.element;\n        },\n      }),\n  );\n}\n\nfunction Form$isDuplicateControls<TModel, TElt extends HTMLElement>(\n    prior: Form.Controls<TModel, TElt> | undefined,\n    next: Form.Controls<TModel, TElt> | undefined,\n): boolean {\n\n  let duplicate = true;\n\n  if (prior?.control !== next?.control) {\n    prior?.control.supply.off();\n    duplicate = false;\n  }\n  if (prior?.element !== next?.element) {\n    prior?.element.supply.off();\n    duplicate = false;\n  }\n\n  return duplicate;\n}\n\nexport namespace Form {\n\n  /**\n   * A whole form instance containing controls.\n   *\n   * @typeParam TModel - A model type of the form, i.e. a type of its control value.\n   * @typeParam TElt - A type of HTML form element.\n   * @typeParam TSharer - Form sharer component type.\n   */\n  export interface Whole<\n      TModel = any,\n      TElt extends HTMLElement = HTMLElement,\n      TSharer extends object = any>\n      extends Form<TModel, TElt, TSharer> {\n\n    /**\n     * Form body.\n     */\n    readonly body: Body<TModel, TElt, TSharer>;\n\n    /**\n     * Submittable form input control.\n     */\n    readonly control: InControl<TModel>;\n\n    /**\n     * Form element control.\n     *\n     * Unlike {@link control input control} this one is not supposed to be submitted, but rather contains a `<form>`\n     * element issuing a `submit` event.\n     */\n    readonly element: InFormElement<any>;\n\n  }\n\n  /**\n   * A model type of the given form.\n   *\n   * @typeParam TForm - Form type.\n   */\n  export type ModelType<TForm extends Form<any, any>> = FormUnit.ValueType<TForm>;\n\n  /**\n   * HTML form element type of the form.\n   *\n   * @typeParam TForm - Form type.\n   */\n  export type ElementType<TForm extends Form<any, any>> = TForm extends Form<any, infer TElt> ? TElt : never;\n\n  /**\n   * Form controls.\n   *\n   * @typeParam TModel - A model type of the form, i.e. a type of its control value.\n   * @typeParam TElt - A type of HTML form element.\n   */\n  export interface Controls<TModel, TElt extends HTMLElement = HTMLElement> extends FormUnit.Controls<TModel> {\n\n    /**\n     * Submittable form input control.\n     */\n    readonly control: InControl<TModel>;\n\n    /**\n     * Form element control.\n     *\n     * Unlike {@link control input control} this one is not supposed to be submitted, but rather contains a `<form>`\n     * element issuing a `submit` event.\n     */\n    readonly element: InFormElement<TElt>;\n\n  }\n\n  /**\n   * Form body containing input controls.\n   *\n   * @typeParam TModel - A model type of the form, i.e. a type of its control value.\n   * @typeParam TElt - A type of HTML form element.\n   * @typeParam TSharer - Form sharer component type.\n   */\n  export interface Body<\n      TModel,\n      TElt extends HTMLElement = HTMLElement,\n      TSharer extends object = any,\n      > extends FormUnit.Controls<TModel> {\n\n    /**\n     * A form the controls belong to.\n     */\n    readonly form: Form<TModel, TElt, TSharer>;\n\n    /**\n     * Submittable form input control.\n     */\n    readonly control: InControl<TModel>;\n\n    /**\n     * Form element control.\n     *\n     * Unlike {@link control input control} this one is not supposed to be submitted, but rather contains a `<form>`\n     * element issuing a `submit` event.\n     */\n    readonly element: InFormElement<TElt>;\n\n  }\n\n  /**\n   * Form builder.\n   *\n   * @typeParam TModel - A model type of the form, i.e. a type of its control value.\n   * @typeParam TElt - A type of HTML form element.\n   */\n  export interface Builder<TModel, TElt extends HTMLElement, TSharer extends object> {\n\n    /**\n     * Sharer component context.\n     */\n    readonly sharer: ComponentContext<TSharer>;\n\n    /**\n     * Target form.\n     */\n    readonly form: Form<TModel, TElt, TSharer>;\n\n    /**\n     * Submittable form control builder.\n     */\n    readonly control: InBuilder<InControl<TModel>, TModel>;\n\n    /**\n     * Form element control builder.\n     *\n     * Unlike {@link control input control} this one is not supposed to be submitted, but rather contains a `<form>`\n     * element issuing a `submit` event.\n     */\n    readonly element: InBuilder<InFormElement<TElt>, void>;\n\n  }\n\n  /**\n   * Form controls provider signature.\n   *\n   * @typeParam TModel - A model type of the form, i.e. a type of its control value.\n   * @typeParam TElt - A type of HTML form element.\n   * @typeParam TSharer - Form sharer component type.\n   */\n  export type Provider<TModel = any, TElt extends HTMLElement = HTMLElement, TSharer extends object = object> =\n  /**\n   * @param builder - Form builder.\n   *\n   * @returns Either form controls instance, or an `AfterEvent` keeper reporting one.\n   */\n      (\n          this: void,\n          builder: Builder<TModel, TElt, TSharer>,\n      ) => Controls<TModel, TElt> | AfterEvent<[Controls<TModel, TElt>?]>;\n\n}\n\n/**\n * Form aspect.\n */\ninterface Form$Aspect extends InAspect<Form | null, 'form'> {\n\n  applyTo<TValue>(control: InControl<TValue>): Form$Applied<TValue>;\n\n}\n\n/**\n * A form aspect applied to control.\n */\ntype Form$Applied<TValue> = InAspect.Applied<TValue, Form.Whole<TValue> | null, Form.Whole<any> | null>;\n\ndeclare module '@frontmeans/input-aspects' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<TInstance, TValue> {\n\n      /**\n       * Form aspect application type.\n       */\n      form(): Form.Whole<TValue> | null;\n\n    }\n\n  }\n\n}\n","import { InControl, InRole } from '@frontmeans/input-aspects';\nimport { arrayOfElements } from '@proc7ts/primitives';\nimport { neverSupply, Supply, SupplyPeer } from '@proc7ts/supply';\n\n/**\n * A scope of form setup applicability.\n *\n * Selects controls to set up:\n *\n * - `false` - to set up nothing,\n * - `true` - to set up every control,\n * - role name or array of role names - to set up only to controls with that roles,\n * - `null`, `undefined`, or empty array - to set up only controls with default role.\n */\nexport type FormScope =\n    | boolean\n    | string\n    | readonly string[]\n    | null\n    | undefined;\n\nexport const FormScope = {\n\n  /**\n   * Creates an input control setup procedure applied to the given scope.\n   *\n   * @typeParam TControl - Input control type.\n   * @typeParam TValue - Input value type.\n   * @param scope - Setup applicability scope.\n   * @param setup - A setup procedure to apply. Accepts target control instance as parameter and returns a setup supply\n   * peer. The setup should be reverted once this peer's supply cut off.\n   * @param defaultRole - A role name to apply by default. `'default'` when omitted.\n   *\n   * @returns A setup procedure accepting target control as parameter and returning a setup supply. The setup is\n   * reverted once this supply cut off.\n   */\n  createSetup<TControl extends InControl<TValue>, TValue = InControl.ValueType<TControl>>(\n      this: void,\n      scope: FormScope,\n      setup: (this: void, control: TControl) => SupplyPeer,\n      defaultRole = 'default',\n  ): (this: void, control: TControl) => Supply {\n    if (scope === false) {\n      return _control => neverSupply();\n    }\n    if (scope === true) {\n      return control => setup(control).supply;\n    }\n\n    let roles = arrayOfElements(scope);\n\n    if (!roles.length) {\n      roles = [defaultRole];\n    }\n\n    if (roles.length === 1) {\n      return control => control.aspect(InRole).when(roles[0], () => setup(control));\n    }\n\n    return control => roles.reduce(\n        (supply, role) => control.aspect(InRole).when(role, () => setup(control)).as(supply),\n        new Supply(),\n    );\n  },\n\n};\n","import { ContextBuilder, ContextBuilder__symbol, ContextRegistry } from '@proc7ts/context-values';\nimport { Class } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { Field } from '../field';\nimport { Form } from '../form';\nimport { FormPreset } from '../form-preset';\n\nconst AbstractFormPreset$map = (/*#__PURE__*/ new WeakMap<typeof AbstractFormPreset, FeatureDef>());\n\n/**\n * Abstract form preset implementation.\n *\n * A class extending it may be used as a feature. E.g. passed to `bootstrapComponents()` function or used as a\n * dependency of another feature.\n *\n * An instance of implementation class may be created to customize its behavior. Such instance implements a\n * `ContextBuilder` interface. Thus is can be passed to context value registration method.\n */\nexport abstract class AbstractFormPreset implements FormPreset.Spec, ContextBuilder {\n\n  /**\n   * Feature definition of the preset.\n   */\n  static get [FeatureDef__symbol](): FeatureDef {\n\n    const found = AbstractFormPreset$map.get(this);\n\n    if (found) {\n      return found;\n    }\n\n    const preset = new (this as unknown as Class<AbstractFormPreset>)();\n    const featureDef: FeatureDef = {\n      setup: setup => {\n        setup.provide(preset);\n      },\n    };\n\n    AbstractFormPreset$map.set(this, featureDef);\n\n    return featureDef;\n  }\n\n  /**\n   * Provides this form preset to the given context.\n   *\n   * @param registry - A context registry to provide a value to.\n   *\n   * @returns A supply instance that removes the added preset once cut off.\n   */\n  [ContextBuilder__symbol](registry: ContextRegistry): Supply {\n    return registry.provide({ a: FormPreset, is: this });\n  }\n\n  /**\n   * Sets up form field controls.\n   *\n   * Does nothing by default.\n   *\n   * @param _builder - Target field builder.\n   */\n  setupField<TValue, TSharer extends object>(\n      _builder: Field.Builder<TValue, TSharer>,\n  ): void {\n    // No field setup\n  }\n\n  /**\n   * Sets up form controls.\n   *\n   * Does nothing by default.\n   *\n   * @param _builder - Target form builder.\n   */\n  setupForm<TModel, TElt extends HTMLElement, TSharer extends object>(\n      _builder: Form.Builder<TModel, TElt, TSharer>,\n  ): void {\n    // No form setup\n  }\n\n}\n","import { InControl } from '@frontmeans/input-aspects';\nimport { Supply, SupplyPeer } from '@proc7ts/supply';\nimport { FormScope } from './form-scope';\n\n/**\n * Scoped form setup configuration.\n *\n * Contains setup options along with the scope they applicable to.\n *\n * May be one of:\n *\n * - `false` - to not apply configuration,\n * - `true` - to apply default configuration to every control,\n * - role name or array of role names - to apply default configuration only to controls with that roles,\n * - `null`, `undefined`, or empty array - to apply default configuration only to controls with default role,\n * - an array containing options as the first element, and role names as the rest of them - to apply these options\n *   only to controls with that roles,\n * - a tuple consisting of options and {@link FormScope scope} specifier - to apply these options to specified scope.\n *\n * @typeParam TOptions - A type of setup options.\n */\nexport type ScopedFormConfig<TOptions> =\n    | TOptions\n    | FormScope\n    | readonly [TOptions, FormScope?]\n    | readonly [TOptions, ...string[]];\n\nexport const ScopedFormConfig = {\n\n  /**\n   * Creates an input control setup procedure that applies the given configuration to appropriate scope.\n   *\n   * @typeParam TOptions - A type of setup options.\n   * @typeParam TControl - Input control type.\n   * @typeParam TValue - Input value type.\n   * @param config - Scoped form setup configuration.\n   * @param createSetup - A function accepting setup options and returning a procedure that sets up the given control\n   * with these options. The setup procedure returns a setup supply peer. The setup should be reverted once this peer's\n   * supply cut off.\n   * @param defaultRole - A role name to apply by default. `'default'` when omitted.\n   *\n   * @returns A setup procedure accepting target control as parameter and returning a setup supply. The setup is\n   * reverted once this supply cut off.\n   */\n  createSetup<\n      TOptions,\n      TControl extends InControl<TValue>,\n      TValue = InControl.ValueType<TControl>,\n      >(\n      config: ScopedFormConfig<TOptions>,\n      createSetup: (this: void, options?: TOptions) => (this: void, control: TControl) => SupplyPeer,\n      defaultRole?: string,\n  ): (this: void, control: TControl) => Supply {\n\n    let scope: FormScope;\n    let options: TOptions | undefined;\n\n    if (Array.isArray(config)) {\n\n      const [first, ...rest] = config;\n\n      if (ScopedFormConfig$isOptions(first)) {\n        scope = rest.length > 1 ? rest : rest[0];\n        options = first;\n      } else {\n        scope = config;\n      }\n    } else if (ScopedFormConfig$isOptions(config)) {\n      options = config as TOptions;\n    } else {\n      scope = config;\n    }\n\n    return FormScope.createSetup<TControl, TValue>(\n        scope,\n        createSetup(options),\n        defaultRole,\n    );\n  },\n\n};\n\nfunction ScopedFormConfig$isOptions<TOptions>(\n    config: TOptions | string | boolean | undefined,\n): config is TOptions {\n  return config != null && typeof config !== 'string' && typeof config !== 'boolean';\n}\n","import { InControl, InCssClasses, inCssError, inCssInfo } from '@frontmeans/input-aspects';\nimport { Supply } from '@proc7ts/supply';\nimport { Field } from '../field';\nimport { Form } from '../form';\nimport { ScopedFormConfig } from '../scoped-form-config';\nimport { AbstractFormPreset } from './abstract-form-preset';\n\n/**\n * Form preset that enables CSS class indication of form and field states.\n *\n * - Enables CSS info classes (`inCssInfo()`) for forms and fields.\n * - Enables error indication (`inCssError()`) for fields.\n */\nexport class FormCssPreset extends AbstractFormPreset {\n\n  /**\n   * @internal\n   */\n  private readonly _info: (control: InControl<any>) => Supply;\n\n  /**\n   * @internal\n   */\n  private readonly _error: (control: InControl<any>) => Supply;\n\n  /**\n   * Constructs customized form CSS preset.\n   *\n   * @param options - Custom form CSS preset options.\n   */\n  constructor(options: FormCssPreset.Options = {}) {\n    super();\n    this._info = ScopedFormConfig.createSetup(\n        options.info,\n        opts => {\n\n          const src = inCssInfo(opts);\n\n          return control => control.aspect(InCssClasses).add(src);\n        },\n    );\n    this._error = ScopedFormConfig.createSetup(\n        options.error,\n        opts => {\n\n          const src = inCssError(opts);\n\n          return control => control.aspect(InCssClasses).add(src);\n        },\n    );\n  }\n\n  setupField<TValue, TSharer extends object>(\n      builder: Field.Builder<TValue, TSharer>,\n  ): void {\n    builder.control.setup(this._info).setup(this._error);\n  }\n\n  setupForm<TModel, TElt extends HTMLElement, TSharer extends object>(\n      builder: Form.Builder<TModel, TElt, TSharer>,\n  ): void {\n    builder.control.setup(this._info);\n    builder.element.setup(\n        InCssClasses,\n        (css, element) => css.add(\n            element.aspect(Form)!.control.aspect(InCssClasses),\n        ),\n    );\n  }\n\n}\n\nexport namespace FormCssPreset {\n\n  /**\n   * Form CSS preset options.\n   */\n  export interface Options {\n\n    /**\n     * CSS info options.\n     *\n     * `false` to disable.\n     */\n    readonly info?: ScopedFormConfig<Parameters<typeof inCssInfo>[0]>;\n\n    /**\n     * CSS error indication options.\n     *\n     * `false` to disable.\n     */\n    readonly error?: ScopedFormConfig<Parameters<typeof inCssError>[0]>;\n\n  }\n\n}\n","import { InControl, InMode, inModeByValidity, InParents } from '@frontmeans/input-aspects';\nimport { consumeEvents } from '@proc7ts/fun-events';\nimport { itsEach } from '@proc7ts/push-iterator';\nimport { Supply } from '@proc7ts/supply';\nimport { Field } from '../field';\nimport { Form } from '../form';\nimport { FormScope } from '../form-scope';\nimport { ScopedFormConfig } from '../scoped-form-config';\nimport { AbstractFormPreset } from './abstract-form-preset';\n\n/**\n * Form preset that enables default form and field mode management.\n *\n * - Makes form mode depend on its validity (`inModeByValidity()`).\n * - Derives form field's mode from form element's one.\n */\nexport class FormModePreset extends AbstractFormPreset {\n\n  /**\n   * @internal\n   */\n  private readonly _byValidity: (control: InControl<any>) => Supply;\n\n  /**\n   * @internal\n   */\n  private readonly _byForm: (control: InControl<any>) => Supply;\n\n  /**\n   * Constructs customized form mode preset.\n   *\n   * @param options - Custom form mode preset options.\n   */\n  constructor(options: FormModePreset.Options = {}) {\n    super();\n    this._byValidity = ScopedFormConfig.createSetup(\n        options.byValidity,\n        opts => {\n\n          const src = inModeByValidity(opts);\n\n          return control => control.aspect(InMode).derive(src);\n        },\n    );\n    this._byForm = FormScope.createSetup(\n        options.byForm,\n        control => control.aspect(InParents).read.do(\n            consumeEvents(parents => {\n\n              const supply = new Supply();\n\n              itsEach(\n                  parents,\n                  ({ parent }) => {\n\n                    const form = parent.aspect(Form);\n\n                    if (form) {\n                      control.aspect(InMode).derive(form.element.aspect(InMode)).as(supply);\n                    }\n                  },\n              );\n\n              return supply;\n            }),\n        ),\n    );\n  }\n\n  setupField<TValue, TSharer extends object>(\n      builder: Field.Builder<TValue, TSharer>,\n  ): void {\n    builder.control.setup(this._byForm);\n  }\n\n  setupForm<TModel, TElt extends HTMLElement, TSharer extends object>(\n      builder: Form.Builder<TModel, TElt, TSharer>,\n  ): void {\n    builder.control.setup(this._byValidity);\n  }\n\n}\n\nexport namespace FormModePreset {\n\n  /**\n   * Form mode preset options.\n   */\n  export interface Options {\n\n    /**\n     * Whether to build a form mode by its validity options.\n     *\n     * `false` to disable.\n     */\n    readonly byValidity?: ScopedFormConfig<Parameters<typeof inModeByValidity>[0]>;\n\n    /**\n     * Whether form field mode should be derived from form element's one.\n     *\n     * `true` by default. `false` to disable.\n     */\n    readonly byForm?: FormScope;\n\n  }\n\n}\n","import { handleDomEvents } from '@frontmeans/dom-events';\nimport { consumeEvents } from '@proc7ts/fun-events';\nimport { Class } from '@proc7ts/primitives';\nimport { ComponentClass, ComponentContext, ComponentProperty, ComponentPropertyDecorator } from '@wesib/wesib';\nimport { shareLocator, ShareLocator } from '../shares';\nimport { Form } from './form';\nimport { FormShare } from './form.share';\n\n/**\n * Creates a decorator for component method to call on input form submit.\n *\n * The decorated method accepts a {@link Form.Body body of the form} about to be submitted, and a submit event as\n * parameters.\n *\n * @typeParam TModel - Submitted model type.\n * @typeParam TElt - A type of HTML form element.\n * @typeParam TClass - A type of decorated component class.\n * @param def - Submit handler definition.\n *\n * @returns New component property decorator.\n */\nexport function OnSubmit<TModel = any, TElt extends HTMLElement = HTMLElement, T extends ComponentClass = Class>(\n    def: OnSubmitDef<TModel, TElt> = {},\n): ComponentPropertyDecorator<(form: Form.Body<TModel, TElt, InstanceType<T>>, event: Event) => void, T> {\n\n  const { form: formRef = FormShare, cancel = true } = def;\n  const locateForm = shareLocator(formRef, { share: FormShare, local: 'too' });\n\n  return ComponentProperty(({ get }) => ({\n    componentDef: {\n      define(defContext) {\n        defContext.whenComponent(context => {\n          context.whenConnected(() => {\n\n            const { component } = context;\n\n            locateForm(context).do(\n                consumeEvents((form?: Form<TModel, TElt>, _sharer?: ComponentContext) => {\n\n                  const controls = form?.body;\n\n                  if (!controls) {\n                    return;\n                  }\n\n                  let onSubmit = controls.element.events.on('submit');\n\n                  if (cancel) {\n                    onSubmit = onSubmit.do(\n                        handleDomEvents(false),\n                    );\n                  }\n\n                  return onSubmit(\n                      event => get(component).call(component, controls, event),\n                  );\n                }),\n            ).needs(context);\n          });\n        });\n      },\n    },\n  }));\n}\n\n/**\n * Form submit handler definition.\n *\n * Configures {@link OnSubmit @OnSubmit} component property decorator.\n */\nexport interface OnSubmitDef<TModel = any, TElt extends HTMLElement = HTMLElement> {\n\n  /**\n   * A form to submit.\n   *\n   * This is a shared form locator. Includes the decorated component into the search (`{ local: 'too' }`) by default.\n   *\n   * A {@link FieldShare default} form share is used when omitted.\n   */\n  readonly form?: ShareLocator<Form<TModel, TElt>>;\n\n  /**\n   * Whether to cancel default submit handler.\n   *\n   * `true` by default.\n   */\n  readonly cancel?: boolean;\n\n}\n","import { Class } from '@proc7ts/primitives';\nimport { ComponentClass } from '@wesib/wesib';\nimport { Shared, ShareDecorator, ShareLocator, TargetShare } from '../shares';\nimport { FormUnit } from './form-unit';\n\n/**\n * Builds a decorator of component property that shares a form unit.\n *\n * @typeParam TUnit - Unit type.\n * @typeParam TValue - Unit value type.\n * @typeParam TControls - Unit controls type.\n * @typeParam TClass - A type of decorated component class.\n * @param share - Target unit share.\n * @param define - Unit property definition builders.\n *\n * @return Component property decorator.\n */\nexport function SharedFormUnit<\n    TUnit extends FormUnit<TValue, TControls>,\n    TValue = FormUnit.ValueType<TUnit>,\n    TControls extends FormUnit.Controls<TValue> = FormUnit.ControlsType<TUnit>,\n    TClass extends ComponentClass = Class>(\n    share: TargetShare<TUnit>,\n    ...define: SharedFormUnit.Definer<TUnit, TValue, TControls, TClass>[]\n): ShareDecorator<TUnit, TClass> {\n  return Shared(share, ...define);\n}\n\nexport namespace SharedFormUnit {\n\n  /**\n   * A descriptor of the component property that shares a form unit.\n   *\n   * Passed to {@link Definer property definer} by {@link SharedFormUnit @SharedFormUnit} decorator to build a\n   * {@link Definition property definition}.\n   *\n   * @typeParam TValue - Unit value type.\n   * @typeParam TControls - Unit controls type.\n   * @typeParam TClass - A type of decorated component class.\n   */\n  export interface Descriptor<\n      TUnit extends FormUnit<TValue, TControls>,\n      TValue = FormUnit.ValueType<TUnit>,\n      TControls extends FormUnit.Controls<TValue> = FormUnit.ControlsType<TUnit>,\n      TClass extends ComponentClass = Class>\n      extends Shared.Descriptor<TUnit, TClass> {\n\n    /**\n     * Predefined locator function of the form unit to add the share unit to, or `undefined` when unknown.\n     */\n    readonly locateForm?: ShareLocator.Fn<FormUnit<any>>;\n\n    /**\n     * Predefined unit name, or `null`/`undefined` when the unit is not to be added to the {@link locateForm form}.\n     */\n    readonly name?: string | null;\n\n  }\n\n  /**\n   * A signature of definition builder of the component property that shares a form unit.\n   *\n   * This is a function called by {@link SharedFormUnit @SharedFormUnit} decorator to apply additional definitions.\n   *\n   * @typeParam TUnit - Unit type.\n   * @typeParam TValue - Unit value type.\n   * @typeParam TControls - Unit controls type.\n   * @typeParam TClass - A type of decorated component class.\n   */\n  export type Definer<\n      TUnit extends FormUnit<TValue, TControls>,\n      TValue = FormUnit.ValueType<TUnit>,\n      TControls extends FormUnit.Controls<TValue> = FormUnit.ControlsType<TUnit>,\n      TClass extends ComponentClass = Class> =\n  /**\n   * @param descriptor - Decorated component property descriptor.\n   *\n   * @returns Component property definition, or nothing if the property definition is not to be changed.\n   */\n      (\n          this: void,\n          descriptor: Descriptor<TUnit, TValue, TControls, TClass>,\n      ) => Definition<TUnit, TValue, TControls, TClass> | void;\n\n  /**\n   * A definition of component property that shares a form unit.\n   *\n   * @typeParam TUnit - Unit type.\n   * @typeParam TValue - Unit value type.\n   * @typeParam TControls - Unit controls type.\n   * @typeParam TClass - A type of decorated component class.\n   */\n  export type Definition<\n      TUnit extends FormUnit<TValue, TControls>,\n      TValue = FormUnit.ValueType<TUnit>,\n      TControls extends FormUnit.Controls<TValue> = FormUnit.ControlsType<TUnit>,\n      TClass extends ComponentClass = Class> =\n      Shared.Definition<TUnit, TClass>;\n\n}\n","import { Class } from '@proc7ts/primitives';\nimport { ComponentClass } from '@wesib/wesib';\nimport { Share, Shared, ShareDecorator, ShareLocator, shareLocator, ShareRef, TargetShare } from '../shares';\nimport { Field } from './field';\nimport { FieldName } from './field-name.definer';\nimport { Field$name } from './field.impl';\nimport { FieldShare } from './field.share';\nimport { FormUnit } from './form-unit';\nimport { FormShare } from './form.share';\nimport { SharedFormUnit } from './shared-form-unit.decorator';\n\n/**\n * Builds a decorator of component property that {@link FieldShare shares} a form field.\n *\n * @typeParam TField - Field type.\n * @typeParam TValue - Field value type.\n * @typeParam TClass - A type of decorated component class.\n * @param def - Field definition.\n * @param define - Field property definition builders.\n *\n * @return Component property decorator.\n */\nexport function SharedField<\n    TField extends Field<TValue>,\n    TValue = Field.ValueType<TField>,\n    TClass extends ComponentClass = Class>(\n    def?: SharedFieldDef<TField, TValue>,\n    ...define: SharedField.Definer<TField, TValue, TClass>[]\n): ShareDecorator<TField, TClass>;\n\n/**\n * Builds a decorator of component property that {@link FieldShare shares} a form field and adds it to the\n * {@link FormShare default form} under decorated property name.\n *\n * @typeParam TField - Field type.\n * @typeParam TValue - Field value type.\n * @typeParam TClass - A type of decorated component class.\n * @param define - Field property definition builders.\n *\n * @return Component property decorator.\n */\nexport function SharedField<\n    TField extends Field<TValue>,\n    TValue = Field.ValueType<TField>,\n    TClass extends ComponentClass = Class>(\n    ...define: SharedField.Definer<TField, TValue, TClass>[]\n): ShareDecorator<TField, TClass>;\n\nexport function SharedField<\n    TField extends Field<TValue>,\n    TValue,\n    TClass extends ComponentClass>(\n    defOrDefiner:\n        | SharedFieldDef<TField, TValue>\n        | SharedField.Definer<TField, TValue, TClass> = {},\n    ...define: SharedField.Definer<TField, TValue, TClass>[]\n): ShareDecorator<TField, TClass> {\n\n  let def: SharedFieldDef<TField, TValue>;\n  let fieldName: string | undefined;\n  let definers: SharedField.Definer<TField, TValue, TClass>[];\n\n  if (typeof defOrDefiner === 'function') {\n    def = {};\n    definers = [FieldName(), defOrDefiner, ...define];\n  } else {\n    def = defOrDefiner;\n    fieldName = defOrDefiner.name;\n    definers = [FieldName({ name: fieldName }), ...define];\n  }\n\n  const {\n    share = FieldShare as ShareRef<any> as ShareRef<TField>,\n    form: formLocator,\n  } = def;\n  const locateForm = shareLocator(formLocator, { share: FormShare });\n\n  return SharedFormUnit<TField, TValue, Field.Controls<TValue>, TClass>(\n      share,\n      ...definers.map(definer => (\n          descriptor: Shared.Descriptor<TField, TClass>,\n      ) => definer({\n        ...descriptor,\n        locateForm,\n        name: Field$name(descriptor.key, fieldName),\n      })),\n  );\n}\n\n/**\n * Shared form field definition.\n *\n * @typeParam TField - Field type.\n * @typeParam TValue - Field value type.\n */\nexport interface SharedFieldDef<TField extends Field<TValue>, TValue = Field.ValueType<TField>> {\n\n  /**\n   * Target field share.\n   */\n  readonly share?: TargetShare<TField>;\n\n  /**\n   * A locator of form unit to add the shared field to.\n   *\n   * The {@link FormShare default form share} is used when omitted.\n   */\n  readonly form?: ShareLocator<FormUnit<unknown>>;\n\n  /**\n   * Field name.\n   *\n   * The shared field will be added to the input control group (`InGroup`) within the {@link form target form},\n   * unless the name is empty string.\n   *\n   * Equals to decorated property name when omitted.\n   */\n  readonly name?: string;\n\n}\n\nexport namespace SharedField {\n\n  /**\n   * A descriptor of the component property that {@link FieldShare shares} a form field.\n   *\n   * Passed to {@link Definer property definer} by {@link SharedField @SharedField} decorator to build a\n   * {@link Definition property definition}.\n   *\n   * @typeParam TField - Field type.\n   * @typeParam TValue - Field value type.\n   * @typeParam TClass - A type of decorated component class.\n   */\n  export interface Descriptor<\n      TField extends Field<TValue>,\n      TValue = Field.ValueType<TField>,\n      TClass extends ComponentClass = Class>\n      extends SharedFormUnit.Descriptor<TField, TValue, Field.Controls<TValue>, TClass> {\n\n    /**\n     * Target field share instance.\n     */\n    readonly share: Share<TField>;\n\n    /**\n     * Predefined locator function of the form unit to add the shared field to.\n     */\n    readonly locateForm: ShareLocator.Fn<FormUnit<any>>;\n\n    /**\n     * Predefined field name, or `null`/`undefined` when the field is not to be added to the {@link locateForm form}.\n     */\n    readonly name: string | null;\n\n  }\n\n  /**\n   * A signature of definition builder of the component property that {@link FieldShare shares} a form field.\n   *\n   * This is a function called by {@link SharedField @SharedField} decorator to apply additional definitions.\n   *\n   * @typeParam TField - Field type.\n   * @typeParam TValue - Field value type.\n   * @typeParam TClass - A type of decorated component class.\n   */\n  export type Definer<\n      TField extends Field<TValue>,\n      TValue = Field.ValueType<TField>,\n      TClass extends ComponentClass = Class> =\n  /**\n   * @param descriptor - Decorated component property descriptor.\n   *\n   * @returns Component property definition, or nothing if the property definition is not to be changed.\n   */\n      (\n          this: void,\n          descriptor: Descriptor<TField, TValue, TClass>,\n      ) => Definition<TField, TValue, TClass> | void;\n\n  /**\n   * A definition of component property that {@link FieldShare shares} a form field.\n   *\n   * @typeParam TField - Field type.\n   * @typeParam TValue - Field value type.\n   * @typeParam TClass - A type of component class.\n   */\n  export type Definition<\n      TField extends Field<TValue>,\n      TValue = Field.ValueType<TField>,\n      TClass extends ComponentClass = Class> =\n      SharedFormUnit.Definition<TField, TValue, Field.Controls<TValue>, TClass>;\n\n}\n","import { Class } from '@proc7ts/primitives';\nimport { ComponentClass } from '@wesib/wesib';\nimport { Share, ShareDecorator, ShareRef, TargetShare } from '../shares';\nimport { Form } from './form';\nimport { FormShare } from './form.share';\nimport { SharedFormUnit } from './shared-form-unit.decorator';\n\n/**\n * Builds a decorator of component property that {@link FormShare shares} a form.\n *\n * @typeParam TForm - Form type.\n * @typeParam TModel - Form model type.\n * @typeParam TElt - A type of HTML form element.\n * @typeParam TClass - A type of decorated component class.\n * @param def - Form definition.\n * @param define - Form property definition builders.\n *\n * @returns Component property decorator.\n */\nexport function SharedForm<\n    TForm extends Form<TModel, TElt>,\n    TModel = Form.ModelType<TForm>,\n    TElt extends HTMLElement = Form.ElementType<TForm>,\n    TClass extends ComponentClass = Class>(\n    def?: SharedFormDef<TForm, TModel, TElt>,\n    ...define: SharedForm.Definer<TForm, TModel, TElt, TClass>[]\n): ShareDecorator<TForm, TClass>;\n\n/**\n * Builds a decorator of component property that {@link FormShare shares} a form as default share.\n *\n * @typeParam TForm - Form type.\n * @typeParam TModel - Form model type.\n * @typeParam TElt - A type of HTML form element.\n * @typeParam TClass - A type of decorated component class.\n * @param define - Form property definition builders.\n *\n * @returns Component property decorator.\n */\nexport function SharedForm<\n    TForm extends Form<TModel, TElt>,\n    TModel = Form.ModelType<TForm>,\n    TElt extends HTMLElement = Form.ElementType<TForm>,\n    TClass extends ComponentClass = Class>(\n    ...define: SharedForm.Definer<TForm, TModel, TElt, TClass>[]\n): ShareDecorator<TForm, TClass>;\n\nexport function SharedForm<\n    TForm extends Form<TModel, TElt>,\n    TModel = Form.ModelType<TForm>,\n    TElt extends HTMLElement = Form.ElementType<TForm>,\n    TClass extends ComponentClass = Class>(\n    defOrDefiner:\n        | SharedFormDef<TForm, TModel, TElt>\n        | SharedForm.Definer<TForm, TModel, TElt, TClass> = {},\n    ...define: SharedForm.Definer<TForm, TModel, TElt, TClass>[]\n): ShareDecorator<TForm, TClass> {\n  if (typeof defOrDefiner === 'function') {\n    return SharedFormUnit<TForm, TModel, Form.Body<TModel, TElt>, TClass>(\n        FormShare as ShareRef<any> as ShareRef<TForm>,\n        defOrDefiner,\n        ...define,\n    );\n  }\n\n  const { share = FormShare as ShareRef<any> as ShareRef<TForm> } = defOrDefiner;\n\n  return SharedFormUnit<TForm, TModel, Form.Body<TModel, TElt>, TClass>(share, ...define);\n}\n\n/**\n * Shared form definition.\n *\n * @typeParam TForm - Form type.\n * @typeParam TModel - A model type of the form.\n * @typeParam TElt - A type of HTML form element.\n */\nexport interface SharedFormDef<\n    TForm extends Form<TModel, TElt>,\n    TModel = Form.ModelType<TForm>,\n    TElt extends HTMLElement = Form.ElementType<TForm>> {\n\n  /**\n   * Target form share.\n   */\n  readonly share?: TargetShare<TForm>;\n\n}\n\nexport namespace SharedForm {\n\n  /**\n   * A descriptor of the component property that {@link FormShare shares} a form.\n   *\n   * Passed to {@link Definer property definer} by {@link SharedForm @SharedForm} decorator to build a\n   * {@link Definition property definition}.\n   *\n   * @typeParam TForm - Form type.\n   * @typeParam TModel - A model type of the form.\n   * @typeParam TElt - A type of HTML form element.\n   * @typeParam TClass - A type of decorated component class.\n   */\n  export interface Descriptor<\n      TForm extends Form<TModel, TElt>,\n      TModel = Form.ModelType<TForm>,\n      TElt extends HTMLElement = Form.ElementType<TForm>,\n      TClass extends ComponentClass = Class>\n      extends SharedFormUnit.Descriptor<TForm, TModel, Form.Body<TModel, TElt>, TClass> {\n\n    /**\n     * Target form share instance.\n     */\n    readonly share: Share<TForm>;\n\n  }\n\n  /**\n   * A signature of definition builder of the component property that {@link FormShare shares} a form.\n   *\n   * This is a function called by {@link SharedForm @SharedForm} decorator to apply additional definitions.\n   *\n   * @typeParam TForm - Form type.\n   * @typeParam TModel - A model type of the form.\n   * @typeParam TElt - A type of HTML form element.\n   * @typeParam TClass - A type of decorated component class.\n   */\n  export type Definer<\n      TForm extends Form<TModel, TElt>,\n      TModel = Form.ModelType<TForm>,\n      TElt extends HTMLElement = Form.ElementType<TForm>,\n      TClass extends ComponentClass = Class> =\n  /**\n   * @param descriptor - Decorated component property descriptor.\n   *\n   * @returns Component property definition, or nothing if the property definition is not to be changed.\n   */\n      (\n          this: void,\n          descriptor: Descriptor<TForm, TModel, TElt, TClass>,\n      ) => Definition<TForm, TModel, TElt, TClass> | void;\n\n  /**\n   * A definition of component property that {@link FormShare shares} a form.\n   *\n   * @typeParam TForm - Form type.\n   * @typeParam TModel - A model type of the form.\n   * @typeParam TElt - A type of HTML form element.\n   * @typeParam TClass - A type of decorated component class.\n   */\n  export type Definition<\n      TForm extends Form<TModel, TElt>,\n      TModel = Form.ModelType<TForm>,\n      TElt extends HTMLElement = Form.ElementType<TForm>,\n      TClass extends ComponentClass = Class> =\n      SharedFormUnit.Definition<TForm, TModel, Form.Body<TModel, TElt>, TClass>;\n\n}\n"],"names":["FetchAgentKey","ContextUpKey","[object Object]","name","super","this","upKey","createUpKey","slot","insert","seed","do","digAfter","agents","length","afterThe","next","request","fetch","agentIdx","agentRequest","agent","onSupplied","nextRequest","combineFetchAgents","hasFallback","or","defaultFetchAgent","delegated","context","get","undefined","whenOff","reason","contextDestroyed","HttpFetchAgent","HttpFetchAborted","HttpFetch","FnContextKey","byDefault","bootstrapDefault","window","BootstrapWindow","input","init","Request","onEventBy","receiver","responseEmitter","EventEmitter","supply","abortController","AbortController","signal","Supply","abort","off","needs","on","ctx","response","receive","customSignal","DomEventDispatcher","onceOn","aborted","then","send","catch","HierarchyRoot","SingleContextKey","bsContext","root","BootstrapRoot","HierarchyUpdates","issue","trackValue","HierarchyUpdates__key","ComponentContext","updates","hierarchyRoot","BootstrapContext","parent","findParentContext","it","ContextKey__symbol","of","element","immediate","parentElement","ComponentSlot__symbol","HierarchyContext__key","HierarchyContext$","HierarchyContext","ContextValues","up","afterEventBy","parentHierarchy","by","_parent","cuts","rootSupply","parentSupply","updateParent","parentCtx","read","connected","supplyAfter","consumeEvents","newParent","whenConnected","shareAfter","noop","registry","_registry","ContextRegistry","key","isContextSeedUpKey","upper","newValues","spec","provide","enclosing","ElementNodeList","OnEvent__symbol","onUpdate","AfterEvent__symbol","WATCH_DEEP","subtree","elementNodeList","selectorOrType","nodeOf","deep","all","selector","cache","Set","overNodes","overNodeSubtree","overArray","whenDefined","elementDef","html__naming","DefaultNamespaceAliaser","size","selected","refresh","added","itsElements","filterIt","mapIt","node","isPresent","console","error","addEventListener","event","target","has","iterable","overIterator","iteratorOf","ElementNodeList$","observer","ElementObserver","update","firstReceiver","observe","disconnect","clear","returnSelf","valueProvider","mapAfter","track","initialEmitter","first","afterSupplied","translateAfter","list","itsFirst","Symbol","iterator","PushIterator__symbol","accept","sel","querySelectorAll","filterArray","children","item","matches","select","mutations","removed","forEach","mutation","itsEach","removedNodes","removeNode","push","addedNodes","addNode","isElement","add","delete","nodes","flatMapArray","childNodes","AttributesObserver","_bs","Map","_observer","Observer","MutationObserver","_update","self","emitter","_emitter","rcv","eventReceiver","_emitters","reconnect","newValue","oldValue","takeRecords","attributes","attributeOldValue","attributeFilter","keys","attributeName","getAttribute","set","AttributeTracker","ValueTracker","_name","observeSupply","neverSupply","_updates","value","setAttribute","removeAttribute","NodeAttributes","bs","existing","_attrs","created","PropertyTracker","_element","_key","ComponentState","domPropertyPathTo","_ctx","_path","NodeProperties","_context","_props","prop","bind","ElementNode__symbol","ElementNode$","_bind","parentNode","elementNodeOf","mode","optional","adapter","ElementAdapter","selectNodes","ComponentNode","getHashURL","url","URL","hash","substring","origin","setHashURL","hashURL","username","pathname","search","result","PageParam__symbol","PageParam","_page","PageHashURLValueParam$","page","handle","put","PageHashURLValueParam","PageHashURLParam$","create","PageHashURLParam","NavigationAgentKey","document","when","from","to","navigate","agentTo","nextURL","title","nextTitle","data","nextData","String","baseURI","visited","current","ref","defaultNavigationAgent","_when","_from","NavigationAgent","PageHashURLSupport__feature","setup","a","is","pageHashURLAgent","PageHashURLSupport","FeatureDef__symbol","PageParamContext","NavHistory__key","NavHistory","extractNavData","state","_document","_location","location","_history","history","_uid","btoa","Math","random","entry","newEntry","href","_entries","id","schedule","enter","replaceState","_historyState","PageEntry","_lastId","toEntry","tracker","pushState","_enter","fromEntry","e","_forget","prev","leave","popState","_changeHash","uid","pageId","existingEntry","transfer","oldEntry","forget","wesib:navigation:data","_bsContext","proto","_params","_status","param","newHandle","_newContext","_init","entries","transferred","at","values","stay","EnterPageEvent","Event","type","cancelable","LeavePageEvent","StayOnPageEvent","Navigation__key","dispatcher","navHistory","nav","nextEntry","apply","Promise","resolve","dispatch","hashChange","Navigation","onEnter","onLeave","onStay","onAny","delta","go","toURL","withParam","applyParams","with","mergeFunctions","open","replace","targetOrCallback","callback","navTarget","navTargetOf","applyAgent","whenLeave","promise","doNavigate","prepared","leavePage","prepare","navigated","ActivateNavLink","def","pick","Component","defContext","whenComponent","activate","scheduler","ElementRenderScheduler","render","active","defaultActiveNavLinkClass","activeClass","css__naming","assignClass","classList","remove","opts","NavLinkRenderSchedule__symbol","makeActive","lastSupply","activateNavLink","weigh","defaultNavLinkWeight","weight","supplier","translateAfter_","navLinkWeight","navigation","componentNode","digAfter_","afterEach","weights","maxWeight","selectActiveNavLinks","newActive","activeLink","linkURL","ownerDocument","calcNavLinkWeight","pageURL","linkDir","navLinkPath2dir","pageDir","searchParamWeight","navLinkSearchParamsWeight","startsWith","path","endsWith","searchParams","linkParams","pageParams","isIgnoredSearchParam","getAll","includes","Wesib__NS","HandleNavLinks","getHref","defaultNavLinkHref","preventDefault","defaultHandleNavLinks","events","setOfElements","eventType","onceAfter","importNode","beforeOrImport","importContent","importNodeContent","before","doc","elementClone","createElement","tagName","toLowerCase","getAttributeNames","attr","insertBefore","nodeClone","cachingPageLoader","loader","pageUrl","sup","tracked","onLoad","trackSupply","resp","valueOn_","asis","num","requested","supplyOn","PageLoadAbortError","Error","PageLoadRequestsParam","requests","PageLoadRequests","_navigation","_loader","_requests","flatMapIt","_map","fragments","itsEvery","fragment","pageSupply","loadSupply","_add","_transfer","responseReceiver","ok","shareOn","mapOn_","tag","getElementsByTagName","getElementById","onFragment","req","slice","PageLoadAgent","PageLoadURLModifier","PageLoader","httpFetch","modifyURL","parser","DOMParser","credentials","headers","Headers","Accept","fetchRequest","reduce","header","hthvQuote","requestPageFragments","EventNotifier","text","resolveOnOrdered","digOn_","batch","status","parsePageDocument","parseFromString","hthvParse","v","head","base","querySelector","newBase","appendChild","PageLoadParam$","PageLoadParam","PageCacheBuster__key","PageCacheBuster","rev","appRev","urlModifier","newRev","reload","pageScriptsAgent","allScripts","externalScripts","scripts","src","script","pageStyleAgent","newStyles","oldStyles","oldStylesByHref","firstOldStyle","link","newStyle","oldStyle","nextSibling","style","removeChild","pageTitleAgent","textContent","PageLoadSupport__feature","buster","PageLoadSupport","IncludePage","onResponse","contentKey","defaultPageContentKey","feature","detectFragment","lastPageURL","range","createRange","selectNodeContents","contentRoot","newPageURL","deleteContents","createDocumentFragment","insertNode","handleResponse","Share__symbol","isShareRef","ShareRegistry__key","ShareRegistry","nsAlias","share","componentType","elementName","sharers","_sharers","Sharers$addSharer","Sharers$addName","Sharers$new","names","counter","ShareKey","_share","selectValue","Share$impl__symbol","Share$","options","_aliases","arrayOfElements","as","map","alias","local","addSharer","registrar","shareAs","priorityOffset","priority","index","shareValue","withPriority","SharedValue__symbol","SharedValue","hasDetails","SharedValue$Registrar","provider","SharedValue$BoundRegistrar","max","isAfterEvent","applyContextAfter","applyContextTo","SharedValue$bindProvider","newPriority","SharedValue$detailedProvider","SharedValue$bareProvider","Share","consumer","readStatus","deduplicateAfter_","b","Share$consumerStatus","afterAll","Share$sharedValue","ComponentSlot","sharer","deduplicateAfter","i","details","sendEventsTo","settled","shareLocator","locator","defaultSpec","valueFor","localByDefault","shareByDefault","shareRef","Shareable$Internals__symbol","Shareable","body","Shareable$Internals","valueRecipe","afterValue","Contextual__symbol","_source","_get","_notBound","trackValueBy","TypeError","ShareAccessor","desc","component","_set","writable","dynSync","val","isContextual","_syncDyn","_syncVal","_valSupply","Shared","define","shr","ComponentProperty","descriptor","accessorKey","accessor","componentDef","perComponent","ContextBuilder__symbol","createRegistrar","SharedValue$ContextBuilder","onceReady","valuesProvider","DefaultFormPreset","control","DefaultFormPreset$setup","builder","nsAliaser","renderScheduler","addAspect","InNamespaceAliaser","applyAspect","_aspect","knownInAspect","InRenderScheduler","FormPresetKey","FormPreset","specs","combine","ContextSupply","FormPreset__key","FormPreset$rules__symbol","rules","setupField","FormPreset$setupField","setupForm","FormPreset$setupForm","FormPreset$noFieldSetup","_builder","FormPreset$noFormSetup","FormUnit","controls","Field","factory","providerBy","build","field","preset","InBuilder","Field$isDuplicateControls","prior","FieldShare$map","WeakMap","FieldShare","instance","FormShare$map","FormShare","adjacentField","adjacentTo","adjacentLocator","_sharer","adjusted","adjacentToField","adjacentToForm","Field$nameByKey","FieldName","locateForm","defaultForm","defaultName","fieldName","autoName","form","unit","group","aspect","InGroup","FormUnitName","Form__aspect","applyTo","_control","nullInAspect","Form","inFormElement","elementFactory","lazyValue","InAspect__symbol","formAspect","inconvertibleInAspect","Form$isDuplicateControls","Form$provider","duplicate","FormScope","scope","defaultRole","roles","InRole","role","AbstractFormPreset$map","AbstractFormPreset","found","featureDef","ScopedFormConfig","config","createSetup","Array","isArray","rest","ScopedFormConfig$isOptions","FormCssPreset","_info","info","inCssInfo","InCssClasses","_error","inCssError","css","FormModePreset","_byValidity","byValidity","inModeByValidity","InMode","derive","_byForm","byForm","InParents","parents","OnSubmit","formRef","cancel","onSubmit","handleDomEvents","call","SharedFormUnit","SharedField","defOrDefiner","definers","formLocator","definer","SharedForm"],"mappings":"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"}