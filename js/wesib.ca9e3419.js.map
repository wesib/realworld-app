{"version":3,"file":"wesib.ca9e3419.js","sources":["../../node_modules/@wesib/wesib/src/boot/bootstrap-context.key.impl.ts","../../node_modules/@wesib/wesib/src/boot/bootstrap-context.ts","../../node_modules/@wesib/wesib/src/boot/bootstrap-default.ts","../../node_modules/@wesib/wesib/src/component/definition/component-factory.ts","../../node_modules/@wesib/wesib/src/boot/globals/bootstrap-window.ts","../../node_modules/@wesib/wesib/src/boot/globals/default-namespace-aliaser.ts","../../node_modules/@wesib/wesib/src/boot/globals/default-render-scheduler.ts","../../node_modules/@wesib/wesib/src/common/types.impl.ts","../../node_modules/@wesib/wesib/src/common/array-set.ts","../../node_modules/@wesib/wesib/src/common/classes.ts","../../node_modules/@wesib/wesib/src/common/functions.ts","../../node_modules/@wesib/wesib/src/common/is-element.ts","../../node_modules/@wesib/wesib/src/common/meta-accessor.ts","../../node_modules/@wesib/wesib/src/common/promises.ts","../../node_modules/@wesib/wesib/src/feature/feature-def.ts","../../node_modules/@wesib/wesib/src/feature/feature.decorator.ts","../../node_modules/@wesib/wesib/src/feature/feature-context.ts","../../node_modules/@wesib/wesib/src/feature/feature-needs-error.ts","../../node_modules/@wesib/wesib/src/component/component-def.ts","../../node_modules/@wesib/wesib/src/component/component.decorator.ts","../../node_modules/@wesib/wesib/src/component/component-context.key.impl.ts","../../node_modules/@wesib/wesib/src/component/component-event.key.impl.ts","../../node_modules/@wesib/wesib/src/component/content-root.ts","../../node_modules/@wesib/wesib/src/component/state-updater.ts","../../node_modules/@wesib/wesib/src/component/component-context.ts","../../node_modules/@wesib/wesib/src/component/component-event.ts","../../node_modules/@wesib/wesib/src/boot/globals/element-adapter.ts","../../node_modules/@wesib/wesib/src/boot/globals/element-observer.ts","../../node_modules/@wesib/wesib/src/boot/impl/component-factory.symbol.impl.ts","../../node_modules/@wesib/wesib/src/component/definition/custom-elements.ts","../../node_modules/@wesib/wesib/src/component/definition/definition.context.key.impl.ts","../../node_modules/@wesib/wesib/src/component/definition/element-def.ts","../../node_modules/@wesib/wesib/src/component/definition/definition-context.ts","../../node_modules/@wesib/wesib/src/boot/impl/bootstrap-context-registry.impl.ts","../../node_modules/@wesib/wesib/src/boot/impl/component-context-registry.impl.ts","../../node_modules/@wesib/wesib/src/boot/impl/definition-context-registry.impl.ts","../../node_modules/@wesib/wesib/src/boot/impl/post-def-setup.impl.ts","../../node_modules/@wesib/wesib/src/boot/impl/when-component.impl.ts","../../node_modules/@wesib/wesib/src/boot/impl/element-builder.impl.ts","../../node_modules/@wesib/wesib/src/component/component-mount.ts","../../node_modules/@wesib/wesib/src/boot/impl/unloader.impl.ts","../../node_modules/@wesib/wesib/src/feature/loader/component-registry.impl.ts","../../node_modules/@wesib/wesib/src/feature/loader/feature-loader.impl.ts","../../node_modules/@wesib/wesib/src/feature/loader/feature-request.impl.ts","../../node_modules/@wesib/wesib/src/feature/loader/feature-requester.impl.ts","../../node_modules/@wesib/wesib/src/boot/bootstrap/bootstrap-components.ts","../../node_modules/@wesib/wesib/src/feature/feature-ref.ts","../../node_modules/@wesib/wesib/src/feature/dom-properties/dom-property-path.ts","../../node_modules/@wesib/wesib/src/feature/state/component-state.ts","../../node_modules/@wesib/wesib/src/feature/state/state-support.feature.ts","../../node_modules/@wesib/wesib/src/feature/render/element-render.ts","../../node_modules/@wesib/wesib/src/feature/render/render.decorator.ts","../../node_modules/@wesib/generic/src/fetch/fetch-agent-key.impl.ts","../../node_modules/@wesib/generic/src/fetch/http-fetch-agent.ts","../../node_modules/@wesib/generic/src/fetch/http-fetch.impl.ts","../../node_modules/@wesib/generic/src/fetch/http-fetch.ts","../../node_modules/@wesib/generic/src/navigation/navigation.event.ts","../../node_modules/@wesib/generic/src/navigation/navigation.ts","../../node_modules/@wesib/generic/src/navigation/navigation-agent.ts","../../node_modules/@wesib/generic/src/navigation/page-param.ts","../../node_modules/@wesib/generic/src/navigation/page-param-context.ts","../../node_modules/@wesib/generic/src/navigation/nav-history.impl.ts","../../node_modules/@wesib/generic/src/navigation/navigation.impl.ts","../../node_modules/@wesib/generic/src/navigation/navigation-support.feature.ts","../../node_modules/@wesib/generic/src/navigation/page-load/caching-page-loader.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-load-requests.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-load-agent.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-load-url-modifier.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-loader.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-load-param.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-cache-buster.impl.ts","../../node_modules/@wesib/generic/src/util/import-node.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-scripts-agent.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-style-agent.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-title-agent.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-load-support.feature.ts","../../node_modules/@wesib/generic/src/theme/theme.ts","../../node_modules/@wesib/generic/src/theme/theme-factory.ts","../../node_modules/@wesib/generic/src/theme/theme-style.ts","../../node_modules/@wesib/generic/src/tree/element-node.ts","../../node_modules/@wesib/generic/src/tree/element-node-list.ts","../../node_modules/@wesib/generic/src/tree/element-node-list.impl.ts","../../node_modules/@wesib/generic/src/tree/node-attributes.impl.ts","../../node_modules/@wesib/generic/src/tree/node-properties.impl.ts","../../node_modules/@wesib/generic/src/tree/element-node.impl.ts","../../node_modules/@wesib/generic/src/tree/component-tree-support.feature.ts"],"sourcesContent":["import { SingleContextKey } from 'context-values';\nimport { BootstrapContext } from './bootstrap-context';\n\n/**\n * @internal\n */\nexport const BootstrapContext__key = (/*#__PURE__*/ new SingleContextKey<BootstrapContext>('bootstrap-context'));\n","/**\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues } from 'context-values';\nimport { OnEvent } from 'fun-events';\nimport { Class } from '../common';\nimport { ComponentClass, ComponentFactory } from '../component/definition';\nimport { FeatureRef } from '../feature';\nimport { BootstrapContext__key } from './bootstrap-context.key.impl';\n\n/**\n * Components bootstrap context.\n *\n * An instance of this class is passed to [[FeatureDef.Options.init]] method so that the feature can configure itself.\n *\n * Extends `BootstrapValues` interface. The values could be {@link BootstrapSetup.provide pre-configured} in feature\n * definitions.\n *\n * @category Core\n */\nexport abstract class BootstrapContext extends ContextValues {\n\n  /**\n   * A key of bootstrap context value containing the bootstrap context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<BootstrapContext> {\n    return BootstrapContext__key;\n  }\n\n  /**\n   * An `OnEvent` sender of bootstrap readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete.\n   *\n   * If bootstrap is complete already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[BootstrapContext]>;\n\n  /**\n   * Allows to wait for component definition.\n   *\n   * This corresponds to `window.customElements.whenDefined()` method.\n   *\n   * @param componentType  Component class constructor.\n   *\n   * @return A promise that is resolved to component factory when the given `componentType` is registered.\n   *\n   * @throws TypeError  If `componentType` does not contain a component definition.\n   */\n  abstract whenDefined<C extends object>(componentType: ComponentClass<C>): Promise<ComponentFactory<C>>;\n\n  /**\n   * Allows to loads the given `feature`.\n   *\n   * @param feature  The feature to load.\n   *\n   * @returns  Loaded feature reference.\n   */\n  abstract load(feature: Class): FeatureRef;\n\n}\n","/**\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKeyDefault } from 'context-values';\nimport { BootstrapContext } from './bootstrap-context';\n\n/**\n * Provides a default value for bootstrap context key.\n *\n * @category Core\n * @param provide  A function accepting bootstrap context and target key as parameters, and returning either a default\n * value, or `null`/`undefined` if unknown.\n *\n * @returns A provider of default value for bootstrap context value key.\n */\nexport function bootstrapDefault<Value, Key extends ContextKey<any, any, any>>(\n    provide: (this: void, context: BootstrapContext, key: Key) => Value | null | undefined,\n): ContextKeyDefault<Value, Key> {\n  return (context, key) => {\n\n    const bootstrapContext = context.get(BootstrapContext);\n\n    return context === bootstrapContext ? provide(bootstrapContext, key) : bootstrapContext.get(key);\n  };\n}\n","/**\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { Class } from '../../common';\nimport { ComponentMount } from '../component-mount';\nimport { ComponentClass } from './component-class';\nimport { ElementDef } from './element-def';\n\n/**\n * @internal\n */\nconst ComponentFactory__key = (/*#__PURE__*/ new SingleContextKey<ComponentFactory>('component-factory'));\n\n/**\n * A factory of components of particular type.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class ComponentFactory<T extends object = any> {\n\n  /**\n   * A key of definition context value containing a component factory.\n   */\n  static get [ContextKey__symbol](): ContextKey<ComponentFactory> {\n    return ComponentFactory__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element class constructor.\n   *\n   * It is an error accessing this property before the element class is created, e.g. from inside of\n   * `DefinitionListener` or `ComponentDef.define()` function. In these cases you may wish to add a `whenReady()`\n   * callback.\n   */\n  abstract readonly elementType: Class;\n\n  /**\n   * Custom element definition.\n   */\n  abstract readonly elementDef: ElementDef;\n\n  /**\n   * Mounts a component to arbitrary element.\n   *\n   * This method creates a component, but instead of creating a custom element for, it mounts it to the target\n   * `element`.\n   *\n   * It is up to the features to update the target element. They can use a `ComponentContext.mount` property to check\n   * whether the component is mounted or is constructed in standard way.\n   *\n   * The constructed component will be in disconnected state. To update its connection state either update a\n   * `ComponentMount.connected` property, or use a `connectTo()` method.\n   *\n   * @param element  Target element to mount new component to.\n   *\n   * @returns New component mount.\n   *\n   * @throws Error If target element is already bound to some component.\n   */\n  abstract mountTo(element: any): ComponentMount<T>;\n\n  /**\n   * Connects a component to arbitrary element.\n   *\n   * This method does the same as `mountTo()`, but also marks the mounted component as connected.\n   *\n   * @param element  Target element to mount new component to.\n   *\n   * @returns New component mount.\n   *\n   * @throws Error If target element is already bound to some component.\n   */\n  connectTo(element: any): ComponentMount<T> {\n\n    const mount = this.mountTo(element);\n\n    mount.connected = true;\n\n    return mount;\n  }\n\n}\n","/**\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\n\n/**\n * A window the components bootstrap is performed against.\n *\n * @category Core\n */\nexport type BootstrapWindow = Window & typeof globalThis;\n\n/**\n * A key of bootstrap context value containing a window instance the bootstrap is performed against.\n *\n * Target value defaults to current window.\n *\n * @category Core\n */\nexport const BootstrapWindow: SingleContextRef<BootstrapWindow> = (/*#__PURE__*/ new SingleContextKey(\n    'window',\n    {\n      byDefault() {\n        return window;\n      },\n    },\n));\n","/**\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { NamespaceAliaser } from 'namespace-aliaser';\n\n/**\n * Namespace aliaser used by default.\n *\n * Maps namespaces to their unique aliases.\n *\n * @category Core\n */\nexport type DefaultNamespaceAliaser = NamespaceAliaser;\n\n/**\n * A key of bootstrap context value containing the default namespace aliaser.\n *\n * @category Core\n */\nexport const DefaultNamespaceAliaser: SingleContextRef<DefaultNamespaceAliaser> =\n    (/*#__PURE__*/ new SingleContextKey<DefaultNamespaceAliaser>('default-namespace-aliaser'));\n","import { FnContextKey, FnContextRef } from 'context-values';\nimport { newRenderSchedule, RenderScheduler } from 'render-scheduler';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { BootstrapWindow } from './bootstrap-window';\n\n/**\n * Default rendering tasks scheduler.\n *\n * @category Core\n */\nexport type DefaultRenderScheduler = RenderScheduler;\n\n/**\n * A key of bootstrap, definition, or component context value containing [[DefaultRenderScheduler]] instance.\n *\n * Uses the default `RenderScheduler` (`newRenderSchedule()`) for {@link BootstrapWindow bootstrap window}.\n *\n * @category Core\n */\nexport const DefaultRenderScheduler:\n    FnContextRef<Parameters<DefaultRenderScheduler>, ReturnType<DefaultRenderScheduler>> =\n    (/*#__PURE__*/ new FnContextKey<Parameters<DefaultRenderScheduler>, ReturnType<DefaultRenderScheduler>>(\n        'default-render-scheduler',\n        {\n          byDefault: bootstrapDefault(\n              context => (options = {}) => newRenderSchedule({\n                    ...options,\n                    window: options.window || context.get(BootstrapWindow),\n                  },\n              )),\n        },\n    ));\n","/**\n * @internal\n */\nexport function isArray<T>(value: T | T[]): value is T[];\n\n/**\n * @internal\n */\nexport function isArray<T>(value: T | readonly T[]): value is readonly T[];\n\nexport function isArray<T>(value: T | readonly T[]): value is T[] {\n  return Array.isArray(value);\n}\n","/**\n * @module @wesib/wesib\n */\nimport { AIterable } from 'a-iterable';\nimport { isArray } from './types.impl';\n\n/**\n * @category Utility\n */\nexport class ArraySet<T> extends AIterable<T> {\n\n  readonly items: Set<T>;\n\n  constructor(value?: T | readonly T[]) {\n    super();\n    this.items = value == null ? new Set() : isArray(value) ? new Set(value) : new Set([value]);\n  }\n\n  get value(): T | T[] | undefined {\n    switch (this.items.size) {\n    case 0: return;\n    case 1: return this.items[Symbol.iterator]().next().value;\n    default: return [...this.items];\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this.items[Symbol.iterator]();\n  }\n\n  add(...items: T[]): this {\n    items.forEach(item => this.items.add(item));\n    return this;\n  }\n\n  get size(): number {\n    return this.items.size;\n  }\n\n  merge(items: readonly T[] | T | undefined): this {\n    if (items == null) {\n      return this;\n    }\n    if (isArray(items)) {\n      return this.add(...items);\n    }\n    return this.add(items);\n  }\n\n}\n","/**\n * @module @wesib/wesib\n */\n/**\n * Arbitrary class constructor.\n *\n * @category Utility\n * @typeparam T  A type of object.\n */\nexport interface Class<T extends object = any> extends Function {\n  new(...args: any[]): T;\n  prototype: T;\n}\n\n/**\n * Detects super class of the given class optionally satisfying the given criteria.\n *\n * Traverses all class ancestors until reaches the one satisfying the given criteria, or stops when there is no more\n * ancestors.\n *\n * @category Utility\n * @param type  The class constructor to find super class of.\n * @param satisfying  The criteria of super class matching. It is a function accepting a super class constructor\n * as the only parameter and returning `true` if the given super class matches, or `false` otherwise. Always returns\n * `true` by default.\n *\n * @return A super class `satisfying` the given criteria, or `undefined` if there is no such super class, or there is no\n * super class at all (e.g. when `Object` is passed in).\n */\nexport function superClassOf(type: Class, satisfying: (type: Class) => boolean = () => true): Class | undefined {\n\n  const prototype = Object.getPrototypeOf(type.prototype);\n\n  if (prototype == null) {\n    return;\n  }\n\n  const superType = prototype.constructor as Class;\n\n  if (satisfying(superType)) {\n    return superType;\n  }\n\n  return superClassOf(superType, satisfying);\n}\n","/**\n * @module @wesib/wesib\n */\n/**\n * Merges two functions by calling one after another.\n *\n * Optionally merges function call results.\n *\n * @category Utility\n * @typeparam P  Function parameter types as tuple.\n * @typeparam R  A type of function result.\n * @typeparam T  A type if `this` object expected by function.\n * @param first  The first function to call.\n * @param second  The second function to call.\n * @param merge  Optional function call results merger. Accepts two function results as arguments and returns the final\n * result. When omitted the first function call result is ignored and the second function's call result is returned.\n *\n * @return A function that calls both of the given ones and merges their results. If one of the functions is absent,\n * then just returns another one. If both are absent, then returns `undefined`.\n */\nexport function mergeFunctions<P extends any[], R, T>(\n    first: (this: T, ...args: P) => R,\n    second: ((this: T, ...args: P) => R) | undefined,\n    merge: (first: R, second: R) => R,\n): (this: T, ...args: P) => R;\n\nexport function mergeFunctions<P extends any[], R, T>(\n    first: ((this: T, ...args: P) => R) | undefined,\n    second: (this: T, ...args: P) => R,\n    merge?: (first: R, second: R) => R,\n): (this: T, ...args: P) => R;\n\nexport function mergeFunctions<P extends any[], R, T>(\n    first: ((this: T, ...args: P) => R) | undefined,\n    second: ((this: T, ...args: P) => R) | undefined,\n    merge?: (first: R, second: R) => R,\n): ((this: T, ...args: P) => R) | undefined;\n\nexport function mergeFunctions<P extends any[], R, T>(\n    first: ((this: T, ...args: P) => R) | undefined,\n    second: ((this: T, ...args: P) => R) | undefined,\n    merge: (first: R, second: R) => R = (_f, s) => s,\n): ((this: T, ...args: P) => R) | undefined {\n  if (!first) {\n    return second;\n  }\n  if (!second) {\n    return first;\n  }\n  return function(this: T, ...args: P) {\n    return merge(\n        first.apply(this, args),\n        second.apply(this, args),\n    );\n  };\n}\n","/**\n * Checks whether the given DOM node is element.\n *\n * @category Utility\n * @param node  A DOM node to check.\n *\n * @returns `true` is `node` is element, or `false` otherwise.\n */\nexport function isElement(node: Node): node is Element {\n  return node.nodeType === Node.ELEMENT_NODE;\n}\n","/**\n * @module @wesib/wesib\n */\nimport { flatMapIt, mapIt } from 'a-iterable';\nimport { asis } from 'call-thru';\nimport { Class, superClassOf } from './classes';\n\n/**\n * @category Utility\n */\nexport abstract class MetaAccessor<M, S = M> {\n\n  readonly symbol: symbol;\n\n  protected constructor(symbol: symbol) {\n    this.symbol = symbol;\n  }\n\n  own(type: Class): M | undefined {\n    return type.hasOwnProperty(this.symbol) ? (type as any)[this.symbol] : undefined;\n  }\n\n  of(type: Class): M | undefined {\n\n    const ownDef: M | undefined = this.own(type);\n    const superType = superClassOf(type);\n    const superDef = superType && this.of(superType);\n\n    return ownDef ? (superDef ? this.merge([superDef, ownDef]) : ownDef) : superDef;\n  }\n\n  define<C extends Class>(type: C, sources: Iterable<S>): C {\n\n    const prevMeta = this.own(type);\n    const updates = mapIt(sources, source => this.meta(source, type));\n    const newMeta: M = this.merge(prevMeta ? flatMapIt([[prevMeta], updates], asis) : updates);\n\n    Object.defineProperty(\n        type,\n        this.symbol,\n        {\n          configurable: true,\n          value: newMeta,\n        },\n    );\n\n    return type;\n  }\n\n  abstract merge(metas: Iterable<M>): M;\n\n  protected abstract meta(source: S, type: Class): M;\n\n}\n","/**\n * @module @wesib/wesib\n */\n/**\n * @category Utility\n */\nexport class PromiseResolver<T = void> {\n\n  readonly promise: Promise<T>;\n  private _resolve!: (value: T) => void;\n  private _reject!: (error: any) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  resolve(value: T) {\n    this._resolve(value);\n  }\n\n  reject(error: any) {\n    this._reject(error);\n  }\n\n}\n","/**\n * @module @wesib/wesib\n */\nimport { itsReduction } from 'a-iterable';\nimport { BootstrapSetup } from '../boot';\nimport { ArraySet, Class, mergeFunctions, MetaAccessor } from '../common';\nimport { FeatureContext } from './feature-context';\n\n/**\n * A key of a property holding a feature definition within its class constructor.\n *\n * @category Core\n */\nexport const FeatureDef__symbol = (/*#__PURE__*/ Symbol('feature-def'));\n\n/**\n * Feature definition.\n *\n * This can be one of:\n * - feature definition options object,\n * - feature definition holder, or\n * - feature definition factory.\n *\n * @category Core\n */\nexport type FeatureDef =\n    | FeatureDef.Options\n    | FeatureDef.Holder\n    | FeatureDef.Factory;\n\nexport namespace FeatureDef {\n\n  /**\n   * Feature definition options.\n   */\n  export interface Options {\n\n    readonly [FeatureDef__symbol]?: undefined;\n\n    /**\n     * Features this one requires.\n     */\n    readonly needs?: Class | readonly Class[];\n\n    /**\n     * Features this one provides.\n     *\n     * The feature always provides itself.\n     */\n    readonly has?: Class | readonly Class[];\n\n    /**\n     * Sets up bootstrap.\n     *\n     * This method is called before bootstrap context created.\n     *\n     * @param setup  Bootstrap setup.\n     */\n    setup?(setup: BootstrapSetup): void;\n\n    /**\n     * Bootstraps this feature by calling the given bootstrap context constructed.\n     *\n     * @param context  Feature initialization context.\n     */\n    init?(context: FeatureContext): void;\n\n  }\n\n  /**\n   * Feature definition holder.\n   */\n  export interface Holder {\n\n    /**\n     * The feature definition this holder contains.\n     */\n    readonly [FeatureDef__symbol]: FeatureDef;\n\n  }\n\n  /**\n   * Feature definition factory.\n   */\n  export interface Factory {\n\n    /**\n     * Builds feature definition.\n     *\n     * @param featureType  A feature class constructor to build definition for.\n     *\n     * @returns Built feature definition.\n     */\n    [FeatureDef__symbol](featureType: Class): FeatureDef;\n\n  }\n\n}\n\n/**\n * @internal\n */\nclass FeatureMeta extends MetaAccessor<FeatureDef.Options, FeatureDef> {\n\n  constructor() {\n    super(FeatureDef__symbol);\n  }\n\n  merge(defs: Iterable<FeatureDef.Options>): FeatureDef.Options {\n    return itsReduction<FeatureDef.Options, FeatureDef.Options>(\n        defs,\n        (prev, def) => ({\n          needs: new ArraySet(prev.needs).merge(def.needs).value,\n          has: new ArraySet(prev.has).merge(def.has).value,\n          setup: mergeFunctions<[BootstrapSetup], void, Class>(prev.setup, def.setup),\n          init: mergeFunctions<[FeatureContext], void, Class>(prev.init, def.init),\n        }),\n        {},\n    );\n  }\n\n  meta(source: FeatureDef, type: Class): FeatureDef.Options {\n\n    const def = source[FeatureDef__symbol];\n\n    return def == null\n        ? source as FeatureDef.Options\n        : this.meta(\n            typeof def === 'function' ? (source as FeatureDef.Factory)[FeatureDef__symbol](type) : def,\n            type,\n        );\n  }\n\n}\n\n/**\n * @internal\n */\nconst featureMeta = (/*#__PURE__*/ new FeatureMeta());\n\n/**\n * @internal\n */\nconst noFeatureDef: FeatureDef.Factory = {\n  [FeatureDef__symbol]() {\n    return {};\n  },\n};\n\n/**\n * @category Core\n */\nexport const FeatureDef = {\n\n  /**\n   * Extracts feature definition options from its type.\n   *\n   * @param featureType  Target feature class constructor.\n   *\n   * @returns Feature definition options. May be empty when there is no feature definition found in the given\n   * `featureType`.\n   */\n  of(this: void, featureType: Class): FeatureDef.Options {\n    return featureMeta.of(featureType) || {};\n  },\n\n  /**\n   * Builds feature definition options for the given feature class.\n   *\n   * @param featureType  Target feature class constructor.\n   * @param def  A feature definition.\n   *\n   * @returns Feature definition options.\n   */\n  for(this: void, featureType: Class, def: FeatureDef): FeatureDef.Options {\n    return featureMeta.meta(def, featureType);\n  },\n\n  /**\n   * Merges multiple feature definition options.\n   *\n   * @param defs  Feature definition options to merge.\n   *\n   * @returns Merged feature definition options.\n   */\n  merge(this: void, ...defs: readonly FeatureDef.Options[]): FeatureDef.Options {\n    return featureMeta.merge(defs);\n  },\n\n  /**\n   * Merges multiple feature definitions.\n   *\n   * @param defs  Feature definitions to merge.\n   *\n   * @returns Merged feature definition.\n   */\n  all(this: void, ...defs: readonly FeatureDef[]): FeatureDef {\n    return itsReduction<FeatureDef, FeatureDef.Factory>(\n        defs,\n        (prev, def) => ({\n          [FeatureDef__symbol](featureType: Class) {\n            return FeatureDef.merge(\n                FeatureDef.for(featureType, prev),\n                FeatureDef.for(featureType, def),\n            );\n          },\n        }),\n        noFeatureDef,\n    );\n  },\n\n  /**\n   * Defines a feature.\n   *\n   * Either creates new or extends an existing feature definition and stores it under `[FeatureDef__symbol]` key.\n   *\n   * @typeparam T  Feature type.\n   * @param featureType  Feature class constructor.\n   * @param defs  Feature definitions.\n   *\n   * @returns The `type` instance.\n   */\n  define<T extends Class>(this: void, featureType: T, ...defs: readonly FeatureDef[]): T {\n    return featureMeta.define(featureType, defs);\n  },\n\n};\n","/**\n * @module @wesib/wesib\n */\nimport { Class, TypedClassDecorator } from '../common';\nimport { FeatureDef } from './feature-def';\n\n/**\n * Feature class decorator.\n *\n * Decorate a class with this decorator to define it as a feature like this:\n * ```TypeScript\n * @Feature({ needs: [OtherFeature, MyComponent] })\n * class MyFeature {\n *   // ...\n * }\n * ```\n *\n * Such feature can be passed to [[bootstrapComponents]] function or referenced by other features.\n *\n * This is an alternative to direct call to [[FeatureDef.define]] method.\n *\n * @category Core\n * @typeparam T  A type of decorated feature class.\n * @param defs  Feature definitions.\n *\n * @returns A feature class decorator.\n */\nexport function Feature<T extends Class = any>(...defs: FeatureDef[]): TypedClassDecorator<T> {\n  return (type: T) => FeatureDef.define(type, ...defs);\n}\n","/**\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValueSpec, SingleContextKey } from 'context-values';\nimport { OnEvent } from 'fun-events';\nimport { BootstrapContext, BootstrapSetup } from '../boot';\nimport { Class } from '../common';\nimport { ComponentContext } from '../component';\nimport { ComponentClass, ComponentFactory, DefinitionContext, DefinitionSetup } from '../component/definition';\nimport { FeatureRef } from './feature-ref';\n\n/**\n * @internal\n */\nconst FeatureContext_key = new SingleContextKey<FeatureContext>('feature-context');\n\n/**\n * Feature initialization context.\n *\n * @category Core\n */\nexport abstract class FeatureContext extends BootstrapContext implements BootstrapSetup {\n\n  /**\n   * A key of feature context value containing the feature context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<FeatureContext> {\n    return FeatureContext_key;\n  }\n\n  /**\n   * Feature class this context is created for.\n   */\n  abstract readonly feature: Class;\n\n  abstract readonly whenReady: OnEvent<[FeatureContext]>;\n\n  abstract readonly onDefinition: OnEvent<[DefinitionContext]>;\n\n  abstract readonly onComponent: OnEvent<[ComponentContext]>;\n\n  /**\n   * Provides bootstrap context value.\n   *\n   * Note that this happens when bootstrap context already exists. To provide a value before bootstrap context created\n   * a [[BootstrapSetup.provide]] method can be used.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  abstract provide<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<BootstrapContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract perDefinition<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<DefinitionContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract perComponent<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<ComponentContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract setupDefinition<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionSetup]>;\n\n  /**\n   * Defines a component.\n   *\n   * Creates a custom element according to component definition, and registers it with custom elements registry.\n   *\n   * Note that custom element definition will happen only when all features configuration complete.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Component class constructor.\n   *\n   * @return Custom element class constructor registered as custom element.\n   *\n   * @throws TypeError  If `componentType` does not contain a component definition.\n   */\n  abstract define<T extends object>(componentType: ComponentClass<T>): void;\n\n  whenDefined<C extends object>(componentType: ComponentClass<C>): Promise<ComponentFactory<C>> {\n    return this.get(BootstrapContext).whenDefined(componentType);\n  }\n\n  load(feature: Class): FeatureRef {\n    return this.get(BootstrapContext).load(feature);\n  }\n\n}\n","/**\n * @module @wesib/wesib\n */\nimport { Class } from '../common';\n\n/**\n * Feature need.\n *\n * Indicates why one feature needs another one. The reason can be one of:\n *\n * - `needs` when feature {@link FeatureDef.Options.needs depends} on another one, or\n * - `has` when feature {@link FeatureDef.Options.has provides} another one.\n *\n * @category Core\n */\nexport type FeatureNeed = [Class, 'needs' | 'has', Class];\n\n/**\n * An error in feature needs. I.e. circular dependency.\n *\n * @category Core\n */\nexport class FeatureNeedsError extends Error {\n\n  /**\n   * Feature needs causing this error.\n   */\n  readonly needs: readonly FeatureNeed[];\n\n  /**\n   * Constructs feature needs error.\n   *\n   * @param needs  Feature needs causing the error.\n   */\n  constructor(needs: readonly FeatureNeed[]) {\n    super(\n        'Circular feature needs: ' + needs.reduce(\n        (prev, [feature, reason, need]) =>\n            (prev ? prev : feature.name) + ` ${reason} ${need.name}`,\n        '',\n        ),\n    );\n    this.needs = needs;\n  }\n\n}\n","/**\n * @module @wesib/wesib\n */\nimport { itsReduction, mapIt } from 'a-iterable';\nimport { isQualifiedName, QualifiedName } from 'namespace-aliaser';\nimport { Class, mergeFunctions, MetaAccessor } from '../common';\nimport { FeatureDef, FeatureDef__symbol } from '../feature';\nimport { ComponentClass, DefinitionContext, DefinitionSetup, ElementDef } from './definition';\n\n/**\n * A key of a property holding a component definition within its class constructor.\n *\n * @category Core\n */\nexport const ComponentDef__symbol = (/*#__PURE__*/ Symbol('component-def'));\n\n/**\n * Component definition.\n *\n * A custom element class will be created for each registered component in accordance to this definition.\n *\n * This can be one of:\n * - custom element name (possibly qualified),\n * - component definition options,\n * - component definition holder,\n * - component definition factory,\n * - feature definition holder, or\n * - feature definition factory.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport type ComponentDef<T extends object = any> =\n    | QualifiedName\n    | ComponentDef.Options<T>\n    | ComponentDef.Holder<T>\n    | ComponentDef.Factory<T>\n    | FeatureDef.Holder\n    | FeatureDef.Factory;\n\nexport namespace ComponentDef {\n\n  /**\n   * Component definition options.\n   */\n  export interface Options<T extends object = any> {\n\n    readonly [ComponentDef__symbol]?: undefined;\n\n    /**\n     * Custom element name.\n     *\n     * The name may belong to some namespace to avoid naming conflicts. I.e. it can be either a string, or\n     * name/namespace tuple.\n     *\n     * When omitted an anonymous component will be registered. Such component is not bound to custom element, but it\n     * still can be mounted.\n     */\n    readonly name?: QualifiedName;\n\n    /**\n     * Existing element to extend by custom one.\n     */\n    readonly extend?: ElementDef.Extend;\n\n    /**\n     * Additional feature definition options.\n     */\n    readonly feature?: FeatureDef.Options;\n\n    /**\n     * Sets up component definition.\n     *\n     * This method is called before component definition context constructed.\n     *\n     * @param setup  Component definition setup.\n     */\n    setup?(setup: DefinitionSetup<T>): void;\n\n    /**\n     * Defines this component by calling the given component definition context methods.\n     *\n     * This function is called before the custom element is defined.\n     *\n     * @param context  Component definition context.\n     */\n    define?(context: DefinitionContext<T>): void;\n\n  }\n\n  /**\n   * Component definition holder.\n   *\n   * @typeparam T  A type of component.\n   */\n  export interface Holder<T extends object = any> {\n\n    /**\n     * The component definition this holder contains.\n     */\n    readonly [ComponentDef__symbol]: ComponentDef<T>;\n\n  }\n\n  /**\n   * Component definition factory.\n   *\n   * @typeparam T  A type of component.\n   */\n  export interface Factory<T extends object = any> {\n\n    /**\n     * Builds component definition.\n     *\n     * @param componentType  A component class constructor to build definition for.\n     *\n     * @returns Built component definition.\n     */\n    [ComponentDef__symbol](componentType: ComponentClass<T>): ComponentDef<T>;\n\n  }\n\n}\n\n/**\n * @internal\n */\nclass ComponentMeta extends MetaAccessor<ComponentDef.Options, ComponentDef> {\n\n  constructor() {\n    super(ComponentDef__symbol);\n  }\n\n  merge<T extends object>(defs: Iterable<ComponentDef.Options<T>>): ComponentDef.Options<T> {\n    return itsReduction<ComponentDef.Options<T>, ComponentDef.Options<T>>(\n        defs,\n        (prev, def) => ({\n          ...prev,\n          ...def,\n          setup: mergeFunctions(prev.setup, def.setup),\n          define: mergeFunctions(prev.define, def.define),\n          feature: prev.feature\n              ? def.feature ? FeatureDef.merge(prev.feature, def.feature) : prev.feature\n              : def.feature,\n        }),\n        {},\n    );\n  }\n\n  meta<T extends object>(source: ComponentDef<T>, componentType: ComponentClass<T>): ComponentDef.Options<T> {\n\n    const def = (source as any)[ComponentDef__symbol];\n\n    if (def != null) {\n      return this.meta(\n          typeof def === 'function' ? (source as ComponentDef.Factory<T>)[ComponentDef__symbol](componentType) : def,\n          componentType,\n      );\n    }\n    if ((source as any)[FeatureDef__symbol] != null) {\n      return {\n        feature: FeatureDef.for(componentType, source as FeatureDef),\n      };\n    }\n    if (isQualifiedName(source)) {\n      return { name: source };\n    }\n\n    return source as ComponentDef.Options;\n  }\n\n}\n\n/**\n * @internal\n */\nconst componentMeta = (/*#__PURE__*/ new ComponentMeta());\n\n/**\n * @internal\n */\nconst componentDefined = (/*#__PURE__*/ Symbol('component-defined'));\n\n/**\n * @internal\n */\nconst noComponentDef: ComponentDef.Factory = {\n  [ComponentDef__symbol]() {\n    return {};\n  },\n};\n\n/**\n * @category Core\n */\nexport const ComponentDef = {\n\n  /**\n   * Extracts component definition options from its type.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Target component class constructor.\n   *\n   * @returns Component definition options. May be empty if there is not definition attached to component type.\n   */\n  of<T extends object>(this: void, componentType: ComponentClass<T>): ComponentDef.Options<T> {\n    return componentMeta.of(componentType) as ComponentDef.Options<T> || {};\n  },\n\n  /**\n   * Builds component definition options for the given component class.\n   *\n   * @param componentType  Target component class constructor.\n   * @param source  A source of component definition.\n   *\n   * @returns Component definition.\n   */\n  for<T extends object>(\n      this: void,\n      componentType: ComponentClass<T>,\n      source: ComponentDef<T>,\n  ): ComponentDef.Options<T> {\n    return componentMeta.meta(source, componentType);\n  },\n\n  /**\n   * Merges multiple component definition options.\n   *\n   * @typeparam T  A type of component.\n   * @param defs  Component definition options to merge.\n   *\n   * @returns Merged component definition options.\n   */\n  merge<T extends object>(this: void, ...defs: ComponentDef.Options<T>[]): ComponentDef.Options<T> {\n    return componentMeta.merge(defs);\n  },\n\n  /**\n   * Merges multiple component definitions.\n   *\n   * @typeparam T  A type of component.\n   * @param defs  Component definitions to merge.\n   *\n   * @returns Merged component definition.\n   */\n  all<T extends object>(this: void, ...defs: ComponentDef<T>[]): ComponentDef<T> {\n    return itsReduction<ComponentDef<T>, ComponentDef.Factory<T>>(\n        defs,\n        (prev, def) => ({\n          [ComponentDef__symbol](componentType: ComponentClass<T>) {\n            return ComponentDef.merge(\n                ComponentDef.for(componentType, prev),\n                ComponentDef.for(componentType, def),\n            );\n          },\n        }),\n        noComponentDef,\n    );\n  },\n\n  /**\n   * Defines a component.\n   *\n   * Either assigns new or extends an existing component definition and stores it under [[ComponentDef__symbol]] key.\n   *\n   * Note that each component is also a feature able to register itself, so it can be passed directly to\n   * [[bootstrapComponents]] function or added as a requirement of another feature.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Component class constructor.\n   * @param defs  Component definitions.\n   *\n   * @returns The `type` instance.\n   */\n  define<T extends ComponentClass>(\n      this: void,\n      componentType: T,\n      ...defs: ComponentDef<InstanceType<T>>[]\n  ): T {\n\n    const def = componentMeta.merge(mapIt(defs, source => ComponentDef.for(componentType, source)));\n\n    componentMeta.define(componentType, [def]);\n    FeatureDef.define(componentType, ComponentDef.featureDef(def));\n\n    return componentType;\n  },\n\n  /**\n   * Builds feature definition for the given component definition.\n   *\n   * @param def  Component definition options.\n   *\n   * @returns Feature definition that defines the component and applies other definitions from\n   * [[ComponentDef.Options.feature]] property.\n   */\n  featureDef<T extends object>(this: void, def: ComponentDef.Options<T>): FeatureDef {\n    return {\n      [FeatureDef__symbol](featureType: Class) {\n\n        const registrar: FeatureDef = {\n          init(context) {\n            if (context.feature === featureType && !featureType.hasOwnProperty(componentDefined)) {\n              Object.defineProperty(featureType, componentDefined, { value: 1 });\n              context.define(featureType);\n            }\n          },\n        };\n        const { feature } = def;\n\n        return feature ? FeatureDef.merge(feature, registrar) : registrar;\n      },\n    };\n  },\n\n};\n","/**\n * @module @wesib/wesib\n */\nimport { TypedClassDecorator } from '../common';\nimport { ComponentDef } from './component-def';\nimport { ComponentClass } from './definition';\n\n/**\n * Component class decorator.\n *\n * Decorate a class with this decorator to define a component like this:\n * ```TypeScript\n * @Component({ name: 'my-element' })\n * class MyComponent {\n *   // ...\n * }\n * ```\n *\n * Such component can be registered with [[FeatureContext.define]] method or used as a feature, e.g. passed to\n * [[bootstrapComponents]] function, or added to [[FeatureDef.Options.needs]] property of another feature.\n *\n * This is an alternative to direct call to [[ComponentDef.Options.define]] method.\n *\n * @category Core\n * @typeparam T  A type of decorated component class.\n * @param defs  Component definitions.\n *\n * @returns A component class decorator.\n */\nexport function Component<T extends ComponentClass = any>(\n    ...defs: ComponentDef<InstanceType<T>>[]\n): TypedClassDecorator<T> {\n  return (type: T) => ComponentDef.define(type, ...defs);\n}\n","import { SingleContextKey } from 'context-values';\nimport { ComponentContext } from './component-context';\n\n/**\n * @internal\n */\nexport const ComponentContext__key = (/*#__PURE__*/ new SingleContextKey<ComponentContext>('component-context'));\n","import { SingleContextKey } from 'context-values';\nimport { DomEventDispatcher, OnDomEvent } from 'fun-events';\nimport { ComponentContext } from './component-context';\nimport { ComponentEventDispatcher } from './component-event';\n\n/**\n * @internal\n */\nexport const ComponentEventDispatcher__key = (/*#__PURE__*/ new SingleContextKey<ComponentEventDispatcher>(\n    'component-event-dispatcher',\n    {\n      byDefault() {\n        return {\n          dispatch(context: ComponentContext, event: Event): boolean {\n            return context.element.dispatchEvent(event);\n          },\n          on<E extends Event>(context: ComponentContext, type: string): OnDomEvent<E> {\n\n            const dispatcher = new DomEventDispatcher(context.element);\n\n            return dispatcher.on(type);\n          },\n        };\n      },\n    },\n));\n","/**\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { ComponentContext__key } from './component-context.key.impl';\n\n/**\n * Component content root node.\n *\n * @category Core\n */\nexport type ContentRoot = ParentNode;\n\n/**\n * A key of component context value containing a component root element.\n *\n * This is an element itself by default. But can be overridden e.g. by {@link AttachShadow @AttachShadow} decorator.\n *\n * @category Core\n */\nexport const ContentRoot: SingleContextRef<ContentRoot> = (/*#__PURE__*/ new SingleContextKey<ContentRoot>(\n    'content-root',\n    {\n      byDefault(ctx) {\n        return ctx.get(ComponentContext__key).element;\n      },\n    },\n));\n","/**\n * @module @wesib/wesib\n */\nimport { noop, valueProvider } from 'call-thru';\nimport { FnContextKey, FnContextRef } from 'context-values';\nimport { StatePath } from 'fun-events';\n\n/**\n * Component state updater function.\n *\n * @category Core\n */\nexport type StateUpdater =\n/**\n * @typeparam V  Updated value type\n * @param path  Updated state node path.\n * @param newValue  New value.\n * @param oldValue  Replaced value.\n */\n    <V>(this: void, path: StatePath, newValue: V, oldValue: V) => void;\n\n/**\n * A key of component context value containing a component state updates receiver function.\n *\n * Features are calling this function by default when component state changes, e.g. attribute value or DOM property\n * modified.\n *\n * Note that this value is not provided, unless the `StateSupport` feature is enabled.\n *\n * @category Core\n */\nexport const StateUpdater: FnContextRef<Parameters<StateUpdater>> = (/*#__PURE__*/ new FnContextKey(\n    'state-updater',\n    {\n      byDefault: valueProvider(noop),\n    },\n));\n","/**\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues } from 'context-values';\nimport { EventSupply, OnDomEvent, OnEvent, StatePath } from 'fun-events';\nimport { BootstrapContext__key } from '../boot/bootstrap-context.key.impl';\nimport { ComponentContext__key } from './component-context.key.impl';\nimport { ComponentEventDispatcher__key } from './component-event.key.impl';\nimport { ComponentMount } from './component-mount';\nimport { ContentRoot } from './content-root';\nimport { ComponentClass } from './definition';\nimport { StateUpdater } from './state-updater';\n\n/**\n * A key of a custom element and component properties containing a reference to component context.\n *\n * @category Core\n */\nexport const ComponentContext__symbol = (/*#__PURE__*/ Symbol('component-context'));\n\n/**\n * Component context.\n *\n * Passed to component constructor as its only parameter.\n *\n * Extends `ContextValues` interface. The values are provided by corresponding providers registered with\n * [[BootstrapSetup.perComponent]] and [[DefinitionSetup.perComponent]] methods.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class ComponentContext<T extends object = any> extends ContextValues {\n\n  /**\n   * A key of component context value containing the component context instance itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<ComponentContext> {\n    return ComponentContext__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element constructed for the component according to its type.\n   *\n   * E.g. `HTMLElement` instance.\n   */\n  abstract readonly element: any;\n\n  /**\n   * A component instance.\n   *\n   * It is an error accessing this property before the component is created, e.g. from inside of component constructor\n   * or {@link DefinitionContext.whenComponent component instantiation event} receiver. A [[whenReady]] callback could\n   * be utilized to work this around.\n   */\n  abstract readonly component: T;\n\n  /**\n   * Component mount.\n   *\n   * This is defined when component is mounted to arbitrary element by [[ComponentFactory.mountTo]]. Ot is `undefined`\n   * for components created in standard way.\n   */\n  abstract readonly mount: ComponentMount<T> | undefined;\n\n  /**\n   * Whether the custom element is connected.\n   *\n   * This becomes `true` right before [[whenOn]] event is sent, and becomes `false` right before [[whenOff]] event is\n   * sent.\n   */\n  abstract readonly connected: boolean;\n\n  /**\n   * An `OnEvent` sender of custom element connection events.\n   *\n   * The registered receivers are called when custom element is connected, i.e. its `connectedCallback()` method is\n   * called. If component is connected already the receiver is called immediately.\n   *\n   * Sends a connection supply that is cut off once custom element is disconnected.\n   */\n  abstract readonly whenOn: OnEvent<[EventSupply]>;\n\n  /**\n   * An `OnEvent` sender of custom element disconnection events.\n   *\n   * The registered receivers are called when custom element is disconnected, i.e. its `disconnectedCallback()` method\n   * is called. If component is ready but disconnected, the receiver is called immediately.\n   */\n  abstract readonly whenOff: OnEvent<[]>;\n\n  /**\n   * An `OnEvent` sender of component readiness event.\n   *\n   * The component is constructed shortly after custom element. So the component may not exist when requested\n   * e.g. inside component constructor or {@link DefinitionContext.whenComponent component instantiation event}\n   * receiver. The registered receiver will be notified when the component is constructed.\n   *\n   * If the component is constructed already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[this]>;\n\n  /**\n   * An `OnEvent` sender of component destruction reason event.\n   *\n   * The registered receiver is notified when [[destroy]] method is called. If the component is destroyed already\n   * the receiver is notified immediately.\n   */\n  abstract readonly whenDestroyed: OnEvent<[any]>;\n\n  /**\n   * Updates component's state.\n   *\n   * This is a shorthand for invoking a component {@link StateUpdater state updater} .\n   *\n   * Note that state update has no effect unless [[StateSupport]] feature is enabled or [[StateUpdater]] context value\n   * is provided by other means.\n   *\n   * @typeparam V  A type of changed value.\n   * @param key  Changed value key.\n   * @param newValue  New value.\n   * @param oldValue  Previous value.\n   */\n  readonly updateState: StateUpdater = updateComponentState.bind(this);\n\n  /**\n   * Extracts component context from its custom element or from component itself.\n   *\n   * @param element  Custom element instance created for the component or the component itself.\n   *\n   * @return Component context reference stored under [[ComponentContext__symbol]] key.\n   *\n   * @throws TypeError  When the given `element` does not contain component context reference.\n   */\n  static of<T extends object>(element: any): ComponentContext<T> {\n\n    const context = element[ComponentContext__symbol];\n\n    if (!context) {\n      throw TypeError(`No component context found in ${element}`);\n    }\n\n    return context;\n  }\n\n  /**\n   * Component content root.\n   *\n   * This is a shorthand for requesting a {@link ContentRoot content root} from component context.\n   */\n  get contentRoot(): ContentRoot {\n    return this.get(ContentRoot);\n  }\n\n  /**\n   * Returns a `super` property value inherited from custom element parent.\n   *\n   * @param key  Target property key.\n   */\n  abstract elementSuper(key: PropertyKey): any;\n\n  /**\n   * Returns a DOM event producer for the given event type.\n   *\n   * This is a shorthand for invoking a component event producer function available under\n   * `[ComponentEventProducer.key]` key.\n   *\n   * @param type  An event type to listen for.\n   *\n   * @returns A producer of DOM event events of the given type.\n   */\n  on<E extends Event>(type: string): OnDomEvent<E> {\n    return this.get(ComponentEventDispatcher__key).on(this, type);\n  }\n\n  /**\n   * Dispatches an event to component element.\n   *\n   * This is a shorthand for invoking a component {@link ComponentEventDispatcher event dispatcher}.\n   *\n   * @param event  An event to dispatch.\n   */\n  dispatchEvent(event: Event): void {\n    this.get(BootstrapContext__key).get(ComponentEventDispatcher__key).dispatch(this, event);\n  }\n\n  /**\n   * Destroys the component.\n   *\n   * Removes element from the DOM tree. I.e. disconnects custom element first.\n   *\n   * After this method call the component should no longer be used.\n   *\n   * Note that component destruction is virtual. It is up to developer to decide when component is no longer needed.\n   *\n   * @param reason  Optional reason of destruction.\n   */\n  abstract destroy(reason?: any): void;\n\n}\n\n/**\n * @internal\n */\nfunction updateComponentState<V>(this: ComponentContext<any>, key: StatePath, newValue: V, oldValue: V) {\n  this.get(StateUpdater)(key, newValue, oldValue);\n}\n","/**\n * @module @wesib/wesib\n */\nimport { SingleContextRef } from 'context-values';\nimport { OnDomEvent } from 'fun-events';\nimport { ComponentContext } from './component-context';\nimport { ComponentEventDispatcher__key } from './component-event.key.impl';\n\n/**\n * Component event.\n *\n * Events of this type are thrown by various services to inform on component status changes.\n *\n * It is illegal to dispatch such events for elements not bound to components. It is reasonable to dispatch events\n * using [[ComponentEventDispatcher]] available in component context.\n *\n * The following event types supported:\n * - `wesib:component` is dispatched when component is bound to element. I.e. when HTML element is upgraded to custom\n *   one defined by component, or component is mounted to element. The event is dispatched when component is connected\n *   for the first time. I.e. when element is added to the document.\n *   This event bubbles and is not cancelable.\n *\n * @category Core\n * @event ComponentEvent#wesib:component\n */\nexport class ComponentEvent extends Event {\n\n  /**\n   * Constructs component event.\n   *\n   * @param type  Event type.\n   * @param eventInitDict  Event initialization dictionary.\n   */\n  constructor(type: string, eventInitDict?: EventInit) {\n    super(type, eventInitDict);\n  }\n\n  /**\n   * Target component context.\n   */\n  get context(): ComponentContext {\n    return ComponentContext.of(this.target);\n  }\n\n}\n\n/**\n * Component event dispatcher is used to listen for and dispatch component events.\n *\n * It is available in bootstrap context context.\n *\n * By default treats a component element as event target.\n *\n * @category Core\n */\nexport interface ComponentEventDispatcher {\n\n  /**\n   * Dispatches the DOM event for the given component.\n   *\n   * @param context  Target component context.\n   * @param event  An event to dispatch.\n   *\n   * @returns `true` if either event's `cancelable` attribute value is `false` or its `preventDefault()` method was not\n   * invoked, or `false` otherwise.\n   */\n  dispatch(context: ComponentContext, event: Event): boolean;\n\n  /**\n   * Returns an `OnDomEvent` sender of DOM events of the given type.\n   *\n   * @param context  Target component context.\n   * @param type  An event type to listen for.\n   *\n   * @returns A producer of DOM event events of the given type.\n   */\n  on<E extends Event>(context: ComponentContext, type: string): OnDomEvent<E>;\n\n}\n\n/**\n * A key of bootstrap context value containing component event dispatcher.\n *\n * @category Core\n */\nexport const ComponentEventDispatcher: SingleContextRef<ComponentEventDispatcher> =\n    (/*#__PURE__*/ ComponentEventDispatcher__key);\n","/**\n * @module @wesib/wesib\n */\nimport { ContextUpKey, ContextUpRef, ContextValueOpts, ContextValues } from 'context-values';\nimport { AfterEvent, afterThe, EventKeeper } from 'fun-events';\nimport { ComponentContext, ComponentContext__symbol } from '../../component';\n\n/**\n * Element adapter is a function able to convert a raw element to component. E.g. mount a component to it.\n *\n * Features may use it internally. E.g. an `AutoConnectSupport` applies it to each added DOM element.\n *\n * Multiple element adapters can be registered in bootstrap context.\n *\n * @category Core\n */\nexport type ElementAdapter =\n/**\n * @param element  Target raw element to adapt.\n *\n * @returns An adapted component's context, or `undefined` if element can not be adapted.\n */\n    (this: void, element: any) => ComponentContext | undefined;\n\n/**\n * @internal\n */\nclass ElementAdapterKey extends ContextUpKey<ElementAdapter, ElementAdapter> {\n\n  readonly upKey: ContextUpKey.UpKey<ElementAdapter, ElementAdapter>;\n\n  constructor() {\n    super('element-adapter');\n    this.upKey = this.createUpKey(\n        opts => opts.seed.keep.dig((...adapters) => {\n\n          const combined: ElementAdapter = adapters.reduce(\n              (prev, adapter) => element => prev(element) || adapter(element),\n              defaultElementAdapter,\n          );\n\n          const defaultProvider = () => afterThe(defaultElementAdapter);\n\n          return combined !== defaultElementAdapter\n              ? afterThe(combined)\n              : opts.byDefault(defaultProvider) || defaultProvider();\n        }),\n    );\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          ElementAdapter,\n          EventKeeper<ElementAdapter[]> | ElementAdapter,\n          AfterEvent<ElementAdapter[]>>,\n  ): ElementAdapter {\n\n    let delegated: ElementAdapter;\n\n    opts.context.get(\n        this.upKey,\n        'or' in opts ? { or: opts.or != null ? afterThe(opts.or) : opts.or } : undefined,\n    )!(adapter => delegated = adapter);\n\n    return element => delegated(element);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultElementAdapter(element: any): ComponentContext {\n  return element[ComponentContext__symbol];\n}\n\n/**\n * A key of bootstrap context value containing combined [[ElementAdapter]] instance.\n *\n * @category Core\n */\nexport const ElementAdapter: ContextUpRef<ElementAdapter, ElementAdapter> = (/*#__PURE__*/ new ElementAdapterKey());\n","/**\n * @module wesib/wesib\n */\nimport { filterIt, itsEach, overArray } from 'a-iterable';\nimport { FnContextKey } from 'context-values';\nimport { isElement } from '../../common';\nimport { ComponentContext__symbol, ComponentMount } from '../../component';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { ElementAdapter } from './element-adapter';\n\n/**\n * Element mutations observer.\n *\n * It is a `MutationObserver` implementation that:\n * - always observes target's children,\n * - applies {@link ElementAdapter element adapter} to added elements,\n * - tracks mounted components {@link ComponentMount.connected connection state}.\n *\n * A function constructing element observer instance could be obtained from bootstrap context.\n *\n * @category Core\n */\nexport interface ElementObserver extends MutationObserver {\n\n  /**\n   * Configures the observer callback to begin receiving notifications of changes to the DOM that match the given\n   * options.\n   * To stop the MutationObserver (so that none of its callbacks will be triggered any longer), call\n   * [[disconnect]].\n   *\n   * @param target  A DOM node within the DOM tree to watch for changes, and to be the root of a subtree of nodes\n   * to be watched.\n   * @param options  An options that describe what DOM mutations should be reported to the observer's callback.\n   */\n  observe(target: Node, options?: ElementObserverInit): void;\n\n}\n\n/**\n * A key of bootstrap context value containing a function constructing a new [[ElementObserver]] instance.\n *\n * @category Core\n */\nexport const ElementObserver: FnContextKey<[MutationCallback], ElementObserver> = (/*#__PURE__*/ new FnContextKey(\n    'element-observer',\n    {\n      byDefault: bootstrapDefault(bsContext => {\n\n        const adapter = bsContext.get(ElementAdapter);\n        class DefaultElementObserver extends MutationObserver implements ElementObserver {\n\n          constructor(callback: MutationCallback) {\n            super(mutations => {\n              mutations.forEach(mutation => {\n                itsEach(\n                    overArray(mutation.removedNodes),\n                    node => mountOf(node)?.checkConnected(),\n                );\n                itsEach(\n                    filterIt(\n                        overArray(mutation.addedNodes),\n                        isElement,\n                    ),\n                    element => adapter(element)?.mount?.checkConnected(),\n                );\n              });\n              callback(mutations, this);\n            });\n          }\n\n          observe(target: Node, options?: ElementObserverInit): void {\n            super.observe(target, { ...options, childList: true });\n          }\n\n        }\n\n        return callback => new DefaultElementObserver(callback);\n      }),\n    },\n));\n\n/**\n * Element observer initialization options.\n *\n * @category Core\n */\nexport interface ElementObserverInit extends MutationObserverInit {\n\n  /**\n   * Whether mutations to target's children are to be observed.\n   *\n   * Always `true`.\n   */\n  childList?: true;\n\n}\n\n/**\n * @internal\n */\nfunction mountOf(node: any): ComponentMount | undefined {\n  return node[ComponentContext__symbol]?.mount;\n}\n","import { ComponentClass, ComponentFactory } from '../../component/definition';\n\n/**\n * @internal\n */\nexport const ComponentFactory__symbol = (/*#__PURE__*/ Symbol('component-factory'));\n\n/**\n * @internal\n */\nexport function componentFactoryOf<T extends object>(componentType: ComponentClass<T>): ComponentFactory<T> {\n\n  const factory = (componentType as any)[ComponentFactory__symbol];\n\n  if (!factory) {\n    throw new TypeError(`Component is not defined: ${componentType}`);\n  }\n\n  return factory;\n}\n","/**\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues, SingleContextKey } from 'context-values';\nimport { html__naming, isQualifiedName, QualifiedName } from 'namespace-aliaser';\nimport { BootstrapWindow, DefaultNamespaceAliaser } from '../../boot/globals';\nimport { componentFactoryOf } from '../../boot/impl/component-factory.symbol.impl';\nimport { Class, PromiseResolver } from '../../common';\nimport { ComponentClass } from './component-class';\n\n/**\n * @internal\n */\nconst CustomElements__key = (/*#__PURE__*/ new SingleContextKey<CustomElements>(\n    'custom-elements',\n    {\n      byDefault: createCustomElements,\n    },\n));\n\n/**\n * Custom elements registry.\n *\n * This is used to register custom elements.\n *\n * Typically implemented by `window.customElements`.\n *\n * @category Core\n */\nexport abstract class CustomElements {\n\n  /**\n   * A key of bootstrap context value containing a `CustomElements` instance used to register custom\n   * elements.\n   *\n   * Target value defaults to `window.customElements` from the window provided under `[BootstrapWindow.key]`.\n   */\n  static get [ContextKey__symbol](): ContextKey<CustomElements> {\n    return CustomElements__key;\n  }\n\n  /**\n   * Defines custom element.\n   *\n   * @param componentTypeOrName  A component class constructor or custom element name. The latter may belong to\n   * namespace to avoid naming conflicts.\n   * @param elementType  A constructor of custom element to define.\n   */\n  abstract define(componentTypeOrName: ComponentClass | QualifiedName, elementType: Class): void;\n\n  /**\n   * Allows to wait for component definition.\n   *\n   * This corresponds to `window.customElements.whenDefined()` method.\n   *\n   * @param componentTypeOrName  Component class constructor or custom element name possibly belonging to some\n   * namespace.\n   *\n   * @return A promise that is resolved when custom element is registered.\n   *\n   * @throws TypeError If `componentType` does not contain a component definition.\n   */\n  abstract whenDefined(componentTypeOrName: ComponentClass | QualifiedName): Promise<void>;\n\n}\n\n/**\n * @internal\n */\nfunction createCustomElements(values: ContextValues) {\n\n  const customElements: CustomElementRegistry = values.get(BootstrapWindow).customElements;\n  const nsAlias = values.get(DefaultNamespaceAliaser);\n\n  class WindowCustomElements extends CustomElements {\n\n    define(componentTypeOrName: ComponentClass | string, elementType: Class): void {\n      if (isQualifiedName(componentTypeOrName)) {\n        customElements.define(html__naming.name(componentTypeOrName, nsAlias), elementType);\n        return;\n      }\n\n      const factory = componentFactoryOf(componentTypeOrName);\n      const { name, extend } = factory.elementDef;\n\n      if (!name) {\n        componentResolver(componentTypeOrName).resolve(undefined);\n        return; // Anonymous component.\n      }\n      if (extend && extend.name) {\n        customElements.define(\n            html__naming.name(name, nsAlias),\n            elementType,\n            {\n              extends: extend.name,\n            },\n        );\n      } else {\n        customElements.define(html__naming.name(name, nsAlias), elementType);\n      }\n    }\n\n    whenDefined(componentTypeOrName: ComponentClass | string): Promise<void> {\n      if (isQualifiedName(componentTypeOrName)) {\n        return customElements.whenDefined(html__naming.name(componentTypeOrName, nsAlias));\n      }\n\n      const factory = componentFactoryOf(componentTypeOrName);\n      const { name } = factory.elementDef;\n\n      if (!name) {\n        return componentResolver(componentTypeOrName).promise;\n      }\n\n      return customElements.whenDefined(html__naming.name(name, nsAlias));\n    }\n\n  }\n\n  return new WindowCustomElements();\n}\n\n/**\n * @internal\n */\nconst ComponentResolver__symbol = (/*#__PURE__*/ Symbol('component-resolver'));\n\n/**\n * @internal\n */\nfunction componentResolver(componentType: ComponentClass): PromiseResolver<void> {\n  return (componentType as any)[ComponentResolver__symbol]\n      || ((componentType as any)[ComponentResolver__symbol] = new PromiseResolver());\n}\n","import { SingleContextKey } from 'context-values';\nimport { DefinitionContext } from './definition-context';\n\n/**\n * @internal\n */\nexport const DefinitionContext__key = (/*#__PURE__*/ new SingleContextKey<DefinitionContext>('definition-context'));\n","/**\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { QualifiedName } from 'namespace-aliaser';\nimport { BootstrapWindow } from '../../boot/globals';\nimport { Class } from '../../common';\nimport { ComponentDef } from '../component-def';\nimport { DefinitionContext__key } from './definition.context.key.impl';\n\n/**\n * Custom element definition meta.\n *\n * @category Core\n */\nexport interface ElementDef {\n\n  /**\n   * Custom element name.\n   *\n   * The name may belong to some namespace to avoid naming conflicts. I.e. it can be either a string, or\n   * name/namespace tuple.\n   *\n   * When omitted an anonymous component will be registered. Such component is not bound to custom element, but it\n   * still can be mounted.\n   */\n  readonly name?: QualifiedName;\n\n  /**\n   * Existing element to extend by custom one.\n   */\n  readonly extend: ElementDef.Extend;\n\n}\n\n/**\n * A key of definition context value containing a custom element definition.\n *\n * Target value defaults to `HTMLElement` from the window provided under `[BootstrapWindow.key]`,\n * unless `ComponentDef.extend.type` is specified.\n */\nexport const ElementDef: SingleContextRef<ElementDef> = (/*#__PURE__*/ new SingleContextKey<ElementDef>(\n    'element-def',\n    {\n      byDefault(values) {\n\n        const componentType = values.get(DefinitionContext__key).componentType;\n        const { name, extend } = ComponentDef.of(componentType);\n\n        const elementExtend: ElementDef.Extend = {\n          get type() {\n            return extend && extend.type || values.get(BootstrapWindow).HTMLElement;\n          },\n          get name() {\n            return extend && extend.name;\n          },\n        };\n\n        return {\n          get name() {\n            return name;\n          },\n          get extend() {\n            return elementExtend;\n          },\n        };\n      },\n    },\n));\n\n/**\n * @category Core\n */\nexport namespace ElementDef {\n\n  /**\n   * The definition of element to extend by custom one.\n   */\n  export interface Extend {\n\n    /**\n     * The class constructor of element to extend.\n     */\n    readonly type: Class;\n\n    /**\n     * The name of element to extend.\n     *\n     * This is to support `as` attribute of standard HTML element. Note that this is not supported by polyfills.\n     */\n    readonly name?: string;\n\n  }\n\n}\n","/**\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues, ContextValueSpec } from 'context-values';\nimport { OnEvent } from 'fun-events';\nimport { Class } from '../../common';\nimport { ComponentContext } from '../component-context';\nimport { ComponentClass } from './component-class';\nimport { DefinitionContext__key } from './definition.context.key.impl';\nimport { ElementDef } from './element-def';\n\n/**\n * Component definition context.\n *\n * Extends `ContextValues` interface. The values are provided by corresponding providers registered with\n * [[BootstrapSetup.perDefinition]] and [[DefinitionSetup.perDefinition]] methods. All [[BootstrapContext]] values\n * are available too.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class DefinitionContext<T extends object = any> extends ContextValues {\n\n  /**\n   * A key of definition context value containing the definition context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<DefinitionContext> {\n    return DefinitionContext__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element class constructor.\n   *\n   * It is an error accessing this property before the element class is created, e.g. from inside of\n   * `DefinitionListener` or `ComponentDef.define()` function. In these cases you may wish to add a `whenReady()`\n   * callback.\n   */\n  abstract readonly elementType: Class;\n\n  /**\n   * An `OnEvent` sender of component definition context upon its readiness.\n   *\n   * The custom element class is not constructed until component definition is complete.\n   * The registered receiver will be notified when the custom element class is constructed.\n   *\n   * If the custom element class is constructed already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[this]>;\n\n  /**\n   * An `OnEvent` sender of component context upon its instantiation.\n   *\n   * If component instantiated after the receiver is registered, that receiver would receive an instantiated component's\n   * context immediately.\n   *\n   * If component already exists when the receiver is registered, that receiver would receive instantiated component's\n   * context only when/if component is {@link ComponentContext.whenOn connected}. This is to prevent resource leaking\n   * on disconnected components that may be never used again.\n   */\n  abstract readonly whenComponent: OnEvent<[ComponentContext<T>]>;\n\n  /**\n   * Custom element definition.\n   */\n  get elementDef(): ElementDef {\n    return this.get(ElementDef);\n  }\n\n  /**\n   * Provides a value available in the context of each component of the defined component type.\n   *\n   * @typeparam Deps  A type of dependencies.\n   * @typeparam Src  The type of context value sources.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Component context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  abstract perComponent<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<ComponentContext<T>, any, Deps, Src, Seed>,\n  ): () => void;\n\n}\n","import { ContextKey, ContextKey__symbol, ContextRegistry, ContextValues, SingleContextKey } from 'context-values';\nimport { BootstrapContext } from '../bootstrap-context';\n\nconst BootstrapContextRegistry__key =\n    (/*#__PURE__*/ new SingleContextKey<BootstrapContextRegistry>('bootstrap-context-registry'));\n\n/**\n * @internal\n */\nexport class BootstrapContextRegistry extends ContextRegistry<BootstrapContext> {\n\n  static get [ContextKey__symbol](): ContextKey<BootstrapContextRegistry> {\n    return BootstrapContextRegistry__key;\n  }\n\n  readonly values: ContextValues;\n\n  static create(): BootstrapContextRegistry {\n    return new BootstrapContextRegistry();\n  }\n\n  private constructor() {\n    super();\n    this.provide({ a: BootstrapContextRegistry, is: this });\n    this.values = this.newValues();\n  }\n\n}\n","import { ContextKey, ContextKey__symbol, ContextRegistry, ContextSeeds, SingleContextKey } from 'context-values';\nimport { ComponentContext } from '../../component';\nimport { bootstrapDefault } from '../bootstrap-default';\n\nconst ComponentContextRegistry__key = new SingleContextKey<ComponentContextRegistry>(\n    'component-context-registry',\n    {\n      byDefault: bootstrapDefault(() => new ComponentContextRegistry()),\n    },\n);\n\n/**\n * @internal\n */\nexport class ComponentContextRegistry extends ContextRegistry<ComponentContext> {\n\n  static get [ContextKey__symbol](): ContextKey<ComponentContextRegistry> {\n    return ComponentContextRegistry__key;\n  }\n\n  constructor(initial?: ContextSeeds<ComponentContext>) {\n    super(initial);\n  }\n\n}\n","import {\n  ContextKey,\n  ContextKey__symbol,\n  ContextRegistry,\n  ContextSeeds,\n  ContextValues,\n  SingleContextKey,\n} from 'context-values';\nimport { DefinitionContext } from '../../component/definition';\nimport { bootstrapDefault } from '../bootstrap-default';\n\nconst DefinitionContextRegistry__key = new SingleContextKey<DefinitionContextRegistry>(\n    'definition-context-registry',\n    {\n      byDefault: bootstrapDefault(context => new DefinitionContextRegistry(context)),\n    },\n);\n\n/**\n * @internal\n */\nexport class DefinitionContextRegistry extends ContextRegistry<DefinitionContext> {\n\n  static get [ContextKey__symbol](): ContextKey<DefinitionContextRegistry> {\n    return DefinitionContextRegistry__key;\n  }\n\n  constructor(initial?: ContextSeeds<DefinitionContext> | ContextValues) {\n    super(initial);\n  }\n\n}\n","import { nextArgs, nextSkip } from 'call-thru';\nimport { EventEmitter, onAny, OnEvent, onEventBy, trackValue } from 'fun-events';\nimport { superClassOf } from '../../common';\nimport { ComponentDef__symbol } from '../../component';\nimport { ComponentClass, DefinitionSetup } from '../../component/definition';\nimport { Unloader } from './unloader.impl';\n\n/**\n * @internal\n */\nexport function onPostDefSetup(\n    componentType: ComponentClass,\n    unloader: Unloader,\n): OnEvent<[DefinitionSetup]> {\n\n  const { on } = postDefSetup(componentType);\n\n  return onEventBy(receiver => {\n    on({\n      supply: receiver.supply.needs(unloader.supply),\n      receive(ctx, setup) {\n\n        const whenReady = setup.whenReady.tillOff(unloader.supply);\n        const whenComponent = setup.whenComponent.tillOff(unloader.supply);\n\n        receiver.receive(ctx, {\n          get componentType() {\n            return setup.componentType;\n          },\n          get whenReady() {\n            return whenReady;\n          },\n          get whenComponent() {\n            return whenComponent;\n          },\n          perDefinition(spec) {\n            return unloader.add(() => setup.perDefinition(spec));\n          },\n          perComponent(spec) {\n            return unloader.add(() => setup.perComponent(spec));\n          },\n        });\n      },\n    });\n  });\n}\n\n/**\n * @internal\n */\nexport interface PostDefSetup<T extends object = any> {\n  readonly on: OnEvent<[DefinitionSetup<T>]>;\n  send(setup: DefinitionSetup): void;\n  setup(setup: DefinitionSetup<T>): void;\n}\n\nconst PostDefSetup__symbol = (/*#__PURE__*/ Symbol('post-def-setup'));\n\n/**\n * @internal\n */\nexport function postDefSetup<T extends object>(componentType: ComponentClass<T>): PostDefSetup<T> {\n  if (componentType.hasOwnProperty(PostDefSetup__symbol)) {\n    return (componentType as any)[PostDefSetup__symbol];\n  }\n\n  const tracker = trackValue<DefinitionSetup<T>>();\n  const emitter = new EventEmitter<[DefinitionSetup]>();\n  const onSetup: OnEvent<[DefinitionSetup<T>]> = tracker.read.thru(setup => setup ? nextArgs(setup) : nextSkip());\n  const on = onAny(onSetup, emitter);\n  const superType = superClassOf(componentType, type => ComponentDef__symbol in type);\n\n  if (superType) {\n\n    const superPostDefSetup = postDefSetup(superType);\n\n    on(setup => superPostDefSetup.send(setup));\n  }\n\n  const result: PostDefSetup<T> = {\n    on,\n    send(setup) {\n      emitter.send(setup);\n    },\n    setup(setup) {\n      tracker.it = setup;\n    },\n  };\n\n  Object.defineProperty(componentType, PostDefSetup__symbol, { value: result });\n\n  return result;\n}\n","import { AfterEvent, EventEmitter, OnEvent, onEventBy, trackValue } from 'fun-events';\nimport { ComponentContext } from '../../component';\n\nexport class WhenComponent<T extends object> {\n\n  readonly onCreated: OnEvent<[ComponentContext<T>]>;\n  readonly readNotifier: AfterEvent<[ComponentNotifier<T>]>;\n\n  constructor() {\n\n    const currentRev = trackValue(0);\n    const created = new EventEmitter<[ComponentContext<T>, number]>();\n\n    this.onCreated = onEventBy(receiver => {\n\n      const receiverRev = currentRev.it + 1;\n\n      created.on({\n        supply: receiver.supply,\n        receive: (eventContext, componentContext, notifiedRev) => {\n          if (notifiedRev < receiverRev) {\n            // Notify only receivers added after the last notification\n            receiver.receive(\n                {\n                  onRecurrent(recurrentReceiver) {\n                    eventContext.onRecurrent(recurrentContext => recurrentReceiver(recurrentContext));\n                  },\n                },\n                componentContext,\n            );\n          }\n        },\n      });\n\n      ++currentRev.it;\n    });\n    this.readNotifier = currentRev.read.keep.thru_(\n        rev => (context, notifiedRev) => {\n          created.send(context, notifiedRev);\n          return rev;\n        },\n    );\n  }\n\n}\n\nexport type ComponentNotifier<T extends object> = (\n    this: void,\n    context: ComponentContext<T>,\n    notifiedRev: number,\n) => number;\n","import { nextArgs, nextSkip, noop } from 'call-thru';\nimport { ContextValues, ContextValueSpec, SingleContextKey, SingleContextRef } from 'context-values';\nimport { EventEmitter, eventSupply, EventSupply, OnEvent, trackValue, ValueTracker } from 'fun-events';\nimport { Class } from '../../common';\nimport {\n  ComponentContext as ComponentContext_,\n  ComponentContext__symbol,\n  ComponentDef,\n  ComponentEvent,\n  ComponentMount as ComponentMount_,\n} from '../../component';\nimport {\n  ComponentClass,\n  ComponentFactory as ComponentFactory_,\n  DefinitionContext as DefinitionContext_,\n  DefinitionSetup,\n  ElementDef,\n} from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { ComponentContextRegistry } from './component-context-registry.impl';\nimport { DefinitionContextRegistry } from './definition-context-registry.impl';\nimport { postDefSetup } from './post-def-setup.impl';\nimport { WhenComponent } from './when-component.impl';\n\n/**\n * @internal\n */\nexport interface ElementBuilder {\n  readonly definitions: EventEmitter<[DefinitionContext_]>;\n  readonly components: EventEmitter<[ComponentContext_]>;\n  buildElement<T extends object>(this: void, componentType: ComponentClass<T>): ComponentFactory_<T>;\n}\n\n/**\n * @internal\n */\nexport const ElementBuilder: SingleContextRef<ElementBuilder> = (/*#__PURE__*/ new SingleContextKey<ElementBuilder>(\n    'element-builder',\n    {\n      byDefault: bootstrapDefault(newElementBuilder),\n    },\n));\n\nfunction newElementBuilder(bsContext: BootstrapContext): ElementBuilder {\n\n  const definitionContextRegistry_global = bsContext.get(DefinitionContextRegistry);\n  const componentContextRegistry_global = bsContext.get(ComponentContextRegistry);\n  const definitions = new EventEmitter<[DefinitionContext_]>();\n  const components = new EventEmitter<[ComponentContext_]>();\n\n  return {\n    definitions,\n    components,\n    buildElement<T extends object>(componentType: ComponentClass<T>) {\n\n      const def = ComponentDef.of(componentType);\n      const whenComponent = new WhenComponent<T>();\n      let componentContextRegistry_perType!: ComponentContextRegistry;\n      const ready = trackValue(false);\n      const whenReady: OnEvent<[]> = ready.read.thru(cls => cls ? nextArgs() : nextSkip());\n      let definitionContext: DefinitionContext;\n\n      function createComponentContextRegistry() {\n        return componentContextRegistry_global.append(componentContextRegistry_perType);\n      }\n\n      class ComponentFactory extends ComponentFactory_ < T > {\n\n        get componentType() {\n          return definitionContext.componentType;\n        }\n\n        get elementType() {\n          return definitionContext.elementType;\n        }\n\n        get elementDef() {\n          return definitionContext.elementDef;\n        }\n\n        mountTo(element: any): ComponentMount_<T> {\n          if (element[ComponentContext__symbol]) {\n            throw new Error(`Element ${element} already bound to component`);\n          }\n\n          const mount = createComponent({\n            definitionContext,\n            whenComponent,\n            registry: createComponentContextRegistry(),\n            element,\n            elementSuper(key) {\n              return element[key];\n            },\n            createMount(context: ComponentContext_<T>) {\n\n              class ComponentMount extends ComponentMount_<T> {\n\n                get context() {\n                  return context;\n                }\n\n                get connected() {\n                  return elementStatus(element).it === ComponentStatus.On;\n                }\n\n                set connected(value: boolean) {\n                  elementStatus(element).it = value ? ComponentStatus.On : ComponentStatus.Off;\n                }\n\n                checkConnected(): boolean {\n\n                  const el: Element = element;\n                  const doc = el.ownerDocument;\n\n                  return this.connected = doc != null && doc.contains(el);\n                }\n\n              }\n\n              return new ComponentMount();\n            },\n          }).mount as ComponentMount_<T>;\n\n          mount.checkConnected();\n          componentCreated(mount.context);\n\n          return mount;\n        }\n\n      }\n\n      const componentFactory = new ComponentFactory();\n\n      class DefinitionContext extends DefinitionContext_<T> {\n\n        readonly get: ContextValues['get'];\n        readonly whenReady: OnEvent<[this]>;\n\n        get componentType() {\n          return componentType;\n        }\n\n        get whenComponent() {\n          return whenComponent.onCreated;\n        }\n\n        get elementType(): Class {\n          throw new Error('Custom element class is not constructed yet. Consider to use a `whenReady()` callback');\n        }\n\n        constructor() {\n          super();\n\n          const context = this;\n\n          this.whenReady = whenReady.thru_(() => this).once;\n\n          const definitionContextRegistry =\n              new DefinitionContextRegistry(definitionContextRegistry_global.seedIn(this));\n\n          definitionContextRegistry.provide({ a: DefinitionContext_, is: this });\n          definitionContextRegistry.provide({ a: ComponentFactory_, is: componentFactory });\n          this.get = definitionContextRegistry.newValues().get;\n          componentContextRegistry_perType = new ComponentContextRegistry(definitionContextRegistry.seedIn(this));\n\n          const definitionSetup: DefinitionSetup<T> = {\n            get componentType() {\n              return componentType;\n            },\n            get whenReady() {\n              return context.whenReady;\n            },\n            get whenComponent() {\n              return context.whenComponent;\n            },\n            perDefinition(spec) {\n              return definitionContextRegistry.provide(spec);\n            },\n            perComponent(spec) {\n              return componentContextRegistry_perType.provide(spec);\n            },\n          };\n\n          def.setup?.(definitionSetup);\n          postDefSetup(componentType).setup(definitionSetup);\n        }\n\n        perComponent<Deps extends any[], Src, Seed>(\n            spec: ContextValueSpec<ComponentContext_<T>, any, Deps, Src, Seed>,\n        ): () => void {\n          return componentContextRegistry_perType.provide(spec);\n        }\n\n      }\n\n      definitionContext = new DefinitionContext();\n\n      def.define?.(definitionContext);\n      definitions.send(definitionContext);\n\n      const elementType = createElementType(\n          definitionContext,\n          whenComponent,\n          createComponentContextRegistry(),\n      );\n\n      Object.defineProperty(definitionContext, 'elementType', {\n        configurable: true,\n        enumerable: true,\n        value: elementType,\n      });\n\n      ready.it = true;\n\n      return componentFactory;\n    },\n  };\n\n  function createElementType<T extends object>(\n      definitionContext: DefinitionContext_<T>,\n      whenComponent: WhenComponent<T>,\n      componentContextRegistry: ComponentContextRegistry,\n  ) {\n\n    const elementDef = definitionContext.get(ElementDef);\n\n    class Element extends elementDef.extend.type {\n\n      // Component context reference\n      [ComponentContext__symbol]: ComponentContext_<T>;\n\n      constructor() {\n        super();\n\n        const context = createComponent({\n          definitionContext,\n          whenComponent,\n          registry: componentContextRegistry,\n          element: this,\n          createMount: noop,\n          elementSuper: (key) => {\n            // @ts-ignore\n            return super[key] as any;\n          },\n        });\n\n        componentCreated(context);\n      }\n\n      // noinspection JSUnusedGlobalSymbols\n      connectedCallback() {\n        elementStatus(this).it = ComponentStatus.On;\n      }\n\n      // noinspection JSUnusedGlobalSymbols\n      disconnectedCallback() {\n        elementStatus(this).it = ComponentStatus.Off;\n      }\n\n    }\n\n    return Element;\n  }\n\n  function createComponent<T extends object>(\n      {\n        definitionContext,\n        whenComponent,\n        registry,\n        element,\n        createMount,\n        elementSuper,\n      }: {\n        definitionContext: DefinitionContext_<T>;\n        whenComponent: WhenComponent<T>,\n        registry: ComponentContextRegistry;\n        element: any;\n        elementSuper(name: PropertyKey): any;\n        createMount(context: ComponentContext_<T>): ComponentMount_<T> | undefined;\n      },\n  ): ComponentContext_<T> {\n\n    const status = trackValue<ComponentStatus>(ComponentStatus.Building);\n    const destructionReason = trackValue<[any] | undefined>();\n\n    status.on(noop).whenOff(reason => destructionReason.it = [reason]);\n\n    const destroyed: OnEvent<[any]> = destructionReason.read.thru(reason => reason ? nextArgs(reason[0]) : nextSkip());\n    const whenDestroyed: OnEvent<[any]> = destroyed.once;\n\n    const whenOff: OnEvent<[]> = status.read.thru_(sts => sts === ComponentStatus.Off ? nextArgs() : nextSkip());\n    const whenOn: OnEvent<[EventSupply]> = status.read.thru_(\n        sts => {\n          if (sts !== ComponentStatus.On) {\n            return nextSkip();\n          }\n\n          const offSupply = eventSupply();\n\n          whenOff.once(() => offSupply.off());\n\n          return nextArgs(offSupply);\n        },\n    );\n\n    let mount: ComponentMount_<T> | undefined;\n    const values = registry.newValues();\n\n    class ComponentContext extends ComponentContext_<T> {\n\n      readonly get = values.get;\n      readonly elementSuper = elementSuper;\n      readonly whenReady: OnEvent<[this]>;\n\n      constructor() {\n        super();\n\n        const whenReady: OnEvent<[this]> = status.read.thru(sts => sts ? nextArgs(this) : nextSkip());\n\n        this.whenReady = whenReady.once;\n      }\n\n      get componentType() {\n        return definitionContext.componentType;\n      }\n\n      get element() {\n        return element;\n      }\n\n      get component(): T {\n        throw new Error('The component is not constructed yet. Consider to use a `whenReady()` callback');\n      }\n\n      get mount(): ComponentMount_<T> | undefined {\n        return mount || (mount = createMount(this));\n      }\n\n      get connected(): boolean {\n        return status.it === ComponentStatus.On;\n      }\n\n      get whenOn(): OnEvent<[EventSupply]> {\n        return whenOn;\n      }\n\n      get whenOff(): OnEvent<[]> {\n        return whenOff;\n      }\n\n      get whenDestroyed() {\n        return whenDestroyed;\n      }\n\n      destroy(reason?: any): void {\n        status.done(reason);\n      }\n\n    }\n\n    const context = new ComponentContext();\n    let lastRev = 0;\n\n    context.whenDestroyed(() => removeElement(context));\n    registry.provide({ a: ComponentContext_, is: context });\n\n    augmentElement();\n\n    whenComponent.readNotifier.once(notifier => lastRev = notifier(context, lastRev));\n    context.whenOn(supply => {\n      whenComponent.readNotifier({\n        supply,\n        receive(_, notifier) {\n          lastRev = notifier(context, lastRev);\n        },\n      });\n    });\n    components.send(context);\n\n    const component = newComponent(definitionContext.componentType, context);\n\n    Object.defineProperty(context, 'component', {\n      configurable: true,\n      enumerable: true,\n      value: component,\n    });\n\n    status.it = ComponentStatus.Ready;\n\n    return context;\n\n    function augmentElement() {\n      Object.defineProperty(element, ComponentContext__symbol, { value: context });\n      Object.defineProperty(element, ComponentStatus__symbol, { writable: true, value: status });\n    }\n  }\n\n}\n\n/**\n * Creates new component of the given type.\n *\n * It makes component context available under `[ComponentContext__symbol]` key in constructed component.\n * The component context is also available inside component constructor by temporarily assigning it to component\n * prototype.\n *\n * @typeparam T  A type of component.\n * @param type  Component class constructor.\n * @param context  Target component context.\n */\nfunction newComponent<T extends object>(type: ComponentClass<T>, context: ComponentContext_<T>): T {\n\n  const proto = type.prototype as any;\n  const prevContext = proto[ComponentContext__symbol];\n\n  proto[ComponentContext__symbol] = context;\n  try {\n\n    const component = new type(context);\n\n    Object.defineProperty(component, ComponentContext__symbol, { value: context });\n\n    return component;\n  } finally {\n    proto[ComponentContext__symbol] = prevContext;\n  }\n}\n\nconst enum ComponentStatus {\n  Building,\n  Ready,\n  Off,\n  On,\n}\n\nconst ComponentStatus__symbol = (/*#__PURE__*/ Symbol('component-status'));\n\nfunction elementStatus(element: any): ValueTracker<ComponentStatus> {\n  return element[ComponentStatus__symbol];\n}\n\nfunction componentCreated(context: ComponentContext_) {\n  context.whenOn.once(\n      () => context.dispatchEvent(new ComponentEvent('wesib:component', { bubbles: true })),\n  );\n}\n\nfunction removeElement(context: ComponentContext_) {\n\n  const { element, mount } = context;\n\n  if (mount) {\n    mount.connected = false; // Disconnect mounted element\n  }\n\n  const parentNode: Element = element.parentElement;\n\n  if (parentNode) {\n    parentNode.removeChild(element);\n  }\n}\n","/**\n * @module @wesib/wesib\n */\nimport { ComponentContext } from './component-context';\n\n/**\n * A mount of the component to an element.\n *\n * This is constructed when a component is mounted to arbitrary element by [[ComponentFactory.mountTo]] method.\n *\n * Mounted components do not maintain their connection state automatically. It is a calling code responsibility to set\n * their connection state by updating [[ComponentMount.connected]] property. E.g. by calling a\n * [[ComponentMount.checkConnected]] method. An [[ElementObserver]] and [[AutoConnectSupport]] feature could be used to\n * do it automatically.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class ComponentMount<T extends object = any> {\n\n  /**\n   * Mounted component context.\n   */\n  abstract readonly context: ComponentContext<T>;\n\n  /**\n   * Component connection state.\n   *\n   * Updating this property triggers appropriate listeners registered in [[ComponentContext]].\n   *\n   * The initial state is set by [[checkConnected]] method.\n   */\n  abstract connected: boolean;\n\n  /**\n   * Mounted component.\n   */\n  get component(): T {\n    return this.context.component;\n  }\n\n  /**\n   * An element the component is mounted to.\n   */\n  get element(): any {\n    return this.context.element;\n  }\n\n  /**\n   * Checks whether the mounted component element is actually connected to its owning document.\n   *\n   * Updates the `connected` property and returns its value.\n   *\n   * @returns `true` if the component element is connected, or `false` otherwise.\n   */\n  abstract checkConnected(): boolean;\n\n}\n","import { itsEach, overArray } from 'a-iterable';\nimport { noop, valueProvider } from 'call-thru';\nimport { EventSupply, eventSupply } from 'fun-events';\n\n/**\n * @internal\n */\nexport interface Unloader {\n  readonly supply: EventSupply;\n  add(adder: () => () => void): () => void;\n}\n\nconst doNotAdd = valueProvider(noop);\n\n/**\n * @internal\n */\nexport function newUnloader(): Unloader {\n\n  const unloads: (() => void)[] = [];\n  let add = (adder: () => () => void) => {\n\n    const unload = adder();\n\n    unloads.push(unload);\n\n    return unload;\n  };\n  const supply = eventSupply(() => {\n    add = doNotAdd;\n    itsEach(\n        overArray(unloads).reverse(),\n        unload => unload(),\n    );\n    unloads.length = 0;\n  });\n\n  return {\n    supply,\n    add(adder) {\n      return add(adder);\n    },\n  };\n}\n","import { ElementBuilder } from '../../boot/impl';\nimport { ComponentFactory__symbol } from '../../boot/impl/component-factory.symbol.impl';\nimport { ComponentClass, CustomElements } from '../../component/definition';\nimport { FeatureContext } from '../feature-context';\n\n/**\n * @internal\n */\nexport class ComponentRegistry {\n\n  private _definitionQueue: (() => void)[] = [];\n\n  constructor(private readonly _context: FeatureContext) {\n    _context.whenReady(() => {\n      this._definitionQueue.forEach(definition => definition());\n      delete this._definitionQueue;\n    });\n  }\n\n  get customElements(): CustomElements {\n    return this._context.get(CustomElements);\n  }\n\n  define<T extends object>(componentType: ComponentClass<T>) {\n    this._definitionQueue.push(() => {\n\n      const elementBuilder = this._context.get(ElementBuilder);\n      const factory = elementBuilder.buildElement(componentType);\n\n      (componentType as any)[ComponentFactory__symbol] = factory;\n\n      this.customElements.define(componentType, factory.elementType);\n    });\n  }\n\n}\n","import { filterIt, mapIt } from 'a-iterable';\nimport { isPresent, NextArgs, nextArgs, NextSkip, nextSkip } from 'call-thru';\nimport { ContextRegistry, ContextUpKey, ContextValueOpts, ContextValues, ContextValueSpec } from 'context-values';\nimport {\n  afterAll,\n  afterEach,\n  AfterEvent,\n  afterEventBy,\n  afterThe,\n  EventKeeper,\n  EventSupply,\n  OnEvent,\n  trackValue,\n} from 'fun-events';\nimport { BootstrapContext } from '../../boot';\nimport {\n  BootstrapContextRegistry,\n  ComponentContextRegistry,\n  DefinitionContextRegistry,\n  ElementBuilder,\n  newUnloader,\n  onPostDefSetup,\n} from '../../boot/impl';\nimport { ArraySet, Class } from '../../common';\nimport { ComponentContext } from '../../component';\nimport { ComponentClass, DefinitionContext, DefinitionSetup } from '../../component/definition';\nimport { FeatureContext } from '../feature-context';\nimport { ComponentRegistry } from './component-registry.impl';\nimport { FeatureClause, FeatureRequest } from './feature-request.impl';\n\nconst FeatureKey__symbol = (/*#__PURE__*/ Symbol('feature-key'));\n\n/**\n * @internal\n */\nexport class FeatureKey extends ContextUpKey<AfterEvent<[FeatureLoader?]>, FeatureClause> {\n\n  static of(feature: Class): FeatureKey {\n    return feature.hasOwnProperty(FeatureKey__symbol)\n        ? (feature as any)[FeatureKey__symbol]\n        : ((feature as any)[FeatureKey__symbol] = new FeatureKey(feature));\n  }\n\n  get upKey(): this {\n    return this;\n  }\n\n  private constructor(feature: Class) {\n    super(`feature:${feature.name}`);\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          AfterEvent<[FeatureLoader?]>,\n          EventKeeper<FeatureClause[]> | FeatureClause,\n          AfterEvent<FeatureClause[]>>,\n  ): AfterEvent<[FeatureLoader?]> | null | undefined {\n    return loadFeature(\n        opts.context.get(BootstrapContext),\n        opts.seed.keep.thru(preferredFeatureClause),\n    );\n  }\n\n}\n\nfunction preferredFeatureClause(...clauses: FeatureClause[]): FeatureClause | undefined {\n\n  let required = false;\n  let preferred: FeatureClause | undefined;\n\n  for (const clause of clauses) {\n    switch (clause[1]) {\n      case 'is':\n        required = true;\n        if (!preferred) {\n          preferred = clause;\n        }\n        break;\n      case 'has':\n        preferred = clause;\n        break;\n      case 'needs':\n        required = true;\n    }\n  }\n\n  return required ? preferred : undefined;\n}\n\nfunction loadFeature(\n    bsContext: BootstrapContext,\n    from: AfterEvent<[FeatureClause?]>,\n): AfterEvent<[FeatureLoader?]> {\n  return afterEventBy<[FeatureLoader?]>(receiver => {\n\n    let origin: Class | undefined;\n    let source: OnEvent<[FeatureLoader?]> = afterThe();\n    let stageId: Promise<FeatureStageId> = Promise.resolve('idle');\n\n    return afterAll({\n      clause: from,\n      deps: loadFeatureDeps(bsContext, from),\n    }).dig_(({ clause: [clause], deps }) => {\n      if (!clause) {\n        return afterThe();\n      }\n\n      const [request, , target] = clause;\n\n      if (request.feature === origin) {\n        return source; // Origin didn't change. Reuse the source.\n      }\n\n      origin = request.feature;\n\n      if (target !== origin) {\n        // Originated from replacement feature provider. Reuse its loader.\n        return source = bsContext.get(FeatureKey.of(origin)).thru_(\n            loader => {\n              loader!.to(stageId);\n              stageId = loader!.stage;\n              return loader;\n            },\n        );\n      }\n\n      // Create feature's own loader\n      const ownLoader = new FeatureLoader(bsContext, request, deps).to(stageId);\n      const ownSource = afterThe(ownLoader);\n\n      return source = afterEventBy<[FeatureLoader]>(\n          rcv => ownSource(rcv).whenOff(() => {\n            stageId = ownLoader.unload();\n          }),\n      ).share(); // Can be accessed again when reused\n    })(receiver);\n  }).keep.thru(\n      preventDuplicateLoader(),\n  );\n}\n\nfunction preventDuplicateLoader():\n    <NextReturn>(\n        loader?: FeatureLoader,\n    ) => NextArgs<[FeatureLoader?], NextReturn> | NextSkip<[FeatureLoader?], NextReturn> {\n\n  let lastLoader: FeatureLoader | null | undefined = null; // Initially `null` to differ from `undefined`\n\n  return <NextReturn>(loader?: FeatureLoader) => {\n    if (lastLoader === loader) {\n      return nextSkip();\n    }\n    lastLoader = loader;\n\n    if (!loader) {\n      return nextArgs<[FeatureLoader?], NextReturn>();\n    }\n\n    return nextArgs<[FeatureLoader?], NextReturn>(loader);\n  };\n}\n\nfunction loadFeatureDeps(\n    bsContext: BootstrapContext,\n    from: AfterEvent<[FeatureClause?]>,\n): AfterEvent<FeatureLoader[]> {\n  return from.keep.dig_(clause => {\n    if (!clause) {\n      return afterThe();\n    }\n\n    const [{ def }] = clause;\n    const needs = new ArraySet(def.needs);\n\n    if (!needs.size) {\n      return afterThe();\n    }\n\n    return afterEach(...needs.map(dep => bsContext.get(FeatureKey.of(dep))))\n        .keep.thru_(presentFeatureDeps);\n  });\n}\n\nfunction presentFeatureDeps<NextReturn>(...deps: [FeatureLoader?][]): NextArgs<FeatureLoader[], NextReturn> {\n  return nextArgs<FeatureLoader[], NextReturn>(\n      ...filterIt<FeatureLoader | undefined, FeatureLoader>(\n          mapIt(deps, dep => dep[0]),\n          isPresent,\n      ),\n  );\n}\n\n/**\n * @internal\n */\nexport class FeatureLoader {\n\n  readonly down: Promise<void>;\n  private _stage: Promise<FeatureStage>;\n  private _down!: () => void;\n  readonly state = trackValue(false);\n\n  constructor(\n      readonly bsContext: BootstrapContext,\n      readonly request: FeatureRequest,\n      readonly deps: FeatureLoader[],\n  ) {\n    this.down = new Promise(resolve => this._down = resolve);\n    this._stage = Promise.resolve(new SetupFeatureStage(this));\n  }\n\n  get stage(): Promise<FeatureStageId> {\n    return this._stage.then(stage => stage.after);\n  }\n\n  get ready(): boolean {\n    return this.state.it;\n  }\n\n  to(stageId: Promise<FeatureStageId>): this {\n\n    const lastStage = this._stage;\n\n    this._stage = stageId.then(id => lastStage.then(stage => stage[id]()));\n\n    return this;\n  }\n\n  async setup(): Promise<void> {\n    await (this._stage = this._stage.then(stage => stage.setup()));\n  }\n\n  async init(): Promise<void> {\n    await (this._stage = this._stage.then(stage => stage.init()));\n  }\n\n  async unload(): Promise<FeatureStageId> {\n\n    const prevStage = this._stage;\n\n    delete this._stage; // Unloaded feature should never be accessed again.\n\n    const stage = await prevStage;\n    const stageId = await stage.stop();\n\n    this._down();\n\n    return stageId;\n  }\n\n}\n\ntype FeatureStageId = 'idle' | 'setup' | 'init';\ntype FeatureStageStop = (this: void) => Promise<any>;\n\nabstract class FeatureStage {\n\n  abstract readonly after: FeatureStageId;\n\n  constructor(\n      readonly loader: FeatureLoader,\n      private readonly _stop: FeatureStageStop = () => Promise.resolve(),\n  ) {}\n\n  async idle(): Promise<this> {\n    return this;\n  }\n\n  abstract setup(): Promise<FeatureStage>;\n\n  abstract init(): Promise<FeatureStage>;\n\n  stop(): Promise<FeatureStageId> {\n    return this._stop().then(() => this.after);\n  }\n\n  protected perDep(action: (dep: FeatureLoader) => Promise<void>): Promise<any> {\n\n    const { deps } = this.loader;\n\n    return Promise.all(deps.map(dep => action(dep)));\n  }\n\n}\n\nclass SetupFeatureStage extends FeatureStage {\n\n  get after() {\n    return 'idle' as const;\n  }\n\n  async setup(): Promise<FeatureStage> {\n    await this.perDep(loader => loader.setup());\n\n    const { bsContext, request: { def } } = this.loader;\n    const [context, supply] = newFeatureContext(bsContext, this.loader);\n\n    def.setup?.(context);\n\n    return new InitFeatureStage(\n        this.loader,\n        context,\n        async () => supply.off(),\n    );\n  }\n\n  init(): Promise<FeatureStage> {\n    return this.setup().then(stage => stage.init());\n  }\n\n}\n\nclass InitFeatureStage extends FeatureStage {\n\n  get after() {\n    return 'setup' as const;\n  }\n\n  constructor(\n      state: FeatureLoader,\n      private readonly _context: FeatureContext,\n      stop: FeatureStageStop,\n  ) {\n    super(state, stop);\n  }\n\n  async setup(): Promise<FeatureStage> {\n    return this;\n  }\n\n  async init(): Promise<FeatureStage> {\n    await this.perDep(loader => loader.init());\n\n    const { request: { def } } = this.loader;\n\n    def.init?.(this._context);\n\n    return new ActiveFeatureStage(this);\n  }\n\n}\n\nclass ActiveFeatureStage extends FeatureStage {\n\n  get after() {\n    return 'init' as const;\n  }\n\n  constructor(prev: InitFeatureStage) {\n    super(prev.loader, () => prev.stop());\n    prev.loader.state.it = true;\n  }\n\n  async setup(): Promise<FeatureStage> {\n    return this;\n  }\n\n  async init(): Promise<FeatureStage> {\n    return this;\n  }\n\n}\n\nfunction newFeatureContext(\n    bsContext: BootstrapContext,\n    loader: FeatureLoader,\n): [FeatureContext, EventSupply] {\n\n  const unloader = newUnloader();\n  let componentRegistry: ComponentRegistry;\n  const definitionContextRegistry = bsContext.get(DefinitionContextRegistry);\n  const componentContextRegistry = bsContext.get(ComponentContextRegistry);\n  const registry = new ContextRegistry<FeatureContext>(bsContext);\n  const elementBuilder = bsContext.get(ElementBuilder);\n  const onDefinition = elementBuilder.definitions.on.tillOff(unloader.supply);\n  const onComponent = elementBuilder.components.on.tillOff(unloader.supply);\n\n  class Context extends FeatureContext {\n\n    readonly get = registry.newValues().get;\n    readonly whenReady: OnEvent<[FeatureContext]>;\n\n    constructor() {\n      super();\n\n      const whenReady: OnEvent<[FeatureContext]> = afterAll({\n        st: loader.state,\n        bs: trackValue<BootstrapContext>().by(bsContext.whenReady),\n      }).thru(\n          ({ st: [ready], bs: [bs] }) => bs && ready ? nextArgs(this) : nextSkip(),\n      );\n\n      this.whenReady = whenReady.once;\n      registry.provide({ a: FeatureContext, is: this });\n      componentRegistry = new ComponentRegistry(this);\n    }\n\n    get feature() {\n      return loader.request.feature;\n    }\n\n    get onDefinition() {\n      return onDefinition;\n    }\n\n    get onComponent() {\n      return onComponent;\n    }\n\n    provide<Deps extends any[], Src, Seed>(\n        spec: ContextValueSpec<BootstrapContext, any, Deps, Src, Seed>,\n    ): () => void {\n      return unloader.add(() => bsContext.get(BootstrapContextRegistry).provide(spec));\n    }\n\n    perDefinition<Deps extends any[], Src, Seed>(\n        spec: ContextValueSpec<DefinitionContext, any, Deps, Src, Seed>,\n    ): () => void {\n      return unloader.add(() => definitionContextRegistry.provide(spec));\n    }\n\n    perComponent<Deps extends any[], Src, Seed>(\n        spec: ContextValueSpec<ComponentContext, any, Deps, Src, Seed>,\n    ): () => void {\n      return unloader.add(() => componentContextRegistry.provide(spec));\n    }\n\n    setupDefinition<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionSetup]> {\n      return onPostDefSetup(componentType, unloader);\n    }\n\n    define<T extends object>(componentType: ComponentClass<T>): void {\n      componentRegistry.define(componentType);\n    }\n\n  }\n\n  return [new Context(), unloader.supply];\n}\n","import { ArraySet, Class, mergeFunctions } from '../../common';\nimport { FeatureDef } from '../feature-def';\nimport { FeatureNeedsError } from '../feature-needs-error';\nimport { FeatureKey } from './feature-loader.impl';\nimport { FeatureRequester } from './feature-requester.impl';\n\n/**\n * @internal\n */\nexport type FeatureClause = [FeatureRequest, 'is' | 'needs' | 'has', Class];\n\n/**\n * @internal\n */\nexport type FeatureNeedClause = [FeatureRequest, 'needs' | 'has', Class];\n\n/**\n * @internal\n */\nexport class FeatureRequest {\n\n  readonly def: FeatureDef.Options;\n  private _uses = 0;\n\n  constructor(\n      private readonly _requester: FeatureRequester,\n      readonly feature: Class,\n      private _revoke: () => void,\n  ) {\n    this.def = FeatureDef.of(feature);\n  }\n\n  request(clauses: readonly FeatureNeedClause[]): this {\n\n    const requester = this._requester;\n    const { registry } = requester;\n    const isClause: FeatureClause = [this, 'is', this.feature];\n\n    this._revokeBy(registry.provide({\n      a: FeatureKey.of(this.feature),\n      is: isClause,\n    }));\n\n    new ArraySet(this.def.has).forEach(feature => {\n\n      const clause: FeatureNeedClause = [this, 'has', feature];\n\n      this._revokeBy(registry.provide({ a: FeatureKey.of(feature), is: clause }));\n\n      // Request the provided feature _after_ provider\n      const request = requester.request(feature, [...clauses, clause]);\n\n      this._revokeBy(() => request.unuse());\n    });\n\n    new ArraySet(this.def.needs).forEach(feature => {\n\n      const clause: FeatureNeedClause = [this, 'needs', feature];\n\n      const request = requester.request(feature, [...clauses, clause]);\n\n      this._revokeBy(() => request.unuse());\n      this._revokeBy(registry.provide({ a: FeatureKey.of(feature), is: clause }));\n    });\n\n    this._uses = 1;\n\n    return this;\n  }\n\n  reuse(clauses: readonly FeatureNeedClause[]): this {\n    if (!this._uses) {\n      throw new FeatureNeedsError(clauses.map(([{ feature }, reason, need]) => [feature, reason, need]));\n    }\n\n    ++this._uses;\n\n    return this;\n  }\n\n  unuse() {\n    if (!--this._uses) {\n      this._revoke();\n    }\n  }\n\n  private _revokeBy(revoke: () => void) {\n    this._revoke = mergeFunctions(revoke, this._revoke);\n  }\n\n}\n","import { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { BootstrapContext, bootstrapDefault } from '../../boot';\nimport { BootstrapContextRegistry } from '../../boot/impl';\nimport { Class } from '../../common';\nimport { FeatureNeedClause, FeatureRequest } from './feature-request.impl';\n\nconst FeatureRequester__key = (/*#__PURE__*/ new SingleContextKey<FeatureRequester>(\n    'feature-requester',\n    {\n      byDefault: bootstrapDefault(context => new FeatureRequester(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport class FeatureRequester {\n\n  static get [ContextKey__symbol](): ContextKey<FeatureRequester> {\n    return FeatureRequester__key;\n  }\n\n  readonly registry: BootstrapContextRegistry;\n  private readonly _map = new Map<Class, FeatureRequest>();\n\n  constructor(context: BootstrapContext) {\n    this.registry = context.get(BootstrapContextRegistry);\n  }\n\n  request(feature: Class, clauses: readonly FeatureNeedClause[] = []): FeatureRequest {\n\n    const existing = this._map.get(feature);\n\n    if (existing) {\n      return existing.reuse(clauses);\n    }\n\n    const request = new FeatureRequest(this, feature, () => this._map.delete(feature));\n\n    this._map.set(feature, request);\n\n    return request.request(clauses);\n  }\n\n}\n","/**\n * @module @wesib/wesib\n */\nimport { nextArgs, nextSkip } from 'call-thru';\nimport { AfterEvent, afterEventBy, OnEvent, trackValue } from 'fun-events';\nimport { newNamespaceAliaser } from 'namespace-aliaser';\nimport { Class } from '../../common';\nimport { ComponentClass, CustomElements } from '../../component/definition';\nimport { FeatureDef, FeatureRef, FeatureStatus } from '../../feature';\nimport { FeatureKey, FeatureLoader, FeatureRequester } from '../../feature/loader';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { DefaultNamespaceAliaser } from '../globals';\nimport { BootstrapContextRegistry } from '../impl';\nimport { componentFactoryOf } from '../impl/component-factory.symbol.impl';\n\n/**\n * Bootstraps components.\n *\n * Note that both features and components can be passed as parameters to this function, as components are features too.\n *\n * @category Core\n * @param features  Features and components to enable.\n *\n * @returns Bootstrap context instance.\n */\nexport function bootstrapComponents(...features: Class[]): BootstrapContext {\n\n  const bootstrapContextRegistry = BootstrapContextRegistry.create();\n  const { bootstrapContext, complete } = initBootstrap(bootstrapContextRegistry);\n  const feature = features.length === 1 ? features[0] : bootstrapFeature(features);\n\n  bootstrapContext.get(FeatureRequester).request(feature);\n  bootstrapContext.get(FeatureKey.of(feature))(loader => {\n    loader!.init().then(complete);\n  });\n\n  return bootstrapContext;\n}\n\n/**\n * @internal\n */\nfunction bootstrapFeature(needs: Class[]): Class {\n  return FeatureDef.define(class BootstrapFeature {}, { needs });\n}\n\n/**\n * @internal\n */\nfunction initBootstrap(bootstrapContextRegistry: BootstrapContextRegistry) {\n\n  const stage = trackValue<BootstrapStage>(BootstrapStage.Init);\n  const values = bootstrapContextRegistry.values;\n\n  class Context extends BootstrapContext {\n\n    readonly get = values.get;\n    readonly whenReady: OnEvent<[BootstrapContext]>;\n\n    constructor() {\n      super();\n\n      const whenReady: OnEvent<[BootstrapContext]> = stage.read.thru(\n          s => s ? nextArgs(this) : nextSkip(),\n      );\n\n      this.whenReady = whenReady.once;\n      bootstrapContextRegistry.provide({ a: DefaultNamespaceAliaser, by: newNamespaceAliaser });\n      bootstrapContextRegistry.provide({ a: BootstrapContext, is: this });\n    }\n\n    async whenDefined<C extends object>(componentType: ComponentClass<C>) {\n      await new Promise(resolve => this.whenReady(resolve));\n      await this.get(CustomElements).whenDefined(componentType);\n      return componentFactoryOf(componentType);\n    }\n\n    load(feature: Class<any>): FeatureRef {\n\n      interface FeatureInfo {\n        status: FeatureStatus;\n        down?: Promise<void>;\n      }\n\n      const status = afterEventBy<[FeatureInfo]>(receiver => {\n\n        const request = bootstrapContext.get(FeatureRequester).request(feature);\n        const info = trackValue<FeatureInfo>({\n          status: {\n            feature,\n            ready: false,\n          },\n        });\n\n        this.get(FeatureKey.of(feature))({\n          supply: receiver.supply,\n          receive(_ctx, ldr) {\n\n            // Present until `request` revoked\n            // But that happens only when supply is cut off.\n            const loader = ldr as FeatureLoader;\n\n            info.it = {\n              status: {\n                feature: loader.request.feature,\n                ready: loader.ready,\n              },\n              down: loader.down,\n            };\n            if (!loader.ready) {\n              loader.init().then(() => {\n                info.it = {\n                  status: {\n                    feature: loader.request.feature,\n                    ready: true,\n                  },\n                  down: loader.down,\n                };\n              });\n            }\n          },\n        }).whenOff(() => {\n          request.unuse(); // Apply this callback _after_ registration complete,\n                           // to prevent receiver call.\n        });\n\n        info.read(receiver);\n      }).share();\n\n      let whenDown: Promise<void>;\n      const supply = status(({ down }) => whenDown = down!);\n      const read: AfterEvent<[FeatureStatus]> =\n          status.keep.thru(info => info.status).tillOff(supply);\n\n      class Ref extends FeatureRef {\n\n        get read() {\n          return read;\n        }\n\n        get down() {\n          return whenDown;\n        }\n\n        dismiss(reason?: any) {\n          supply.off(reason);\n          return whenDown;\n        }\n\n      }\n\n      return new Ref();\n    }\n\n  }\n\n  const bootstrapContext = new Context();\n\n  return {\n    bootstrapContext,\n    complete() {\n      stage.it = BootstrapStage.Ready;\n    },\n  };\n}\n\n/**\n * @internal\n */\nconst enum BootstrapStage {\n  Init,\n  Ready,\n}\n","/**\n * @module wesib/wesib\n */\nimport { AfterEvent, AfterEvent__symbol, EventKeeper } from 'fun-events';\nimport { FeatureStatus } from './feature-status';\n\n/**\n * Dynamically loaded feature reference.\n *\n * It is returned from [[BootstrapContext.load]] and can be used to read feature load status and unload it.\n *\n * Implements an `EventKeeper` interface by sending a feature load status updates.\n *\n * @category Core\n */\nexport abstract class FeatureRef implements EventKeeper<[FeatureStatus]> {\n\n  /**\n   * An `AfterEvent` sender of feature load status updates.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[FeatureStatus]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[FeatureStatus]> {\n    return this.read;\n  }\n\n  /**\n   * A promise resolved when feature is unloaded.\n   *\n   * This happens after all feature references dismissed.\n   */\n  abstract readonly down: Promise<void>;\n\n  /**\n   * Dismisses feature reference.\n   *\n   * When all feature references dismissed, then unloads the feature. This removes everything set up by the\n   * feature via [[BootstrapSetup]] and [[DefinitionSetup]].\n   *\n   * @param reason  Arbitrary reason of feature reference dismiss. This will be reported by load status supplies\n   * as their cut off reason.\n   *\n   * @returns A promise resolved when feature is unloaded. This happens only after all feature references dismissed.\n   */\n  abstract dismiss(reason?: any): Promise<void>;\n\n}\n","/**\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing DOM properties.\n *\n * Thus a property state path is always something like `[DomPropertyPath__root, 'property-name']`.\n *\n * @category Feature\n */\nexport const DomPropertyPath__root = (/*#__PURE__*/ Symbol('dom-property'));\n\n/**\n * A path to the named DOM property state.\n *\n * @category Feature\n */\nexport type DomPropertyPath<K extends PropertyKey = PropertyKey> = readonly [keyof DomPropertyPath__root_Keys, K];\n\n/**\n * Constructs a named DOM property state path.\n *\n * @category Feature\n * @param key  Target property key.\n *\n * @return DOM property state path.\n */\nexport function domPropertyPathTo<K extends PropertyKey = PropertyKey>(key: K): DomPropertyPath<K> {\n  return [DomPropertyPath__root, key];\n}\n\n/**\n * @category Feature\n */\n// tslint:disable-next-line:class-name\nexport interface DomPropertyPath__root_Keys {\n  [DomPropertyPath__root]: true;\n}\n","/**\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { StateTracker } from 'fun-events';\n\n/**\n * @internal\n */\nconst ComponentState__key = (/*#__PURE__*/ new SingleContextKey<ComponentState>('component-state'));\n\n/**\n * Component state tracker.\n *\n * @category Feature\n */\nexport class ComponentState extends StateTracker {\n\n  static get [ContextKey__symbol](): ContextKey<ComponentState> {\n    return ComponentState__key;\n  }\n\n}\n","/**\n * @module @wesib/wesib\n */\nimport { ComponentContext, StateUpdater } from '../../component';\nimport { FeatureDef, FeatureDef__symbol } from '../feature-def';\nimport { ComponentState } from './component-state';\n\n/**\n * @internal\n */\nconst StateSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.perComponent({\n      a: ComponentState,\n      by(context: ComponentContext) {\n\n        const state = new ComponentState();\n\n        context.whenDestroyed(reason => state.done(reason));\n\n        return state;\n      },\n    });\n    setup.perComponent({\n      a: StateUpdater,\n      by(state: ComponentState) {\n        return state.update;\n      },\n      with: [ComponentState],\n    });\n  },\n};\n\n/**\n * Component state support feature.\n *\n * When enabled, it registers the following component context values:\n *\n * - [[StateUpdater]] that allows to update the component state, and\n * - [[ComponentState]] that allows to track component state changes.\n *\n * Other features would use this to notify when the state changes. E.g. [[DomPropertiesSupport]]\n * and [[AttributesSupport]] features issue state updates when needed.\n *\n * @category Feature\n */\nexport class StateSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return StateSupport__feature;\n  }\n\n}\n","/**\n * @module @wesib/wesib\n */\nimport { DefaultRenderScheduler } from '../../boot/globals';\nimport { ComponentContext } from '../../component';\nimport { ComponentState } from '../state';\nimport { RenderDef } from './render-def';\n\n/**\n * Component element render function interface.\n *\n * It has no arguments. It may return either nothing, or a function. In the latter case the returned function will be\n * called immediately to render the element. It may, in turn, return a render function, and so on.\n *\n * @category Feature\n */\nexport type ElementRender =\n/**\n * @returns Either delegated render, or nothing.\n */\n    (this: void) => void | ElementRender;\n\n/**\n * @category Feature\n */\nexport const ElementRender = {\n\n  /**\n   * Enables component element rendering.\n   *\n   * The `render` call will be scheduled by [[DefaultRenderScheduler]] once component state updated.\n   *\n   * @param context  Target component context.\n   * @param render  Element render function.\n   * @param def  Optional element render definition.\n   */\n  render(\n      this: void,\n      context: ComponentContext,\n      render: ElementRender,\n      def: RenderDef = {},\n  ): void {\n\n    const { offline, path = [] } = def;\n    const stateTracker = context.get(ComponentState).track(path);\n    const schedule = context.get(DefaultRenderScheduler)();\n\n    let rendered = false;\n    const stateSupply = stateTracker.onUpdate(() => {\n      if (offline || context.connected) {\n        scheduleRender();\n      } else {\n        rendered = false;\n      }\n    });\n\n    if (offline) {\n      scheduleRender();\n    } else {\n      context.whenOn(() => {\n        if (!rendered) {\n          scheduleRender();\n        }\n      }).whenOff(reason => {\n        stateSupply.off(reason);\n        rendered = true;\n      });\n    }\n\n    function scheduleRender() {\n      rendered = true;\n      schedule(renderElement);\n    }\n\n    function renderElement() {\n      for (;;) {\n\n        const newRender = render();\n\n        if (newRender === render || typeof newRender !== 'function') {\n          break;\n        }\n\n        render = newRender;\n      }\n    }\n  },\n\n};\n","/**\n * @module @wesib/wesib\n */\nimport { TypedPropertyDecorator } from '../../common';\nimport { ComponentDef } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { StateSupport } from '../state';\nimport { ElementRender } from './element-render';\nimport { RenderDef } from './render-def';\n\n/**\n * Component property decorator that declares a rendering method for the component.\n *\n * The decorated method call will be scheduled by [[DefaultRenderScheduler]] once component state updated.\n *\n * The decorated method should have no arguments. It may return either nothing, or a function. In the latter case the\n * returned function will be called immediately to render the element. It may, in turn, return a renderer function,\n * and so on.\n *\n * This decorator automatically enables [[StateSupport]] feature.\n *\n * Utilizes [[ElementRender.render]] function to define rendering.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Non-mandatory render definition.\n *\n * @returns Component method decorator.\n */\nexport function Render<T extends ComponentClass>(def?: RenderDef): TypedPropertyDecorator<T> {\n  return (target: InstanceType<T>, propertyKey: string | symbol) => {\n\n    const componentType = target.constructor as T;\n\n    ComponentDef.define(\n        componentType,\n        {\n          feature: {\n            needs: StateSupport,\n          },\n          define(defContext) {\n            defContext.whenComponent(componentContext => {\n              componentContext.whenReady(() => {\n\n                const component = componentContext.component as any;\n                const render: () => any = component[propertyKey].bind(component);\n\n                ElementRender.render(componentContext, render, def);\n              });\n            });\n          },\n        },\n    );\n  };\n}\n","import { ContextUpKey, ContextUpRef, ContextValueOpts, ContextValues } from 'context-values';\nimport { AfterEvent, afterThe, EventKeeper, EventSender, OnEvent, onSupplied } from 'fun-events';\n\n/**\n * @internal\n */\ntype FetchAgent<Res extends any[]> = (\n    this: void,\n    next: (this: void, request?: Request) => OnEvent<Res>,\n    request: Request,\n) => EventSender<Res>;\n\n/**\n * @internal\n */\ntype CombinedFetchAgent<Res extends any[]> = (\n    this: void,\n    next: (this: void, request: Request) => OnEvent<Res>,\n    request: Request,\n) => OnEvent<Res>;\n\n/**\n * @internal\n */\nexport class FetchAgentKey<Res extends any[]>\n    extends ContextUpKey<CombinedFetchAgent<Res>, FetchAgent<Res>>\n    implements ContextUpRef<CombinedFetchAgent<Res>, FetchAgent<Res>> {\n\n  readonly upKey: ContextUpKey.UpKey<CombinedFetchAgent<Res>, FetchAgent<Res>>;\n\n  constructor(name: string) {\n    super(name);\n    this.upKey = this.createUpKey(\n        opts => opts.seed.keep.dig(\n            (...agents) => {\n              if (agents.length) {\n                return afterThe(combineFetchAgents(agents));\n              }\n\n              const defaultProvider = () => afterThe(defaultFetchAgent);\n\n              return opts.byDefault(defaultProvider) || defaultProvider();\n            },\n        ),\n    );\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          CombinedFetchAgent<Res>,\n          EventKeeper<FetchAgent<Res>[]> | FetchAgent<Res>,\n          AfterEvent<FetchAgent<Res>[]>>,\n  ): CombinedFetchAgent<Res> {\n\n    let delegated!: CombinedFetchAgent<Res>;\n\n    opts.context.get(\n        this.upKey,\n        'or' in opts ? { or: opts.or != null ? afterThe(opts.or) : opts.or } : undefined,\n    )!(agent => delegated = agent);\n\n    return (next, request) => delegated(next, request);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultFetchAgent<Res extends any[]>(\n    next: (this: void, request: Request) => OnEvent<Res>,\n    request: Request,\n): OnEvent<Res> {\n  return next(request);\n}\n\n/**\n * @internal\n */\nexport function combineFetchAgents<Res extends any[]>(agents: FetchAgent<Res>[]): CombinedFetchAgent<Res> {\n  return (next, request) => {\n\n    const fetch: (agentIdx: number, agentRequest: Request) => OnEvent<Res> = (agentIdx, agentRequest) => {\n\n      const agent = agents[agentIdx];\n\n      if (!agent) {\n        return next(agentRequest);\n      }\n\n      return onSupplied(\n          agent(\n              (nextRequest = agentRequest) => fetch(agentIdx + 1, nextRequest),\n              agentRequest,\n          ),\n      );\n    };\n\n    return fetch(0, request);\n  };\n}\n","/**\n * @module @wesib/generic\n */\nimport { ContextUpRef } from 'context-values';\nimport { EventSender, OnEvent } from 'fun-events';\nimport { FetchAgentKey } from './fetch-agent-key.impl';\n\n/**\n * HTTP fetch agent signature.\n *\n * The agent can be used to alter [[HttpFetch]] processing. For that it should be registered in appropriate context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by [[HttpFetch]].\n */\nexport type HttpFetchAgent =\n/**\n * @param next  Either calls the next agent in chain, or actually fetches the data if this agent is the last one.\n * Accepts an optional `Request` parameter. The original request will be used instead when omitted.\n * @param request  HTTP request.\n *\n * @returns An `EventSender` of response object(s). It is returned either to preceding agent in chain, or as a result of\n * [[HttpFetch]] call.\n */\n    (\n        this: void,\n        next: (this: void, request?: Request) => OnEvent<[Response]>,\n        request: Request,\n    ) => EventSender<[Response]>;\n\nexport namespace HttpFetchAgent {\n\n  /**\n   * Combined HTTP fetch agent signature.\n   *\n   * This is what is available under [[HttpFetchAgent]] key.\n   */\n  export type Combined =\n  /**\n   * @param next  Either calls the next agent in chain, or actually fetches the data if this agent is the last one.\n   * Accepts `Request` parameter.\n   * @param request  HTTP request.\n   *\n   * @returns An `OnEvent` registrar of response object(s) receivers. It is returned as a result of [[HttpFetch]] call.\n   */\n      (\n          this: void,\n          next: (this: void, request: Request) => OnEvent<[Response]>,\n          request: Request,\n      ) => OnEvent<[Response]>;\n\n}\n\n/**\n * A key of context value containing an [[HttpFetchAgent]] instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the fetch.\n */\nexport const HttpFetchAgent: ContextUpRef<HttpFetchAgent.Combined, HttpFetchAgent> =\n    (/*#__PURE__*/ new FetchAgentKey<[Response]>('http-fetch-agent'));\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { DomEventDispatcher, EventEmitter, EventSupply, eventSupply, OnEvent, onEventBy } from 'fun-events';\nimport { HttpFetch } from './http-fetch';\nimport { HttpFetchAgent } from './http-fetch-agent';\n\nconst HttpFetchAborted = {};\n\n/**\n * @internal\n */\nexport function newHttpFetch(context: BootstrapContext): HttpFetch {\n\n  const window = context.get(BootstrapWindow);\n  const agent = context.get(HttpFetchAgent);\n\n  return (input, init) => agent(fetch, new Request(input, init));\n\n  function fetch(request: Request): OnEvent<[Response]> {\n    return onEventBy(receiver => {\n\n      const responseEmitter = new EventEmitter<[Response]>();\n      let supply: EventSupply;\n\n      if ('AbortController' in window) {\n\n        const abortController = new (window as any).AbortController();\n        const { signal } = abortController;\n\n        supply = eventSupply(reason => {\n          if (reason === HttpFetchAborted) {\n            abortController.abort();\n          }\n        });\n        receiver.supply.whenOff(() => supply.off(HttpFetchAborted)).needs(supply);\n        responseEmitter.on({\n          supply,\n          receive(ctx, response) {\n            receiver.receive(ctx, response);\n          },\n        });\n\n        const customSignal = request.signal;\n\n        if (customSignal) {\n          new DomEventDispatcher(customSignal).on('abort').once(() => abortController.abort());\n          if (customSignal.aborted) {\n            abortController.abort();\n          }\n        }\n\n        request = new Request(request, { signal });\n      } else {\n        supply = responseEmitter.on(receiver);\n      }\n\n      window.fetch(request)\n          .then(response => {\n            responseEmitter.send(response);\n            supply.off();\n          })\n          .catch(reason => supply.off(reason));\n    });\n  }\n}\n","/**\n * @module @wesib/generic\n */\nimport { bootstrapDefault } from '@wesib/wesib';\nimport { FnContextKey, FnContextRef } from 'context-values';\nimport { OnEvent } from 'fun-events';\nimport { newHttpFetch } from './http-fetch.impl';\n\n/**\n * HTTP fetch function signature.\n *\n * This is a function that wraps browser's\n * [fetch()](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch) function and provides\n * additional functionality. E.g. request interception.\n *\n * This function returns an `OnEvent` sender instead of a `Promise`. This allows to report multiple responses.\n * E.g. when the resource refresh requested and delivered. The request is sent whenever a receiver is registered\n * in this sender. When the fetch completes the response supply is cut off, and callbacks registered with its\n * `whenOff()` method are notified. When fetch fails for whatever reason, this reason is passed to these callbacks.\n * The fetch can be aborted by cutting off the response supply. I.e. by calling its `off()` method.\n *\n * An instance of [[HttpFetch]] is available from bootstrap context.\n */\nexport type HttpFetch =\n/**\n * @param input  The resource to fetch. This can either an URL string, or a `Request` object.\n * @param init  Custom settings to apply to the request.\n *\n * @returns An `OnEvent` sender of responses.\n */\n    (this: void, input: RequestInfo, init?: RequestInit) => OnEvent<[Response]>;\n\n/**\n * A key of bootstrap context value containing an [[HttpFetch]] instance.\n */\nexport const HttpFetch: FnContextRef<Parameters<HttpFetch>, ReturnType<HttpFetch>> =\n    (/*#__PURE__*/ new FnContextKey<Parameters<HttpFetch>, ReturnType<HttpFetch>>(\n        'http-fetch',\n        {\n          byDefault: bootstrapDefault(newHttpFetch),\n        },\n    ));\n","/**\n * @module @wesib/generic\n */\nimport { Navigation } from './navigation';\nimport { Page } from './page';\n\n/**\n * Navigation event.\n */\nexport type NavigationEvent = LeavePageEvent | EnterPageEvent | StayOnPageEvent;\n\n/**\n * Navigation event type.\n */\nexport const enum NavigationEventType {\n\n  /**\n   * {@link EnterPageEvent Enter page event} type.\n   */\n  EnterPage = 'wesib:enterPage',\n\n  /**\n   * {@link LeavePageEvent Leave page event} type.\n   */\n  LeavePage = 'wesib:leavePage',\n\n  /**\n   * {@link StayOnPageEvent Stay on page event} type.\n   */\n  StayOnPage = 'wesib:stayOnPage',\n\n}\n\n/**\n * An event fired when navigation target reached by entering destination page.\n *\n * @event EnterPageEvent#wesib:enterPage\n */\nexport class EnterPageEvent extends Event {\n\n  /**\n   * When navigation event occurred.\n   *\n   * Can be one of:\n   * - `open` when opening a new page,\n   * - `replace` when replacing navigation history entry,\n   * - `enter` when entering new page by user action (e.g. hashchange event),\n   * - `return` when navigated to previously visited entry in navigation history.\n   */\n  readonly when: 'open' | 'replace' | 'enter' | 'return';\n\n  /**\n   * Entered page.\n   */\n  readonly to: Page;\n\n  /**\n   * Constructs enter page event.\n   *\n   * @param type  Event type.\n   * @param init  Initialization options.\n   */\n  constructor(type: string, init: EnterPageEventInit) {\n    super(type, { ...init, cancelable: false });\n    this.when = init.when;\n    this.to = init.to;\n  }\n\n}\n\n/**\n * {@link EnterPageEvent Enter page event} initialization options.\n */\nexport interface EnterPageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * When navigation event occurred.\n   *\n   * Can be one of:\n   * - `open` when opening a new page,\n   * - `replace` when replacing navigation history entry,\n   * - `enter` when entering new page by user action (e.g. hashchange event),\n   * - `return` when navigated to previously visited entry in navigation history.\n   */\n  readonly when: 'open' | 'replace' | 'enter' | 'return';\n\n  /**\n   * Entered page.\n   */\n  readonly to: Page;\n\n}\n\n/**\n * An event fired right before leaving the page in order to navigate to another one.\n *\n * This event can be cancelled in order to prevent actual navigation or history update. The navigation is also\n * cancelled when another navigation initiated by one of the handlers of this event.\n *\n * @event LeavePageEvent#wesib:leavePage\n */\nexport class LeavePageEvent extends Event {\n\n  /**\n   * When navigation event occurred. Either `pre-open` when leaving a page to open a new one, or `pre-replace` when\n   * leaving a page to replace it with another history entry.\n   */\n  readonly when: 'pre-open' | 'pre-replace';\n\n  /**\n   * The page to leave.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target page.\n   */\n  readonly to: Page;\n\n  /**\n   * Constructs leave page event.\n   *\n   * @param type  Event type.\n   * @param init  Initialization options.\n   */\n  constructor(type: string, init: LeavePageEventInit) {\n    super(type, { ...init, cancelable: true });\n    this.when = init.when;\n    this.from = init.from;\n    this.to = init.to;\n  }\n\n}\n\n/**\n * {@link LeavePageEvent Leave page event} initialization options.\n */\nexport interface LeavePageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * When navigation event occurred. Either `pre-open` when leaving a page to open a new one, or `pre-replace` when\n   * leaving a page to replace it with another history entry.\n   */\n  readonly when: 'pre-open' | 'pre-replace';\n\n  /**\n   * The page to leave.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target page.\n   */\n  readonly to: Page;\n\n}\n\n/**\n * An event fired when navigation cancelled or failed.\n *\n * @event StayOnPageEvent#wesib:stayOnPage\n */\nexport class StayOnPageEvent extends Event {\n\n  /**\n   * When navigation event occurred. Always `stay`.\n   */\n  get when(): 'stay' {\n    return 'stay';\n  }\n\n  /**\n   * The page to stay at.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target.\n   */\n  readonly to: Navigation.URLTarget;\n\n  /**\n   * A reason of navigation failure. This is set when navigation failed due to some error.\n   */\n  readonly reason?: any;\n\n  /**\n   * Constructs stay on page event.\n   *\n   * @param type  Event type.\n   * @param init  Initialization options.\n   */\n  constructor(type: string, init: StayOnPageEventInit) {\n    super(type, { ...init, cancelable: true });\n    this.from = init.from;\n    this.to = init.to;\n    this.reason = init.reason;\n  }\n\n}\n\n/**\n * {@link StayOnPageEvent Stay on page event} initialization options.\n */\nexport interface StayOnPageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * The page to stay at.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target.\n   */\n  readonly to: Navigation.URLTarget;\n\n  /**\n   * A reason of navigation failure. This is set when navigation failed due to some error.\n   */\n  readonly reason?: any;\n\n}\n","/**\n * @module @wesib/generic\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  EventKeeper,\n  EventSender,\n  OnDomEvent,\n  OnEvent,\n  OnEvent__symbol,\n} from 'fun-events';\nimport { EnterPageEvent, LeavePageEvent, NavigationEvent, StayOnPageEvent } from './navigation.event';\nimport { Page } from './page';\nimport { PageParam } from './page-param';\n\n/**\n * @internal\n */\nconst Navigation__key = (/*#__PURE__*/ new SingleContextKey<Navigation>('navigation'));\n\n/**\n * Browser navigation service.\n *\n * Expected to be used as a [History] and [Location] APIs replacement.\n *\n * Fires additional navigation events the browser does not support natively.\n *\n * Implements an `EventSender` interface by sending {@link NavigationEvent navigation events} to registered receivers.\n *\n * Implements an `EventKeeper` interface by sending current {@link Page page} to registered receivers.\n *\n * Available as bootstrap context value when [[NavigationSupport]] feature is enabled.\n *\n * [History]: https://developer.mozilla.org/en-US/docs/Web/API/History\n * [Location]: https://developer.mozilla.org/en-US/docs/Web/API/Location\n */\nexport abstract class Navigation implements EventSender<[NavigationEvent]>, EventKeeper<[Page]> {\n\n  static get [ContextKey__symbol](): ContextKey<Navigation> {\n    return Navigation__key;\n  }\n\n  /**\n   * The number of element in navigation history.\n   */\n  abstract readonly length: number;\n\n  /**\n   * An `OnDomEvent` registrar of enter page event receivers.\n   */\n  abstract readonly onEnter: OnDomEvent<EnterPageEvent>;\n\n  /**\n   * An `OnDomEvent` registrar of leave page event receivers.\n   *\n   * These receivers may cancel navigation by calling `preventDefault()` method of received event.\n   */\n  abstract readonly onLeave: OnDomEvent<LeavePageEvent>;\n\n  /**\n   * An `OnDomEvent` registrar of stay on page event receivers.\n   *\n   * These receivers are informed when navigation has been cancelled by one of leave page event receivers,\n   * navigation failed due to e.g. invalid URL, or when another navigation request initiated before the page left.\n   */\n  abstract readonly onStay: OnDomEvent<StayOnPageEvent>;\n\n  /**\n   * An `OnEvent` registrar of navigation events receivers.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly on: OnEvent<[NavigationEvent]>;\n\n  get [OnEvent__symbol](): OnEvent<[NavigationEvent]> {\n    return this.on;\n  }\n\n  /**\n   * An `AfterEvent` registrar of current page receivers.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[Page]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[Page]> {\n    return this.read;\n  }\n\n  /**\n   * Goes to the previous page in navigation history.\n   *\n   * Calling this method is the same as calling `go(-1)`.\n   */\n  back(): void {\n    this.go(-1);\n  }\n\n  /**\n   * Goes to the next page in navigation history.\n   *\n   * Calling this method is the same as calling `go(1)`.\n   */\n  forward(): void {\n    this.go(1);\n  }\n\n  /**\n   * Loads a page from navigation history, identified by its relative location to the current page.\n   *\n   * For example `-1` navigates to previous page, while `1` navigates to the next one. If you specify an out-of-bounds\n   * value (for instance, specifying -1 when there are no previously-visited pages in navigation history), this method\n   * silently has no effect.\n   *\n   * @param delta  Relative location in navigation history to navigate to. The absent value or value of `0` reloads\n   * the current page.\n   */\n  abstract go(delta?: number): void;\n\n  /**\n   * Reloads current page.\n   *\n   * Calling this method is the same as calling `go()`.\n   */\n  reload(): void {\n    this.go();\n  }\n\n  /**\n   * Opens a page by navigating to the given `target`.\n   *\n   * Appends an entry to navigation history.\n   *\n   * @param target  Either navigation target or URL to navigate to.\n   * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually navigate.\n   * Then navigates to the `target`, unless the event cancelled.\n   * @fires NavigateEvent@wesib:navigate  On window object when navigation succeed.\n   *\n   * @returns A promise resolved to navigated page, or to `null` otherwise.\n   */\n  abstract open(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  /**\n   * Replaces current navigation history entry with the given `target`.\n   *\n   * @param target  Either navigation target or URL to replace current history entry with.\n   * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually update the history.\n   * Then navigates to the `target`, unless the event cancelled.\n   * @fires NavigateEvent@wesib:navigate  On window object when history updated.\n   *\n   * @returns A promise resolved to navigated page, or to `null` otherwise.\n   */\n  abstract replace(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  /**\n   * Replaces current page URL with the given one.\n   *\n   * Does not alter current page state, and does not trigger any events.\n   *\n   * @param url  An URL to replace the\n   *\n   * @returns Current page with updated URL.\n   */\n  abstract update(url: string | URL): Page;\n\n  /**\n   * Creates parameterized navigation instance and assigns a page parameter to apply to target page.\n   *\n   * @typeparam T  Parameter value type.\n   * @typeparam I  Parameter input type.\n   * @param ref  A reference to page navigation parameter to apply.\n   * @param input  Parameter input to use when constructing its value.\n   *\n   * @returns New parameterized navigation instance.\n   */\n  abstract with<T, I>(ref: PageParam.Ref<T, I>, input: I): Navigation.Parameterized;\n\n}\n\nexport namespace Navigation {\n\n  /**\n   * Parameterized navigation.\n   *\n   * Allows to assign target page parameters prior to navigating to it.\n   */\n  export interface Parameterized {\n\n    /**\n     * Applies parameter to navigation target page.\n     *\n     * @typeparam T  Parameter value type.\n     * @typeparam I  Parameter input type.\n     * @param ref  A reference to page navigation parameter to apply.\n     * @param input  Parameter input to use when constructing its value.\n     *\n     * @returns New parameterized navigation instance.\n     */\n    with<T, I>(ref: PageParam.Ref<T, I>, input: I): Parameterized;\n\n    /**\n     * Opens a page by navigating to the given `target` with provided page parameters.\n     *\n     * Appends an entry to navigation history.\n     *\n     * @param target  Either navigation target or URL to navigate to.\n     * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually navigate.\n     * Then navigates to the `target`, unless the event cancelled.\n     * @fires NavigateEvent@wesib:navigate  On window object when navigation succeed.\n     *\n     * @returns A promise resolved to navigated page, or to `null` otherwise.\n     */\n    open(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n    /**\n     * Replaces the most recent entry in navigation history with the given `target` and provided page parameters.\n     *\n     * @param target  Either navigation target or URL to replace the latest history entry with.\n     * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually update the history.\n     * Then navigates to the `target`, unless the event cancelled.\n     * @fires NavigateEvent@wesib:navigate  On window object when history updated.\n     *\n     * @returns A promise resolved to navigated page, or to `null` otherwise.\n     */\n    replace(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  }\n\n  /**\n   * Navigation target.\n   *\n   * This is passed to [[Navigation.open]] and [[Navigation.replace]] methods.\n   */\n  export interface Target {\n\n    /**\n     * An URL to update the browser location string to.\n     */\n    readonly url?: string | URL;\n\n    /**\n     * Opaque data to apply to session history. I.e. either push or replace.\n     */\n    readonly data?: any;\n\n    /**\n     * New window title.\n     */\n    readonly title?: string;\n\n  }\n\n  /**\n   * Navigation target with URL value.\n   */\n  export interface URLTarget extends Target {\n\n    readonly url: URL;\n\n  }\n\n}\n","/**\n * @module @wesib/generic\n */\nimport { BootstrapWindow } from '@wesib/wesib';\nimport { ContextUpKey, ContextUpRef, ContextValueOpts, ContextValues } from 'context-values';\nimport { AfterEvent, afterThe, EventKeeper } from 'fun-events';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\nimport Target = Navigation.Target;\n\n/**\n * Navigation agent signature.\n *\n * The agent is called by navigation methods when leaving current page and may alter navigation processing.\n * E.g. change navigation target. For that it should be registered in appropriate context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by navigation method.\n */\nexport type NavigationAgent =\n/**\n * @param next  Either calls the next agent in chain, or applies the final navigation target if this agent is the last\n * one. Not calling this function effectively prevents navigation.\n * Accepts an optional [[Navigation.Target]] parameter. The original target will be used instead when omitted.\n * @param when  When navigation occurred. Either `pre-open`, or `pre-replace`.\n * @param from  The page to leave.\n * @param to  Navigation target page.\n */\n    (\n        this: void,\n        next: (this: void, target?: Target) => void,\n        when: 'pre-open' | 'pre-replace',\n        from: Page,\n        to: Page,\n    ) => void;\n\n/**\n * @internal\n */\nclass NavigationAgentKey\n    extends ContextUpKey<NavigationAgent.Combined, NavigationAgent>\n    implements ContextUpRef<NavigationAgent.Combined, NavigationAgent> {\n\n  readonly upKey: ContextUpKey.UpKey<NavigationAgent.Combined, NavigationAgent>;\n\n  constructor(name: string) {\n    super(name);\n    this.upKey = this.createUpKey(\n        opts => {\n\n          const { document } = opts.context.get(BootstrapWindow);\n\n          return opts.seed.keep.dig(\n              (...agents) => {\n                if (agents.length) {\n                  return afterThe(combinedAgent);\n                }\n\n                const defaultProvider = () => afterThe(defaultNavigationAgent);\n\n                return opts.byDefault(defaultProvider) || defaultProvider();\n\n                function combinedAgent(\n                    next: (this: void, target: Navigation.URLTarget) => void,\n                    when: 'pre-open' | 'pre-replace',\n                    from: Page,\n                    to: Page,\n                ): void {\n\n                  return navigate(0, to);\n\n                  function navigate(agentIdx: number, agentTo: Page): void {\n\n                    const agent = agents[agentIdx];\n\n                    if (!agent) {\n                      return next(agentTo);\n                    }\n\n                    agent(\n                        (\n                            {\n                              url: nextURL = agentTo.url,\n                              title: nextTitle = agentTo.title,\n                              data: nextData = agentTo.data,\n                            }: Navigation.Target = agentTo,\n                        ) => navigate(\n                            agentIdx + 1,\n                            {\n                              url: new URL(String(nextURL), document.baseURI),\n                              title: nextTitle,\n                              data: nextData,\n                              get visited() {\n                                return agentTo.visited;\n                              },\n                              get current() {\n                                return agentTo.current;\n                              },\n                              get(ref) {\n                                return agentTo.get(ref);\n                              },\n                              put(ref, input) {\n                                agentTo.put(ref, input);\n                              },\n                            },\n                        ),\n                        when,\n                        from,\n                        agentTo,\n                    );\n                  }\n                }\n              },\n          );\n        },\n    );\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          NavigationAgent.Combined,\n          EventKeeper<NavigationAgent[]> | NavigationAgent,\n          AfterEvent<NavigationAgent[]>>,\n  ): NavigationAgent.Combined {\n\n    let delegated: NavigationAgent.Combined;\n\n    opts.context.get(\n        this.upKey,\n        'or' in opts ? { or: opts.or != null ? afterThe(opts.or) : opts.or } : undefined,\n    )!(agent => delegated = agent);\n\n    return (next, when, from, to) => delegated(next, when, from, to);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultNavigationAgent(\n    next: (this: void, target: Navigation.URLTarget) => void,\n    _when: 'pre-open' | 'pre-replace',\n    _from: Page,\n    to: Page,\n): void {\n  next(to);\n}\n\nexport namespace NavigationAgent {\n\n  /**\n   * Combined navigation agent signature.\n   *\n   * This is what is available under [[NavigationAgent]] key.\n   */\n  export type Combined =\n  /**\n   * @param next  Either calls the next agent in chain, or applies the final navigation target if this agent is the last\n   * one. Not calling this function effectively prevents navigation.\n   * Accepts an optional [[Navigation.Target]] parameter. The original target will be used instead when omitted.\n   * @param when  When navigation occurred. Either `pre-open`, or `pre-replace`.\n   * @param from  The page to leave.\n   * @param to  Navigation target page.\n   */\n      (\n          this: void,\n          next: (this: void, target: Navigation.URLTarget) => void,\n          when: 'pre-open' | 'pre-replace',\n          from: Page,\n          to: Page,\n      ) => void;\n\n}\n\n/**\n * A key of context value containing an [[NavigationAgent]] instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the navigation.\n */\nexport const NavigationAgent: ContextUpRef<NavigationAgent.Combined, NavigationAgent> =\n    (/*#__PURE__*/ new NavigationAgentKey('navigation-agent'));\n","/**\n * @module @wesib/generic\n */\nimport { Page } from './page';\nimport { PageParamContext } from './page-param-context';\n\n/**\n * A key of {@link PageParam.Ref page parameter request} property containing requested page parameter.\n */\nexport const PageParam__symbol = (/*#__PURE__*/ Symbol('page-param'));\n\n/**\n * Page navigation parameter.\n *\n * Can applied before navigation happened (i.e. to [[LeavePageEvent]]). Then it will be available to the target page\n * both before and after navigation.\n *\n * @typeparam T  Parameter value type.\n * @typaparam I  Parameter input type.\n */\nexport abstract class PageParam<T, I> implements PageParam.Ref<T, I> {\n\n  get [PageParam__symbol](): this {\n    return this;\n  }\n\n  /**\n   * Creates page parameter handle.\n   *\n   * This method is called when {@link Page.put assigning new page parameter}.It is called at most once per request,\n   * unless this parameter is assigned already. A {@link PageParam.Handle.put} method will be called instead\n   * in the latter case.\n   *\n   * @param page  A page to assign navigation parameter to.\n   * @param input  Parameter input used to construct its initial value.\n   * @param context  Page parameter context.\n   *\n   * @returns New page parameter value handle.\n   */\n  abstract create(page: Page, input: I, context: PageParamContext): PageParam.Handle<T, I>;\n\n}\n\nexport namespace PageParam {\n\n  /**\n   * Page navigation parameter reference.\n   *\n   * @typeparam T  Parameter value type.\n   * @typaparam I  Parameter input type.\n   */\n  export interface Ref<T, I> {\n\n    /**\n     * Referred page navigation parameter instance.\n     */\n    readonly [PageParam__symbol]: PageParam<T, I>;\n\n  }\n\n  /**\n   * Page navigation parameter value handle.\n   *\n   * Holds and maintains parameter value.\n   *\n   * Created by {@link PageParam.create} method.\n   *\n   * @typeparam T  Parameter value type.\n   * @typaparam I  Parameter input type.\n   */\n  export interface Handle<T, I> {\n\n    /**\n     * Returns current parameter value.\n     *\n     * @returns Parameter value.\n     */\n    get(): T;\n\n    /**\n     * Puts page parameter value.\n     *\n     * This method is called when {@link Page.put re-assigning page parameter}. It is called when page parameter\n     * is assigned already and can be used to update it. The update logic is up to the implementation.\n     *\n     * @param input  Parameter input to use when updating its value.\n     */\n    put(input: I): void;\n\n    /**\n     * Transfers parameter to target page.\n     *\n     * This is called right before [[LeavePageEvent]] is fired for each parameter handle of current page.\n     *\n     * @param to  A page to transfer parameter to.\n     * @param when  When the transfer happens. Either `pre-open`, `pre-replace`, `open`, or `return`. The latter is used\n     * when return to page generated by another app version. E.g. from the page that has been reloaded.\n     *\n     * @returns New parameter handle instance for target page, or `undefined` if nothing to transfer.\n     */\n    transfer?(to: Page, when: 'pre-open' | 'pre-replace' | 'enter' | 'return'): Handle<T, I> | undefined;\n\n    /**\n     * This method is called when the page this parameter created for is entered.\n     *\n     * @param page  Entered page.\n     * @param when  When the page is entered. Either `init`, `open`, `replace`, `enter`, or `return`.\n     */\n    enter?(page: Page, when: 'init' | 'open' | 'replace' | 'enter' | 'return'): void;\n\n    /**\n     * This method is called when the page this parameter created for is left.\n     */\n    leave?(): void;\n\n    /**\n     * This method is called when page navigation aborted and target page won't be reached.\n     *\n     * The handle won't be accessed after this method call.\n     *\n     * @param at  The page the browser remains at.\n     */\n    stay?(at: Page): void;\n\n    /**\n     * This method is called when the page this parameter is created for is removed from navigation history.\n     *\n     * The handle won't be accessed after this method call.\n     */\n    forget?(): void;\n\n  }\n\n}\n","/**\n * @module @wesib/generic\n */\nimport { ContextValues } from 'context-values';\n\n/**\n * Page parameter context.\n *\n * Provides values available in bootstrap context.\n */\nexport abstract class PageParamContext extends ContextValues {\n}\n","import { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { itsEach } from 'a-iterable';\nimport { noop } from 'call-thru';\nimport { ContextKey__symbol, ContextRegistry, SingleContextKey } from 'context-values';\nimport { ValueTracker } from 'fun-events';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\nimport { PageParam, PageParam__symbol } from './page-param';\nimport { PageParamContext } from './page-param-context';\n\nconst RoutingHistory__key = (/*#__PURE__*/ new SingleContextKey<NavHistory>(\n    'navigation-history',\n    {\n      byDefault: bootstrapDefault(ctx => new NavHistory(ctx)),\n    },\n));\n\n/**\n * @internal\n */\nexport class NavHistory {\n\n  static get [ContextKey__symbol]() {\n    return RoutingHistory__key;\n  }\n\n  private readonly _document: Document;\n  private readonly _location: Location;\n  private readonly _history: History;\n  private readonly _entries = new Map<number, PageEntry>();\n  private readonly _uid: string;\n  private _lastId = 0;\n\n  constructor(private readonly _context: BootstrapContext) {\n    const window = _context.get(BootstrapWindow);\n\n    this._document = window.document;\n    this._location = window.location;\n    this._history = window.history;\n    this._uid = btoa(String(Math.random()));\n  }\n\n  init(): PageEntry {\n\n    const { data } = extractNavData(this._history.state);\n    const entry = this.newEntry({\n      url: new URL(this._location.href),\n      data,\n      title: this._document.title,\n    });\n\n    this._entries.set(entry.id, entry);\n    entry.schedule(() => {\n      entry.enter('init');\n      this._history.replaceState(this._historyState(entry), '');\n    });\n\n    return entry;\n  }\n\n  newEntry(target: Navigation.URLTarget): PageEntry {\n    return new PageEntry(this._context, ++this._lastId, target);\n  }\n\n  open(\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ) {\n\n    const { page: { title = '', url } } = toEntry;\n\n    this._history.pushState(\n        this._historyState(toEntry),\n        title,\n        url.href,\n    );\n\n    this._enter('open', toEntry, tracker);\n  }\n\n  private _enter(\n      when: 'open' | 'enter',\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ) {\n\n    const fromEntry = tracker.it;\n\n    this._entries.set(toEntry.id, toEntry);\n\n    try {\n      // Forget all entries starting from next one\n      for (let e = fromEntry.next; e; e = e.next) {\n        this._forget(e);\n      }\n    } finally {\n      toEntry.prev = fromEntry;\n      fromEntry.next = toEntry;\n      toEntry.schedule(() => {\n        try {\n          fromEntry.leave();\n        } finally {\n          toEntry.enter(when);\n        }\n      });\n      tracker.it = toEntry;\n    }\n  }\n\n  replace(\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ) {\n\n    const fromEntry = tracker.it;\n    const { page: { title = '', url } } = toEntry;\n\n    this._history.replaceState(\n        this._historyState(toEntry),\n        title,\n        url.href,\n    );\n\n    this._entries.set(toEntry.id, toEntry);\n\n    const prev = fromEntry.prev;\n\n    if (prev) {\n      toEntry.prev = prev;\n      prev.next = toEntry;\n    }\n\n    toEntry.schedule(() => {\n      try {\n        fromEntry.leave();\n      } finally {\n        try {\n          this._forget(fromEntry);\n        } finally {\n          toEntry.enter('replace');\n        }\n      }\n    });\n    tracker.it = toEntry;\n  }\n\n  popState(\n      popState: PopStateEvent,\n      tracker: ValueTracker<PageEntry>,\n  ): PageEntry | undefined {\n\n    const { state } = popState;\n\n    if (state == null) {\n      // Hash change\n      if (this._history.state == null) {\n        // Not a return\n        return this._changeHash(tracker);\n      }\n      return; // Already handled by `hashchange` handler\n    }\n\n    const fromEntry = tracker.it;\n    const { uid, data, id: pageId } = extractNavData(state);\n    let toEntry: PageEntry;\n\n    const existingEntry = uid === this._uid && pageId != null ? this._entries.get(pageId) : undefined;\n\n    if (existingEntry) {\n      toEntry = existingEntry;\n    } else {\n      // Returning to page existed in previous app version\n      toEntry = this.newEntry({\n        url: new URL(this._location.href),\n        data,\n        title: this._document.title,\n      });\n      fromEntry.transfer(toEntry, 'return');\n      this._entries.set(toEntry.id, toEntry);\n      this._history.replaceState(this._historyState(toEntry), '');\n    }\n\n    toEntry.schedule(() => {\n      try {\n        fromEntry.leave();\n      } finally {\n        toEntry.enter('return');\n      }\n    });\n\n    tracker.it = toEntry;\n\n    return toEntry;\n  }\n\n  public hashChange(tracker: ValueTracker<PageEntry>): PageEntry | void {\n    if (this._history.state == null) {\n      // Not a return\n      return this._changeHash(tracker);\n    }\n    // Otherwise, a `popstate` event is also triggered,\n    // and its handler would do the job (or already did).\n  }\n\n  public update(tracker: ValueTracker<PageEntry>, url: URL): PageEntry {\n\n    const oldEntry = tracker.it;\n    const newEntry = new PageEntry(this._context, ++this._lastId, { ...oldEntry.page, url }, oldEntry);\n\n    this._entries.set(newEntry.id, newEntry);\n    this._history.replaceState(this._historyState(newEntry), '', url.href);\n    this._entries.delete(oldEntry.id);\n\n    return tracker.it = newEntry;\n  }\n\n  private _changeHash(tracker: ValueTracker<PageEntry>): PageEntry {\n\n    const fromEntry = tracker.it;\n    const toEntry = this.newEntry({\n      url: new URL(this._location.href),\n      data: null,\n      title: this._document.title,\n    });\n\n    try {\n      fromEntry.transfer(toEntry, 'enter');\n    } finally {\n      this._history.replaceState(this._historyState(toEntry), '');\n      this._enter('enter', toEntry, tracker);\n    }\n\n    return toEntry;\n  }\n\n  private _forget(entry: PageEntry) {\n    this._entries.delete(entry.id);\n    entry.forget();\n  }\n\n  private _historyState({ id, page: { data } }: PageEntry): NavDataEnvelope {\n    return {\n      [NAV_DATA_KEY]: {\n        uid: this._uid,\n        id,\n        data,\n      },\n    };\n  }\n\n}\n\n/**\n * @internal\n */\nexport interface PartialNavData {\n  readonly uid?: string;\n  readonly id?: number;\n  readonly data: any;\n}\n\n/**\n * @internal\n */\nexport interface NavData extends PartialNavData {\n  readonly uid: string;\n  readonly id: number;\n}\n\n/**\n * @internal\n */\nexport const NAV_DATA_KEY = 'wesib:navigation:data' as const;\n\n/**\n * @internal\n */\nexport interface NavDataEnvelope {\n  readonly [NAV_DATA_KEY]: NavData;\n}\n\nfunction extractNavData(state: any): PartialNavData {\n  return state == null || typeof state !== 'object' ? { data: state } : state[NAV_DATA_KEY];\n}\n\n/**\n * @internal\n */\nexport class PageEntry {\n\n  next?: PageEntry;\n  prev?: PageEntry;\n  private _status: PageStatus = PageStatus.New;\n  readonly page: Page;\n  private readonly _params: Map<PageParam<any, any>, PageParam.Handle<any, any>>;\n  private _update: () => void = noop;\n\n  constructor(\n      private readonly _context: BootstrapContext,\n      readonly id: number,\n      target: Navigation.URLTarget,\n      proto?: PageEntry,\n  ) {\n    this._params = proto ? proto._params : new Map<PageParam<any, any>, PageParam.Handle<any, any>>();\n\n    const entry = this;\n\n    this.page = {\n      url: target.url,\n      title: target.title,\n      data: target.data,\n      get visited() {\n        return !!entry._status;\n      },\n      get current() {\n        return entry._status === PageStatus.Current;\n      },\n      get(ref) {\n        return entry.get(ref);\n      },\n      put(ref, input) {\n        entry.put(ref, input);\n      },\n    };\n  }\n\n  get<T>(ref: PageParam.Ref<T, unknown>): T | undefined {\n\n    const handle: PageParam.Handle<T, unknown> | undefined = this._params.get(ref[PageParam__symbol]);\n\n    return handle && handle.get();\n  }\n\n  put<T, I>(ref: PageParam.Ref<T, I>, input: I): T {\n\n    const param = ref[PageParam__symbol];\n    const handle: PageParam.Handle<T, I> | undefined = this._params.get(param);\n\n    if (handle) {\n      handle.put(input);\n      return handle.get();\n    }\n\n    const registry = new ContextRegistry<ParamContext>(this._context);\n\n    class ParamContext extends PageParamContext {\n      readonly get: PageParamContext['get'] = registry.newValues().get;\n    }\n\n    const newHandle = param.create(this.page, input, new ParamContext());\n\n    this._params.set(param, newHandle);\n    if (this.page.current && newHandle.enter) {\n      newHandle.enter(this.page, 'init');\n    }\n\n    return newHandle.get();\n  }\n\n  transfer(to: PageEntry, when: 'pre-open' | 'pre-replace' | 'enter' | 'return') {\n    itsEach(this._params.entries(), ([param, handle]) => {\n      if (handle.transfer) {\n\n        const transferred = handle.transfer(to.page, when);\n\n        if (transferred) {\n          to._params.set(param, transferred);\n        }\n      }\n    });\n  }\n\n  stay(at: Page) {\n    itsEach(this._params.values(), handle => handle.stay && handle.stay(at));\n  }\n\n  enter(when: 'init' | 'open' | 'replace' | 'enter' | 'return') {\n    this._status = PageStatus.Current;\n    itsEach(this._params.values(), handle => handle.enter && handle.enter(this.page, when));\n  }\n\n  leave() {\n    this._status = PageStatus.Visited;\n    itsEach(this._params.values(), handle => handle.leave && handle.leave());\n  }\n\n  forget() {\n    itsEach(this._params.values(), handle => handle.forget && handle.forget());\n    this._params.clear();\n  }\n\n  schedule(update: () => void) {\n    this._update = update;\n  }\n\n  apply() {\n\n    const update = this._update;\n\n    this._update = noop;\n    update();\n  }\n\n}\n\nconst enum PageStatus {\n  New,\n  Visited,\n  Current,\n}\n","import { BootstrapContext, BootstrapWindow, mergeFunctions } from '@wesib/wesib';\nimport { noop } from 'call-thru';\nimport { AfterEvent, DomEventDispatcher, onAny, trackValue } from 'fun-events';\nimport { NavHistory, PageEntry } from './nav-history.impl';\nimport { Navigation as Navigation_ } from './navigation';\nimport { NavigationAgent } from './navigation-agent';\nimport {\n  EnterPageEvent,\n  LeavePageEvent,\n  NavigationEvent,\n  NavigationEventType,\n  StayOnPageEvent,\n} from './navigation.event';\nimport { Page } from './page';\nimport { PageParam } from './page-param';\n\nexport function createNavigation(context: BootstrapContext): Navigation_ {\n\n  const window = context.get(BootstrapWindow);\n  const { document, history } = window;\n  const dispatcher = new DomEventDispatcher(window);\n  const navHistory = context.get(NavHistory);\n  const agent = context.get(NavigationAgent);\n  const onEnter = dispatcher.on<EnterPageEvent>(NavigationEventType.EnterPage);\n  const onLeave = dispatcher.on<LeavePageEvent>(NavigationEventType.LeavePage);\n  const onStay = dispatcher.on<StayOnPageEvent>(NavigationEventType.StayOnPage);\n  const onEvent = onAny<[NavigationEvent]>(onEnter, onLeave, onStay);\n  const nav = trackValue<PageEntry>(navHistory.init());\n\n  nav.read(nextEntry => nextEntry.apply()); // The very first page entry receiver applies scheduled updates to page\n\n  const readPage: AfterEvent<[Page]> = nav.read.keep.thru(entry => entry.page);\n  let next: Promise<any> = Promise.resolve();\n\n  dispatcher.on<PopStateEvent>('popstate')(popState => {\n\n    const entry = navHistory.popState(popState, nav);\n\n    if (entry) {\n      dispatcher.dispatch(new EnterPageEvent(\n          NavigationEventType.EnterPage,\n          {\n            when: popState.state != null ? 'return' : 'enter',\n            to: entry.page,\n          },\n      ));\n    }\n  });\n\n  dispatcher.on('hashchange')(() => {\n\n    const entry = navHistory.hashChange(nav);\n\n    if (entry) {\n      dispatcher.dispatch(new EnterPageEvent(\n          NavigationEventType.EnterPage,\n          {\n            when: 'enter',\n            to: entry.page,\n          },\n      ));\n    }\n  });\n\n  class Navigation extends Navigation_ {\n\n    get length() {\n      return history.length;\n    }\n\n    get onEnter() {\n      return onEnter;\n    }\n\n    get onLeave() {\n      return onLeave;\n    }\n\n    get onStay() {\n      return onStay;\n    }\n\n    get on() {\n      return onEvent;\n    }\n\n    get read() {\n      return readPage;\n    }\n\n    go(delta?: number): void {\n      history.go(delta);\n    }\n\n    open(target: Navigation_.Target | string | URL) {\n      return navigate('pre-open', 'open', target);\n    }\n\n    replace(target: Navigation_.Target | string | URL) {\n      return navigate('pre-replace', 'replace', target);\n    }\n\n    update(url: string | URL): Page {\n      return navHistory.update(nav, toURL(url)).page;\n    }\n\n    with<T, I>(ref: PageParam.Ref<T, I>, input: I): Navigation_.Parameterized {\n      return withParam(page => page.put(ref, input));\n    }\n\n  }\n\n  return new Navigation();\n\n  function withParam(applyParams: (page: Page) => void): Navigation_.Parameterized {\n    return {\n      with<TT, II>(ref: PageParam.Ref<TT, II>, input: II): Navigation_.Parameterized {\n        return withParam(mergeFunctions(applyParams, page => page.put(ref, input)));\n      },\n      open(target: Navigation_.Target | string | URL) {\n        return navigate('pre-open', 'open', target, applyParams);\n      },\n      replace(target: Navigation_.Target | string | URL) {\n        return navigate('pre-replace', 'replace', target, applyParams);\n      },\n    };\n  }\n\n  function toURL(url: string | URL | undefined): URL {\n    if (typeof url === 'string') {\n      return new URL(url, document.baseURI);\n    }\n    return url || nav.it.page.url;\n  }\n\n  function urlTargetOf(target: Navigation_.Target | string | URL): Navigation_.URLTarget {\n    if (typeof target === 'string' || target instanceof URL) {\n      return { url: toURL(target) };\n    }\n    if (target.url instanceof URL) {\n      return target as Navigation_.URLTarget;\n    }\n    return { ...target, url: toURL(target.url) };\n  }\n\n  function navigate(\n      whenLeave: 'pre-open' | 'pre-replace',\n      when: 'open' | 'replace',\n      target: Navigation_.Target | string | URL,\n      applyParams: (page: Page) => void = noop,\n  ): Promise<Page | null> {\n\n    const urlTarget = urlTargetOf(target);\n    const promise = next = next.then(doNavigate, doNavigate);\n\n    return promise;\n\n    function doNavigate(): Page | null {\n\n      let toEntry: PageEntry | undefined;\n\n      try {\n\n        const prepared = prepare();\n\n        if (!prepared) {\n          return prepared; // Navigation cancelled\n        }\n\n        toEntry = prepared;\n\n        navHistory[when](toEntry, nav);\n\n        dispatcher.dispatch(new EnterPageEvent(\n            NavigationEventType.EnterPage,\n            {\n              when,\n              to: toEntry.page,\n            },\n        ));\n\n        return toEntry.page;\n      } catch (e) {\n        stay(toEntry, e);\n        throw e;\n      }\n    }\n\n    function prepare(): PageEntry | null {\n      if (next !== promise) {\n        return stay();\n      }\n\n      const fromEntry = nav.it;\n      const toEntry = navHistory.newEntry(urlTarget);\n\n      fromEntry.transfer(toEntry, whenLeave);\n\n      const leavePage = new LeavePageEvent(\n          NavigationEventType.LeavePage,\n          {\n            when: whenLeave,\n            from: fromEntry.page,\n            to: toEntry.page,\n          },\n      );\n\n      applyParams(toEntry.page);\n      if (!dispatcher.dispatch(leavePage) || next !== promise) {\n        return stay(toEntry);\n      }\n\n      let finalTarget: Navigation_.URLTarget | undefined;\n\n      agent(t => finalTarget = t, whenLeave, leavePage.from, leavePage.to);\n\n      if (!finalTarget) {\n        return stay(toEntry); // Some agent didn't call `next()`.\n      }\n\n      return toEntry;\n    }\n\n    function stay(toEntry?: PageEntry, reason?: any): null {\n      if (toEntry) {\n        toEntry.stay(nav.it.page);\n      }\n\n      dispatcher.dispatch(new StayOnPageEvent(\n          NavigationEventType.StayOnPage,\n          {\n            from: nav.it.page,\n            to: urlTarget,\n            reason,\n          },\n      ));\n\n      return null;\n    }\n\n  }\n}\n","/**\n * @module @wesib/generic\n */\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { createNavigation } from './navigation.impl';\n\n/**\n * @internal\n */\nconst NavigationSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.provide({ a: Navigation, by: createNavigation });\n  },\n};\n\n/**\n * Browser navigation support feature.\n *\n * Makes [[Navigation]] available in bootstrap context.\n */\nexport class NavigationSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return NavigationSupport__feature;\n  }\n\n}\n","import { nextArgs, nextSkip } from 'call-thru';\nimport { eventSupply, EventSupply, OnEvent, onEventBy, trackValue } from 'fun-events';\nimport { Page } from '../page';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nexport function cachingPageLoader(loader: PageLoader): PageLoader {\n\n  let state: {\n    readonly url: string;\n    readonly on: OnEvent<[PageLoadResponse]>;\n    readonly sup: EventSupply;\n  } | undefined;\n\n  return page => {\n\n    const url = pageUrl(page);\n\n    if (state) {\n      if (state.url === url) {\n        return state.on;\n      }\n      state.sup.off();\n    }\n\n    let tracked: {\n      readonly on: OnEvent<[PageLoadResponse]>;\n      num: number;\n    } | undefined;\n    const supply = eventSupply().whenOff(() => {\n      state = undefined;\n      tracked = undefined;\n    });\n\n    const on = onEventBy<[PageLoadResponse]>(receiver => {\n      if (!tracked) {\n\n        const onLoad = loader(page);\n        const tracker = trackValue<PageLoadResponse>();\n        const trackSupply = onLoad(resp => {\n          tracker.it = resp;\n        }).whenOff(reason => {\n          // Error drops page cache, unlike successful page load.\n          if (reason != null) {\n            supply.off(reason);\n          }\n        });\n\n        supply.whenOff(reason => {\n          trackSupply.off(reason);\n          tracker.done(reason);\n        });\n\n        tracked = {\n          on: tracker.read.thru_(\n              response => response ? nextArgs(response) : nextSkip(),\n          ),\n          num: 0,\n        };\n      }\n\n      const requested = tracked;\n\n      ++requested.num;\n\n      return requested.on(receiver).needs(supply).whenOff(reason => {\n        if (!--requested.num) {\n          // Allow to request the same page again\n          Promise.resolve().then(() => {\n            if (!requested.num && requested === tracked) {\n              supply.off(reason);\n            }\n          });\n        }\n      });\n    });\n\n    state = { url, on, sup: supply };\n\n    return on;\n  };\n}\n\nfunction pageUrl(page: Page): string {\n  return new URL('', page.url).href;\n}\n","import { flatMapIt, itsEach, itsIterator } from 'a-iterable';\nimport { asis, noop } from 'call-thru';\nimport {\n  EventEmitter,\n  eventReceiver,\n  EventReceiver,\n  eventSupply,\n  EventSupply,\n  noEventSupply,\n  OnEvent,\n  onEventBy,\n} from 'fun-events';\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { PageFragmentRequest, PageLoadRequest } from './page-load-request';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nexport interface PageLoadReq extends PageLoadRequest {\n\n  readonly receiver: EventReceiver.Generic<[PageLoadResponse]>;\n\n}\n\nclass PageLoadAbortError extends Error {}\n\n/**\n * @internal\n */\nexport class PageLoadRequests implements Iterable<PageLoadReq> {\n\n  private readonly _map = new Map<EventSupply, PageLoadReq[]>();\n\n  constructor(\n      private readonly _navigation: Navigation,\n      private readonly _loader: PageLoader,\n  ) {}\n\n  get fragments(): readonly PageFragmentRequest[] {\n\n    const result: PageFragmentRequest[] = [];\n\n    for (const request of this) {\n      if (!request.fragment) {\n        return [];\n      }\n      result.push(request.fragment);\n    }\n\n    return result;\n  }\n\n  [Symbol.iterator](): Iterator<PageLoadReq> {\n    return itsIterator(flatMapIt(this._map.values(), asis));\n  }\n\n  handle(): PageParam.Handle<void, PageLoadRequest> {\n\n    const self = this;\n    const pageSupply = eventSupply();\n    let loadSupply = noEventSupply();\n\n    return {\n      get() {},\n      put(request: PageLoadRequest): void {\n        self._add(request);\n      },\n      transfer(to: Page) {\n\n        const transferred = self._transfer();\n\n        to.put(pageLoadRequestsParam, transferred);\n\n        return transferred.handle();\n      },\n      enter(page: Page, when: 'init' | 'open' | 'replace' | 'return'): void {\n        if (when === 'init') {\n          // The page is loaded already. No need to fetch it.\n          return;\n        }\n\n        loadSupply = eventSupply().needs(pageSupply);\n\n        const onLoad = onEventBy<[PageLoadResponse]>(responseReceiver => {\n\n          const emitter = new EventEmitter<[PageLoadResponse]>();\n          const supply = emitter.on(responseReceiver);\n\n          self._loader(page)(response => emitter.send(response)).whenOff(error => {\n            if (error !== undefined && !(error instanceof PageLoadAbortError)) {\n              // Report current page load error as failed load response\n              emitter.send({\n                ok: false as const,\n                page,\n                error,\n              });\n            }\n          }).needs(loadSupply);\n\n          return supply;\n        }).share();\n\n        itsEach(\n            self,\n            ({ fragment, receiver }) => onFragment(onLoad, fragment)({\n              supply: eventSupply().needs(receiver.supply),\n              receive(context, response): void {\n                receiver.receive(context, response);\n              },\n            }),\n        );\n      },\n      leave(): void {\n        loadSupply.off(new PageLoadAbortError('page left'));\n      },\n      stay() {\n        pageSupply.off(new PageLoadAbortError('navigation cancelled'));\n      },\n      forget() {\n        pageSupply.off(new PageLoadAbortError('page forgotten'));\n      },\n    };\n\n  }\n\n  private _add(request: PageLoadRequest) {\n\n    const req = { ...request, receiver: eventReceiver(request.receiver) };\n    const { supply } = req.receiver;\n    const list = this._map.get(supply);\n\n    if (list) {\n      list.push(req);\n    } else {\n      this._map.set(supply, [req]);\n      supply.whenOff(() => this._map.delete(supply));\n    }\n  }\n\n  private _transfer(): PageLoadRequests {\n\n    const transferred = new PageLoadRequests(this._navigation, this._loader);\n\n    for (const [supply, list] of this._map.entries()) {\n      transferred._map.set(supply, Array.from(list));\n    }\n\n    return transferred;\n  }\n\n}\n\nfunction onFragment(\n    onLoad: OnEvent<[PageLoadResponse]>,\n    fragment?: PageFragmentRequest,\n): OnEvent<[PageLoadResponse]> {\n  return fragment\n      ? onLoad.thru_(\n          response => response.ok\n              ? {\n                ...response,\n                fragment: (\n                    fragment.tag != null\n                    ? response.document.getElementsByTagName(fragment.tag)[0]\n                    : response.document.getElementById(fragment.id)\n                ) || undefined,\n              }\n              : response,\n      )\n      : onLoad;\n}\n\nclass PageLoadRequestsParam extends PageParam<PageLoadRequests, PageLoadRequests> {\n\n  create(\n      _page: Page,\n      requests: PageLoadRequests,\n  ): PageParam.Handle<PageLoadRequests, PageLoadRequests> {\n    return {\n      get() {\n        return requests;\n      },\n      put: noop,\n    };\n  }\n\n}\n\n/**\n * @internal\n */\nexport const pageLoadRequestsParam: PageParam<PageLoadRequests, PageLoadRequests> = new PageLoadRequestsParam();\n","/**\n * @module @wesib/generic\n */\nimport { ContextUpRef } from 'context-values';\nimport { EventSender, OnEvent } from 'fun-events';\nimport { FetchAgentKey } from '../../fetch/fetch-agent-key.impl';\nimport { PageLoadResponse } from './page-load-response';\n\n/**\n * Page load agent signature.\n *\n * The agent can be used to alter loaded page document processing. For that it should be registered in appropriate\n * context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by page loader.\n */\nexport type PageLoadAgent =\n/**\n * @param next  Either calls the next agent in chain, or actually loads page document if this agent is the last one.\n * Accepts an optional `Request` parameter. The original request will be used instead when omitted.\n * @param request  HTTP request.\n *\n * @returns An `EventSender` of page load response. It is returned either to preceding agent in chain, or as a loaded\n * document.\n */\n    (\n        this: void,\n        next: (this: void, request?: Request) => OnEvent<[PageLoadResponse]>,\n        request: Request,\n    ) => EventSender<[PageLoadResponse]>;\n\nexport namespace PageLoadAgent {\n\n  /**\n   * Combined page load agent signature.\n   *\n   * This is what is available under [[PageLoadAgent]] key.\n   */\n  export type Combined =\n  /**\n   * @param next  Either calls the next agent in chain, or actually loads page document if this agent is the last one.\n   * Accepts `Request` parameter.\n   * @param request  HTTP request.\n   *\n   * @returns An `OnEvent` registrar of loaded document.\n   */\n      (\n          this: void,\n          next: (this: void, request: Request) => OnEvent<[PageLoadResponse]>,\n          request: Request,\n      ) => OnEvent<[PageLoadResponse]>;\n\n}\n\n/**\n * A key of context value containing an [[PageLoadAgent]] instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the fetch.\n */\nexport const PageLoadAgent: ContextUpRef<PageLoadAgent.Combined, PageLoadAgent> =\n    (/*#__PURE__*/ new FetchAgentKey<[PageLoadResponse]>('page-load-agent'));\n","import { noop, valueProvider } from 'call-thru';\nimport { ContextUpRef, FnContextKey } from 'context-values';\n\n/**\n * A signature of page load URL modifier function.\n *\n * All such functions registered in bootstrap context are called in order of their registration with current page URL.\n * They are able to modify it, e.g. by applying additional URL search parameters. The modified URL is used then to load\n * the page.\n */\nexport type PageLoadURLModifier =\n/**\n * @param url  An URL of page to load.\n */\n    (this: void, url: URL) => void;\n\n/**\n * A key of bootstrap context value containing a page load URL modifier.\n *\n * Does not modify URL by default.\n */\nexport const PageLoadURLModifier: ContextUpRef<PageLoadURLModifier, PageLoadURLModifier> =\n    (/*#__PURE__*/ new FnContextKey('page-load-url', { byDefault: valueProvider(noop) }));\n","import { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { itsReduction } from 'a-iterable';\nimport { SingleContextKey } from 'context-values';\nimport { afterThe, EventEmitter, eventSupply, OnEvent, onEventBy } from 'fun-events';\nimport { hthvParse, hthvQuote } from 'http-header-value';\nimport { HttpFetch } from '../../fetch';\nimport { Page } from '../page';\nimport { PageLoadAgent } from './page-load-agent';\nimport { pageLoadRequestsParam } from './page-load-requests.impl';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\n\n/**\n * @internal\n */\nexport type PageLoader = (this: void, page: Page) => OnEvent<[PageLoadResponse]>;\n\n/**\n * @internal\n */\nexport const PageLoader = (/*#__PURE__*/ new SingleContextKey<PageLoader>(\n    'page-loader',\n    {\n      byDefault: bootstrapDefault(newPageLoader),\n    },\n));\n\nfunction newPageLoader(context: BootstrapContext): PageLoader {\n\n  const window = context.get(BootstrapWindow);\n  const httpFetch = context.get(HttpFetch);\n  const modifyURL = context.get(PageLoadURLModifier);\n  const agent = context.get(PageLoadAgent);\n  const parser: DOMParser = new (window as any).DOMParser();\n\n  return page => {\n\n    const url = new URL(page.url.href);\n\n    modifyURL(url);\n\n    const request = new Request(\n        url.href,\n        {\n          mode: 'same-origin',\n          credentials: 'same-origin',\n          headers: new Headers({ 'Accept': 'text/html' }),\n        },\n    );\n\n    return onEventBy(receiver => agent(fetch, request)(receiver));\n\n    function fetch(fetchRequest: Request): OnEvent<[PageLoadResponse]> {\n      fetchRequest = pageFragmentsRequest(page, fetchRequest);\n\n      const responseTextEmitter = new EventEmitter<[Response, string]>();\n      const onResponse: OnEvent<[PageLoadResponse]> = responseTextEmitter.on.thru_(\n          (response, text) => {\n            if (!response.ok) {\n              return {\n                ok: false as const,\n                page,\n                response,\n                error: response.status,\n              };\n            }\n            try {\n              return {\n                ok: true as const,\n                page,\n                response,\n                document: parsePageDocument(parser, url, response, text),\n              };\n            } catch (error) {\n              return {\n                ok: false as const,\n                page,\n                response,\n                error,\n              };\n            }\n          },\n      );\n\n      return onEventBy<[PageLoadResponse]>(receiver => {\n\n        const { supply } = receiver;\n\n        afterThe<[PageLoadResponse.Start]>({ page }).once({\n          supply: eventSupply().needs(supply),\n          receive(ctx, start) {\n            receiver.receive(ctx, start);\n          },\n        });\n\n        const responseSupply = httpFetch(fetchRequest)(response => {\n          onResponse(receiver);\n          response.text().then(\n              text => {\n                responseTextEmitter.send(response, text);\n                supply.needs(responseSupply);\n              },\n          ).catch(\n              e => supply.off(e),\n          );\n        });\n      });\n    }\n  };\n}\n\nfunction pageFragmentsRequest(page: Page, request: Request ) {\n\n  const fragments = page.get(pageLoadRequestsParam)?.fragments;\n\n  if (!fragments || !fragments.length) {\n    return request;\n  }\n\n  return new Request(\n      request,\n      {\n        headers: {\n          'Accept-Fragment': itsReduction(\n              fragments,\n              (header, fragment) =>\n                  (header ? header + ', ' : '')\n                  + (\n                      fragment.tag != null\n                          ? 'tag=' + hthvQuote(fragment.tag)\n                          : 'id=' + hthvQuote(fragment.id)\n                  ),\n              '',\n          ),\n        },\n      },\n  );\n}\n\nfunction parsePageDocument(parser: DOMParser, url: URL, response: Response, text: string): Document {\n\n  const doc = parser.parseFromString(\n      text,\n      hthvParse(response.headers.get('Content-Type') || 'text/html')[0].v as SupportedType,\n  );\n\n  if (doc.head) {\n\n    const base = doc.head.querySelector('base');\n\n    if (base) {\n      base.href = new URL(base.getAttribute('href')!, url).href;\n    } else {\n\n      const newBase = doc.createElement('base');\n\n      newBase.href = url.href;\n\n      doc.head.appendChild(newBase);\n    }\n  }\n\n  return doc;\n}\n","import { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { PageParamContext } from '../page-param-context';\nimport { cachingPageLoader } from './caching-page-loader.impl';\nimport { PageLoadRequest } from './page-load-request';\nimport { PageLoadRequests, pageLoadRequestsParam } from './page-load-requests.impl';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nclass PageLoadParam extends PageParam<void, PageLoadRequest> {\n\n  create(page: Page, request: PageLoadRequest, context: PageParamContext) {\n\n    const requests = new PageLoadRequests(context.get(Navigation), cachingPageLoader(context.get(PageLoader)));\n    const handle = requests.handle();\n\n    page.put(pageLoadRequestsParam, requests);\n    handle.put(request);\n\n    return handle;\n  }\n\n}\n\n/**\n * Page load parameter.\n *\n * Accepts a {@link PageLoadRequest page load request} as input.\n *\n * A page load is initiated whenever a page with new address is {@link Navigation.onEnter entered}.\n *\n * Page load won't be initiated if:\n * - page load parameter is not {@link Page.put} added,\n * - all added {@link PageLoadRequest.receiver response receiver}s supplies are cut off, or\n * - the entered page address is the the same one as previous one, except the hash,\n */\nexport const pageLoadParam: PageParam<void, PageLoadRequest> = (/*#__PURE__*/ new PageLoadParam());\n","import { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { AfterEvent, afterThe } from 'fun-events';\nimport { Navigation } from '../navigation';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\n\nconst PageCacheBuster__key = (/*#__PURE__*/ new SingleContextKey<PageCacheBuster>(\n    'page-cache-buster',\n    {\n      byDefault: bootstrapDefault(context => new PageCacheBuster(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport const appRevSearchParam = '__wesib_app_rev__';\n\n/**\n * @internal\n */\nexport class PageCacheBuster {\n\n  static get [ContextKey__symbol](): SingleContextKey<PageCacheBuster> {\n    return PageCacheBuster__key;\n  }\n\n  readonly urlModifier: AfterEvent<PageLoadURLModifier[]>;\n  readonly agent: AfterEvent<PageLoadAgent[]>;\n\n  constructor(context: BootstrapContext) {\n\n    const rev = appRev(context.get(BootstrapWindow).document);\n\n    if (!rev) {\n      this.urlModifier = afterThe();\n      this.agent = afterThe();\n    } else {\n\n      const navigation = context.get(Navigation);\n\n      this.urlModifier = afterThe(url => url.searchParams.set(appRevSearchParam, rev));\n      this.agent = afterThe((next, request) => {\n        return next(new Request(request.url, request)).thru_(response => {\n          if (response.ok) {\n\n            const newRev = appRev(response.document);\n\n            if (newRev && newRev !== rev) {\n\n              const url = new URL(response.page.url.href);\n\n              url.searchParams.set(appRevSearchParam, newRev);\n              navigation.update(url);\n              navigation.reload();\n            }\n          }\n\n          return response;\n        });\n      });\n    }\n  }\n\n}\n\nfunction appRev(doc: Document) {\n  return doc.querySelector('meta[name=wesib-app-rev]')?.getAttribute('content');\n}\n","/**\n * @module @wesib/generic\n */\nimport { isElement } from '@wesib/wesib';\nimport { itsEach, overArray } from 'a-iterable';\n\n/**\n * Imports DOM node from one document to another.\n *\n * @param from  The node to import.\n * @param to  The node to append imported node to.\n * @param importContent  A function that imports nodes nested in parent element. [[importNodeContent]] by default.\n *\n * @returns Imported node.\n */\nexport function importNode<N extends Node>(\n    from: N,\n    to: Node,\n    importContent?: (this: void, from: N, to: N) => void,\n): N;\n\n/**\n * Imports DOM node from one document to another and inserts it before the given node.\n *\n * @param from  The node to import.\n * @param to  The node to append imported node to.\n * @param before  The node to insert imported node before, or `null` to append it to the end of target one.\n * @param importContent  A function that imports nodes nested in parent element. [[importNodeContent]] by default.\n *\n * @returns Imported node.\n */\nexport function importNode<N extends Node>(\n    from: N,\n    to: Node,\n    before?: Node | null,\n    importContent?: (this: void, from: N, to: N) => void,\n): N;\n\nexport function importNode<N extends Node>(\n    from: N,\n    to: Node,\n    beforeOrImport?: Node | null | ((this: void, from: N, to: N) => void),\n    importContent: (this: void, from: N, to: N) => void = importNodeContent,\n): N {\n\n  let before: Node | null;\n\n  if (typeof beforeOrImport === 'function') {\n    importContent = beforeOrImport;\n    before = null;\n  } else {\n    before = beforeOrImport || null;\n  }\n\n  const doc = to.ownerDocument!;\n\n  if (isElement(from)) {\n\n    const elementClone = doc.createElement(from.tagName.toLowerCase()) as Node as (Element & N);\n\n    from.getAttributeNames().forEach(attr => elementClone.setAttribute(attr, from.getAttribute(attr)!));\n    importContent(from, elementClone);\n    to.insertBefore(elementClone, before);\n\n    return elementClone;\n  }\n\n  const nodeClone = doc.importNode(from, false);\n\n  to.insertBefore(nodeClone, before);\n\n  return nodeClone;\n}\n\n/**\n * Imports DOM node contents from one document to another.\n *\n * @param from  The node which contents to import.\n * @param to  The node to append imported nodes to.\n */\nexport function importNodeContent(from: Node, to: Node): void {\n  itsEach(\n      overArray(from.childNodes),\n      node => importNode(node, to),\n  );\n}\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { filterIt, itsEach, mapIt, overArray } from 'a-iterable';\nimport { importNode } from '../../util';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageScriptsAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().thru_(\n      response => {\n        if (response.ok) {\n\n          const allScripts = new Set<string>(mapIt(\n              externalScripts(doc, overArray(doc.scripts)),\n              ([src]) => src,\n          ));\n\n          itsEach(\n              filterIt(\n                  externalScripts(response.document, overArray(response.document.querySelectorAll('script'))),\n                  ([src]) => !allScripts.has(src),\n              ),\n              ([src, script]) => {\n                importNode(script, doc.head, (_from, to) => to.src = src);\n                allScripts.add(src);\n              },\n          );\n        }\n        return response;\n      },\n  );\n}\n\nfunction externalScripts(\n    doc: Document,\n    scripts: Iterable<HTMLScriptElement>,\n): Iterable<readonly [string, HTMLScriptElement]> {\n  return mapIt(\n      filterIt(\n          scripts,\n          script => !!script.src,\n      ),\n      script => [new URL(script.src, doc.baseURI).href, script] as const,\n  );\n}\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { itsEach, itsFirst, overArray } from 'a-iterable';\nimport { importNode } from '../../util';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageStyleAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().thru_(\n      response => {\n        if (!response.ok) {\n          return response;\n        }\n\n        const newStyles = response.document.querySelectorAll<HTMLLinkElement>('link[rel=stylesheet]');\n\n        if (!newStyles.length) {\n          return response;\n        }\n\n        let target: Node = doc.head;\n        let before: Node | null = null;\n        const oldStyles = doc.querySelectorAll<HTMLLinkElement>('link[rel=stylesheet]');\n        const oldStylesByHref = new Map<string, HTMLLinkElement>();\n        const firstOldStyle = oldStyles.item(0);\n\n        if (firstOldStyle) {\n          target = firstOldStyle.parentNode!;\n          before = firstOldStyle;\n          itsEach(\n              overArray(oldStyles),\n              link => oldStylesByHref.set(new URL(link.href, doc.baseURI).href, link),\n          );\n        }\n\n        itsEach(\n            overArray(newStyles),\n            newStyle => {\n\n              const href = new URL(newStyle.href, doc.baseURI).href;\n              const oldStyle = oldStylesByHref.get(href);\n\n              if (oldStyle) {\n                // Style already exists.\n                if (itsFirst(oldStylesByHref.keys()) === href) {\n                  // In proper position already.\n                  // Insert the remaining styles after it.\n                  target = oldStyle.parentNode!;\n                  before = oldStyle.nextSibling;\n                } else {\n                  // Move to proper position.\n                  target.insertBefore(oldStyle, before);\n                }\n                oldStylesByHref.delete(href);\n              } else {\n                // Import new style\n                importNode(newStyle, target, before, (_from, to) => to.href = href);\n              }\n            },\n        );\n\n        // Remove remaining old styles\n        itsEach(oldStylesByHref.values(), style => style.parentNode!.removeChild(style));\n\n        return response;\n      },\n  );\n}\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageTitleAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().thru_(response => {\n    if (response.ok) {\n\n      const title = response.document.getElementsByTagName('title').item(0);\n\n      if (title && title.textContent) {\n        doc.title = title.textContent;\n      }\n    }\n\n    return response;\n  });\n}\n","/**\n * @module @wesib/generic\n */\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { NavigationSupport } from '../navigation-support.feature';\nimport { PageCacheBuster } from './page-cache-buster.impl';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\nimport { pageScriptsAgent } from './page-scripts-agent.impl';\nimport { pageStyleAgent } from './page-style-agent.impl';\nimport { pageTitleAgent } from './page-title-agent.impl';\n\n/**\n * @internal\n */\nconst PageLoadSupport__feature: FeatureDef = {\n  needs: NavigationSupport,\n  setup(setup) {\n    setup.provide({\n      a: PageLoadURLModifier,\n      by: (buster: PageCacheBuster) => buster.urlModifier,\n      with: [PageCacheBuster],\n    });\n    setup.provide({\n      a: PageLoadAgent,\n      by: (buster: PageCacheBuster) => buster.agent,\n      with: [PageCacheBuster],\n    });\n    setup.provide({ a: PageLoadAgent, by: pageScriptsAgent });\n    setup.provide({ a: PageLoadAgent, by: pageStyleAgent });\n    setup.provide({ a: PageLoadAgent, by: pageTitleAgent });\n  },\n};\n\n/**\n * Page load support feature.\n *\n * Enables default {@link PageLoadAgent page load agents}:\n * 1. Page cache busting agent.\n *    If `<meta name=\"wesib-app-rev\">` tag is present in initial page, then sends this tag's content with each page load\n *    request as `__wesib_app_rev__` search parameter. If the loaded page contains the same named meta tag with\n *    different content, then reloads the page.\n *    This serves both as cache busting technique, and as server-side application updates handler.\n * 2. Scripts agent.\n *    Includes external scripts from loaded page into main document.\n * 3. Style agent.\n *    Replaces external styles of main document styles with the ones from loaded page.\n *    Unless loaded page has no external styles.\n * 4. Title agent.\n *    Applies loaded page title to bootstrap window. If there is one.\n */\nexport class PageLoadSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return PageLoadSupport__feature;\n  }\n\n}\n","/**\n * @module @wesib/generic\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { RefStypRule, StypProperties, StypRule, StypRuleRef, StypRules } from 'style-producer';\nimport { ThemeStyle } from './theme-style';\n\n/**\n * @internal\n */\nconst Theme__key = new SingleContextKey<Theme>('theme');\n\n/**\n * A hierarchy of CSS rules within single root.\n *\n * A component may use it to extract styling information.\n *\n * Current theme is available in bootstrap, definition, or component context. By default, only one theme is declared\n * per bootstrap. But this can be overridden.\n */\nexport abstract class Theme {\n\n  /**\n   * A key of bootstrap, definition, or component context value containing current theme instance.\n   */\n  static get [ContextKey__symbol](): ContextKey<Theme> {\n    return Theme__key;\n  }\n\n  /**\n   * Root CSS rule.\n   *\n   * All theme styling is represented as rules within this root.\n   */\n  abstract readonly root: StypRule;\n\n  /**\n   * Obtains CSS rule reference by its `referrer`.\n   *\n   * This is a helper method that resolves the given `referrer` against the `root` CSS rule of this theme.\n   *\n   * @param referrer  Target CSS rule referrer.\n   *\n   * @returns CSS rule reference.\n   */\n  ref<T extends StypProperties<T>>(referrer: RefStypRule<T>): StypRuleRef<T> {\n    return referrer(this.root);\n  }\n\n  /**\n   * Obtains a styling for the given theme styles.\n   *\n   * This method requests the registered {@link ThemeStyle theme styles} for CSS rules they provide.\n   * If some of the styles are not registered then uses the given style as provider.\n   *\n   * @param styles  The styles to obtain styling information for.\n   *\n   * @returns Dynamically updated CSS rule set containing the requested styling.\n   */\n  abstract style(...styles: ThemeStyle.Provider[]): StypRules;\n\n}\n","/**\n * @module @wesib/generic\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { Theme } from './theme';\n\n/**\n * @internal\n */\nconst ThemeFactory__key = new SingleContextKey<ThemeFactory>('theme-factory');\n\nexport abstract class ThemeFactory {\n\n  static get [ContextKey__symbol](): ContextKey<ThemeFactory> {\n    return ThemeFactory__key;\n  }\n\n  abstract newTheme(): Theme;\n\n}\n","/**\n * @module @wesib/generic\n */\nimport { AIterable } from 'a-iterable';\nimport { ContextRef, ContextValueOpts, ContextValues, SimpleContextKey } from 'context-values';\nimport { stypRules, StypRules } from 'style-producer';\nimport { Theme } from './theme';\n\n/**\n * Theme style provides part of the theme styling information.\n *\n * Theme style(s) can be provided in bootstrap context. They are applied to the theme at most once, when requested\n * by calling [[Theme.style]] method.\n *\n * Theme style is either a function, or an extension of another theme style.\n */\nexport type ThemeStyle = ThemeStyle.Provider | ThemeStyle.Extension;\n\nexport namespace ThemeStyle {\n\n  /**\n   * Theme style provider function.\n   *\n   * This function is called at most once per theme to apply styles to the latter. E.g. by declaring CSS rules.\n   *\n   * This function is used as an identifier of particular style and can be extended using [[ThemeStyle.Extension]].\n   *\n   * It is not absolutely necessary to register style provider. It will be applied on request anyway.\n   *\n   * @param theme  A theme to apply styling to.\n   *\n   * @returns Dynamically updated CSS rule set containing the applied styling.\n   */\n  export type Provider = (this: void, theme: Theme) => StypRules;\n\n  /**\n   * Theme style extension.\n   *\n   * An extension should be registered in bootstrap context in order to be applied.\n   */\n  export interface Extension {\n\n    /**\n     * A theme style provider to extend.\n     */\n    readonly style: ThemeStyle.Provider;\n\n    /**\n     * Extends the theme style.\n     *\n     * This method is called at most once per theme to apply styles to the latter. E.g. by declaring CSS rules.\n     *\n     * It will be called after the style provider it extends.\n     *\n     * @param theme  A theme to apply styling to.\n     *\n     * @returns Dynamically updated CSS rule set containing the applied styling.\n     */\n    provide(theme: Theme): StypRules;\n\n  }\n\n  /**\n   * A function obtaining combined style provider. I.e. the one that applies the style along with all extensions.\n   *\n   * @param A  provider of theme style to apply.\n   *\n   * @returns A combined theme style provider.\n   */\n  export type ById = (this: void, style: ThemeStyle.Provider) => ThemeStyle.Provider;\n\n}\n\n/**\n * @internal\n */\nclass ThemeStyleKey extends SimpleContextKey<ThemeStyle.ById, ThemeStyle> {\n\n  constructor() {\n    super('theme-style');\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<Ctx, ThemeStyle.ById, ThemeStyle, AIterable<ThemeStyle>>,\n  ): ThemeStyle.ById | null | undefined {\n\n    const providers = new Map<ThemeStyle.Provider, [ThemeStyle.Provider, boolean]>();\n\n    opts.seed.forEach(style => {\n\n      let key: ThemeStyle.Provider;\n      let provider: ThemeStyle.Provider;\n      let isId: boolean;\n\n      if (typeof style === 'function') {\n        key = provider = style;\n        isId = true;\n      } else {\n        key = style.style;\n        provider = style.provide.bind(style);\n        isId = false;\n      }\n\n      const prev = providers.get(key);\n\n      if (!prev) {\n        providers.set(key, [provider, isId]);\n      } else {\n\n        const [prevProvider, hasId] = prev;\n\n        providers.set(\n            key,\n            [\n              isId ? combineStyles(provider, prevProvider) : combineStyles(prevProvider, provider),\n              isId || hasId,\n            ],\n        );\n      }\n    });\n\n    return providers.size ? byId : opts.byDefault(() => byId);\n\n    function byId(id: ThemeStyle.Provider): ThemeStyle.Provider {\n\n      const existing = providers.get(id);\n\n      if (!existing) {\n        return id;\n      }\n\n      const [provider, hasId] = existing;\n\n      return hasId ? provider : combineStyles(id, provider);\n    }\n  }\n\n}\n\n/**\n * A key of bootstrap context value containing theme styles.\n */\nexport const ThemeStyle: ContextRef<ThemeStyle.ById, ThemeStyle> = new ThemeStyleKey();\n\n/**\n * @internal\n */\nfunction combineStyles(first: ThemeStyle.Provider, second: ThemeStyle.Provider): ThemeStyle.Provider {\n  return theme => stypRules(first(theme), second(theme));\n}\n","/**\n * @module @wesib/generic\n */\nimport { ComponentClass, ComponentContext } from '@wesib/wesib';\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { ValueTracker } from 'fun-events';\nimport { ElementNodeList } from './element-node-list';\n\n/**\n * Arbitrary element node within component tree. Either bound to some component or not.\n */\nexport type ElementNode =\n    | RawElementNode\n    | ComponentNode;\n\n/**\n * Component tree node representing arbitrary element.\n *\n * This is a base interface of all element node implementations.\n */\nexport interface ComponentTreeNode {\n\n  /**\n   * The element itself.\n   */\n  readonly element: any;\n\n  /**\n   * A context of component bound to this element, if any.\n   */\n  readonly context?: ComponentContext<any>;\n\n  /**\n   * Parent element node, or `null` if element has no parent.\n   */\n  readonly parent: ElementNode | null;\n\n  /**\n   * Selects component nodes matching the given selector.\n   *\n   * @param selector  Simple CSS selector of nested components.\n   * @param mode  Component nodes pick mode.\n   *\n   * @returns Dynamically updatable list of matching component nodes.\n   */\n  select(\n      selector: string,\n      mode?: ComponentPickMode,\n  ): ElementNodeList<ComponentNode>;\n\n  /**\n   * Selects component nodes of the given type.\n   *\n   * @param componentType  Nested component type with custom element name.\n   * @param mode  Component nodes pick mode.\n   *\n   * @returns Dynamically updatable list of matching component nodes.\n   */\n  select<T extends object>(\n      componentType: ComponentClass<T>,\n      mode?: ComponentPickMode,\n  ): ElementNodeList<ComponentNode<T>>;\n\n  /**\n   * Selects element nodes matching the given selector.\n   *\n   * @param selector  Simple CSS selector of nested elements. E.g. CSS class selector.\n   * @param mode  A mode of node picking from component tree.\n   *\n   * @returns Dynamically updatable list of matching element nodes.\n   */\n  select(\n      selector: string,\n      mode: ElementPickMode,\n  ): ElementNodeList;\n\n  /**\n   * Tracks element attribute.\n   *\n   * @param name  Target attribute name.\n   *\n   * @returns Target attribute's value tracker.\n   */\n  attribute(name: string): ValueTracker<string | null, string>;\n\n  /**\n   * Tracks element element property.\n   *\n   * The changes are tracked with `StateTracker`. So it is expected that the target property notifies on its changes\n   * with state updater. E.g. when it is defined by `@DomProperty` decorator.\n   *\n   * @param key  Target property key.\n   *\n   * @returns Target property's value tracker.\n   */\n  property<V>(key: PropertyKey): ValueTracker<V>;\n\n}\n\n/**\n * Element node representing raw element not bound to any component.\n */\nexport interface RawElementNode extends ComponentTreeNode {\n\n  readonly context?: undefined;\n\n}\n\n/**\n * Element node representing an element bound to some component.\n */\nexport interface ComponentNode<T extends object = any> extends ComponentTreeNode {\n\n  readonly context: ComponentContext<T>;\n\n}\n\n/**\n * A key of component context value containing a component node instance.\n */\nexport const ComponentNode: SingleContextRef<ComponentNode> =\n    (/*#__PURE__*/ new SingleContextKey<ComponentNode>('component-node'));\n\n/**\n * A mode of node picking from component tree.\n */\nexport interface ElementPickMode {\n\n  /**\n   * Set to `true` to select arbitrary nodes. Otherwise - select only component nodes.\n   */\n  all?: boolean;\n\n  /**\n   * Set to `true` to select from entire subtree. Otherwise - select from element child nodes only.\n   */\n  deep?: boolean;\n\n}\n\n/**\n * A mode that picks component nodes from component tree.\n */\nexport interface ComponentPickMode extends ElementPickMode {\n\n  all?: false;\n\n}\n","/**\n * @module @wesib/generic\n */\nimport { AIterable, ArrayLikeIterable } from 'a-iterable';\nimport { AfterEvent, AfterEvent__symbol, EventKeeper, EventSender, OnEvent, OnEvent__symbol } from 'fun-events';\nimport { ElementNode } from './element-node';\n\n/**\n * Dynamically updatable list of selected element nodes.\n *\n * It is an iterable of nodes.\n *\n * Implements an `EventSender` interface by sending added and removed nodes arrays.\n *\n * Implements an `EventKeeper` interface by sending updated node list.\n */\nexport abstract class ElementNodeList<N extends ElementNode = ElementNode>\n    extends AIterable<N>\n    implements EventSender<[N[], N[]]>, EventKeeper<[ElementNodeList<N>]> {\n\n  /**\n   * An `OnEvent` sender of list changes. Sends arrays of added and removed nodes.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly onUpdate: OnEvent<[N[], N[]]>;\n\n  get [OnEvent__symbol](): OnEvent<[N[], N[]]> {\n    return this.onUpdate;\n  }\n\n  /**\n   * An `AfterEvent` keeper of current node list.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[ElementNodeList<N>]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[ElementNodeList<N>]> {\n    return this.read;\n  }\n\n  /**\n   * An `AfterEvent` keeper of node list changes.\n   *\n   * Sends an iterables of added and removed nodes. Sends current nodes immediately upon receiver registration.\n   */\n  abstract readonly track: AfterEvent<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]>;\n\n  /**\n   * An `AfterEvent` keeper of the first node in this list.\n   */\n  abstract readonly first: AfterEvent<[N?]>;\n\n}\n","import {\n  BootstrapContext,\n  ComponentClass,\n  DefaultNamespaceAliaser,\n  ElementObserver,\n  ElementObserverInit,\n  isElement,\n} from '@wesib/wesib';\nimport { AIterable, ArrayLikeIterable, filterIt, itsEach, itsFirst, itsIterator, mapIt, overArray } from 'a-iterable';\nimport { isPresent, nextArgs } from 'call-thru';\nimport { AfterEvent, afterEventBy, afterSupplied, EventEmitter, eventSupply, OnEvent, onEventBy } from 'fun-events';\nimport { html__naming } from 'namespace-aliaser';\nimport { ElementNode, ElementPickMode } from './element-node';\nimport { ElementNodeList as ElementNodeList_ } from './element-node-list';\n\n/**\n * @internal\n */\nconst WATCH_DEEP: ElementObserverInit = { subtree: true };\n\n/**\n * @internal\n */\nexport function elementNodeList<N extends ElementNode>(\n    bsContext: BootstrapContext,\n    root: Element,\n    selectorOrType: string | ComponentClass<any>,\n    nodeOf: (node: Element, optional?: boolean) => N | undefined,\n    { deep, all }: ElementPickMode,\n): ElementNodeList_<N> {\n\n  const updates = new EventEmitter<[N[], N[]]>();\n  const init = deep ? WATCH_DEEP : undefined;\n  let cache = new Set<Element>();\n  let iterable: Iterable<N> | undefined;\n  let selector: string | undefined;\n\n  if (typeof selectorOrType === 'string') {\n    selector = selectorOrType;\n  } else {\n    bsContext.whenDefined(selectorOrType).then(({ elementDef: { name } }) => {\n      iterable = undefined;\n      if (name) {\n        selector = html__naming.name(name, bsContext.get(DefaultNamespaceAliaser));\n        if (updates.size) {\n\n          const selected = refresh();\n\n          if (selected.size) {\n\n            const added = Array.from(\n              filterIt<N | undefined, N>(\n                  mapIt(selected, node => nodeOf(node)),\n                  isPresent,\n              ),\n            );\n\n            if (added.length) {\n              updates.send(added, []);\n            }\n          }\n        }\n      }\n    });\n  }\n\n  const observer = bsContext.get(ElementObserver)(update);\n  let nodeList: ElementNodeList;\n\n  const onUpdate = onEventBy<[N[], N[]]>(receiver => {\n\n    const firstReceiver = !updates.size;\n    const supply = updates.on(receiver);\n\n    if (firstReceiver) {\n      refresh();\n      observer.observe(root, init);\n    }\n\n    return eventSupply(reason => {\n      supply.off(reason);\n      if (!updates.size) {\n        observer.disconnect();\n      }\n    }).needs(supply);\n  });\n  const read = afterEventBy<[ElementNodeList]>(onUpdate.thru(() => nodeList), () => [nodeList]);\n  const onTrackUpdate: OnEvent<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]> =\n      onUpdate.thru((added, removed) => nextArgs(AIterable.of(added), AIterable.of(removed)));\n  const track = afterEventBy<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]>(receiver => {\n\n    const initialEmitter = new EventEmitter<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]>();\n\n    initialEmitter.on(receiver);\n    initialEmitter.send(nodeList, AIterable.of([]));\n\n    onTrackUpdate(receiver);\n  });\n  const first: AfterEvent<[N?]> = afterSupplied(read).keep.thru(itsFirst);\n\n  if (!all) {\n    root.addEventListener('wesib:component', event => {\n\n      const element = event.target as Element;\n\n      if (cache.has(element)) {\n\n        const node = nodeOf(element) as N;\n\n        updates.send([node], []);\n      }\n    });\n  }\n\n  class ElementNodeList extends ElementNodeList_<N> {\n\n    get onUpdate() {\n      return onUpdate;\n    }\n\n    get read() {\n      return read;\n    }\n\n    get track() {\n      return track;\n    }\n\n    get first() {\n      return first;\n    }\n\n    [Symbol.iterator]() {\n      return itsIterator(iterable || (iterable = filterIt<N | undefined, N>(\n          mapIt(\n              elements(),\n              element => nodeOf(element),\n          ),\n          isPresent,\n      )));\n    }\n\n  }\n\n  return nodeList = new ElementNodeList();\n\n  function elements(): Set<Element> {\n    return updates.size ? cache : refresh();\n  }\n\n  function refresh(): Set<Element> {\n    iterable = undefined;\n    return cache = select();\n  }\n\n  function select(): Set<Element> {\n\n    const sel = selector;\n\n    if (!sel) {\n      return new Set();\n    }\n    if (deep) {\n      return new Set(overArray(root.querySelectorAll(sel)));\n    }\n    return new Set(\n        filterIt(\n            overArray(root.children),\n            item => item.matches(sel),\n        ),\n    );\n  }\n\n  function update(mutations: MutationRecord[]) {\n\n    const added: N[] = [];\n    const removed: N[] = [];\n\n    mutations.forEach(mutation => {\n      itsEach(\n          filterIt<N | undefined, N>(\n              mapIt(overArray(mutation.removedNodes), removeNode),\n              isPresent,\n          ),\n          node => removed.push(node),\n      );\n      itsEach(\n          filterIt<N | undefined, N>(\n              mapIt(overArray(mutation.addedNodes), addNode),\n              isPresent,\n          ),\n          node => added.push(node),\n      );\n    });\n    if (added.length || removed.length) {\n      updates.send(added, removed);\n    }\n  }\n\n  function addNode(node: Node): N | undefined {\n    if (!isElement(node)) {\n      return;\n    }\n    if (selector && node.matches(selector) && !cache.has(node)) {\n      cache.add(node);\n      return nodeOf(node);\n    }\n    return;\n  }\n\n  function removeNode(node: Node): N | undefined {\n    if (!isElement(node)) {\n      return;\n    }\n    if (!cache.delete(node)) {\n      return;\n    }\n    return nodeOf(node, true);\n  }\n\n}\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport {\n  EventEmitter,\n  eventReceiver,\n  EventReceiver, eventSupply,\n  EventSupply,\n  noEventSupply,\n  OnEvent,\n  onEventBy,\n  ValueTracker,\n} from 'fun-events';\n\n/**\n * @internal\n */\nclass AttributesObserver {\n\n  private readonly _emitters = new Map<string, EventEmitter<[string, string | null]>>();\n  private _observer?: MutationObserver;\n\n  constructor(private readonly _bs: BootstrapContext, readonly element: Element) {\n  }\n\n  private get observer(): MutationObserver {\n    if (this._observer) {\n      return this._observer;\n    }\n\n    const Observer: typeof MutationObserver = (this._bs.get(BootstrapWindow) as any).MutationObserver;\n\n    return this._observer = new Observer(mutations => this._update(mutations));\n  }\n\n  observe(name: string, receiver: EventReceiver<[string, string | null]>): EventSupply {\n\n    const self = this;\n    const observer = this.observer;\n    const emitter = this._emitter(name);\n    const rcv = eventReceiver(receiver);\n    const supply = emitter.on({\n      supply: eventSupply(() => {\n        this._emitters.delete(name);\n        observer.disconnect();\n        if (this._emitters.size) {\n          reconnect();\n        } else {\n          this._observer = undefined;\n        }\n      }).needs(rcv.supply),\n      receive: (ctx, newValue, oldValue) => rcv.receive(ctx, newValue, oldValue),\n    });\n\n    observer.disconnect();\n    reconnect();\n\n    return supply;\n\n    function reconnect() {\n      self._update(observer.takeRecords());\n      observer.observe(self.element, {\n        attributes: true,\n        attributeOldValue: true,\n        attributeFilter: Array.from(self._emitters.keys()),\n      });\n    }\n  }\n\n  private _update(mutations: MutationRecord[]) {\n    mutations.forEach(mutation => {\n\n      const attributeName = mutation.attributeName as string;\n      const emitter = this._emitters.get(attributeName);\n\n      if (emitter) {\n        emitter.send(this.element.getAttribute(attributeName) as string, mutation.oldValue);\n      }\n    });\n  }\n\n  private _emitter(name: string): EventEmitter<[string, string | null]> {\n\n    const emitter = new EventEmitter<[string, string | null]>();\n\n    this._emitters.set(name, emitter);\n\n    return emitter;\n  }\n\n}\n\n/**\n * @internal\n */\nclass AttributeTracker extends ValueTracker<string | null, string> {\n\n  private readonly _updates = new EventEmitter<[string, string | null]>();\n  readonly on: OnEvent<[string, string | null]>;\n\n  constructor(\n      private readonly _observer: AttributesObserver,\n      private readonly _name: string,\n  ) {\n    super();\n\n    let observeSupply = noEventSupply();\n\n    this.on = onEventBy(receiver => {\n      if (!this._updates.size) {\n        observeSupply = this._observer.observe(\n            _name,\n            (newValue, oldValue) => this._updates.send(newValue, oldValue),\n        );\n      }\n      receiver.supply.needs(observeSupply);\n      this._updates.on(receiver).whenOff(reason => {\n        if (!this._updates.size) {\n          observeSupply.off(reason);\n        }\n      });\n    });\n  }\n\n  get it(): string | null {\n    return this._observer.element.getAttribute(this._name);\n  }\n\n  set it(value: string | null) {\n    this._observer.element.setAttribute(this._name, value as string);\n  }\n\n  done(reason?: any): this {\n    this._updates.done(reason);\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nexport class NodeAttributes {\n\n  private readonly _attrs = new Map<string, AttributeTracker>();\n  private readonly _observer: AttributesObserver;\n\n  constructor(bs: BootstrapContext, element: any) {\n    this._observer = new AttributesObserver(bs, element);\n  }\n\n  get(name: string): ValueTracker<string | null, string> {\n\n    const existing = this._attrs.get(name);\n\n    if (existing) {\n      return existing;\n    }\n\n    const created = new AttributeTracker(this._observer, name);\n\n    this._attrs.set(name, created);\n\n    return created;\n  }\n\n}\n","import { ComponentContext, ComponentState, domPropertyPathTo } from '@wesib/wesib';\nimport { EventEmitter, eventSupply, noEventSupply, OnEvent, ValueTracker } from 'fun-events';\n\n/**\n * @internal\n */\nclass PropertyTracker<T> extends ValueTracker<T> {\n\n  private readonly _updates = new EventEmitter<[T, T]>();\n  private _supply = noEventSupply();\n\n  constructor(\n      private readonly _element: any,\n      private readonly _key: PropertyKey,\n  ) {\n    super();\n  }\n\n  get on(): OnEvent<[T, T]> {\n    return this._updates.on;\n  }\n\n  bind(context: ComponentContext) {\n\n    const propertyState = context.get(ComponentState).track(domPropertyPathTo(this._key));\n\n    this._supply = propertyState.onUpdate({\n      supply: eventSupply().whenOff(reason => this._updates.done(reason)),\n      receive: (_ctx, _path, newValue: any, oldValue: any) => this._updates.send(newValue, oldValue),\n    });\n  }\n\n  get it(): T {\n    return this._element[this._key];\n  }\n\n  set it(value: T) {\n    this._element[this._key] = value;\n  }\n\n  done(reason?: any): this {\n    this._supply.off(reason);\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nexport class NodeProperties {\n\n  private readonly _props = new Map<PropertyKey, PropertyTracker<any>>();\n  private _context?: ComponentContext<any>;\n\n  constructor(private readonly _element: any) {\n  }\n\n  bind(context: ComponentContext) {\n    this._context = context;\n    this._props.forEach(prop => prop.bind(context));\n  }\n\n  get<T>(key: PropertyKey): ValueTracker<T> {\n\n    const existing = this._props.get(key);\n\n    if (existing) {\n      return existing;\n    }\n\n    const created = new PropertyTracker<any>(this._element, key);\n\n    if (this._context) {\n      created.bind(this._context);\n    }\n    this._props.set(key, created);\n\n    return created;\n  }\n\n}\n","import {\n  BootstrapContext,\n  ComponentClass,\n  ComponentContext,\n  ComponentContext__symbol,\n  ComponentEvent,\n  ElementAdapter,\n} from '@wesib/wesib';\nimport { ValueTracker } from 'fun-events';\nimport { ComponentNode, ComponentTreeNode, ElementPickMode, ElementNode as ElementNode_ } from './element-node';\nimport { ElementNodeList } from './element-node-list';\nimport { elementNodeList } from './element-node-list.impl';\nimport { NodeAttributes } from './node-attributes.impl';\nimport { NodeProperties } from './node-properties.impl';\n\n/**\n * @internal\n */\nconst ElementNode__symbol = (/*#__PURE__*/ Symbol('element-node'));\n\n/**\n * @internal\n */\nclass ElementNode implements ComponentTreeNode {\n\n  private readonly _attrs: NodeAttributes;\n  private readonly _props: NodeProperties;\n\n  constructor(private readonly _bs: BootstrapContext, readonly element: Element) {\n    this._attrs = new NodeAttributes(_bs, element);\n    this._props = new NodeProperties(element);\n    (element as any)[ElementNode__symbol] = this;\n\n    const context = (element as any)[ComponentContext__symbol] as ComponentContext<any> | undefined;\n\n    if (context) {\n      this._bind(context);\n    } else {\n      element.addEventListener('wesib:component', event => this._bind((event as ComponentEvent).context));\n    }\n  }\n\n  get context(): ComponentContext<any> | undefined {\n    return (this.element as any)[ComponentContext__symbol];\n  }\n\n  get parent() {\n\n    const parent = this.element.parentElement;\n\n    return parent != null ? elementNodeOf(this._bs, parent) : null;\n  }\n\n  select(selector: string | ComponentClass<any>, mode?: ElementPickMode): ElementNodeList<any> {\n    return selectNodes(this._bs, this.element, selector, mode);\n  }\n\n  attribute(name: string): ValueTracker<string | null, string> {\n    return this._attrs.get(name);\n  }\n\n  property<V>(key: PropertyKey): ValueTracker<V> {\n    return this._props.get(key);\n  }\n\n  private _bind(context: ComponentContext) {\n    this._props.bind(context);\n  }\n\n}\n\n/**\n * @internal\n */\nexport function elementNodeOf(bsContext: BootstrapContext, element: Element, optional?: boolean): ElementNode_ {\n\n  const existing: ElementNode_ = (element as any)[ElementNode__symbol];\n\n  return (existing || optional) ? existing : new ElementNode(bsContext, element);\n}\n\n/**\n * @internal\n */\nfunction selectNodes(\n    bsContext: BootstrapContext,\n    root: Element,\n    selector: string | ComponentClass<any>,\n    mode: ElementPickMode = {},\n): ElementNodeList<any> {\n  if (mode.all) {\n    return elementNodeList<ElementNode_>(\n        bsContext,\n        root,\n        selector,\n        (element, optional) => elementNodeOf(bsContext, element, optional),\n        mode,\n    );\n  }\n\n  const adapter = bsContext.get(ElementAdapter);\n\n  return elementNodeList<ComponentNode>(\n      bsContext,\n      root,\n      selector,\n      (element, optional) => adapter(element) && elementNodeOf(bsContext, element, optional) as ComponentNode,\n      mode,\n  );\n}\n","/**\n * @module @wesib/generic\n */\nimport { BootstrapContext, ComponentContext, FeatureDef, FeatureDef__symbol, StateSupport } from '@wesib/wesib';\nimport { ComponentNode } from './element-node';\nimport { elementNodeOf } from './element-node.impl';\n\n/**\n * @internal\n */\nconst ComponentTreeSupport__feature: FeatureDef = {\n  needs: StateSupport,\n  setup(setup) {\n    setup.perComponent({\n      a: ComponentNode,\n      by(context: ComponentContext) {\n        return elementNodeOf(context.get(BootstrapContext), context.element) as ComponentNode;\n      },\n    });\n  },\n};\n\n/**\n * Component tree support feature.\n *\n * Provides a [[ComponentNode]] instance for each component.\n */\nexport class ComponentTreeSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return ComponentTreeSupport__feature;\n  }\n\n}\n"],"names":["BootstrapContext__key","SingleContextKey","BootstrapContext","ContextValues","ContextKey__symbol","bootstrapDefault","provide","context","key","bootstrapContext","get","ComponentFactory__key","ComponentFactory","[object Object]","element","mount","this","mountTo","connected","BootstrapWindow","byDefault","window","DefaultNamespaceAliaser","DefaultRenderScheduler","FnContextKey","options","newRenderSchedule","isArray","value","Array","ArraySet","AIterable","super","items","Set","size","Symbol","iterator","next","forEach","item","add","superClassOf","type","satisfying","prototype","Object","getPrototypeOf","superType","constructor","mergeFunctions","first","second","merge","_f","s","args","apply","isElement","node","nodeType","Node","ELEMENT_NODE","MetaAccessor","symbol","hasOwnProperty","undefined","ownDef","own","superDef","of","sources","prevMeta","updates","mapIt","source","meta","newMeta","flatMapIt","asis","defineProperty","configurable","PromiseResolver","promise","Promise","resolve","reject","_resolve","_reject","error","FeatureDef__symbol","FeatureMeta","defs","itsReduction","prev","def","needs","has","setup","init","featureMeta","noFeatureDef","FeatureDef","featureType","for","all","define","Feature","FeatureContext_key","FeatureContext","componentType","whenDefined","feature","load","FeatureNeedsError","Error","reduce","reason","need","name","ComponentDef__symbol","ComponentMeta","isQualifiedName","componentMeta","componentDefined","noComponentDef","ComponentDef","featureDef","registrar","Component","ComponentContext__key","ComponentEventDispatcher__key","dispatch","event","dispatchEvent","on","DomEventDispatcher","ContentRoot","ctx","StateUpdater","valueProvider","noop","ComponentContext__symbol","ComponentContext","updateComponentState","bind","TypeError","contentRoot","newValue","oldValue","ComponentEvent","Event","eventInitDict","target","ElementAdapterKey","ContextUpKey","upKey","createUpKey","opts","seed","keep","dig","adapters","combined","adapter","defaultElementAdapter","defaultProvider","afterThe","delegated","or","ElementAdapter","ElementObserver","bsContext","DefaultElementObserver","MutationObserver","callback","mutations","mutation","itsEach","overArray","removedNodes","mountOf","checkConnected","filterIt","addedNodes","observe","childList","ComponentFactory__symbol","componentFactoryOf","factory","CustomElements__key","values","customElements","nsAlias","CustomElements","componentTypeOrName","elementType","html__naming","extend","elementDef","extends","componentResolver","ComponentResolver__symbol","DefinitionContext__key","ElementDef","elementExtend","HTMLElement","DefinitionContext","BootstrapContextRegistry__key","BootstrapContextRegistry","ContextRegistry","a","is","newValues","ComponentContextRegistry__key","ComponentContextRegistry","initial","DefinitionContextRegistry__key","DefinitionContextRegistry","PostDefSetup__symbol","postDefSetup","tracker","trackValue","emitter","EventEmitter","onSetup","read","thru","nextArgs","nextSkip","onAny","superPostDefSetup","send","result","it","WhenComponent","currentRev","created","onCreated","onEventBy","receiver","receiverRev","supply","receive","eventContext","componentContext","notifiedRev","recurrentReceiver","onRecurrent","recurrentContext","readNotifier","thru_","rev","ElementBuilder","definitionContextRegistry_global","componentContextRegistry_global","definitions","components","whenComponent","componentContextRegistry_perType","ready","whenReady","cls","definitionContext","createComponentContextRegistry","append","componentFactory","ComponentFactory_","createComponent","registry","elementSuper","createMount","component","elementStatus","el","doc","ownerDocument","contains","componentCreated","DefinitionContext_","once","definitionContextRegistry","seedIn","definitionSetup","perDefinition","spec","perComponent","componentContextRegistry","Element","createElementType","enumerable","status","destructionReason","whenOff","whenDestroyed","sts","whenOn","offSupply","eventSupply","off","ComponentContext_","done","lastRev","parentNode","parentElement","removeChild","removeElement","ComponentStatus__symbol","writable","notifier","_","proto","prevContext","newComponent","bubbles","doNotAdd","ComponentRegistry","_context","_definitionQueue","definition","push","buildElement","FeatureKey__symbol","FeatureKey","from","preferredFeatureClause","afterEventBy","origin","stageId","afterAll","clause","deps","loadFeatureDeps","dig_","request","loader","to","stage","ownLoader","FeatureLoader","ownSource","rcv","unload","share","lastLoader","preventDuplicateLoader","clauses","preferred","required","afterEach","map","dep","presentFeatureDeps","isPresent","down","_down","_stage","SetupFeatureStage","then","after","state","lastStage","id","prevStage","stop","FeatureStage","_stop","action","perDep","unloader","unloads","adder","reverse","length","newUnloader","componentRegistry","elementBuilder","onDefinition","tillOff","onComponent","st","bs","by","onPostDefSetup","newFeatureContext","InitFeatureStage","async","ActiveFeatureStage","FeatureRequest","_requester","_revoke","requester","isClause","_revokeBy","unuse","_uses","revoke","FeatureRequester__key","FeatureRequester","Map","existing","_map","reuse","delete","set","bootstrapComponents","features","bootstrapContextRegistry","create","complete","newNamespaceAliaser","info","_ctx","ldr","whenDown","AfterEvent__symbol","initBootstrap","DomPropertyPath__root","ComponentState__key","ComponentState","StateTracker","StateSupport__feature","update","with","StateSupport","ElementRender","render","offline","path","stateTracker","track","schedule","rendered","stateSupply","onUpdate","scheduleRender","renderElement","newRender","Render","propertyKey","defContext","FetchAgentKey","agents","fetch","agentIdx","agentRequest","agent","onSupplied","nextRequest","combineFetchAgents","defaultFetchAgent","HttpFetchAgent","HttpFetchAborted","HttpFetch","input","Request","responseEmitter","abortController","AbortController","signal","abort","response","customSignal","aborted","catch","EnterPageEvent","cancelable","when","LeavePageEvent","StayOnPageEvent","Navigation__key","Navigation","OnEvent__symbol","go","NavigationAgentKey","document","navigate","agentTo","url","nextURL","title","nextTitle","data","nextData","URL","String","baseURI","visited","current","ref","put","defaultNavigationAgent","_when","_from","NavigationAgent","PageParam__symbol","PageParam","PageParamContext","RoutingHistory__key","NavHistory","_document","_location","location","_history","history","_uid","btoa","Math","random","extractNavData","entry","newEntry","href","_entries","enter","replaceState","_historyState","PageEntry","_lastId","toEntry","page","pushState","_enter","fromEntry","e","_forget","leave","popState","_changeHash","uid","pageId","existingEntry","transfer","oldEntry","forget","NAV_DATA_KEY","_params","_status","handle","param","newHandle","entries","transferred","at","stay","clear","_update","createNavigation","dispatcher","navHistory","onEnter","onLeave","onStay","onEvent","nav","nextEntry","readPage","hashChange","Navigation_","delta","toURL","withParam","applyParams","open","replace","whenLeave","urlTarget","urlTargetOf","doNavigate","prepared","leavePage","finalTarget","t","prepare","NavigationSupport__feature","cachingPageLoader","pageUrl","sup","tracked","onLoad","trackSupply","resp","num","requested","PageLoadAbortError","PageLoadRequests","_navigation","_loader","fragments","fragment","itsIterator","self","pageSupply","loadSupply","noEventSupply","_add","_transfer","pageLoadRequestsParam","responseReceiver","ok","tag","getElementsByTagName","getElementById","onFragment","req","eventReceiver","list","_page","requests","PageLoadAgent","PageLoadURLModifier","PageLoader","httpFetch","modifyURL","parser","DOMParser","mode","credentials","headers","Headers","Accept","fetchRequest","Accept-Fragment","header","hthvQuote","pageFragmentsRequest","responseTextEmitter","onResponse","text","parsePageDocument","start","responseSupply","parseFromString","hthvParse","v","head","base","querySelector","getAttribute","newBase","createElement","appendChild","PageLoadParam","pageLoadParam","PageCacheBuster__key","PageCacheBuster","appRev","navigation","urlModifier","searchParams","newRev","reload","importNode","beforeOrImport","importContent","importNodeContent","before","elementClone","tagName","toLowerCase","getAttributeNames","attr","setAttribute","insertBefore","nodeClone","childNodes","pageScriptsAgent","allScripts","externalScripts","scripts","src","querySelectorAll","script","pageStyleAgent","newStyles","oldStyles","oldStylesByHref","firstOldStyle","link","newStyle","oldStyle","itsFirst","keys","nextSibling","style","pageTitleAgent","textContent","PageLoadSupport__feature","buster","PageLoadSupport","SimpleContextKey","providers","provider","isId","prevProvider","hasId","combineStyles","byId","theme","stypRules","ComponentNode","ElementNodeList","WATCH_DEEP","subtree","elementNodeList","root","selectorOrType","nodeOf","deep","iterable","selector","cache","selected","refresh","added","observer","removed","removeNode","addNode","nodeList","firstReceiver","disconnect","onTrackUpdate","initialEmitter","afterSupplied","addEventListener","ElementNodeList_","sel","children","matches","select","AttributesObserver","_bs","_observer","Observer","_emitter","_emitters","reconnect","takeRecords","attributes","attributeOldValue","attributeFilter","attributeName","AttributeTracker","ValueTracker","_name","observeSupply","_updates","NodeAttributes","_attrs","PropertyTracker","_element","_key","propertyState","_supply","_path","NodeProperties","_props","prop","ElementNode__symbol","ElementNode","_bind","parent","elementNodeOf","optional","selectNodes","ComponentTreeSupport__feature","ComponentTreeSupport"],"mappings":"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"}