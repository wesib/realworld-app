{"version":3,"file":"push-iterator.a06e0e70.js","sources":["../../../../../proc7ts/push-iterator/src/push-iterator.impl.ts","../../../../../proc7ts/push-iterator/src/array-iterator.impl.ts","../../../../../proc7ts/push-iterator/src/construction/over-array.ts","../../../../../proc7ts/push-iterator/src/its-iterator.ts","../../../../../proc7ts/push-iterator/src/make-push-iterator.ts","../../../../../proc7ts/push-iterator/src/construction/over-none.ts","../../../../../proc7ts/push-iterator/src/construction/over-elements-of.ts","../../../../../proc7ts/push-iterator/src/construction/over-iterable.ts","../../../../../proc7ts/push-iterator/src/construction/over-one.ts","../../../../../proc7ts/push-iterator/src/construction/reverse-array.ts","../../../../../proc7ts/push-iterator/src/consumption/its-each.ts","../../../../../proc7ts/push-iterator/src/consumption/its-every.ts","../../../../../proc7ts/push-iterator/src/consumption/its-first.ts","../../../../../proc7ts/push-iterator/src/consumption/its-reduction.ts","../../../../../proc7ts/push-iterator/src/transformation/filter-it.ts","../../../../../proc7ts/push-iterator/src/transformation/flat-map-it.ts","../../../../../proc7ts/push-iterator/src/transformation/map-it.ts","../../../../../proc7ts/push-iterator/src/objects/over-entries.ts","../../../../../proc7ts/push-iterator/src/objects/over-keys.ts","../../../../../proc7ts/push-iterator/src/call-thru/thru-it.ts"],"sourcesContent":["import type { PushIterator, PushOrRawIterator } from './push-iterator';\n\n/**\n * @internal\n */\nexport function PushIterator$iterator<T>(this: PushIterator<T>): PushIterator<T> {\n  return this;\n}\n\n/**\n * @internal\n */\nexport function PushIterator$next<T>(this: PushIterator<T>): IteratorResult<T> {\n  for (; ;) {\n\n    let result: IteratorYieldResult<T> | undefined;\n    const done = !this.forNext(value => {\n      result = { value };\n      return false;\n    });\n\n    if (result) {\n      return result;\n    }\n    if (done) {\n      return { done: true } as IteratorReturnResult<T>;\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport function toPushIterator<T>(it: PushOrRawIterator<T>): PushIterator<T> {\n  if (it.forNext) {\n    return it;\n  }\n\n  return {\n\n    [Symbol.iterator]: PushIterator$iterator,\n\n    next() {\n      return it.next();\n    },\n\n    forNext(accept) {\n      for (; ;) {\n\n        const res = it.next();\n\n        if (res.done) {\n          return false;\n        }\n        if (accept(res.value) === false) {\n          return true;\n        }\n      }\n    },\n\n  };\n}\n","import type { PushIterator } from './push-iterator';\nimport { PushIterator$iterator } from './push-iterator.impl';\n\n/**\n * @internal\n */\nexport function arrayIterator<T>(array: ArrayLike<T>): PushIterator<T> {\n\n  let i = 0;\n\n  return {\n    [Symbol.iterator]: PushIterator$iterator,\n    next: () => i < array.length ? { value: array[i++] } : { done: true } as IteratorReturnResult<undefined>,\n    forNext(accept) {\n      if (i >= array.length) {\n        return false;\n      }\n\n      for (; ;) {\n\n        const goOn = accept(array[i++]);\n\n        if (i >= array.length) {\n          return false;\n        }\n        if (goOn === false) {\n          return true;\n        }\n      }\n    },\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/push-iterator\n */\nimport { arrayIterator } from '../array-iterator.impl';\nimport type { PushIterable } from '../push-iterable';\n\n/**\n * Creates a {@link PushIterable push iterable} over elements of array-like structure.\n *\n * @typeParam T  Array elements type.\n * @param array  An array-like structure. E.g. `Array`, DOM `NodeList`, etc.\n *\n * @returns New push iterable over array elements.\n */\nexport function overArray<T>(array: ArrayLike<T>): PushIterable<T> {\n  return { [Symbol.iterator]: () => arrayIterator(array) };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/push-iterator\n */\nimport { arrayIterator } from './array-iterator.impl';\nimport type { PushOrRawIterable } from './push-iterable';\nimport type { PushIterator } from './push-iterator';\nimport { toPushIterator } from './push-iterator.impl';\n\n/**\n * Starts iteration over the given `iterable`.\n *\n * @typeParam T  Iterated elements type.\n * @param iterable  An iterable or push iterable to iterate over.\n *\n * @return A push iterator iterating over the given iterable.\n */\nexport function itsIterator<T>(iterable: PushOrRawIterable<T>): PushIterator<T> {\n  if (Array.isArray(iterable)) {\n    return arrayIterator<T>(iterable);\n  }\n  return toPushIterator(iterable[Symbol.iterator]());\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/push-iterator\n */\nimport type { PushIterator } from './push-iterator';\nimport { PushIterator$iterator, PushIterator$next } from './push-iterator.impl';\n\n/**\n * Creates push iterator implementation.\n *\n * @param forNext  A function iterating over elements conforming to {@link PushIterator.forNext} requirement.\n *\n * @returns New push iterator instance performing iteration by `forNext` function.\n */\nexport function makePushIterator<T>(forNext: PushIterator.Pusher<T>): PushIterator<T> {\n  return {\n    [Symbol.iterator]: PushIterator$iterator,\n    next: PushIterator$next,\n    forNext,\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/push-iterator\n */\nimport type { PushIterable } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\n\n/**\n * @internal\n */\nconst noneIterator = {\n  [Symbol.iterator]: () => noneIterator,\n  next: () => ({ done: true } as IteratorReturnResult<unknown>),\n  forNext: () => false,\n};\n\n/**\n * Returns a {@link PushIterator push iterable iterator} without elements.\n *\n * @typeParam T  Iterated elements type.\n *\n * @returns Empty push iterable and push iterator instance.\n */\nexport function overNone<T>(): PushIterable<T> & PushIterator<T> {\n  return noneIterator;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/push-iterator\n */\nimport { itsIterator } from '../its-iterator';\nimport { makePushIterator } from '../make-push-iterator';\nimport type { PushIterable, PushOrRawIterable } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\nimport { overIterable } from './over-iterable';\nimport { overNone } from './over-none';\n\n/**\n * Creates a {@link PushIterable push iterable} over elements of other iterables.\n *\n * @typeParam T  Iterated elements type.\n * @param sources  Source iterables to iterate over elements of.\n *\n * @returns New push iterable over elements of the given `sources`.\n */\nexport function overElementsOf<T>(...sources: readonly PushOrRawIterable<T>[]): PushIterable<T> {\n  if (sources.length > 1) {\n    return {\n      [Symbol.iterator](): PushIterator<T> {\n\n        let i = 0;\n        let it: PushIterator<T> = itsIterator(sources[0]);\n\n        return makePushIterator(accept => {\n          for (;;) {\n\n            // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n            let goOn: boolean | void;\n\n            if (!it.forNext(element => goOn = accept(element))) {\n              if (++i >= sources.length) {\n                return false;\n              }\n              it = itsIterator(sources[i]);\n            }\n            if (goOn === false) {\n              return true;\n            }\n          }\n        });\n      },\n    };\n  }\n  if (sources.length) {\n    return overIterable(sources[0]);\n  }\n  return overNone();\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/push-iterator\n */\nimport type { PushIterable, PushOrRawIterable } from '../push-iterable';\nimport { toPushIterator } from '../push-iterator.impl';\nimport { overArray } from './over-array';\n\n/**\n * Creates a {@link PushIterable push iterable} over elements of the given raw iterable.\n *\n * @typeParam T  Iterated elements type.\n * @param source  Source iterable to iterate over elements of.\n *\n * @returns New push iterable over elements of the given `source`.\n */\nexport function overIterable<T>(source: PushOrRawIterable<T>): PushIterable<T> {\n  if (Array.isArray(source)) {\n    return overArray<T>(source);\n  }\n  return { [Symbol.iterator]: () => toPushIterator(source[Symbol.iterator]()) };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/push-iterator\n */\nimport type { PushIterable } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\nimport { PushIterator$iterator } from '../push-iterator.impl';\n\n/**\n * Creates a {@link PushIterable push iterable} over one value.\n *\n * @typeParam T  Iterated element value type.\n * @param value  A value to iterate over.\n *\n * @returns New push iterable over the given value.\n */\nexport function overOne<T>(value: T): PushIterable<T> {\n  return { [Symbol.iterator]: () => oneValueIterator(value) };\n}\n\n/**\n * @internal\n */\nfunction oneValueIterator<T>(value: T): PushIterator<T> {\n\n  let done = false;\n\n  return {\n    [Symbol.iterator]: PushIterator$iterator,\n    next() {\n      if (done) {\n        return { done } as IteratorReturnResult<undefined>;\n      }\n      done = true;\n      return { value };\n    },\n    forNext(accept) {\n      if (!done) {\n        done = true;\n        accept(value);\n      }\n      return false;\n    },\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/push-iterator\n */\nimport { makePushIterator } from '../make-push-iterator';\nimport type { PushIterable } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\n\n/**\n * Creates a {@link PushIterable push iterable} over elements of array-like structure in reverse order.\n *\n * @typeParam T  Array elements type.\n * @param array  An array-like structure. E.g. `Array`, DOM `NodeList`, etc.\n *\n * @returns New push iterable over array elements in reverse order.\n */\nexport function reverseArray<T>(array: ArrayLike<T>): PushIterable<T> {\n  return { [Symbol.iterator]: () => reverseArrayIterator(array) };\n}\n\n/**\n * @internal\n */\nfunction reverseArrayIterator<T>(array: ArrayLike<T>): PushIterator<T> {\n\n  let i = array.length - 1;\n\n  return makePushIterator(accept => {\n    if (i < 0) {\n      return false;\n    }\n\n    for (; ;) {\n\n      const goOn = accept(array[i--]);\n\n      if (i < 0) {\n        return false;\n      }\n      if (goOn === false) {\n        return true;\n      }\n    }\n  });\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/push-iterator\n */\nimport type { PushOrRawIterable } from '../push-iterable';\n\n/**\n * Performs the given `action` for each element of the given `iterable`.\n *\n * @typeParam T  Iterated elements type.\n * @param iterable  An iterable of elements to perform actions on.\n * @param action  An action to perform on each iterable element. This is a function accepting an element as its only\n * parameter.\n */\nexport function itsEach<T>(iterable: PushOrRawIterable<T>, action: (this: void, element: T) => void): void {\n\n  const it = iterable[Symbol.iterator]();\n  const forNext = it.forNext;\n\n  if (forNext) {\n    forNext(element => {\n      action(element);\n    });\n  } else {\n    for (;;) {\n\n      const res = it.next();\n\n      if (res.done) {\n        break;\n      }\n\n      action(res.value);\n    }\n  }\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/push-iterator\n */\nimport { itsIterator } from '../its-iterator';\nimport type { PushOrRawIterable } from '../push-iterable';\n\n/**\n * Tests whether all elements of the given `iterable` pass the test implemented by the provided function.\n *\n * @typeParam T  Iterated elements type.\n * @param iterable  An iterable to test elements of.\n * @param test  A predicate function to test each element. Returns `true` to continue tests, or `false` to stop it\n * and return `false` from the method call. It accepts the tested element as the only parameter.\n *\n * @returns `true` if the `test` function returned a truthy value for every element, or `false` otherwise.\n * Returns `true` for empty iterable.\n */\nexport function itsEvery<T>(\n    iterable: PushOrRawIterable<T>,\n    test: (this: void, element: T) => boolean,\n): boolean {\n\n  let allMatch = true;\n\n  itsIterator(iterable).forNext(element => allMatch = !!test(element));\n\n  return allMatch;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/push-iterator\n */\nimport type { PushOrRawIterable } from '../push-iterable';\n\n/**\n * Extracts the first element of the given `iterable`, if any.\n *\n * @typeParam T  Iterated elements type.\n * @param iterable  An iterable to extract element from.\n *\n * @return Either the first element, or `undefined` if the given `iterable` is empty.\n */\nexport function itsFirst<T>(iterable: PushOrRawIterable<T>): T | undefined {\n\n  const it = iterable[Symbol.iterator]();\n  const forNext = it.forNext;\n\n  if (forNext) {\n\n    let first: T | undefined;\n\n    forNext(element => {\n      first = element;\n      return false;\n    });\n\n    return first;\n  }\n\n  const result = it.next();\n\n  return result.done ? undefined : result.value;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/push-iterator\n */\nimport type { PushOrRawIterable } from '../push-iterable';\n\n/**\n * Applies a function against an accumulator and each element of the given `iterable` to reduce elements to a single\n * value.\n *\n * @typeParam T  A type of `iterable` elements.\n * @typeParam R  A type of reduced value.\n * @param iterable  An iterable to reduce values of.\n * @param reducer  A function to apply the value returned from the previous `reducer` call and to each element.\n * @param initialValue  Initial value passed to the first `reducer` call.\n *\n * @return Reduced value returned from the last `reducer` call, or `initialValue` if there is no elements in the given\n * `iterable`.\n */\nexport function itsReduction<T, R>(\n    iterable: PushOrRawIterable<T>,\n    reducer: (this: void, prev: R, element: T) => R,\n    initialValue: R,\n): R {\n\n  let reduced = initialValue;\n  const it = iterable[Symbol.iterator]();\n  const forNext = it.forNext;\n\n  if (forNext) {\n    forNext(element => {\n      reduced = reducer(reduced, element);\n    });\n  } else {\n    for (;;) {\n\n      const res = it.next();\n\n      if (res.done) {\n        break;\n      }\n\n      reduced = reducer(reduced, res.value);\n    }\n  }\n\n  return reduced;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/push-iterator\n */\nimport { itsIterator } from '../its-iterator';\nimport { makePushIterator } from '../make-push-iterator';\nimport type { PushIterable, PushOrRawIterable } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\n\n/**\n * Creates a {@link PushIterable push iterable} with all `source` iterable elements that pass the test implemented by\n * the provided function.\n *\n * @typeParam T  A type of source elements.\n * @param source  A source iterable.\n * @param test  A predicate function to test each element. Returns `true` to keep the element, or `false` otherwise.\n * It accepts the tested element as the only parameter.\n *\n * @return New push iterable with the elements that pass the test. If no elements passed the test, an empty iterable\n * will be returned.\n */\nexport function filterIt<T>(\n    source: PushOrRawIterable<T>,\n    test: (this: void, element: T) => boolean,\n): PushIterable<T>;\n\n/**\n * Creates a {@link PushIterable push iterable} with all `source` iterable elements extending the given type.\n *\n * @typeParam T  A type of source elements\n * @typeParam R  Target type.\n * @param source  A source iterable.\n * @param test  A predicate function to test that element extends the type `R`. Returns `true` to keep the element, or\n * `false` otherwise. It accepts the tested element as the only parameter.\n *\n * @return New push iterable with the elements that pass the test. If no elements passed the test, an empty iterable\n * will be returned.\n */\nexport function filterIt<T, R extends T>(\n    source: PushOrRawIterable<T>,\n    test: (this: void, element: T) => element is R,\n): PushIterable<R>;\n\nexport function filterIt<T>(\n    source: PushOrRawIterable<T>,\n    test: (this: void, element: T) => boolean,\n): PushIterable<T> {\n  return {\n    [Symbol.iterator](): PushIterator<T> {\n\n      const it = itsIterator(source);\n\n      return makePushIterator(accept => it.forNext(element => !test(element) || accept(element)));\n    },\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/push-iterator\n */\nimport { itsIterator } from '../its-iterator';\nimport { makePushIterator } from '../make-push-iterator';\nimport type { PushIterable, PushOrRawIterable } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\n\n/**\n * @internal\n */\nconst flatMapIt$defaultConverter = <T, R>(element: T): PushOrRawIterable<R> => element as unknown as Iterable<R>;\n\n/**\n * Flattens the source iterable of iterables into new {@link PushIterable push iterable}.\n *\n * Calling this function is the same as calling `flatMapIt(source, element => element)`.\n *\n * @typeParam T  A type of source elements.\n * @param source  A source iterable of iterables.\n *\n * @returns New push iterable with each element of `source` being the flattened.\n */\nexport function flatMapIt<T>(source: PushOrRawIterable<Iterable<T>>): PushIterable<T>;\n\n/**\n * First maps each element of the `source` iterable using a mapping function, then flattens the result into new\n * {@link PushIterable push iterable}.\n *\n * @typeParam T  A type of source elements.\n * @typeParam R  A type of converted elements.\n * @param source  A source iterable.\n * @param convert  A function that produces a new iterable, taking the source element as the only parameter.\n *\n * @returns New push iterable with each element being the flattened result of the `convert` function call.\n */\nexport function flatMapIt<T, R>(\n    source: PushOrRawIterable<T>,\n    convert: (this: void, element: T) => PushOrRawIterable<R>,\n): PushIterable<R>;\n\nexport function flatMapIt<T, R>(\n    source: PushOrRawIterable<T>,\n    convert: (this: void, element: T) => PushOrRawIterable<R> = flatMapIt$defaultConverter,\n): PushIterable<R> {\n  return {\n    [Symbol.iterator](): PushIterator<R> {\n\n      const it = itsIterator(source);\n      let cIt: PushIterator<R> | undefined;\n      let lastSrc = false;\n\n      return makePushIterator(accept => {\n        for (;;) {\n          while (!cIt) {\n            if (!it.forNext(src => {\n              cIt = itsIterator(convert(src));\n              return false;\n            })) {\n              if (!cIt) {\n                return false;\n              }\n              lastSrc = true;\n            }\n          }\n\n          // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n          let goOn: boolean | void;\n\n          if (!cIt.forNext(element => goOn = accept(element))) {\n            cIt = undefined;\n            if (lastSrc) {\n              return false;\n            }\n          }\n          if (goOn === false) {\n            return true;\n          }\n        }\n      });\n    },\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/push-iterator\n */\nimport { itsIterator } from '../its-iterator';\nimport { makePushIterator } from '../make-push-iterator';\nimport type { PushIterable, PushOrRawIterable } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\n\n/**\n * Creates a {@link PushIterable push iterable} with the results of calling a provided function on every element of the\n * `source` iterable.\n *\n * @typeParam T  A type of source elements.\n * @typeParam R  A type of converted elements.\n * @param source  A source iterable.\n * @param convert  A function that produces an element of the new iterable, taking the source element as the only\n * parameter.\n *\n * @returns New push iterable of transformed elements.\n */\nexport function mapIt<T, R>(\n    source: PushOrRawIterable<T>,\n    convert: (this: void, element: T) => R,\n): PushIterable<R> {\n  return {\n    [Symbol.iterator](): PushIterator<R> {\n\n      const it = itsIterator(source);\n\n      return makePushIterator(accept => it.forNext(element => accept(convert(element))));\n    },\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/push-iterator\n */\nimport type { PushIterable } from '../push-iterable';\nimport { mapIt } from '../transformation';\nimport type { ObjectEntry } from './object-entry';\nimport { overKeys } from './over-keys';\n\n/**\n * Creates a {@link PushIterable push iterable} over the property key/value entries of the given object.\n *\n * A list of keys is constructed using `Reflect.ownKeys()`.\n *\n * @typeParam T  Object type.\n *\n * @param source  An object to select keys and values from.\n *\n * @returns New push iterable of object property entries.\n */\nexport function overEntries<T extends object>(source: T): PushIterable<ObjectEntry<T>> {\n  return mapIt(\n      overKeys(source),\n      key => [key, source[key]],\n  );\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/push-iterator\n */\nimport { overArray } from '../construction';\nimport type { PushIterable } from '../push-iterable';\n\n/**\n * Creates a {@link PushIterable push iterable} over keys of the given object.\n *\n * A list of keys is constructed using `Reflect.ownKeys()`.\n *\n * @typeParam T  Source object type.\n * @param source  An object to select keys from.\n *\n * @returns New push iterable over own object keys retrieved by `Reflect.ownKeys()`.\n */\nexport function overKeys<T extends object>(source: T): PushIterable<keyof T> {\n  return overArray(Reflect.ownKeys(source) as (keyof T)[]);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/push-iterator/call-thru\n */\nimport { isNextCall, NextCall__symbol } from '@proc7ts/call-thru';\nimport { overElementsOf, overOne } from '../construction';\nimport type { PushIterable, PushOrRawIterable } from '../push-iterable';\nimport { flatMapIt } from '../transformation';\nimport type { IterableCallChain } from './iterable-call-chain';\n\ntype Args<TReturn> = IterableCallChain.Args<TReturn>;\ntype Out<TReturn> = IterableCallChain.Out<TReturn>;\n\n/**\n * Passes each element of the given iterable trough the {@link IterableCallChain chain of transformation passes}.\n *\n * The passes are preformed by `@proc7ts/call-thru`.\n *\n * @returns An push iterable of transformed elements.\n */\nexport function thruIt<\n    T, TReturn1\n    >(\n    it: PushOrRawIterable<T>,\n    pass1: (this: void, arg: T) => TReturn1,\n): PushIterable<Out<TReturn1>>;\n\nexport function thruIt<\n    T, TReturn1,\n    TArgs2 extends Args<TReturn1>, TReturn2,\n    >(\n    it: PushOrRawIterable<T>,\n    pass1: (this: void, arg: T) => TReturn1,\n    pass2: (this: void, ...args: TArgs2) => TReturn2,\n): PushIterable<Out<TReturn2>>;\n\nexport function thruIt<\n    T, TReturn1,\n    TArgs2 extends Args<TReturn1>, TReturn2,\n    TArgs3 extends Args<TReturn2>, TReturn3,\n    >(\n    it: PushOrRawIterable<T>,\n    pass1: (this: void, arg: T) => TReturn1,\n    pass2: (this: void, ...args: TArgs2) => TReturn2,\n    pass3: (this: void, ...args: TArgs3) => TReturn3,\n): PushIterable<Out<TReturn3>>;\n\nexport function thruIt<\n    T, TReturn1,\n    TArgs2 extends Args<TReturn1>, TReturn2,\n    TArgs3 extends Args<TReturn2>, TReturn3,\n    TArgs4 extends Args<TReturn3>, TReturn4,\n    >(\n    it: PushOrRawIterable<T>,\n    pass1: (this: void, arg: T) => TReturn1,\n    pass2: (this: void, ...args: TArgs2) => TReturn2,\n    pass3: (this: void, ...args: TArgs3) => TReturn3,\n    pass4: (this: void, ...args: TArgs4) => TReturn4,\n): PushIterable<Out<TReturn4>>;\n\nexport function thruIt<\n    T, TReturn1,\n    TArgs2 extends Args<TReturn1>, TReturn2,\n    TArgs3 extends Args<TReturn2>, TReturn3,\n    TArgs4 extends Args<TReturn3>, TReturn4,\n    TArgs5 extends Args<TReturn4>, TReturn5,\n    >(\n    it: PushOrRawIterable<T>,\n    pass1: (this: void, arg: T) => TReturn1,\n    pass2: (this: void, ...args: TArgs2) => TReturn2,\n    pass3: (this: void, ...args: TArgs3) => TReturn3,\n    pass4: (this: void, ...args: TArgs4) => TReturn4,\n    pass5: (this: void, ...args: TArgs5) => TReturn5,\n): PushIterable<Out<TReturn4>>;\n\nexport function thruIt<\n    T, TReturn1,\n    TArgs2 extends Args<TReturn1>, TReturn2,\n    TArgs3 extends Args<TReturn2>, TReturn3,\n    TArgs4 extends Args<TReturn3>, TReturn4,\n    TArgs5 extends Args<TReturn4>, TReturn5,\n    TArgs6 extends Args<TReturn5>, TReturn6,\n    >(\n    it: PushOrRawIterable<T>,\n    pass1: (this: void, arg: T) => TReturn1,\n    pass2: (this: void, ...args: TArgs2) => TReturn2,\n    pass3: (this: void, ...args: TArgs3) => TReturn3,\n    pass4: (this: void, ...args: TArgs4) => TReturn4,\n    pass5: (this: void, ...args: TArgs5) => TReturn5,\n    pass6: (this: void, ...args: TArgs6) => TReturn6,\n): PushIterable<Out<TReturn4>>;\n\nexport function thruIt<\n    T, TReturn1,\n    TArgs2 extends Args<TReturn1>, TReturn2,\n    TArgs3 extends Args<TReturn2>, TReturn3,\n    TArgs4 extends Args<TReturn3>, TReturn4,\n    TArgs5 extends Args<TReturn4>, TReturn5,\n    TArgs6 extends Args<TReturn5>, TReturn6,\n    TArgs7 extends Args<TReturn6>, TReturn7,\n    >(\n    it: PushOrRawIterable<T>,\n    pass1: (this: void, arg: T) => TReturn1,\n    pass2: (this: void, ...args: TArgs2) => TReturn2,\n    pass3: (this: void, ...args: TArgs3) => TReturn3,\n    pass4: (this: void, ...args: TArgs4) => TReturn4,\n    pass5: (this: void, ...args: TArgs5) => TReturn5,\n    pass6: (this: void, ...args: TArgs6) => TReturn6,\n    pass7: (this: void, ...args: TArgs7) => TReturn7,\n): PushIterable<Out<TReturn4>>;\n\nexport function thruIt<\n    T, TReturn1,\n    TArgs2 extends Args<TReturn1>, TReturn2,\n    TArgs3 extends Args<TReturn2>, TReturn3,\n    TArgs4 extends Args<TReturn3>, TReturn4,\n    TArgs5 extends Args<TReturn4>, TReturn5,\n    TArgs6 extends Args<TReturn5>, TReturn6,\n    TArgs7 extends Args<TReturn6>, TReturn7,\n    TArgs8 extends Args<TReturn7>, TReturn8,\n    >(\n    it: PushOrRawIterable<T>,\n    pass1: (this: void, arg: T) => TReturn1,\n    pass2: (this: void, ...args: TArgs2) => TReturn2,\n    pass3: (this: void, ...args: TArgs3) => TReturn3,\n    pass4: (this: void, ...args: TArgs4) => TReturn4,\n    pass5: (this: void, ...args: TArgs5) => TReturn5,\n    pass6: (this: void, ...args: TArgs6) => TReturn6,\n    pass7: (this: void, ...args: TArgs7) => TReturn7,\n    pass8: (this: void, ...args: TArgs8) => TReturn8,\n): PushIterable<Out<TReturn4>>;\n\nexport function thruIt<\n    T, TReturn1,\n    TArgs2 extends Args<TReturn1>, TReturn2,\n    TArgs3 extends Args<TReturn2>, TReturn3,\n    TArgs4 extends Args<TReturn3>, TReturn4,\n    TArgs5 extends Args<TReturn4>, TReturn5,\n    TArgs6 extends Args<TReturn5>, TReturn6,\n    TArgs7 extends Args<TReturn6>, TReturn7,\n    TArgs8 extends Args<TReturn7>, TReturn8,\n    TArgs9 extends Args<TReturn8>, TReturn9,\n    >(\n    it: PushOrRawIterable<T>,\n    pass1: (this: void, arg: T) => TReturn1,\n    pass2: (this: void, ...args: TArgs2) => TReturn2,\n    pass3: (this: void, ...args: TArgs3) => TReturn3,\n    pass4: (this: void, ...args: TArgs4) => TReturn4,\n    pass5: (this: void, ...args: TArgs5) => TReturn5,\n    pass6: (this: void, ...args: TArgs6) => TReturn6,\n    pass7: (this: void, ...args: TArgs7) => TReturn7,\n    pass8: (this: void, ...args: TArgs8) => TReturn8,\n    pass9: (this: void, ...args: TArgs9) => TReturn9,\n): PushIterable<Out<TReturn4>>;\n\nexport function thruIt<\n    T, TReturn1,\n    TArgs2 extends Args<TReturn1>, TReturn2,\n    TArgs3 extends Args<TReturn2>, TReturn3,\n    TArgs4 extends Args<TReturn3>, TReturn4,\n    TArgs5 extends Args<TReturn4>, TReturn5,\n    TArgs6 extends Args<TReturn5>, TReturn6,\n    TArgs7 extends Args<TReturn6>, TReturn7,\n    TArgs8 extends Args<TReturn7>, TReturn8,\n    TArgs9 extends Args<TReturn8>, TReturn9,\n    TArgs10 extends Args<TReturn9>, TReturn10,\n    >(\n    it: PushOrRawIterable<T>,\n    pass1: (this: void, arg: T) => TReturn1,\n    pass2: (this: void, ...args: TArgs2) => TReturn2,\n    pass3: (this: void, ...args: TArgs3) => TReturn3,\n    pass4: (this: void, ...args: TArgs4) => TReturn4,\n    pass5: (this: void, ...args: TArgs5) => TReturn5,\n    pass6: (this: void, ...args: TArgs6) => TReturn6,\n    pass7: (this: void, ...args: TArgs7) => TReturn7,\n    pass8: (this: void, ...args: TArgs8) => TReturn8,\n    pass9: (this: void, ...args: TArgs9) => TReturn9,\n    pass10: (this: void, ...args: TArgs10) => TReturn10,\n): PushIterable<Out<TReturn4>>;\n\nexport function thruIt<\n    T, TReturn1,\n    TArgs2 extends Args<TReturn1>, TReturn2,\n    TArgs3 extends Args<TReturn2>, TReturn3,\n    TArgs4 extends Args<TReturn3>, TReturn4,\n    TArgs5 extends Args<TReturn4>, TReturn5,\n    TArgs6 extends Args<TReturn5>, TReturn6,\n    TArgs7 extends Args<TReturn6>, TReturn7,\n    TArgs8 extends Args<TReturn7>, TReturn8,\n    TArgs9 extends Args<TReturn8>, TReturn9,\n    TArgs10 extends Args<TReturn9>, TReturn10,\n    TArgs11 extends Args<TReturn10>, TReturn11,\n    >(\n    it: PushOrRawIterable<T>,\n    pass1: (this: void, arg: T) => TReturn1,\n    pass2: (this: void, ...args: TArgs2) => TReturn2,\n    pass3: (this: void, ...args: TArgs3) => TReturn3,\n    pass4: (this: void, ...args: TArgs4) => TReturn4,\n    pass5: (this: void, ...args: TArgs5) => TReturn5,\n    pass6: (this: void, ...args: TArgs6) => TReturn6,\n    pass7: (this: void, ...args: TArgs7) => TReturn7,\n    pass8: (this: void, ...args: TArgs8) => TReturn8,\n    pass9: (this: void, ...args: TArgs9) => TReturn9,\n    pass10: (this: void, ...args: TArgs10) => TReturn10,\n    pass11: (this: void, ...args: TArgs11) => TReturn11,\n): PushIterable<Out<TReturn4>>;\n\nexport function thruIt<\n    T, TReturn1,\n    TArgs2 extends Args<TReturn1>, TReturn2,\n    TArgs3 extends Args<TReturn2>, TReturn3,\n    TArgs4 extends Args<TReturn3>, TReturn4,\n    TArgs5 extends Args<TReturn4>, TReturn5,\n    TArgs6 extends Args<TReturn5>, TReturn6,\n    TArgs7 extends Args<TReturn6>, TReturn7,\n    TArgs8 extends Args<TReturn7>, TReturn8,\n    TArgs9 extends Args<TReturn8>, TReturn9,\n    TArgs10 extends Args<TReturn9>, TReturn10,\n    TArgs11 extends Args<TReturn10>, TReturn11,\n    TArgs12 extends Args<TReturn11>, TReturn12,\n    >(\n    it: PushOrRawIterable<T>,\n    pass1: (this: void, arg: T) => TReturn1,\n    pass2: (this: void, ...args: TArgs2) => TReturn2,\n    pass3: (this: void, ...args: TArgs3) => TReturn3,\n    pass4: (this: void, ...args: TArgs4) => TReturn4,\n    pass5: (this: void, ...args: TArgs5) => TReturn5,\n    pass6: (this: void, ...args: TArgs6) => TReturn6,\n    pass7: (this: void, ...args: TArgs7) => TReturn7,\n    pass8: (this: void, ...args: TArgs8) => TReturn8,\n    pass9: (this: void, ...args: TArgs9) => TReturn9,\n    pass10: (this: void, ...args: TArgs10) => TReturn10,\n    pass11: (this: void, ...args: TArgs11) => TReturn11,\n    pass12: (this: void, ...args: TArgs12) => TReturn12,\n): PushIterable<Out<TReturn4>>;\n\nexport function thruIt<\n    T, TReturn1,\n    TArgs2 extends Args<TReturn1>, TReturn2,\n    TArgs3 extends Args<TReturn2>, TReturn3,\n    TArgs4 extends Args<TReturn3>, TReturn4,\n    TArgs5 extends Args<TReturn4>, TReturn5,\n    TArgs6 extends Args<TReturn5>, TReturn6,\n    TArgs7 extends Args<TReturn6>, TReturn7,\n    TArgs8 extends Args<TReturn7>, TReturn8,\n    TArgs9 extends Args<TReturn8>, TReturn9,\n    TArgs10 extends Args<TReturn9>, TReturn10,\n    TArgs11 extends Args<TReturn10>, TReturn11,\n    TArgs12 extends Args<TReturn11>, TReturn12,\n    TArgs13 extends Args<TReturn12>, TReturn13,\n    >(\n    it: PushOrRawIterable<T>,\n    pass1: (this: void, arg: T) => TReturn1,\n    pass2: (this: void, ...args: TArgs2) => TReturn2,\n    pass3: (this: void, ...args: TArgs3) => TReturn3,\n    pass4: (this: void, ...args: TArgs4) => TReturn4,\n    pass5: (this: void, ...args: TArgs5) => TReturn5,\n    pass6: (this: void, ...args: TArgs6) => TReturn6,\n    pass7: (this: void, ...args: TArgs7) => TReturn7,\n    pass8: (this: void, ...args: TArgs8) => TReturn8,\n    pass9: (this: void, ...args: TArgs9) => TReturn9,\n    pass10: (this: void, ...args: TArgs10) => TReturn10,\n    pass11: (this: void, ...args: TArgs11) => TReturn11,\n    pass12: (this: void, ...args: TArgs12) => TReturn12,\n    pass13: (this: void, ...args: TArgs13) => TReturn13,\n): PushIterable<Out<TReturn4>>;\n\nexport function thruIt<T, TReturn>(\n    it: PushOrRawIterable<T>,\n    ...passes: ((...args: any[]) => any)[]\n): PushIterable<TReturn> {\n\n  const chain = (outcome: PushIterable<any>[], index: number): IterableCallChain => {\n\n    const lastPass = index >= passes.length;\n\n    ++index;\n\n    const pass = index < passes.length ? passes[index] : () => { /* empty pass */ };\n    const handleResult = (outcome: PushIterable<any>[], callResult: any, arg: any): void => {\n      if (isNextCall(callResult)) {\n        callResult[NextCall__symbol](chain(outcome, index), pass);\n      } else if (lastPass) {\n        outcome.push(overOne(arg));\n      } else {\n        chain(outcome, index).pass(pass, callResult);\n      }\n    };\n\n    return ({\n      call<A extends any[]>(fn: (...args: A) => any, args: A): void {\n        handleResult(outcome, fn(...args), args);\n      },\n      pass<A>(fn: (arg: A) => any, arg: A): void {\n        handleResult(outcome, fn(arg), arg);\n      },\n      skip() {/* skip item */},\n      iterate<I>(fn: (this: void, arg: I) => void, iterable: PushOrRawIterable<I>): void {\n        outcome.push(flatMapIt(\n            iterable,\n            item => {\n\n              const itemOutcome: PushIterable<any>[] = [];\n\n              handleResult(itemOutcome, fn(item), item);\n\n              return overElementsOf(...itemOutcome);\n            },\n        ));\n      },\n    });\n  };\n\n  const finalOutcome: PushIterable<any>[] = [];\n\n  chain(finalOutcome, 0).iterate(passes[0], it);\n\n  return overElementsOf<TReturn>(...finalOutcome);\n}\n"],"names":["PushIterator$iterator","this","PushIterator$next","result","done","forNext","value","toPushIterator","it","[object Object]","Symbol","iterator","next","accept","res","arrayIterator","array","i","length","goOn","overArray","itsIterator","iterable","Array","isArray","makePushIterator","noneIterator","overElementsOf","sources","element","source","overOne","oneValueIterator","reverseArray","reverseArrayIterator","itsEach","action","itsEvery","test","allMatch","itsFirst","first","undefined","itsReduction","reducer","initialValue","reduced","filterIt","flatMapIt$defaultConverter","flatMapIt","convert","cIt","lastSrc","src","mapIt","overEntries","Reflect","ownKeys","overKeys","key","thruIt","passes","chain","outcome","index","lastPass","pass","handleResult","callResult","arg","isNextCall","NextCall__symbol","push","fn","args","item","itemOutcome","finalOutcome","iterate"],"mappings":"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"}