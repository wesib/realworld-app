{"version":3,"file":"delta-set.d9ebb9ee.js","sources":["../../../../../proc7ts/delta-set/src/delta-set.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module @proc7ts/delta-set\n */\n/**\n * A `Set` implementation that keeps a delta of changes made to it.\n *\n * @typeparam T  A type of elements of delta set.\n */\nexport class DeltaSet<T> extends Set<T> {\n\n  /** @internal */\n  private readonly _added: Set<T>;\n\n  /** @internal */\n  private readonly _removed: Set<T>;\n\n  /**\n   * Constructs new delta set.\n   *\n   * @param values  An iterable of elements be add to constructed delta set. Or `null` to add nothing.\n   */\n  constructor(values?: Iterable<T> | null) {\n    super();\n    this._added = new Set<T>(values);\n    this._removed = new Set<T>();\n    this._added.forEach(value => this.add(value));\n  }\n\n  /**\n   * Appends a new element with a specified value to the end of this delta set. Unless the set contains this element\n   * already.\n   *\n   * Records element addition and forgets its removal unless the set contains it already.\n   *\n   * @param value  The value of the element to add.\n   *\n   * @returns `this` delta set.\n   */\n  add(value: T): this {\n    if (!this.has(value)) {\n      this._added.add(value);\n      this._removed.delete(value);\n      super.add(value);\n    }\n    return this;\n  }\n\n  /**\n   * Removes the specified element from this delta set.\n   *\n   * Records element removal and forgets its addition if removal succeed.\n   *\n   * @param value  The value of the element to remove.\n   *\n   * @returns `true` if element removed successfully; or `false` if this set did not contain the element.\n   */\n  delete(value: T): boolean {\n    if (super.delete(value)) {\n      this._added.delete(value);\n      this._removed.add(value);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Removes all elements from this delta set.\n   *\n   * Records all elements removal and forgets all elements additions.\n   */\n  clear(): void {\n    this._added.clear();\n    this.forEach(value => this._removed.add(value));\n    super.clear();\n  }\n\n  /**\n   * Applies changes to this delta set.\n   *\n   * First removes elements to `remove`. Then appends elements to `add`.\n   *\n   * Records all changes made.\n   *\n   * @param add  An iterable of elements to add.\n   * @param remove  An iterable of elements to remove.\n   *\n   * @returns `this` delta set.\n   */\n  delta(add: Iterable<T>, remove: Iterable<T> = []): this {\n    deltaSetDeltaReceiver(this)(add, remove);\n    return this;\n  }\n\n  /**\n   * Replays changes made to this set in target receiver.\n   *\n   * @param receiver  A receiver of changes delta. E.g. another `Set`.\n   *\n   * @returns `this` delta set.\n   */\n  redelta(receiver: DeltaSet.DeltaReceiver<T>): this {\n\n    const receive = typeof receiver === 'function' ? receiver : deltaSetDeltaReceiver(receiver);\n\n    receive(Array.from(this._added), Array.from(this._removed));\n\n    return this;\n  }\n\n  /**\n   * Forgets all changes made to this set.\n   *\n   * Does not alter the set contents.\n   *\n   * @returns `this` delta set.\n   */\n  undelta(): this {\n    this._added.clear();\n    this._removed.clear();\n    return this;\n  }\n\n}\n\nexport namespace DeltaSet {\n\n  /**\n   * A delta set changes receiver.\n   *\n   * This can be either an {@link DeltaReceiverObject object}, or a {@link DeltaReceiverFunction function}.\n   *\n   * @typeparam T  A type of elements of delta set.\n   */\n  export type DeltaReceiver<T> =\n      | DeltaReceiverFunction<T>\n      | DeltaReceiverObject<T>;\n\n  /**\n   * A delta set changes receiver function.\n   *\n   * @typeparam T  A type of elements of delta set.\n   */\n  export type DeltaReceiverFunction<T> =\n  /**\n   * @param added  An array of added elements.\n   * @param removed  An array of removed elements.\n   */\n      (this: void, added: T[], remove: T[]) => void;\n\n  /**\n   * A delta set changes receiver object.\n   *\n   * A `Set` class implements this interface.\n   *\n   * @typeparam T  A type of elements of delta set.\n   */\n  export interface DeltaReceiverObject<T> {\n\n    /**\n     * Receives an element that has been added to delta set.\n     *\n     * @param value  The value of the added element.\n     */\n    add(value: T): void;\n\n    /**\n     * Receives an element that has been remove from delta set.\n     *\n     * @param value  The value of the removed element.\n     */\n    delete(value: T): void;\n\n  }\n\n}\n\n/**\n * @internal\n */\nfunction deltaSetDeltaReceiver<T>(\n    receiver: DeltaSet.DeltaReceiverObject<T>,\n): (this: void, add: Iterable<T>, remove: Iterable<T>) => void {\n  return (add, remove) => {\n    for (const removed of remove) {\n      receiver.delete(removed);\n    }\n    for (const added of add) {\n      receiver.add(added);\n    }\n  };\n}\n"],"names":["DeltaSet","Set","[object Object]","values","super","this","_added","_removed","forEach","value","add","has","delete","clear","remove","deltaSetDeltaReceiver","receiver","Array","from","removed","added"],"mappings":"MASaA,UAAoBC,IAa/BC,YAAYC,GACVC,QACAC,KAAKC,OAAS,IAAIL,IAAOE,GACzBE,KAAKE,SAAW,IAAIN,IACpBI,KAAKC,OAAOE,QAAQC,GAASJ,KAAKK,IAAID,IAaxCP,IAAIO,GAMF,OALKJ,KAAKM,IAAIF,KACZJ,KAAKC,OAAOI,IAAID,GAChBJ,KAAKE,SAASK,OAAOH,GACrBL,MAAMM,IAAID,IAELJ,KAYTH,OAAOO,GACL,QAAIL,MAAMQ,OAAOH,KACfJ,KAAKC,OAAOM,OAAOH,GACnBJ,KAAKE,SAASG,IAAID,IACX,GAUXP,QACEG,KAAKC,OAAOO,QACZR,KAAKG,QAAQC,GAASJ,KAAKE,SAASG,IAAID,IACxCL,MAAMS,QAeRX,MAAMQ,EAAkBI,EAAsB,IAE5C,OADAC,EAAsBV,KAAtBU,CAA4BL,EAAKI,GAC1BT,KAUTH,QAAQc,GAMN,OAJoC,mBAAbA,EAA0BA,EAAWD,EAAsBC,IAE1EC,MAAMC,KAAKb,KAAKC,QAASW,MAAMC,KAAKb,KAAKE,WAE1CF,KAUTH,UAGE,OAFAG,KAAKC,OAAOO,QACZR,KAAKE,SAASM,QACPR,MA4DX,SAASU,EACLC,GAEF,MAAO,CAACN,EAAKI,KACX,IAAK,MAAMK,KAAWL,EACpBE,EAASJ,OAAOO,GAElB,IAAK,MAAMC,KAASV,EAClBM,EAASN,IAAIU"}