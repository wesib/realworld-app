{"version":3,"file":"fun-events.2a5b87d8.js","sources":["../../../../../proc7ts/fun-events/src/base/event-keeper.ts","../../../../../proc7ts/fun-events/src/base/event-receiver.ts","../../../../../proc7ts/fun-events/src/base/event-notifier.impl.ts","../../../../../proc7ts/fun-events/src/base/event-notifier.ts","../../../../../proc7ts/fun-events/src/base/event-sender.ts","../../../../../proc7ts/fun-events/src/base/no-events-error.ts","../../../../../proc7ts/fun-events/src/base/send-events-to.ts","../../../../../proc7ts/fun-events/src/impl/after-event.no-fallback.ts","../../../../../proc7ts/fun-events/src/impl/dig-events.ts","../../../../../proc7ts/fun-events/src/impl/on-event.do.ts","../../../../../proc7ts/fun-events/src/impl/on-event.supplier.ts","../../../../../proc7ts/fun-events/src/impl/once-event.ts","../../../../../proc7ts/fun-events/src/impl/on-event.then.ts","../../../../../proc7ts/fun-events/src/impl/share-events.ts","../../../../../proc7ts/fun-events/src/impl/supply-events.ts","../../../../../proc7ts/fun-events/src/impl/translate-events.ts","../../../../../proc7ts/fun-events/src/base/impl/never-receive.ts","../../../../../proc7ts/fun-events/src/on-event.ts","../../../../../proc7ts/fun-events/src/after-event.ts","../../../../../proc7ts/fun-events/src/keepers/after-all.ts","../../../../../proc7ts/fun-events/src/keepers/after-each.ts","../../../../../proc7ts/fun-events/src/keepers/after-sent.ts","../../../../../proc7ts/fun-events/src/keepers/after-supplied.ts","../../../../../proc7ts/fun-events/src/keepers/after-the.ts","../../../../../proc7ts/fun-events/src/processors/consume-events.ts","../../../../../proc7ts/fun-events/src/processors/share-after.ts","../../../../../proc7ts/fun-events/src/processors/dig-after.ts","../../../../../proc7ts/fun-events/src/senders/event-emitter.ts","../../../../../proc7ts/fun-events/src/senders/on-never.ts","../../../../../proc7ts/fun-events/src/senders/on-supplied.ts","../../../../../proc7ts/fun-events/src/senders/on-any.ts","../../../../../proc7ts/fun-events/src/senders/on-promise.ts","../../../../../proc7ts/fun-events/src/base/impl/always-receive-value.ts","../../../../../proc7ts/fun-events/src/processors/share-on.ts","../../../../../proc7ts/fun-events/src/processors/dig-on.ts","../../../../../proc7ts/fun-events/src/processors/translate-on.ts","../../../../../proc7ts/fun-events/src/processors/filter-on.ts","../../../../../proc7ts/fun-events/src/processors/map-after.ts","../../../../../proc7ts/fun-events/src/processors/map-on.ts","../../../../../proc7ts/fun-events/src/processors/once-after.ts","../../../../../proc7ts/fun-events/src/processors/once-on.ts","../../../../../proc7ts/fun-events/src/processors/supply-on.ts","../../../../../proc7ts/fun-events/src/processors/resolve-on-ordered.ts","../../../../../proc7ts/fun-events/src/processors/resolve-on.ts","../../../../../proc7ts/fun-events/src/processors/supply-after.ts","../../../../../proc7ts/fun-events/src/processors/translate-after.ts","../../../../../proc7ts/fun-events/src/processors/value-on.ts","../../../../../proc7ts/fun-events/src/state/state-path.ts","../../../../../proc7ts/fun-events/src/state/state-tracker.ts","../../../../../proc7ts/fun-events/src/value/value-tracker.ts","../../../../../proc7ts/fun-events/src/value/track-value.ts"],"sourcesContent":["import { AfterEvent } from '../after-event';\n\n/**\n * A key of {@link EventKeeper} method returning its {@link AfterEvent} instance.\n *\n * @category Core\n */\nexport const AfterEvent__symbol = (/*#__PURE__*/ Symbol('after-event'));\n\n/**\n * An event supplier that keeps the last event sent.\n *\n * The registered event receiver would receive the kept event immediately upon registration, and all upcoming events\n * after that.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n */\nexport interface EventKeeper<TEvent extends any[]> {\n\n  /**\n   * Returns an {@link AfterEvent} instance of this event keeper.\n   *\n   * @returns {@link AfterEvent} instance registering event receivers sent by this keeper.\n   */\n  [AfterEvent__symbol](): AfterEvent<TEvent>;\n\n}\n\n/**\n * @category Core\n */\nexport namespace EventKeeper {\n\n  /**\n   * A type of events sent by the given event keeper.\n   *\n   * @typeParam TKeeper - Target event keeper.\n   */\n  export type Event<TKeeper extends EventKeeper<any>> = TKeeper extends EventKeeper<infer TEvent> ? TEvent : never;\n\n}\n\n/**\n * Checks whether the given value implements an {@link EventKeeper} interface.\n *\n * @category Core\n * @typeParam TEvent - Expected event type.\n * @typeParam TOther - Another type the value may have.\n * @param value - A value to check.\n *\n * @returns `true` if the `value` contains an {@link AfterEvent__symbol} method, or `false` otherwise.\n */\nexport function isEventKeeper<TEvent extends any[], TOther = unknown>(\n    value: EventKeeper<TEvent> | TOther,\n): value is EventKeeper<TEvent> {\n  return !!value\n      && (typeof value === 'object' || typeof value === 'function')\n      && typeof (value as Partial<EventKeeper<TEvent>>)[AfterEvent__symbol] === 'function';\n}\n","import { Supply } from '@proc7ts/primitives';\n\n/**\n * Event receiver is called on each event sent by {@link EventSender} when registered.\n *\n * A receiver may be represented either by {@link EventReceiver.Function function}, or by\n * {@link EventReceiver.Object object}. The former is a simplest form. The latter allows control all aspects of event\n * processing.\n *\n * To register an event receiver just call the event sender's `[OnEvent__symbol]` or event keeper's\n * `[AfterEvent__symbol]` method with this event receiver as argument.\n *\n * A _recurrent event_ is an event sent from inside event receiver and targeted the same receiver. Recurrent event\n * processing is scheduled until after the current event processing finishes. To handle recurrent events in a specific\n * way the event receiver may utilize an {@link EventReceiver.Context event processing context} available as\n * a first parameter of {@link EventReceiver.Object.receive} method.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a tuple of event receiver parameter types.\n */\nexport type EventReceiver<TEvent extends any[]> = EventReceiver.Function<TEvent> | EventReceiver.Object<TEvent>;\n\n/**\n * @category Core\n */\nexport namespace EventReceiver {\n\n  /**\n   * Event receiver function signature.\n   *\n   * It never receives event processing context.\n   *\n   * @typeParam TEvent - An event type. This is a tuple of event receiver parameter types.\n   */\n  export type Function<TEvent extends any[]> =\n  /**\n   * @param event - An event represented by function call arguments.\n   */\n      (this: void, ...event: TEvent) => void;\n\n  /**\n   * Event receiver object.\n   *\n   * @typeParam TEvent - An event type. This is a tuple of event receiver parameter types.\n   */\n  export interface Object<TEvent extends any[]> {\n\n    /**\n     * Event supply to this receiver.\n     *\n     * Events will be supplied to this receiver until this supply is {@link Supply.off cut off}.\n     *\n     * When omitted a new supply will be created per receiver registration within event supplier.\n     */\n    readonly supply?: Supply;\n\n    /**\n     * Receives an event.\n     *\n     * @param context - An event processing context.\n     * @param event - An event represented as the rest of arguments.\n     */\n    receive(context: Context<TEvent>, ...event: TEvent): void;\n\n  }\n\n  /**\n   * The most generic event receiver form.\n   *\n   * Any event receiver may be converted to generic form by {@link eventReceiver} function.\n   *\n   * In contrast to {@link EventReceiver.Object} this one always has a supply.\n   *\n   * @typeParam TEvent - An event type. This is a tuple of event receiver parameter types.\n   */\n  export interface Generic<TEvent extends any[]> extends Object<TEvent> {\n\n    /**\n     * Event supply to this receiver.\n     *\n     * Events will be supplied to this receiver until this supply is {@link Supply.off cut off}.\n     */\n    readonly supply: Supply;\n\n    /**\n     * Receives an event.\n     *\n     * This method does not require a `this` context. So it is possible to deconstruct the event receiver like this:\n     * ```typescript\n     * const { supply, receive } = eventReceiver(receiver);\n     * ```\n     *\n     * @param context - An event processing context.\n     * @param event - An event represented as the rest of arguments.\n     */\n    receive(this: void, context: Context<TEvent>, ...event: TEvent): void;\n\n  }\n\n  /**\n   * Event processing context.\n   *\n   * It is passed to {@link EventReceiver.Object} receivers.\n   *\n   * @typeParam TEvent - An event type. This is a tuple of event receiver parameter types.\n   */\n  export interface Context<TEvent extends any[]> {\n\n    /**\n     * Schedules the given event receiver to be called to process recurrent event(s).\n     *\n     * If called during event processing the recurrent events will be sent to the given `receiver` after current event\n     * processed instead of original one.\n     *\n     * If called multiple times the latest `receiver` will be used.\n     *\n     * If not called the recurrent events will be sent to original event receiver.\n     *\n     * > This method should be called __before__ the recurrent event issued. Otherwise it may happen that recurrent\n     * > event will be ignored in some situations. E.g. when it is issued during receiver registration.\n     *\n     * @param receiver - Recurrent events receiver function.\n     */\n    onRecurrent(receiver: EventReceiver.Function<TEvent>): void;\n\n  }\n\n}\n\n/**\n * Converts arbitrary event receiver to generic form.\n *\n * The returned event receiver would never send events to original receiver after event supply is cut off.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a tuple of event receiver parameter types.\n * @param receiver - An event receiver to convert.\n *\n * @returns Event `receiver` in most generic form.\n */\nexport function eventReceiver<TEvent extends any[]>(receiver: EventReceiver<TEvent>): EventReceiver.Generic<TEvent> {\n\n  let supply: Supply;\n  let receive: (context: EventReceiver.Context<TEvent>, ...event: TEvent) => void;\n\n  if (typeof receiver === 'function') {\n    supply = new Supply();\n    receive = (_context, ...event) => receiver(...event);\n  } else {\n    supply = receiver.supply || new Supply();\n    receive = (context, ...event) => {\n      if (!supply.isOff) {\n        // Supply cut off callback may be called before the receiver disabled.\n        // Such callback may send an event that should not be received.\n        receiver.receive(context, ...event);\n      }\n    };\n  }\n\n  // Disable receiver when event supply is cut off. But see the comment above.\n  // For function receiver this callback is always the first one.\n  supply.whenOff(() => receive = EventReceiver$doDonReceive);\n\n  return {\n    supply,\n    receive: (context, ...event) => receive(context, ...event),\n  };\n}\n\nfunction EventReceiver$doDonReceive<TEvent extends any[]>(\n    _context: EventReceiver.Context<TEvent>,\n    ..._event: TEvent\n): void {\n  // Do not receive event.\n}\n","import { eventReceiver, EventReceiver } from './event-receiver';\n\n/**\n * Creates an event receiver function that dispatches events to each of the given event receivers.\n *\n * @internal\n * @param receivers - An iterable of event receivers to dispatch event to.\n *\n * @returns An event receiver function that does not utilize event processing context an thus can be called directly.\n */\nexport function receiveByEach<TEvent extends any[]>(\n    receivers: Iterable<EventReceiver.Generic<TEvent>>,\n): (this: void, ...event: TEvent) => void {\n\n  let send: (this: void, event: TEvent) => void = sendNonRecurrent;\n\n  return (...event) => send(event);\n\n  function sendNonRecurrent(event: TEvent): void {\n\n    let actualReceivers = receivers;\n    const received: TEvent[] = [];\n\n    send = (recurrent: TEvent) => received.push(recurrent);\n\n    try {\n      for (; ;) {\n        actualReceivers = processEvent(actualReceivers, event);\n\n        const recurrent = received.shift();\n\n        if (!recurrent) {\n          break;\n        }\n\n        event = recurrent;\n      }\n    } finally {\n      send = sendNonRecurrent;\n    }\n  }\n}\n\n/**\n * @internal\n */\nfunction processEvent<TEvent extends any[]>(\n    receivers: Iterable<EventReceiver.Generic<TEvent>>,\n    event: TEvent,\n): EventReceiver.Generic<TEvent>[] {\n\n  const recurrentReceivers: EventReceiver.Generic<TEvent>[] = [];\n\n  for (const receiver of receivers) {\n\n    const idx = recurrentReceivers.length;\n\n    recurrentReceivers.push(receiver);\n\n    const context: EventReceiver.Context<TEvent> = {\n      onRecurrent(recurrentReceiver) {\n        recurrentReceivers[idx] = eventReceiver({\n          supply: receiver.supply,\n          receive(_context, ...recurrentEvent) {\n            recurrentReceiver(...recurrentEvent);\n          },\n        });\n      },\n    };\n\n    receiver.receive(context, ...event);\n  }\n\n  return recurrentReceivers;\n}\n","import { Supply, SupplyPeer } from '@proc7ts/primitives';\nimport { receiveByEach } from './event-notifier.impl';\nimport { eventReceiver, EventReceiver } from './event-receiver';\n\n/**\n * Event notifier can be used to register event receivers and send events to them.\n *\n * It does not implement an {@link EventSender} interface though. Use an {@link EventEmitter} if you need one.\n *\n * Manages a list of registered event receivers, and removes them from the list once their supplies\n * are {@link Supply.off cut off}.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n */\nexport class EventNotifier<TEvent extends any[]> implements SupplyPeer {\n\n  /**\n   * @internal\n   */\n  private _rcs?: Set<EventReceiver.Generic<TEvent>>;\n\n  readonly supply: Supply;\n\n  /**\n   * Sends the given `event` to all registered receivers.\n   *\n   * @param event - An event to send represented by function call arguments.\n   */\n  readonly send: (this: this, ...event: TEvent) => void;\n\n  constructor() {\n\n    const rcs = this._rcs = new Set<EventReceiver.Generic<TEvent>>();\n\n    this.send = receiveByEach(rcs);\n    this.supply = new Supply(() => {\n      rcs.clear();\n      delete this._rcs;\n    });\n  }\n\n  /**\n   * The number of currently registered event receivers.\n   */\n  get size(): number {\n    return this._rcs ? this._rcs.size : 0;\n  }\n\n  /**\n   * Registers an event receiver.\n   *\n   * Receivers registered with this method will receive the {@link send emitted} events.\n   *\n   * @param receiver - A receiver of events to register.\n   *\n   * @returns A supply of events to the given `receiver`.\n   */\n  on(receiver: EventReceiver<TEvent>): Supply {\n\n    const generic = eventReceiver(receiver);\n    const supply = generic.supply.needs(this);\n    const receivers = this._rcs;\n\n    if (receivers && !supply.isOff) {\n      receivers.add(generic);\n      supply.whenOff(() => receivers.delete(generic));\n    }\n\n    return supply;\n  }\n\n}\n","import { OnEvent } from '../on-event';\n\n/**\n * A key of {@link EventSender} method returning its {@link OnEvent} instance.\n *\n * @category Core\n */\nexport const OnEvent__symbol = (/*#__PURE__*/ Symbol('on-event'));\n\n/**\n * A sender of events.\n *\n * Contains an {@link OnEvent} instance registering event receivers.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a tuple of event receiver parameter types.\n */\nexport interface EventSender<TEvent extends any[]> {\n\n  /**\n   * Returns an {@link OnEvent} instance of this event sender.\n   *\n   * @returns {@link OnEvent} instance registering event receivers sent by this sender.\n   */\n  [OnEvent__symbol](): OnEvent<TEvent>;\n\n}\n\n/**\n * @category Core\n */\nexport namespace EventSender {\n\n  /**\n   * A type of events sent by the given event sender.\n   *\n   * @typeParam TSender - Target event sender.\n   */\n  export type Event<TSender extends EventSender<any>> = TSender extends EventSender<infer TEvent> ? TEvent : never;\n\n}\n\n/**\n * Checks whether the given value implements an {@link EventSender} interface.\n *\n * @category Core\n * @typeParam TEvent - Expected event type.\n * @typeParam TOther - Another type the value may have.\n * @param value - A value to check.\n *\n * @returns `true` if the `value` contains an {@link OnEvent__symbol} method, or `false` otherwise.\n */\nexport function isEventSender<TEvent extends any[], TOther = unknown>(\n    value: EventSender<TEvent> | TOther,\n): value is EventSender<TEvent> {\n  return !!value\n      && (typeof value === 'object' || typeof value === 'function')\n      && typeof (value as Partial<EventSender<TEvent>>)[OnEvent__symbol] === 'function';\n}\n","/**\n * An error indicating a failure to receive an expected event.\n *\n * This happens e.g. when receiver registered in {@link EventKeeper event keeper}, but the latter has no events to send.\n * This may happen when no fallback passed to {@link afterEventBy} function, while the given supplier did not send\n * any events.\n *\n * @category Core\n */\nexport class NoEventsError extends TypeError {\n\n  /**\n   * Constructs an error.\n   *\n   * @param message - Error message.\n   */\n  constructor(message = 'No events to send') {\n    super(message);\n  }\n\n}\n","import { noop } from '@proc7ts/primitives';\nimport { receiveByEach } from './event-notifier.impl';\nimport { eventReceiver, EventReceiver } from './event-receiver';\n\n/**\n * Creates an event sender targeted specific receiver.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n *\n * @param receiver - Target event receiver.\n *\n * @returns A function accepting events and sending them to target `receiver`.\n */\nexport function sendEventsTo<TEvent extends any[]>(\n    receiver: EventReceiver<TEvent>,\n): (this: void, ...event: TEvent) => void {\n\n  const generic = eventReceiver(receiver);\n  let send: (...event: TEvent) => void = receiveByEach([generic]);\n\n  generic.supply.whenOff(() => send = noop);\n\n  return (...event) => send(...event);\n}\n","import { NoEventsError } from '../base';\n\n/**\n * @internal\n */\nexport function AfterEvent$noFallback(): never {\n  throw new NoEventsError();\n}\n","import { neverSupply, Supply } from '@proc7ts/primitives';\nimport { EventReceiver } from '../base';\nimport { OnEvent } from '../on-event';\n\n/**\n * @internal\n */\nexport function digEvents<\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    input: OnEvent<TInEvent>,\n    extract: (this: void, ...event: TInEvent) => OnEvent<TOutEvent> | void | undefined,\n): (receiver: EventReceiver.Generic<TOutEvent>) => void {\n  return ({ supply, receive }: EventReceiver.Generic<TOutEvent>) => {\n\n    let nestedSupply = neverSupply();\n\n    input({\n\n      supply,\n\n      receive: (_context, ...event: TInEvent) => {\n\n        const prevSupply = nestedSupply;\n        const extracted = extract(...event);\n\n        nestedSupply = extracted\n            ? extracted({\n\n              supply: new Supply(reason => {\n                if (reason !== digEvents) {\n                  supply.off(reason);\n                }\n              }).needs(supply),\n\n              receive,\n\n            })\n            : neverSupply();\n        prevSupply.off(digEvents);\n      },\n    });\n  };\n}\n","import { OnEvent } from '../on-event';\n\n/**\n * @internal\n */\nexport function OnEvent$do<TEvent extends any[]>(\n    this: OnEvent<TEvent>,\n    ...processors: ((this: void, arg: any) => any)[]\n): any {\n  return processors.reduce((arg, action) => action(arg), this);\n}\n","import { OnEvent } from '../on-event';\n\n/**\n * @internal\n */\nexport function OnEvent$supplier<T extends OnEvent<any>>(this: T): T {\n  return this;\n}\n","import { EventReceiver } from '../base';\nimport { OnEvent } from '../on-event';\n\n/**\n * @internal\n */\nexport function onceEvent<TEvent extends any[]>(\n    supplier: OnEvent<TEvent>,\n): (receiver: EventReceiver.Generic<TEvent>) => void {\n  return ({ supply, receive }: EventReceiver.Generic<TEvent>): void => {\n    supplier({\n      supply,\n      receive: (context, ...event) => {\n        receive(context, ...event);\n        supply.off();\n      },\n    });\n  };\n}\n","import { Supply } from '@proc7ts/primitives';\nimport { EventReceiver } from '../base';\nimport { OnEvent } from '../on-event';\nimport { onceEvent } from './once-event';\n\n/**\n * @internal\n */\nexport function OnEvent$then<TEvent extends any[], TResult1 = TEvent[0], TResult2 = never>(\n    this: OnEvent<TEvent>,\n    onEvent?: ((...value: TEvent) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    onCutOff?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n): Promise<TResult1 | TResult2> {\n  return new Promise((resolve, reject) => {\n    onceEvent(this)({\n      supply: onCutOff\n          ? new Supply(reason => {\n            try {\n              resolve(onCutOff(reason));\n            } catch (e) {\n              reject(e);\n            }\n          })\n          : new Supply(reject),\n      receive: onEvent\n          ? (_ctx, ...event): void => {\n            try {\n              resolve(onEvent(...event));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          : ((_ctx, event: TEvent[0]) => resolve(event)) as (\n              _ctx: EventReceiver.Context<TEvent>,\n              ...event: TEvent[]\n          ) => void,\n    });\n  });\n}\n","import { Supply } from '@proc7ts/primitives';\nimport { EventNotifier, EventReceiver, sendEventsTo } from '../base';\nimport { OnEvent } from '../on-event';\n\n/**\n * @internal\n */\nexport function shareEvents<TEvent extends any[]>(\n    supplier: OnEvent<TEvent>,\n): (receiver: EventReceiver.Generic<TEvent>) => void {\n\n  const sharer = new EventSharer<TEvent>(supplier);\n\n  return sharer.on.bind(sharer);\n}\n\nclass EventSharer<TEvent extends any[]> extends EventNotifier<TEvent> {\n\n  private _on: SharedEventDispatcher<TEvent>;\n\n  constructor(readonly supplier: OnEvent<TEvent>) {\n    super();\n    this._on = this._onInit();\n  }\n\n  on(receiver: EventReceiver.Generic<TEvent>): Supply {\n    this._on.on(receiver);\n    return receiver.supply;\n  }\n\n  /**\n   * Initial dispatcher applied when there are no receivers.\n   */\n  private _onInit(): SharedEventDispatcher<TEvent> {\n    return {\n      on: receiver => {\n\n        const initialEvents: TEvent[] = [];\n        const sharedSupply = new Supply(() => this._on = this._onInit());\n        const onFirst = this._on = this._onFirst(sharedSupply, initialEvents);\n\n        try {\n          onFirst.on(receiver);\n          this.supplier({\n            supply: sharedSupply,\n            receive: (_ctx, ...event) => this._on.dispatch(...event),\n          });\n        } finally {\n          if (this._on === onFirst) {\n            this._on = this._onNext(sharedSupply, initialEvents);\n          }\n        }\n      },\n      dispatch: null!, // Initial dispatcher never dispatches events\n    };\n  }\n\n  /**\n   * A dispatcher applied while the first receiver is still registering, but not registered yet.\n   *\n   * Records emitted events to dispatch them to all receivers.\n   */\n  private _onFirst(sharedSupply: Supply, initialEvents: TEvent[]): SharedEventDispatcher<TEvent> {\n    return {\n      on: receiver => this._addReceiver(receiver, sharedSupply, initialEvents),\n      dispatch: (...event) => {\n        // Record initial event.\n        initialEvents.push(event);\n        this.send(...event);\n      },\n    };\n  }\n\n  /**\n   * A dispatcher applied after the first receiver registered.\n   *\n   * Dispatches initial events to new receivers until new event received.\n   */\n  private _onNext(sharedSupply: Supply, initialEvents: TEvent[]): SharedEventDispatcher<TEvent> {\n    return {\n      on: receiver => this._addReceiver(receiver, sharedSupply, initialEvents),\n      dispatch: (...event) => {\n        // An event received after initial ones.\n        // Stop dispatching initial events.\n        initialEvents.length = 0;\n        this.send(...event);\n      },\n    };\n  }\n\n  private _addReceiver(\n      receiver: EventReceiver.Generic<TEvent>,\n      sharedSupply: Supply,\n      initialEvents: TEvent[],\n  ): void {\n    sharedSupply.cuts(receiver);\n\n    super.on(receiver).whenOff(reason => {\n      if (!this.size) {\n        sharedSupply.off(reason);\n      }\n    });\n\n    if (initialEvents.length) {\n      // Dispatch initial events.\n\n      const dispatch = sendEventsTo(receiver);\n\n      initialEvents.forEach(event => dispatch(...event));\n    }\n  }\n\n}\n\ninterface SharedEventDispatcher<TEvent extends any[]> {\n\n  on(this: void, receiver: EventReceiver.Generic<TEvent>): void;\n\n  dispatch(...event: TEvent): void;\n\n}\n\n","import { Supply, SupplyPeer } from '@proc7ts/primitives';\nimport { EventReceiver } from '../base';\nimport { OnEvent } from '../on-event';\n\n/**\n * @internal\n */\nexport function supplyEvents<TEvent extends any[]>(\n    supplier: OnEvent<TEvent>,\n    required: SupplyPeer,\n    dependentSupply?: Supply,\n): (receiver: EventReceiver.Generic<TEvent>) => void {\n  return (receiver: EventReceiver.Generic<TEvent>): void => {\n    if (dependentSupply) {\n      supplier({\n        supply: new Supply().needs(required).cuts(dependentSupply),\n        receive: receiver.receive,\n      });\n    } else {\n      receiver.supply.needs(required);\n      supplier(receiver);\n    }\n  };\n}\n","import { EventReceiver, sendEventsTo } from '../base';\nimport { OnEvent } from '../on-event';\n\n/**\n * @internal\n */\nexport function translateEvents<TInEvent extends any[], TOutEvent extends any[]>(\n    supplier: OnEvent<TInEvent>,\n    translate: (this: void, send: (...event: TOutEvent) => void, ...event: TInEvent) => void,\n): (receiver: EventReceiver.Generic<TOutEvent>) => void {\n  return receiver => {\n\n    const dispatch = sendEventsTo(receiver);\n\n    supplier({\n      supply: receiver.supply,\n      receive: (_ctx, ...event: TInEvent) => {\n        translate(dispatch, ...event);\n      },\n    });\n  };\n}\n","import { EventReceiver } from '../event-receiver';\n\n/**\n * @internal\n */\nexport function neverReceiveBecause(reason?: any): (receiver: EventReceiver.Generic<any>) => void {\n  return ({ supply }) => supply.off(reason);\n}\n\n/**\n * @internal\n */\nexport function neverReceive({ supply }: EventReceiver.Generic<any>): void {\n  supply.off();\n}\n","import { Supply } from '@proc7ts/primitives';\nimport { eventReceiver, EventReceiver, EventSender, OnEvent__symbol } from './base';\nimport { OnEvent$do, OnEvent$supplier, OnEvent$then } from './impl';\n\n/**\n * Signature of {@link EventSender} implementation able to register event receivers.\n *\n * The registered event receiver starts receiving upcoming events until the returned event supply is cut off.\n *\n * Contains additional event processing methods.\n *\n * May be constructed using {@link onEventBy} function.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n */\nexport interface OnEvent<TEvent extends any[]> extends EventSender<TEvent> {\n\n  /**\n   * Starts sending events to the given `receiver`.\n   *\n   * @param receiver - Target receiver of events.\n   *\n   * @returns A supply of events from this sender to the given `receiver`.\n   */\n  (receiver: EventReceiver<TEvent>): Supply;\n\n  [OnEvent__symbol](): this;\n\n  /**\n   * Applies the given processor to events.\n   *\n   * @typeParam TResult - Action result type.\n   * @param processor - An event processor accepting this supplier as its only parameter, and returning application\n   * result.\n   *\n   * @returns Processing result.\n   */\n  do<TResult>(\n      processor: (this: void, supplier: this) => TResult,\n  ): TResult;\n\n  /**\n   * Applies the given processors to events.\n   *\n   * The value returned from each processor application is passed as argument to the next one. The value returned from\n   * the last processor application is the result of this method call.\n   *\n   * @typeParam TResult1 - The first processor application result type.\n   * @typeParam TResult1 - The second processor application result type.\n   * @param processor1 - An event processor accepting this supplier as its only parameter, and returning application\n   * result.\n   * @param processor2 - An event processor accepting the first one's application result as its only parameter, and\n   * returning its own application result.\n   *\n   * @returns The last processor application result.\n   */\n  do<\n      TResult1,\n      TResult2,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n  ): TResult2;\n\n  do<\n      TResult1,\n      TResult2,\n      TResult3,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n      processor3: (this: void, arg: TResult2) => TResult3,\n  ): TResult3;\n\n  do<\n      TResult1,\n      TResult2,\n      TResult3,\n      TResult4,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n      processor3: (this: void, arg: TResult2) => TResult3,\n      processor4: (this: void, arg: TResult3) => TResult4,\n  ): TResult4;\n\n  do<\n      TResult1,\n      TResult2,\n      TResult3,\n      TResult4,\n      TResult5,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n      processor3: (this: void, arg: TResult2) => TResult3,\n      processor4: (this: void, arg: TResult3) => TResult4,\n      processor5: (this: void, arg: TResult4) => TResult5,\n  ): TResult5;\n\n  do<\n      TResult1,\n      TResult2,\n      TResult3,\n      TResult4,\n      TResult5,\n      TResult6,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n      processor3: (this: void, arg: TResult2) => TResult3,\n      processor4: (this: void, arg: TResult3) => TResult4,\n      processor5: (this: void, arg: TResult4) => TResult5,\n      processor6: (this: void, arg: TResult5) => TResult6,\n  ): TResult6;\n\n  do<\n      TResult1,\n      TResult2,\n      TResult3,\n      TResult4,\n      TResult5,\n      TResult6,\n      TResult7,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n      processor3: (this: void, arg: TResult2) => TResult3,\n      processor4: (this: void, arg: TResult3) => TResult4,\n      processor5: (this: void, arg: TResult4) => TResult5,\n      processor6: (this: void, arg: TResult5) => TResult6,\n      processor7: (this: void, arg: TResult6) => TResult7,\n  ): TResult7;\n\n  do<\n      TResult1,\n      TResult2,\n      TResult3,\n      TResult4,\n      TResult5,\n      TResult6,\n      TResult7,\n      TResult8,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n      processor3: (this: void, arg: TResult2) => TResult3,\n      processor4: (this: void, arg: TResult3) => TResult4,\n      processor5: (this: void, arg: TResult4) => TResult5,\n      processor6: (this: void, arg: TResult5) => TResult6,\n      processor7: (this: void, arg: TResult6) => TResult7,\n      processor8: (this: void, arg: TResult7) => TResult8,\n  ): TResult8;\n\n  do<\n      TResult1,\n      TResult2,\n      TResult3,\n      TResult4,\n      TResult5,\n      TResult6,\n      TResult7,\n      TResult8,\n      TResult9,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n      processor3: (this: void, arg: TResult2) => TResult3,\n      processor4: (this: void, arg: TResult3) => TResult4,\n      processor5: (this: void, arg: TResult4) => TResult5,\n      processor6: (this: void, arg: TResult5) => TResult6,\n      processor7: (this: void, arg: TResult6) => TResult7,\n      processor8: (this: void, arg: TResult7) => TResult8,\n      processor9: (this: void, arg: TResult8) => TResult9,\n  ): TResult9;\n\n  do<\n      TResult1,\n      TResult2,\n      TResult3,\n      TResult4,\n      TResult5,\n      TResult6,\n      TResult7,\n      TResult8,\n      TResult9,\n      TResult10,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n      processor3: (this: void, arg: TResult2) => TResult3,\n      processor4: (this: void, arg: TResult3) => TResult4,\n      processor5: (this: void, arg: TResult4) => TResult5,\n      processor6: (this: void, arg: TResult5) => TResult6,\n      processor7: (this: void, arg: TResult6) => TResult7,\n      processor8: (this: void, arg: TResult7) => TResult8,\n      processor9: (this: void, arg: TResult8) => TResult9,\n      processor10: (this: void, arg: TResult9) => TResult10,\n  ): TResult10;\n\n  do<\n      TResult1,\n      TResult2,\n      TResult3,\n      TResult4,\n      TResult5,\n      TResult6,\n      TResult7,\n      TResult8,\n      TResult9,\n      TResult10,\n      TResult11,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n      processor3: (this: void, arg: TResult2) => TResult3,\n      processor4: (this: void, arg: TResult3) => TResult4,\n      processor5: (this: void, arg: TResult4) => TResult5,\n      processor6: (this: void, arg: TResult5) => TResult6,\n      processor7: (this: void, arg: TResult6) => TResult7,\n      processor8: (this: void, arg: TResult7) => TResult8,\n      processor9: (this: void, arg: TResult8) => TResult9,\n      processor10: (this: void, arg: TResult9) => TResult10,\n      processor11: (this: void, arg: TResult10) => TResult11,\n  ): TResult11;\n\n  do<\n      TResult1,\n      TResult2,\n      TResult3,\n      TResult4,\n      TResult5,\n      TResult6,\n      TResult7,\n      TResult8,\n      TResult9,\n      TResult10,\n      TResult11,\n      TResult12,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n      processor3: (this: void, arg: TResult2) => TResult3,\n      processor4: (this: void, arg: TResult3) => TResult4,\n      processor5: (this: void, arg: TResult4) => TResult5,\n      processor6: (this: void, arg: TResult5) => TResult6,\n      processor7: (this: void, arg: TResult6) => TResult7,\n      processor8: (this: void, arg: TResult7) => TResult8,\n      processor9: (this: void, arg: TResult8) => TResult9,\n      processor10: (this: void, arg: TResult9) => TResult10,\n      processor11: (this: void, arg: TResult10) => TResult11,\n      processor12: (this: void, arg: TResult11) => TResult12,\n  ): TResult12;\n\n  do<\n      TResult1,\n      TResult2,\n      TResult3,\n      TResult4,\n      TResult5,\n      TResult6,\n      TResult7,\n      TResult8,\n      TResult9,\n      TResult10,\n      TResult11,\n      TResult12,\n      TResult13,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n      processor3: (this: void, arg: TResult2) => TResult3,\n      processor4: (this: void, arg: TResult3) => TResult4,\n      processor5: (this: void, arg: TResult4) => TResult5,\n      processor6: (this: void, arg: TResult5) => TResult6,\n      processor7: (this: void, arg: TResult6) => TResult7,\n      processor8: (this: void, arg: TResult7) => TResult8,\n      processor9: (this: void, arg: TResult8) => TResult9,\n      processor10: (this: void, arg: TResult9) => TResult10,\n      processor11: (this: void, arg: TResult10) => TResult11,\n      processor12: (this: void, arg: TResult11) => TResult12,\n      processor13: (this: void, arg: TResult12) => TResult13,\n  ): TResult13;\n\n  /**\n   * Attaches callbacks to the next event and/or supply cut off reason.\n   *\n   * This method makes event sender act as promise-like for the first parameter of the next event. Thus it is possible\n   * e.g. to use it in `await` expression.\n   *\n   * @param onEvent - The callback to execute when next event received.\n   * @param onCutOff - The callback to execute when supply is cut off before the next event received.\n   *\n   * @returns A Promise for the next event.\n   */\n  then<TResult1 = TEvent extends [infer F, ...any[]] ? F : undefined, TResult2 = never>(\n      onEvent?: ((...event: TEvent) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n      onCutOff?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n  ): Promise<TResult1 | TResult2>;\n\n}\n\n/**\n * Converts a plain event receiver registration function to {@link OnEvent} sender.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param register - Generic event receiver registration function. It will be called on each receiver registration,\n * unless the receiver's {@link EventReceiver.Generic.supply event supply} is cut off already.\n *\n * @returns An {@link OnEvent} sender registering event receivers with the given `register` function.\n */\nexport function onEventBy<TEvent extends any[]>(\n    register: (this: void, receiver: EventReceiver.Generic<TEvent>) => void,\n): OnEvent<TEvent> {\n\n  const onEvent = ((receiver: EventReceiver<TEvent>): Supply => {\n\n    const generic = eventReceiver(receiver);\n    const { supply } = generic;\n\n    if (!supply.isOff) {\n      try {\n        register(generic);\n      } catch (error) {\n        supply.off(error);\n      }\n    }\n\n    return supply;\n  }) as OnEvent<TEvent>;\n\n  onEvent[OnEvent__symbol] = OnEvent$supplier;\n  onEvent.do = OnEvent$do;\n  onEvent.then = OnEvent$then;\n\n  return onEvent;\n}\n\n/**\n * Checks whether the given value is an {@link OnEvent} sender.\n *\n * @category Core\n * @typeParam TEvent - Expected event type.\n * @typeParam TOther - Another type the value may have.\n * @param value - A value to check.\n *\n * @returns `true` if the `value` has been created by {@link onEventBy} function or in compatible way,\n * or `false` otherwise.\n */\nexport function isOnEvent<TEvent extends any[], TOther = unknown>(\n    value: OnEvent<TEvent> | TOther,\n): value is OnEvent<TEvent> {\n  return typeof value === 'function'\n      && (value as Partial<OnEvent<TEvent>>)[OnEvent__symbol] === OnEvent$supplier\n      && (value as Partial<OnEvent<TEvent>>).do === OnEvent$do\n      && (value as Partial<OnEvent<TEvent>>).then === OnEvent$then;\n}\n","import { noop, Supply } from '@proc7ts/primitives';\nimport { AfterEvent__symbol, EventKeeper, eventReceiver, EventReceiver, OnEvent__symbol } from './base';\nimport { AfterEvent$noFallback, OnEvent$do, OnEvent$supplier, OnEvent$then } from './impl';\nimport { isOnEvent, OnEvent } from './on-event';\n\n/**\n * Signature of {@link EventKeeper} implementation able to register the receivers of kept and upcoming events.\n *\n * The registered event receiver receives the kept event immediately upon registration, and all upcoming events\n * after that until the returned event supply is cut off.\n *\n * To convert a plain event receiver registration function to {@link AfterEvent} an {@link afterEventBy} function can\n * be used.\n *\n * May be constructed using {@link afterEventBy} function.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n */\nexport interface AfterEvent<TEvent extends any[]> extends OnEvent<TEvent>, EventKeeper<TEvent> {\n\n  /**\n   * Starts sending events to the given `receiver`.\n   *\n   * @param receiver - Target receiver of events.\n   *\n   * @returns A supply of events from this keeper to the given `receiver`.\n   */\n  (receiver: EventReceiver<TEvent>): Supply;\n\n  [AfterEvent__symbol](): this;\n\n}\n\n/**\n * Converts a plain event receiver registration function to {@link AfterEvent} keeper with a fallback.\n *\n * The event constructed by `fallback` will be sent to the registered first receiver, unless `register` function sends\n * one.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param register - Generic event receiver registration function. It will be called on each receiver registration,\n * unless the receiver's {@link EventReceiver.Generic.supply event supply} is cut off already.\n * @param fallback - A function creating fallback event. When omitted, the initial event is expected to be sent by\n * `register` function. A receiver registration would lead to an error otherwise.\n * @param cleanup - A function that will be called once all registered event supplies cut off.\n *\n * @returns An {@link AfterEvent} keeper registering event receivers with the given `register` function.\n */\nexport function afterEventBy<TEvent extends any[]>(\n    register: (this: void, receiver: EventReceiver.Generic<TEvent>) => void,\n    fallback: (this: void) => TEvent = AfterEvent$noFallback,\n    cleanup: (this: void, reason?: unknown) => void = AfterEvent$noCleanup,\n): AfterEvent<TEvent> {\n\n  let lastEvent: TEvent | undefined;\n  let numReceivers = 0;\n\n  const afterEvent = ((receiver: EventReceiver<TEvent>): Supply => {\n\n    let dest: (context: EventReceiver.Context<TEvent>, ...event: TEvent) => void = noop;\n    const generic = eventReceiver(receiver);\n\n    if (generic.supply.isOff) {\n      return generic.supply;\n    }\n\n    const supply = new Supply().needs(generic);\n    let reported = false;\n\n    ++numReceivers;\n    try {\n      register({\n        supply,\n        receive: (context, ...event: TEvent) => {\n          reported = true;\n          lastEvent = event;\n          dest(context, ...event);\n        },\n      });\n    } catch (error) {\n      supply.off(error);\n    }\n\n    if (!supply.isOff || reported) {\n      if (!lastEvent) {\n        try {\n          lastEvent = fallback();\n        } catch (error) {\n          supply.off(error);\n        }\n      }\n      if (lastEvent) {\n        generic.receive(\n            {\n              onRecurrent(recurrent) {\n                dest = (_context, ...event) => recurrent(...event);\n              },\n            },\n            ...lastEvent,\n        );\n        dest = (context, ...event) => generic.receive(context, ...event);\n      }\n    }\n\n    return supply.whenOff(reason => {\n      if (!--numReceivers) {\n        lastEvent = undefined;\n      }\n      generic.supply.off(reason);\n      if (!numReceivers) {\n        cleanup(reason);\n      }\n    });\n  }) as AfterEvent<TEvent>;\n\n  afterEvent[OnEvent__symbol] = OnEvent$supplier;\n  afterEvent.do = OnEvent$do;\n  afterEvent.then = OnEvent$then;\n  afterEvent[AfterEvent__symbol] = OnEvent$supplier;\n\n  return afterEvent;\n}\n\nfunction AfterEvent$noCleanup(_reason: unknown): void {\n  // No-op `AfterEvent` cleanup\n}\n\n/**\n * Checks whether the given value is an {@link AfterEvent} keeper.\n *\n * @category Core\n * @typeParam TEvent - Expected event type.\n * @typeParam TOther - Another type the value may have.\n * @param value - A value to check.\n *\n * @returns `true` if the `value` has been created by {@link afterEventBy} function or in compatible way,\n * or `false` otherwise.\n */\nexport function isAfterEvent<TEvent extends any[], TOther = unknown>(\n    value: AfterEvent<TEvent> | TOther,\n): value is AfterEvent<TEvent> {\n  return isOnEvent(value) && (value as Partial<AfterEvent<TEvent>>)[AfterEvent__symbol] === OnEvent$supplier;\n}\n","import { noop, Supply } from '@proc7ts/primitives';\nimport { AfterEvent, afterEventBy } from '../after-event';\nimport { AfterEvent__symbol, EventKeeper, EventReceiver, sendEventsTo } from '../base';\nimport { onceEvent, shareEvents } from '../impl';\n\n/**\n * Builds an {@link AfterEvent} keeper of events sent by all event keepers in `sources` map.\n *\n * @category Core\n * @typeParam TSrcMap - A type of `sources` map.\n * @param sources - A map of named event keepers the events are originated from.\n *\n * @returns An event keeper sending a map of events received from each source keeper. Each event in this map has the\n * same key as its source keeper in `sources`.\n */\nexport function afterAll<TSrcMap extends { readonly [key: string]: EventKeeper<any> }>(\n    sources: TSrcMap,\n): AfterEvent<[{ readonly [K in keyof TSrcMap]: EventKeeper.Event<TSrcMap[K]> }]> {\n\n  const keys = Object.keys(sources);\n\n  const registerReceiver = (\n      receiver: EventReceiver.Generic<[{ readonly [K in keyof TSrcMap]: EventKeeper.Event<TSrcMap[K]> }]>,\n  ): void => {\n\n    const { supply } = receiver;\n    const dispatch = sendEventsTo(receiver);\n    let send: () => void = noop;\n    const result = {} as { [K in keyof TSrcMap]: EventKeeper.Event<TSrcMap[K]> };\n\n    keys.forEach(<TSrcKey extends keyof TSrcMap>(key: TSrcKey) => {\n      supply.needs(sources[key][AfterEvent__symbol]()((...event: EventKeeper.Event<TSrcMap[TSrcKey]>) => {\n        result[key] = event;\n        send();\n      }).needs(supply));\n    });\n\n    if (!supply.isOff) {\n      send = () => dispatch(result);\n    }\n  };\n\n  const latestEvent = (): [{ readonly [K in keyof TSrcMap]: EventKeeper.Event<TSrcMap[K]> }] => {\n\n    const result = {} as { [K in keyof TSrcMap]: EventKeeper.Event<TSrcMap[K]> };\n\n    keys.forEach(\n        <TSrcKey extends keyof TSrcMap>(key: TSrcKey) => onceEvent(sources[key][AfterEvent__symbol]())({\n          supply: new Supply(),\n          receive: (_ctx, ...event: EventKeeper.Event<TSrcMap[TSrcKey]>) => result[key as keyof TSrcMap] = event,\n        }),\n    );\n\n    return [result];\n  };\n\n  return afterEventBy(shareEvents(afterEventBy(registerReceiver, latestEvent)));\n}\n","import { noop, Supply } from '@proc7ts/primitives';\nimport { AfterEvent, afterEventBy } from '../after-event';\nimport { AfterEvent__symbol, EventKeeper, EventReceiver, sendEventsTo } from '../base';\nimport { onceEvent, shareEvents } from '../impl';\n\n/**\n * Builds an {@link AfterEvent} keeper of events sent by each of the `sources`.\n *\n * @category Core\n * @typeParam TEvent - A type of events sent by each source.\n * @param sources - An array of source event keepers.\n *\n * @returns An event keeper sending events received from each source keeper. Each event item is an event tuple\n * originated from source keeper under its index in `sources` array.\n */\nexport function afterEach<TEvent extends any[]>(...sources: EventKeeper<TEvent>[]): AfterEvent<TEvent[]> {\n\n  const registerReceiver = (receiver: EventReceiver.Generic<TEvent[]>): void => {\n\n    const { supply } = receiver;\n    const dispatch = sendEventsTo(receiver);\n    let send: () => void = noop;\n    const result: TEvent[] = [];\n\n    sources.forEach((source, index) => {\n      supply.needs(source[AfterEvent__symbol]()((...event) => {\n        result[index] = event;\n        send();\n      }).needs(supply));\n    });\n\n    if (!supply.isOff) {\n      send = () => dispatch(...result);\n    }\n  };\n\n  const latestEvent = (): TEvent[] => {\n\n    const result: TEvent[] = [];\n\n    sources.forEach(\n        source => onceEvent(source[AfterEvent__symbol]())({\n          supply: new Supply(),\n          receive: (_ctx, ...event) => result.push(event),\n        }),\n    );\n\n    return result;\n  };\n\n  return afterEventBy(shareEvents(afterEventBy(registerReceiver, latestEvent)));\n}\n","import { AfterEvent, afterEventBy } from '../after-event';\nimport { EventSender, OnEvent__symbol } from '../base';\n\n/**\n * Builds an {@link AfterEvent} keeper of events sent by the given `sender`.\n *\n * The event generated by `fallback` will be sent to the registered first receiver, unless `register` function sends\n * one.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param sender - An event sender.\n * @param fallback - A function creating fallback event. When omitted, the initial event is expected to be sent by\n * `register` function. A receiver registration would lead to an error otherwise.\n *\n * @returns An {@link AfterEvent} keeper of events either originated from the given `sender`, or `initial` one.\n */\nexport function afterSent<TEvent extends any[]>(\n    sender: EventSender<TEvent>,\n    fallback?: (this: void) => TEvent,\n): AfterEvent<TEvent> {\n  return afterEventBy(receiver => sender[OnEvent__symbol]()(receiver), fallback);\n}\n","import { AfterEvent } from '../after-event';\nimport { AfterEvent__symbol, EventKeeper, EventSupplier, isEventKeeper } from '../base';\nimport { afterSent } from './after-sent';\n\n/**\n * Builds an {@link AfterEvent} keeper of events sent by the given `keeper`.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param keeper - A keeper of events.\n *\n * @returns An {@link AfterEvent} keeper of events originated from the given `keeper`.\n */\nexport function afterSupplied<TEvent extends any[]>(keeper: EventKeeper<TEvent>): AfterEvent<TEvent>;\n\n/**\n * Builds an {@link AfterEvent} keeper of events sent by the given `supplier`.\n *\n * The event generated by `fallback` will be sent to the registered first receiver, unless `supplier` sends one.\n *\n * This is a synonym of {@link afterSent}, unless `supplier` is an {@link EventKeeper}.\n *\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param supplier - An event supplier.\n * @param fallback - A function creating fallback event. When omitted, the initial event is expected to be sent by\n * `supplier`. A receiver registration would lead to an error otherwise.\n *\n * @returns An {@link AfterEvent} keeper of events either originated from the given `supplier`, or `initial` one.\n */\nexport function afterSupplied<TEvent extends any[]>(\n    supplier: EventSupplier<TEvent>,\n    fallback?: (this: void) => TEvent,\n): AfterEvent<TEvent>;\n\nexport function afterSupplied<TEvent extends any[]>(\n    supplier: EventSupplier<TEvent>,\n    fallback?: (this: void) => TEvent,\n): AfterEvent<TEvent> {\n  return isEventKeeper(supplier) ? supplier[AfterEvent__symbol]() : afterSent(supplier, fallback);\n}\n","import { noop, valueProvider } from '@proc7ts/primitives';\nimport { AfterEvent, afterEventBy } from '../after-event';\n\n/**\n * Builds an {@link AfterEvent} keeper of the given `event`.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param event - An event that will be sent to all receivers upon registration.\n *\n * @returns An {@link AfterEvent} keeper that always sends the given `event`.\n */\nexport function afterThe<TEvent extends any[]>(...event: TEvent): AfterEvent<TEvent> {\n  return afterEventBy(noop, valueProvider(event));\n}\n","import { neverSupply, Supply, SupplyPeer } from '@proc7ts/primitives';\nimport { OnEvent } from '../on-event';\n\n/**\n * Creates an event processor that consumes incoming events.\n *\n * @category Event Processing\n * @typeParam TEvent - Incoming event type. This is a list of consumer function parameter types.\n * @param consume - A function consuming events. This function may return a {@link SupplyPeer peer of event supply},\n * e.g. when registers a nested event receiver. This supply will be cut off on new event, unless returned again.\n *\n * @returns A function accepting incoming event supplier and returning event supply that will stop consuming events once\n * cut off.\n */\nexport function consumeEvents<TEvent extends any[]>(\n    consume: (this: void, ...event: TEvent) => SupplyPeer | void | undefined,\n): (this: void, input: OnEvent<TEvent>) => Supply {\n  return input => {\n\n    let consumerSupply = neverSupply();\n\n    // Do not use `.cuts()` here as `consumerSupply` is mutable\n    const supply = new Supply(reason => consumerSupply.off(reason));\n\n    input({\n      supply,\n      receive(_ctx, ...event: TEvent) {\n\n        const prevSupply = consumerSupply;\n\n        try {\n          consumerSupply = (consume(...event) || neverSupply()).supply;\n        } finally {\n          if (consumerSupply !== prevSupply) {\n            prevSupply.off();\n          }\n        }\n      },\n    });\n\n    return supply;\n  };\n}\n","import { AfterEvent, afterEventBy } from '../after-event';\nimport { shareEvents } from '../impl';\n\n/**\n * A processor of events incoming from {@link AfterEvent} keeper that shares outgoing events supply among all registered\n * receivers.\n *\n * The created keeper receives events from this one and sends to registered receivers. The shared keeper registers\n * a receiver in this one only once, when first receiver registered. And cuts off original events supply once all\n * event supplies do.\n *\n * @category Event Processing\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param supplier - Event keeper to share events from.\n *\n * @returns An {@link AfterEvent} keeper sharing a common supply of events.\n */\nexport function shareAfter<TEvent extends any[]>(supplier: AfterEvent<TEvent>): AfterEvent<TEvent> {\n  return afterEventBy(shareEvents(supplier));\n}\n","import { AfterEvent, afterEventBy } from '../after-event';\nimport { EventKeeper } from '../base';\nimport { digEvents } from '../impl';\nimport { afterSupplied } from '../keepers';\nimport { OnEvent } from '../on-event';\nimport { shareAfter } from './share-after';\n\n/**\n * Creates an event processor that extracts event keepers from events incoming from `{@link AfterEvent} keeper.\n *\n * The outgoing events supply is cut off once the incoming events supply do.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming events type.\n * @typeParam TOutEvent - Extracted events type.\n * @param extract - A function extracting outgoing event keeper from incoming event. May return `undefined` when\n * nothing extracted.\n *\n * @returns New processor of events incoming from {@link @AfterEvent} keeper.\n */\nexport function digAfter<\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    extract: (this: void, ...event: TInEvent) => EventKeeper<TOutEvent> | void | undefined,\n): (this: void, input: AfterEvent<TInEvent>) => AfterEvent<TOutEvent>;\n\n/**\n * Creates an event processor that extracts event keepers from events incoming from `{@link OnEvent} sender.\n *\n * The outgoing events supply is cut off once the incoming events supply do.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming events type.\n * @typeParam TOutEvent - Extracted events type.\n * @param extract - A function extracting outgoing event keeper from incoming event. May return `undefined` when\n * nothing extracted.\n * @param fallback - A function creating fallback event.\n *\n * @returns New processor of events incoming from {@link @OnEvent} sender.\n */\nexport function digAfter<\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    extract: (this: void, ...event: TInEvent) => EventKeeper<TOutEvent> | void | undefined,\n    fallback: (this: void) => TOutEvent,\n): (this: void, input: OnEvent<TInEvent>) => AfterEvent<TOutEvent>;\n\nexport function digAfter<\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    extract: (this: void, ...event: TInEvent) => EventKeeper<TOutEvent> | void | undefined,\n    fallback?: (this: void) => TOutEvent,\n): (this: void, input: OnEvent<TInEvent>) => AfterEvent<TOutEvent> {\n\n  const processor = digAfter_(extract, fallback!);\n\n  return input => shareAfter(processor(input));\n}\n\n/**\n * Creates an event processor that extracts event keepers from events incoming from `{@link AfterEvent} keeper,\n * and does not share the outgoing events supply.\n *\n * The outgoing events supply is cut off once the incoming events supply do.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming events type.\n * @typeParam TOutEvent - Extracted events type.\n * @param extract - A function extracting outgoing event keeper from incoming event. May return `undefined` when\n * nothing extracted.\n *\n * @returns New processor of events incoming from {@link @AfterEvent} keeper.\n */\nexport function digAfter_<// eslint-disable-line @typescript-eslint/naming-convention\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    extract: (this: void, ...event: TInEvent) => EventKeeper<TOutEvent> | void | undefined,\n): (this: void, input: AfterEvent<TInEvent>) => AfterEvent<TOutEvent>;\n\n/**\n * Creates an event processor that extracts event keepers from events incoming from `{@link OnEvent} sender,\n * and does not share the outgoing events supply.\n *\n * The outgoing events supply is cut off once the incoming events supply do.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming events type.\n * @typeParam TOutEvent - Extracted events type.\n * @param extract - A function extracting outgoing event keeper from incoming event. May return `undefined` when\n * nothing extracted.\n * @param fallback - A function creating fallback event.\n *\n * @returns New processor of events incoming from {@link @OnEvent} sender.\n */\nexport function digAfter_<// eslint-disable-line @typescript-eslint/naming-convention\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    extract: (this: void, ...event: TInEvent) => EventKeeper<TOutEvent> | void | undefined,\n    fallback: (this: void) => TOutEvent,\n): (this: void, input: OnEvent<TInEvent>) => AfterEvent<TOutEvent>;\n\nexport function digAfter_<// eslint-disable-line @typescript-eslint/naming-convention\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    extract: (this: void, ...event: TInEvent) => EventKeeper<TOutEvent> | void | undefined,\n    fallback?: (this: void) => TOutEvent,\n): (this: void, input: OnEvent<TInEvent>) => AfterEvent<TOutEvent> {\n\n  const extractKeeper = (...events: TInEvent): AfterEvent<TOutEvent> | void => {\n\n    const extracted = extract(...events);\n\n    return extracted && afterSupplied(extracted);\n  };\n\n  return input => afterEventBy(digEvents(input, extractKeeper), fallback);\n}\n","import { EventNotifier, EventSender, OnEvent__symbol } from '../base';\nimport { OnEvent, onEventBy } from '../on-event';\n\n/**\n * Event emitter is a handy implementation of {@link OnEvent} sender.\n *\n * Extends {@link EventNotifier} by making its {@link EventNotifier.on} method implement an {@link OnEvent} interface.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n */\nexport class EventEmitter<TEvent extends any[]> extends EventNotifier<TEvent> implements EventSender<TEvent> {\n\n  /**\n   * {@link OnEvent} sender of {@link send emitted} events.\n   *\n   * The `[OnEvent__symbol]` method is an alias of this one.\n   */\n  readonly on: OnEvent<TEvent> = onEventBy(receiver => super.on(receiver));\n\n  [OnEvent__symbol](): OnEvent<TEvent> {\n    return this.on;\n  }\n\n}\n","import { neverReceive } from '../base/impl';\nimport { OnEvent, onEventBy } from '../on-event';\n\n/**\n * An {@link OnEvent} sender that never sends any events.\n *\n * @category Core\n */\nexport const onNever: OnEvent<any> = (/*#__PURE__*/ onEventBy(neverReceive));\n","import { AfterEvent__symbol, EventSupplier, isEventSender, OnEvent__symbol } from '../base';\nimport { OnEvent } from '../on-event';\n\n/**\n * Builds an {@link OnEvent} sender of events supplied by the given `supplier`.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param supplier - An event supplier.\n *\n * @returns An {@link OnEvent} sender of events originated from the given `supplier`.\n */\nexport function onSupplied<TEvent extends any[]>(supplier: EventSupplier<TEvent>): OnEvent<TEvent> {\n  return isEventSender(supplier) ? supplier[OnEvent__symbol]() : supplier[AfterEvent__symbol]();\n}\n","import { Supply } from '@proc7ts/primitives';\nimport { EventSupplier } from '../base';\nimport { shareEvents } from '../impl';\nimport { OnEvent, onEventBy } from '../on-event';\nimport { onNever } from './on-never';\nimport { onSupplied } from './on-supplied';\n\n/**\n * Builds an {@link OnEvent} sender of events sent by any of the given `suppliers`.\n *\n * The resulting event supply is cut off as soon as all source supplies do.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param suppliers - Original event suppliers.\n *\n * @returns An {@link OnEvent} sender of all supplied events.\n */\nexport function onAny<TEvent extends any[]>(...suppliers: EventSupplier<TEvent>[]): OnEvent<TEvent> {\n  if (!suppliers.length) {\n    return onNever as OnEvent<TEvent>;\n  }\n\n  return onEventBy(shareEvents(onEventBy<TEvent>(({ supply, receive }) => {\n\n    let remained = suppliers.length;\n    const removeSupplier = (reason?: any): void => {\n      if (!--remained) {\n        supply.off(reason);\n      }\n    };\n\n    suppliers.forEach(\n        supplier => onSupplied(supplier)({\n          supply: new Supply(removeSupplier).needs(supply),\n          receive,\n        }),\n    );\n  })));\n}\n","import { EventReceiver } from '../base';\nimport { alwaysReceiveValue, neverReceiveBecause } from '../base/impl';\nimport { OnEvent, onEventBy } from '../on-event';\n\n/**\n * Represents a promise as event sender.\n *\n * When the `promise` resolves successfully the resolved value is sent to registered event receivers. The events\n * supply is {@link Supply.off cut off} immediately after that without any reason specified.\n *\n * When the `promise` is rejected the events supply is {@link Supply.off cut off} with promise rejection reason.\n *\n * @category Core\n * @typeParam T - A type of value the promise is resolved to.\n * @param promise - The promise to represent as event sender.\n *\n * @returns An {@link OnEvent} sender of the given `promise` settlement event.\n */\nexport function onPromise<T>(promise: Promise<T>): OnEvent<[T]> {\n\n  let receive = (receiver: EventReceiver.Generic<[T]>): void => {\n    promise.then(() => receive(receiver), () => receive(receiver));\n  };\n\n  promise.then(value => {\n    receive = alwaysReceiveValue(value);\n  }).catch(e => {\n    receive = neverReceiveBecause(e);\n  });\n\n  return onEventBy(receiver => receive(receiver));\n}\n","import { EventReceiver } from '../event-receiver';\nimport { sendEventsTo } from '../send-events-to';\n\n/**\n * @internal\n */\nexport function alwaysReceiveValue<T>(value: T): (receiver: EventReceiver.Generic<[T]>) => void {\n  return receiver => {\n    try {\n      sendEventsTo(receiver)(value);\n      receiver.supply.off();\n    } catch (e) {\n      receiver.supply.off(e);\n    }\n  };\n}\n","import { shareEvents } from '../impl';\nimport { OnEvent, onEventBy } from '../on-event';\n\n/**\n * A processor of events incoming from {@link OnEvent} sender that shares outgoing events supply among all registered\n * receivers.\n *\n * The created sender receives events from this one and sends to registered receivers. The shared sender registers\n * a receiver in this one only once, when first receiver registered. And cuts off original events supply once all\n * supplies do.\n *\n * @category Event Processing\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param supplier - Event sender to share events from.\n *\n * @returns An {@link OnEvent} sender sharing a common supply of events.\n */\nexport function shareOn<TEvent extends any[]>(supplier: OnEvent<TEvent>): OnEvent<TEvent> {\n  return onEventBy(shareEvents(supplier));\n}\n","import { EventSupplier } from '../base';\nimport { digEvents } from '../impl';\nimport { OnEvent, onEventBy } from '../on-event';\nimport { onSupplied } from '../senders';\nimport { shareOn } from './share-on';\n\n/**\n * Creates an event processor that extracts event senders from incoming events.\n *\n * The outgoing events supply is cut off once the incoming events supply do.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming events type.\n * @typeParam TOutEvent - Extracted events type.\n * @param extract - A function extracting outgoing event supplier from incoming event. May return `undefined` when\n * nothing extracted.\n *\n * @returns New event processor.\n */\nexport function digOn<\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    extract: (this: void, ...event: TInEvent) => EventSupplier<TOutEvent> | void | undefined,\n): (this: void, input: OnEvent<TInEvent>) => OnEvent<TOutEvent> {\n\n  const processor = digOn_(extract);\n\n  return input => shareOn(processor(input));\n}\n\n/**\n * Creates an event processor that extracts event senders from incoming events, and does not share the outgoing events\n * supply.\n *\n * The outgoing events supply is cut off once the incoming events supply do.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming events type.\n * @typeParam TOutEvent - Extracted events type.\n * @param extract - A function extracting outgoing event supplier from incoming event. May return `undefined` when\n * nothing extracted.\n *\n * @returns New event processor.\n */\nexport function digOn_<// eslint-disable-line @typescript-eslint/naming-convention\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    extract: (this: void, ...event: TInEvent) => EventSupplier<TOutEvent> | void | undefined,\n): (this: void, input: OnEvent<TInEvent>) => OnEvent<TOutEvent> {\n\n  const extractSender = (...event: TInEvent): OnEvent<TOutEvent> | void => {\n\n    const extracted = extract(...event);\n\n    return extracted && onSupplied(extracted);\n  };\n\n  return input => onEventBy(digEvents(input, extractSender));\n}\n","import { translateEvents } from '../impl';\nimport { OnEvent, onEventBy } from '../on-event';\nimport { shareOn } from './share-on';\n\n/**\n * Creates an event processor that translates events incoming from {@link OnEvent} sender.\n *\n * The translated events expected to be sent by the given `translate` function.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming event type.\n * @typeParam TOutEvent - Outgoing translated event type.\n * @param translate - Event translation function. Accepts an outgoing event sender function as first parameter,\n * and incoming event as the rest of them.\n *\n * @returns A mapping function of incoming event sender to another one.\n */\nexport function translateOn<\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    translate: (this: void, send: (...event: TOutEvent) => void, ...event: TInEvent) => void,\n): (this: void, input: OnEvent<TInEvent>) => OnEvent<TOutEvent> {\n\n  const mapper = translateOn_(translate);\n\n  return input => shareOn(mapper(input));\n}\n\n/**\n * Creates an event processor that translates events incoming from {@link OnEvent} sender, and does not share the\n * outgoing events supply.\n *\n * The translated events expected to be sent by the given `translate` function.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming event type.\n * @typeParam TOutEvent - Outgoing translated event type.\n * @param translate - Event translation function. Accepts an outgoing event sender function as first parameter,\n * and incoming event as the rest of them.\n *\n * @returns A mapping function of incoming event sender to another one.\n */\nexport function translateOn_<// eslint-disable-line @typescript-eslint/naming-convention\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    translate: (this: void, send: (...event: TOutEvent) => void, ...event: TInEvent) => void,\n): (this: void, input: OnEvent<TInEvent>) => OnEvent<TOutEvent> {\n  return input => onEventBy(translateEvents(input, translate));\n}\n","import { OnEvent } from '../on-event';\nimport { shareOn } from './share-on';\nimport { translateOn_ } from './translate-on';\n\n/**\n * Creates an event processor that passes incoming events implementing the given type only.\n *\n * @category Event Processing\n * @typeParam TValue - Incoming value type. This is a list of the test function parameter types.\n * @typeParam TMatch - Required value type.\n * @param test - Test function accepting incoming event as its only parameter, and returning truthy value if the value\n * implements the given type, or falsy one otherwise.\n *\n * @returns {@link OnEvent} sender mapper function.\n */\nexport function filterOn<TValue, TMatch extends TValue>(\n    test: (this: void, event: TValue) => event is TMatch,\n): (this: void, supplier: OnEvent<[TValue]>) => OnEvent<[TMatch]>;\n\n/**\n * Creates an event processor that passes incoming events matching the given condition only.\n *\n * @category Event Processing\n * @typeParam TEvent - An event type. This is a list of the test function parameter types.\n * @param test - Test function accepting incoming event as its parameters, and returning truthy value for matching\n * events, or falsy one otherwise.\n *\n * @returns {@link OnEvent} sender mapper function.\n */\nexport function filterOn<TEvent extends any[]>(\n    test: (this: void, ...event: TEvent) => boolean,\n): (this: void, supplier: OnEvent<TEvent>) => OnEvent<TEvent>;\n\nexport function filterOn<TEvent extends any[]>(\n    test: (this: void, ...event: TEvent) => boolean,\n): (this: void, supplier: OnEvent<TEvent>) => OnEvent<TEvent> {\n\n  const map = filterOn_(test);\n\n  return supplier => shareOn(map(supplier));\n}\n\n/**\n * Creates an event processor that passes incoming events implementing the given type only, and does not share\n * the outgoing events supply.\n *\n * @category Event Processing\n * @typeParam TValue - Incoming value type. This is a list of the test function parameter types.\n * @typeParam TMatch - Required value type.\n * @param test - Test function accepting incoming event as its only parameter, and returning truthy value if the value\n * implements the given type, or falsy one otherwise.\n *\n * @returns {@link OnEvent} sender mapper function.\n */\nexport function filterOn_<TValue, TMatch extends TValue>(// eslint-disable-line @typescript-eslint/naming-convention\n    test: (this: void, event: TValue) => event is TMatch,\n): (this: void, supplier: OnEvent<[TValue]>) => OnEvent<[TMatch]>;\n\n/**\n * Creates an event processor that passes incoming events matching the given condition only, and does not share\n * the outgoing events supply.\n *\n * @category Event Processing\n * @typeParam TEvent - An event type. This is a list of the test function parameter types.\n * @param test - Test function accepting incoming event as its parameters, and returning truthy value for matching\n * events, or falsy one otherwise.\n *\n * @returns {@link OnEvent} sender mapper function.\n */\nexport function filterOn_<TEvent extends any[]>(// eslint-disable-line @typescript-eslint/naming-convention\n    test: (this: void, ...event: TEvent) => boolean,\n): (this: void, supplier: OnEvent<TEvent>) => OnEvent<TEvent>;\n\nexport function filterOn_<TEvent extends any[]>(// eslint-disable-line @typescript-eslint/naming-convention\n    test: (this: void, ...event: TEvent) => boolean,\n): (this: void, supplier: OnEvent<TEvent>) => OnEvent<TEvent> {\n  return translateOn_((send, ...event) => test(...event) && send(...event));\n}\n","import { AfterEvent, afterEventBy } from '../after-event';\nimport { translateEvents } from '../impl';\nimport { OnEvent } from '../on-event';\nimport { shareAfter } from './share-after';\n\n/**\n * Creates an event processor that converts events incoming from {@link AfterEvent} keeper with the given converter\n * function.\n *\n * @category Event Processing\n * @typeParam TEvent - Incoming events type.\n * @typeParam TResult - Outgoing events type.\n * @param convert - A converter function that accepts incoming event as parameters and returns converted outgoing event.\n *\n * @returns New event mapper.\n */\nexport function mapAfter<TEvent extends any[], TResult>(\n    convert: (this: void, ...event: TEvent) => TResult,\n): (this: void, input: AfterEvent<TEvent>) => AfterEvent<[TResult]>;\n\n/**\n * Creates an event processor that converts events incoming from {@link OnEvent} sender with the given converter\n * function and fallback.\n *\n * @category Event Processing\n * @typeParam TEvent - Incoming events type.\n * @typeParam TResult - Outgoing events type.\n * @param convert - A converter function that accepts incoming event as parameters and returns converted outgoing event.\n * @param fallback - A function creating a fallback of outgoing event.\n *\n * @returns New event mapper.\n */\nexport function mapAfter<TEvent extends any[], TResult>(\n    convert: (this: void, ...event: TEvent) => TResult,\n    fallback: (this: void) => TResult,\n): (this: void, input: OnEvent<TEvent>) => AfterEvent<[TResult]>;\n\nexport function mapAfter<TEvent extends any[], TResult>(\n    convert: (this: void, ...event: TEvent) => TResult,\n    fallback?: (this: void) => TResult,\n): (this: void, input: AfterEvent<TEvent>) => AfterEvent<[TResult]> {\n\n  const mapper = mapAfter_(convert, fallback!);\n\n  return input => shareAfter(mapper(input));\n}\n\n/**\n * Creates an event processor that converts events incoming from {@link OnEvent} sender with the given converter\n * function, and does not share the outgoing events supply.\n *\n * @category Event Processing\n * @typeParam TEvent - Incoming events type.\n * @typeParam TResult - Outgoing events type.\n * @param convert - A converter function that accepts incoming event as parameters and returns outgoing event value.\n *\n * @returns New event mapper.\n */\nexport function mapAfter_<TEvent extends any[], TResult>(// eslint-disable-line @typescript-eslint/naming-convention\n    convert: (this: void, ...event: TEvent) => TResult,\n): (this: void, input: AfterEvent<TEvent>) => AfterEvent<[TResult]>;\n\n/**\n * Creates an event processor that converts events incoming from {@link OnEvent} sender with the given converter\n * function and fallback, and does not share the outgoing events supply.\n *\n * @category Event Processing\n * @typeParam TEvent - Incoming events type.\n * @typeParam TResult - Outgoing events type.\n * @param convert - A converter function that accepts incoming event as parameters and returns outgoing event value.\n * @param fallback - A function creating a fallback of outgoing event.\n *\n * @returns New event mapper.\n */\nexport function mapAfter_<TEvent extends any[], TResult>(// eslint-disable-line @typescript-eslint/naming-convention\n    convert: (this: void, ...event: TEvent) => TResult,\n    fallback: (this: void) => TResult,\n): (this: void, input: OnEvent<TEvent>) => AfterEvent<[TResult]>;\n\nexport function mapAfter_<TEvent extends any[], TResult>(// eslint-disable-line @typescript-eslint/naming-convention\n    convert: (this: void, ...event: TEvent) => TResult,\n    fallback?: (this: void) => TResult,\n): (this: void, input: OnEvent<TEvent>) => AfterEvent<[TResult]> {\n  return input => afterEventBy(\n      translateEvents(\n          input,\n          (send, ...event) => send(convert(...event)),\n      ),\n      fallback && (() => [fallback()]),\n  );\n}\n","import { translateEvents } from '../impl';\nimport { OnEvent, onEventBy } from '../on-event';\nimport { shareOn } from './share-on';\n\n/**\n * Creates an event processor that converts events incoming from {@link OnEvent} sender with the given converter\n * function.\n *\n * @category Event Processing\n * @typeParam TEvent - Incoming events type.\n * @typeParam TResult - Outgoing events type.\n * @param convert - A converter function that accepts incoming event as parameters and returns converted outgoing event.\n *\n * @returns New event mapper.\n */\nexport function mapOn<TEvent extends any[], TResult>(\n    convert: (this: void, ...event: TEvent) => TResult,\n): (this: void, input: OnEvent<TEvent>) => OnEvent<[TResult]> {\n\n  const mapper = mapOn_(convert);\n\n  return input => shareOn(mapper(input));\n}\n\n/**\n * Creates an event processor that converts events incoming from {@link OnEvent} sender with the given converter\n * function, and does not share the outgoing events supply.\n *\n * @category Event Processing\n * @typeParam TEvent - Incoming events type.\n * @typeParam TResult - Outgoing events type.\n * @param convert - A converter function that accepts incoming event as parameters and returns outgoing event value.\n *\n * @returns New event mapper.\n */\nexport function mapOn_<TEvent extends any[], TResult>(// eslint-disable-line @typescript-eslint/naming-convention\n    convert: (this: void, ...event: TEvent) => TResult,\n): (this: void, input: OnEvent<TEvent>) => OnEvent<[TResult]> {\n  return input => onEventBy(translateEvents(\n      input,\n      (send, ...event) => send(convert(...event)),\n  ));\n}\n","import { AfterEvent, afterEventBy } from '../after-event';\nimport { onceEvent } from '../impl';\n\n/**\n * A processor of the first event incoming from {@link AfterEvent} keeper.\n *\n * Cuts off the outgoing events supply after sending the first event.\n *\n * @category Event Processing\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param supplier - Event keeper to receive an event from.\n *\n * @returns New keeper of the first event.\n */\nexport function onceAfter<TEvent extends any[]>(supplier: AfterEvent<TEvent>): AfterEvent<TEvent> {\n  return afterEventBy(onceEvent(supplier));\n}\n","import { AfterEvent } from '../after-event';\nimport { onceEvent } from '../impl';\nimport { OnEvent, onEventBy } from '../on-event';\n\n/**\n * A processor of the first event incoming from {@link OnEvent} sender.\n *\n * Cuts off the outgoing event supply after sending the first event.\n *\n * @category Event Processing\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param supplier - Event sender to receive an event from.\n *\n * @returns New sender of the first event.\n */\nexport function onceOn<TEvent extends any[]>(\n    supplier: OnEvent<TEvent>,\n): OnEvent<TEvent> | AfterEvent<TEvent> {\n  return onEventBy(onceEvent(supplier));\n}\n","import { asis, isAlwaysSupply, Supply, SupplyPeer } from '@proc7ts/primitives';\nimport { supplyEvents } from '../impl';\nimport { OnEvent, onEventBy } from '../on-event';\n\n/**\n * Creates an event processor that passes events incoming from {@link OnEvent} sender until the `required` supply is\n * cut off.\n *\n * The outgoing events supply will be cut off once incoming event supply does, unless a second supply passed in.\n * In the latter case that supply will be cut off instead.\n *\n * @category Event Processing\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param required - A peer of required event supply. The returned processor does nothing when `alwaysSupply()`\n * specified.\n * @param dependentSupply - The supply to cut off on cutting off the incoming events supply.\n *\n * @returns New event mapper.\n */\nexport function supplyOn<TEvent extends any[]>(\n    required: SupplyPeer,\n    dependentSupply?: Supply,\n): (this: void, input: OnEvent<TEvent>) => OnEvent<TEvent> {\n  return isAlwaysSupply(required.supply)\n      ? asis\n      : (input: OnEvent<TEvent>) => onEventBy(supplyEvents(input, required, dependentSupply));\n}\n","import { Supply } from '@proc7ts/primitives';\nimport { sendEventsTo } from '../base';\nimport { OnEvent, onEventBy } from '../on-event';\nimport { mapOn } from './map-on';\nimport { resolveOn } from './resolve-on';\nimport { supplyOn } from './supply-on';\n\n/**\n * A processor that asynchronously resolves incoming events and sends them in the order they are received.\n *\n * Receives events or their promises from the given event sender, and sends them once they are resolved in the same\n * order as they have been received. Mat send events in batches, e.g. when events resolved out of order.\n *\n * The resulting events supply is cut off if some of incoming event promises rejected. In this case the rejection reason\n * is used as a reason to cut off. If incoming events supply is cut off, then the resulting event supply will be cut off\n * too, but only after all incoming events resolved and sent.\n *\n * @category Event Processing\n * @typeParam TEvent - Resolved event type.\n * @param from - A sender of events or promise-like instances resolved to ones.\n *\n * @returns New `OnEvent` sender of resolved events.\n */\nexport function resolveOnOrdered<TEvent>(\n    from: OnEvent<[PromiseLike<TEvent> | TEvent]>,\n): OnEvent<[TEvent, ...TEvent[]]> {\n  return onEventBy(receiver => {\n\n    const { supply } = receiver;\n    const dispatch = sendEventsTo(receiver);\n\n    const sourceSupply = new Supply();\n    let numInProcess = 0;\n    const source = from.do(\n        supplyOn(supply, sourceSupply),\n        mapOn(event => {\n          ++numInProcess;\n          return event;\n        }),\n    );\n    let received: TEvent[] = [];\n    let numSent = 1;\n    let numReceived = 0;\n\n    sourceSupply.whenOff(reason => {\n      if (!numInProcess) {\n        supply.off(reason);\n      }\n    });\n\n    resolveOn(source)({\n      supply,\n      receive(_ctx, event, index) {\n\n        const i = index - numSent;\n\n        received[i] = event;\n        ++numReceived;\n        if (numReceived > i) {\n\n          let toSend: TEvent[];\n\n          if (numReceived === received.length) {\n            // Can send all received events\n            toSend = received;\n            received = [];\n          } else {\n            // Can send events up to `i`\n            toSend = received.splice(0, i + 1);\n          }\n          numSent += toSend.length;\n          numReceived -= toSend.length;\n          numInProcess -= toSend.length;\n\n          dispatch(...(toSend as [TEvent, ...TEvent[]]));\n          if (!numInProcess && sourceSupply.isOff) {\n            supply.needs(sourceSupply);\n          }\n        }\n      },\n    });\n  });\n}\n","import { sendEventsTo } from '../base';\nimport { OnEvent, onEventBy } from '../on-event';\n\n/**\n * A processor that asynchronously resolves incoming events and sends then in the order of their resolution.\n *\n * Receives events or their promises from the given event sender, and sends them once they are resolved. The original\n * order of events is not preserved. Instead each resolved event is sent along with its index in original order.\n *\n * The resulting events supply is cut off immediately once unresolved events supply is cut off, or some of incoming\n * event promises rejected. In the latter case the rejection reason is used as a reason to cut off.\n *\n * @category Event Processing\n * @typeParam T - A type of values the promises resolve to.\n * @param from - A sender of events or promise-like instances resolved to ones.\n *\n * @returns New `OnEvent` sender of resolved events and their indices in original order starting from `1`.\n */\nexport function resolveOn<T>(from: OnEvent<[PromiseLike<T> | T]>): OnEvent<[T, number]> {\n  return onEventBy(receiver => {\n\n    const { supply } = receiver;\n    const dispatch = sendEventsTo(receiver);\n\n    let lastIndex = 0;\n\n    from({\n      supply,\n      receive(_ctx, promise) {\n\n        const index = ++lastIndex;\n\n        Promise.resolve()\n            .then(() => promise)\n            .then(\n                event => dispatch(event, index),\n                reason => supply.off(reason),\n            );\n      },\n    });\n  });\n}\n","import { asis, isAlwaysSupply, Supply, SupplyPeer } from '@proc7ts/primitives';\nimport { AfterEvent, afterEventBy } from '../after-event';\nimport { supplyEvents } from '../impl';\n\n/**\n * Creates an event processor that passes events incoming from {@link AfterEvent} keeper until the `required` supply\n * is cut off.\n *\n * The outgoing events supply will be cut off once incoming event supply does, unless a second supply passed in.\n * In the latter case that supply will be cut off instead.\n *\n * @category Event Processing\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param required - A peer of required event supply. The returned processor does nothing when `alwaysSupply()`\n * specified.\n * @param dependentSupply - The supply to cut off on cutting off the incoming events supply.\n *\n * @returns New event mapper.\n */\nexport function supplyAfter<TEvent extends any[]>(\n    required: SupplyPeer,\n    dependentSupply?: Supply,\n): (this: void, input: AfterEvent<TEvent>) => AfterEvent<TEvent> {\n  return isAlwaysSupply(required.supply)\n      ? asis\n      : (input: AfterEvent<TEvent>) => afterEventBy(supplyEvents(\n          input,\n          required,\n          dependentSupply,\n      ));\n}\n","import { AfterEvent, afterEventBy } from '../after-event';\nimport { translateEvents } from '../impl';\nimport { OnEvent } from '../on-event';\nimport { shareAfter } from './share-after';\n\n/**\n * Creates an event processor that translates events incoming from {@link AfterEvent} keeper.\n *\n * The translated events expected to be sent by the given `translate` function.\n *\n * The returned mapper does the same as the one created by {@link translateOn} one, but returns an {@link AfterEvent}\n * keeper instead of {@link OnEvent} sender. This can not be always done without a `fallback`, as not every\n * transformation results to valid {@link EventKeeper}. E.g. when some events filtered out.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming event type.\n * @typeParam TOutEvent - Outgoing translated event type.\n * @param translate - Event translation function. Accepts an outgoing event sender function as first parameter,\n * and incoming event as the rest of them.\n *\n * @returns A mapping function of incoming event keeper to another one.\n */\nexport function translateAfter<\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    translate: (this: void, send: (...event: TOutEvent) => void, ...event: TInEvent) => void,\n): (this: void, input: AfterEvent<TInEvent>) => AfterEvent<TOutEvent>;\n\n/**\n * Creates an event processor that translates events incoming from {@link OnEvent} sender with fallback.\n *\n * The translated events expected to be sent by the given `translate` function.\n *\n * The returned mapper does the same as the one created by {@link translateOn} one, but returns an {@link AfterEvent}\n * keeper instead of {@link OnEvent} sender. This can not be always done without a `fallback`, as not every\n * transformation results to valid {@link EventKeeper}. E.g. when some events filtered out.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming event type.\n * @typeParam TOutEvent - Outgoing translated event type.\n * @param translate - Event translation function. Accepts an outgoing event sender function as first parameter,\n * and incoming event as the rest of them.\n * @param fallback - A function creating outgoing event fallback.\n *\n * @returns A mapping function of incoming event keeper to another one.\n */\nexport function translateAfter<\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    translate: (this: void, send: (...event: TOutEvent) => void, ...event: TInEvent) => void,\n    fallback: (this: void) => TOutEvent,\n): (this: void, input: OnEvent<TInEvent>) => AfterEvent<TOutEvent>;\n\nexport function translateAfter<\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    translate: (this: void, send: (...event: TOutEvent) => void, ...event: TInEvent) => void,\n    fallback?: (this: void) => TOutEvent,\n): (this: void, input: OnEvent<TInEvent>) => AfterEvent<TOutEvent> {\n\n  const mapper = translateAfter_(translate, fallback!);\n\n  return input => shareAfter(mapper(input));\n}\n\n/**\n * Creates an event processor that translates events incoming from {@link AfterEvent} keeper, and does not share the\n * outgoing events supply.\n *\n * The translated events expected to be sent by the given `translate` function.\n *\n * The returned mapper does the same as the one created by {@link translateOn_} one, but returns an {@link AfterEvent}\n * keeper instead of {@link OnEvent} sender. This can not be always done without a `fallback`, as not every\n * transformation results to valid {@link EventKeeper}. E.g. when some events filtered out.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming event type.\n * @typeParam TOutEvent - Outgoing translated event type.\n * @param translate - Event translation function. Accepts an outgoing event sender function as first parameter,\n * and incoming event as the rest of them.\n *\n * @returns A mapping function of incoming event keeper to another one.\n */\nexport function translateAfter_<// eslint-disable-line @typescript-eslint/naming-convention\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    translate: (this: void, send: (...event: TOutEvent) => void, ...event: TInEvent) => void,\n): (this: void, input: AfterEvent<TInEvent>) => AfterEvent<TOutEvent>;\n\n/**\n * Creates an event processor that translates events incoming from {@link OnEvent} sender with fallback, and does not\n * share the outgoing events supply.\n *\n * The translated events expected to be sent by the given `translate` function.\n *\n * The returned mapper does the same as the one created by {@link translateOn_} one, but returns an {@link AfterEvent}\n * keeper instead of {@link OnEvent} sender. This can not be always done without a `fallback`, as not every\n * transformation results to valid {@link EventKeeper}. E.g. when some events filtered out.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming event type.\n * @typeParam TOutEvent - Outgoing translated event type.\n * @param translate - Event translation function. Accepts an outgoing event sender function as first parameter,\n * and incoming event as the rest of them.\n * @param fallback - A function creating outgoing event fallback.\n *\n * @returns A mapping function of incoming event keeper to another one.\n */\nexport function translateAfter_<// eslint-disable-line @typescript-eslint/naming-convention\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    translate: (this: void, send: (...event: TOutEvent) => void, ...event: TInEvent) => void,\n    fallback: (this: void) => TOutEvent,\n): (this: void, input: OnEvent<TInEvent>) => AfterEvent<TOutEvent>;\n\n/**\n * Creates an event processor that translates events incoming from {@link OnEvent} sender with fallback, and does not\n * share the outgoing events supply.\n *\n * The translated events expected to be sent by the given `translate` function.\n *\n * The returned mapper does the same as the one created by {@link translateOn_} one, but returns an {@link AfterEvent}\n * keeper instead of {@link OnEvent} sender. This can not be always done without a `fallback`, as not every\n * transformation results to valid {@link EventKeeper}. E.g. when some events filtered out.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming event type.\n * @typeParam TOutEvent - Outgoing translated event type.\n * @param translate - Event translation function. Accepts an outgoing event sender function as first parameter,\n * and incoming event as the rest of them.\n * @param fallback - A function creating fallback event. When omitted, the initial event is expected to be sent by\n * `translate` function. A receiver registration would lead to an error otherwise.\n *\n * @returns A mapping function of incoming event keeper to another one.\n */\nexport function translateAfter_<// eslint-disable-line @typescript-eslint/naming-convention\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    translate: (this: void, send: (...event: TOutEvent) => void, ...event: TInEvent) => void,\n    fallback?: (this: void) => TOutEvent,\n): (this: void, input: OnEvent<TInEvent>) => AfterEvent<TOutEvent> {\n  return input => afterEventBy(translateEvents(input, translate), fallback);\n}\n","import { OnEvent } from '../on-event';\nimport { shareOn } from './share-on';\nimport { translateOn_ } from './translate-on';\n\n/**\n * Creates an event processor that sends the values of incoming events.\n *\n * Events are valued by provided `value` function. The `null`, `undefined`, and `false` values are dropped.\n *\n * @category Event Processing\n * @typeParam TEvent - Incoming event type.\n * @typeParam TValue - Event value type.\n * @param valueOf - Event value detector function. Accepts incoming event as parameters and returns either its value,\n * or `false`/`null`/`undefined` to ignore it.\n *\n * @returns New event processor.\n */\nexport function valueOn<TEvent extends any[], TValue>(\n    valueOf: (this: void, ...event: TEvent) => TValue | false | null | undefined,\n): (this: void, input: OnEvent<TEvent>) => OnEvent<[TValue]> {\n\n  const mapper = valueOn_(valueOf);\n\n  return input => shareOn(mapper(input));\n}\n\n/**\n * Creates an event processor that sends the values of incoming events, and does not share the outgoing events supply.\n *\n * @category Event Processing\n * @typeParam TEvent - Incoming event type.\n * @typeParam TValue - Event value type.\n * @param valueOf - Event value detector function. Accepts incoming event as parameters and returns either its value,\n * or `false`/`null`/`undefined` to ignore it.\n *\n * @returns New event processor.\n */\nexport function valueOn_<TEvent extends any[], TValue>(// eslint-disable-line @typescript-eslint/naming-convention\n    valueOf: (this: void, ...event: TEvent) => TValue | false | null | undefined,\n): (this: void, input: OnEvent<TEvent>) => OnEvent<[TValue]> {\n  return translateOn_((send, ...event) => {\n\n    const value = valueOf(...event);\n\n    if (value != null && value !== false) {\n      send(value);\n    }\n  });\n}\n","/**\n * A path to state or its part. E.g. property value.\n *\n * May consist of one or more property keys.\n *\n * An array consisting of the only one property key is the same as this property key.\n *\n * An empty array is a path to the state itself.\n *\n * @category State Tracking\n */\nexport type StatePath = PropertyKey | StatePath.Normalized;\n\n/**\n * @category State Tracking\n */\nexport namespace StatePath {\n\n  /**\n   * Normalized state path.\n   *\n   * This is always an array of property keys.\n   */\n  export type Normalized = readonly PropertyKey[];\n\n}\n\n/**\n * Normalizes a state path consisting of single key.\n *\n * @category State Tracking\n * @typeParam TKey - A type of path key.\n * @param key - A path key.\n *\n * @return Normalized state path.\n */\nexport function statePath<TKey extends PropertyKey>(key: TKey): readonly [TKey];\n\n/**\n * Normalizes arbitrary state path. I.e. converts it to array.\n *\n * @param path - Arbitrary state path.\n *\n * @return Normalized state path.\n */\nexport function statePath(path: StatePath): StatePath.Normalized;\n\nexport function statePath(path: StatePath): StatePath.Normalized {\n  return (Array.isArray(path) ? path : [path]) as StatePath.Normalized;\n}\n","import { noop, Supply } from '@proc7ts/primitives';\nimport { EventSender, OnEvent__symbol } from '../base';\nimport { onEventBy } from '../on-event';\nimport { EventEmitter } from '../senders';\nimport { OnStateUpdate } from './on-state-update';\nimport { statePath, StatePath } from './state-path';\nimport { StateUpdateReceiver } from './state-update-receiver';\n\n/**\n * @internal\n */\nclass PathEntry {\n\n  readonly emitter = new EventEmitter<[StatePath.Normalized, any, any]>();\n  private readonly _nested = new Map<PropertyKey, PathEntry>();\n\n  constructor(private readonly _drop: () => void) {\n    this.emitter.on((path, newValue, oldValue) => {\n\n      const key = path[0];\n      const nested = this._nested.get(key);\n\n      if (nested) {\n        nested.emitter.send(path.slice(1), newValue, oldValue);\n      }\n    });\n  }\n\n  on(receiver: StateUpdateReceiver): Supply {\n\n    const supply = this.emitter.on(receiver);\n\n    return new Supply(reason => {\n      supply.off(reason);\n      this._dropIfEmpty();\n    }).needs(supply);\n  }\n\n  nest(key: PropertyKey): PathEntry;\n\n  nest(key: PropertyKey, dontCreateMissing: true): PathEntry | undefined;\n\n  nest(key: PropertyKey, dontCreateMissing?: true): PathEntry | undefined;\n\n  nest(key: PropertyKey, dontCreateMissing?: true): PathEntry | undefined {\n\n    const found = this._nested.get(key);\n\n    if (found || dontCreateMissing) {\n      return found;\n    }\n\n    const created = new PathEntry(() => this._remove(key));\n\n    this._nested.set(key, created);\n\n    return created;\n  }\n\n  done(reason?: unknown): void {\n    for (const nested of this._nested.values()) {\n      nested.done(reason);\n    }\n    this.emitter.supply.off(reason);\n  }\n\n  private _remove(key: PropertyKey): void {\n    this._nested.delete(key);\n    this._dropIfEmpty();\n  }\n\n  private _dropIfEmpty(): void {\n    if (!this._nested.size && this.emitter.size <= 1) {\n      this._drop();\n    }\n  }\n\n}\n\n/**\n * @internal\n */\nclass Trackers {\n\n  private readonly _root = new PathEntry(noop);\n\n  on(path: StatePath.Normalized, receiver: StateUpdateReceiver): Supply {\n    return this._entry(path).on(receiver);\n  }\n\n  send<T>(path: StatePath.Normalized, newValue: T, oldValue: T): void {\n    this._root.emitter.send(path, newValue, oldValue);\n  }\n\n  done(path: StatePath.Normalized, reason?: unknown): void {\n\n    const entry = this._entry(path, true);\n\n    if (entry) {\n      entry.done(reason);\n    }\n  }\n\n  private _entry(path: StatePath.Normalized): PathEntry;\n\n  private _entry(path: StatePath.Normalized, dontCreateMissing: true): PathEntry | undefined;\n\n  private _entry(path: StatePath.Normalized, dontCreateMissing?: true): PathEntry | undefined {\n\n    let entry = this._root;\n\n    for (const key of path) {\n\n      const nested = entry.nest(key, dontCreateMissing);\n\n      if (!nested) {\n        return;\n      }\n\n      entry = nested;\n    }\n\n    return entry;\n  }\n\n}\n\n/**\n * @internal\n */\nclass SubStateTracker implements StateTracker {\n\n  readonly update: <T>(\n      this: void,\n      path: StatePath,\n      newValue: T,\n      oldValue: T,\n  ) => void;\n\n  readonly onUpdate: OnStateUpdate = onEventBy<[StatePath.Normalized, any, any]>(\n      receiver => this._trackers.on(this._path, receiver),\n  );\n\n  constructor(private readonly _trackers: Trackers, private readonly _path: StatePath.Normalized) {\n    this.update = <T>(path: StatePath, newValue: T, oldValue: T) => {\n      this._trackers.send([...this._path, ...statePath(path)], newValue, oldValue);\n    };\n  }\n\n  get _tracker(): this {\n    return this;\n  }\n\n  [OnEvent__symbol](): OnStateUpdate {\n    return this.onUpdate;\n  }\n\n  track(path: StatePath): SubStateTracker {\n    path = statePath(path);\n    if (!path.length) {\n      return this; // Path to itself.\n    }\n    return new SubStateTracker(this._trackers, [...this._path, ...path]);\n  }\n\n  done(reason?: unknown): void {\n    this._trackers.done(this._path, reason);\n  }\n\n}\n\n/**\n * State changes tracker.\n *\n * A state is a tree-like structure of sub-states (nodes) available under {@link StatePath}.\n *\n * When node modified a {@link StateTracker.update} should be called. Then all state update receivers registered by\n * {@link StateTracker.onUpdate} will receive this update.\n *\n * @category State Tracking\n */\nexport class StateTracker implements EventSender<[StatePath.Normalized, any, any]> {\n\n  /**\n   * @internal\n   */\n  readonly _tracker: SubStateTracker = new SubStateTracker(new Trackers(), []);\n\n  /**\n   * {@link OnStateUpdate state updates sender}.\n   *\n   * A state update will be sent to it whenever an `update()` function is called.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   *\n   * @returns State updates sender.\n   */\n  get onUpdate(): OnStateUpdate {\n    return this._tracker.onUpdate;\n  }\n\n  [OnEvent__symbol](): OnStateUpdate {\n    return this.onUpdate;\n  }\n\n  // noinspection JSCommentMatchesSignature\n  /**\n   * Updates the component state.\n   *\n   * All receivers registered with {@link onUpdate} will receive this update.\n   *\n   * @typeParam T - A type of changed value.\n   * @param key - Changed value key.\n   * @param newValue - New value.\n   * @param oldValue - Previous value.\n   */\n  get update(): <T>(\n      this: void,\n      path: StatePath,\n      newValue: T,\n      oldValue: T,\n  ) => void {\n    return this._tracker.update;\n  }\n\n  /**\n   * Starts tracking of partial state under the given path.\n   *\n   * @param path - A path to state part.\n   *\n   * @return New partial state tracker.\n   */\n  track(path: StatePath): StateTracker {\n\n    const subTracker = this._tracker.track(path);\n\n    return subTracker === this._tracker ? this : subTracker;\n  }\n\n  /**\n   * Unregisters updates receivers and cuts off their supplies.\n   *\n   * After this method call the updates receivers of this partial state and all nested states won't receive any updates.\n   *\n   * @param reason - An optional reason to stop tracking.\n   */\n  done(reason?: unknown): void {\n    this._tracker.done(reason);\n  }\n\n}\n","import { neverSupply, Supply, SupplyPeer } from '@proc7ts/primitives';\nimport { AfterEvent, afterEventBy } from '../after-event';\nimport {\n  AfterEvent__symbol,\n  EventKeeper,\n  EventReceiver,\n  EventSender,\n  EventSupplier,\n  isEventKeeper,\n  OnEvent__symbol,\n} from '../base';\nimport { OnEvent } from '../on-event';\nimport { consumeEvents } from '../processors';\nimport { onSupplied } from '../senders';\n\n/**\n * Value accessor and changes tracker.\n *\n * Implements an {@link EventSender} interface by sending value changes to registered receivers as a pair of new and old\n * values.\n *\n * Implements an {@link EventKeeper} interface by sending current value and its updates.\n *\n * @category Value Tracking\n * @typeParam T - Tracked value type.\n */\nexport abstract class ValueTracker<T> implements EventSender<[T, T]>, EventKeeper<[T]>, SupplyPeer {\n\n  /**\n   * @internal\n   */\n  private _by = neverSupply();\n\n  /**\n   * {@link OnEvent} sender of value changes.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   *\n   * @returns Value changes sender.\n   */\n  abstract readonly on: OnEvent<[T, T]>;\n\n  /**\n   * {@link AfterEvent} keeper of current value.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns Current value keeper.\n   */\n  readonly read: AfterEvent<[T]> = afterEventBy(\n      receiver => this.on(receiveNewValue(receiver)),\n      () => [this.it],\n  );\n\n  [OnEvent__symbol](): OnEvent<[T, T]> {\n    return this.on;\n  }\n\n  [AfterEvent__symbol](): AfterEvent<[T]> {\n    return this.read;\n  }\n\n  /**\n   * An event supply of this value tracker.\n   */\n  abstract readonly supply: Supply;\n\n  /**\n   * The tracked value.\n   */\n  abstract it: T;\n\n  /**\n   * Updates the tracked value by the given value `supplier`.\n   *\n   * If the value is already updated by another supplier, then unbinds from the old one first.\n   *\n   * Call the {@link ValueTracker.byNone} method to unbind the tracked value from the `source`.\n   *\n   * Note that explicitly updating the value would override the value received from the `source`.\n   *\n   * @param supplier - The source value sender or keeper.\n   *\n   * @returns `this` instance.\n   */\n  by(supplier: EventSupplier<[T]>): this;\n\n  /**\n   * Updates the tracked value by value suppliers extracted from events sent by the given `supplier`.\n   *\n   * If the value is already updated by another value supplier, then unbinds from the old one first.\n   *\n   * Call the {@link ValueTracker.byNone} method to unbind the tracked value from the `source`.\n   *\n   * Note that explicitly updating the value would override the value received from the `source`.\n   *\n   * @typeParam TSrcEvent - Source event type.\n   * @param supplier - The event supplier to extract value suppliers from.\n   * @param extract - A function extracting value supplier from event received from `supplier`.\n   * May return `undefined` to suspend receiving values.\n   *\n   * @returns `this` instance.\n   */\n  by<TSrcEvent extends any[]>(\n      supplier: EventSupplier<TSrcEvent>,\n      extract: (this: void, ...event: TSrcEvent) => EventSupplier<[T]> | undefined,\n  ): this;\n\n  by<TSrcEvent extends any[]>(\n      supplier: EventSupplier<TSrcEvent> | EventSupplier<[T]>,\n      extract?: (this: void, ...event: TSrcEvent) => EventSupplier<[T]> | undefined,\n  ): this {\n\n    const acceptValuesFrom = (sender: EventSupplier<[T]>): Supply => {\n\n      const onValue = isEventKeeper(sender) ? sender[AfterEvent__symbol]() : sender[OnEvent__symbol]();\n\n      return onValue(value => this.it = value);\n    };\n\n    this.byNone();\n    if (!extract) {\n\n      const sender = supplier as EventSupplier<[T]>;\n\n      this._by = acceptValuesFrom(sender);\n    } else {\n\n      const container = supplier as EventSupplier<TSrcEvent>;\n\n      this._by = onSupplied(container).do(consumeEvents((...event) => {\n\n        const sender = extract(...event);\n\n        if (sender) {\n          return acceptValuesFrom(sender);\n        }\n\n        return;\n      }));\n    }\n\n    this._by.whenOff(() => this._by = neverSupply());\n\n    return this;\n  }\n\n  /**\n   * Unbinds the tracked value from any value supplier this tracker is {@link ValueTracker.by updated by}.\n   *\n   * If the tracker is not bound then does nothing.\n   *\n   * @param reason - Arbitrary reason of unbinding the value.\n   *\n   * @returns `this` instance.\n   */\n  byNone(reason?: any): this {\n    this._by.off(reason);\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction receiveNewValue<T>(\n    valueReceiver: EventReceiver.Generic<[T]>,\n): EventReceiver.Generic<[T, T]> {\n  return {\n    supply: valueReceiver.supply,\n    receive(context, newValue) {\n      valueReceiver.receive(\n          {\n            onRecurrent(recurrentReceiver) {\n              context.onRecurrent(recurrentValue => recurrentReceiver(recurrentValue));\n            },\n          },\n          newValue,\n      );\n    },\n  };\n}\n","import { Supply } from '@proc7ts/primitives';\nimport { EventKeeper } from '../base';\nimport { OnEvent } from '../on-event';\nimport { EventEmitter } from '../senders';\nimport { ValueTracker } from './value-tracker';\n\n/**\n * @internal\n */\nclass TrackedValue<T> extends ValueTracker<T> {\n\n  private readonly _on = new EventEmitter<[T, T]>();\n\n  constructor(private _it: T) {\n    super();\n  }\n\n  get supply(): Supply {\n    return this._on.supply;\n  }\n\n  get on(): OnEvent<[T, T]> {\n    return this._on.on;\n  }\n\n  get it(): T {\n    return this._it;\n  }\n\n  set it(value: T) {\n\n    const oldValue = this._it;\n\n    if (oldValue !== value) {\n      this._it = value;\n      this._on.send(value, oldValue);\n    }\n  }\n\n}\n\n/**\n * Constructs a value which changes can be tracked.\n *\n * @category Value Tracking\n * @param initial - Initial value.\n *\n * @returns Value tracker instance.\n */\nexport function trackValue<T>(initial: T): ValueTracker<T>;\n\n/**\n * Constructs an optional value which changes can be tracked.\n *\n * @param initial - Initial value.\n *\n * @returns Value tracker instance.\n */\nexport function trackValue<T>(initial?: T): ValueTracker<T | undefined>;\n\nexport function trackValue<T>(initial: T): ValueTracker<T> {\n  return new TrackedValue<T>(initial);\n}\n\n/**\n * Constructs a tracked value updated by the given value `supplier`.\n *\n * If the value is already updated by another supplier, then unbinds from the old one first.\n *\n * Call the {@link ValueTracker.byNone} method to unbind the tracked value from the `source`.\n *\n * Note that explicitly updating the value would override the value received from the `source`.\n *\n * @category Value Tracking\n * @param supplier - The source value keeper.\n *\n * @returns `this` instance.\n */\nexport function trackValueBy<T>(supplier: EventKeeper<[T]>): ValueTracker<T>;\n\n/**\n * Constructs a tracked value updated by value keepers extracted from events sent by the given `supplier`.\n *\n * If the value is already updated by another value supplier, then unbinds from the old one first.\n *\n * Call the {@link ValueTracker.byNone} method to unbind the tracked value from the `source`.\n *\n * Note that explicitly updating the value would override the value received from the `source`.\n *\n * @typeParam TSrc - Source value type.\n * @param supplier - The event keeper to extract value keepers from.\n * @param extract - A function extracting value keeper from event received from `supplier`.\n *\n * @returns `this` instance.\n */\nexport function trackValueBy<T, TSrc extends any[]>(\n    supplier: EventKeeper<TSrc>,\n    extract: (this: void, ...event: TSrc) => EventKeeper<[T]>,\n): ValueTracker<T>;\n\nexport function trackValueBy<T, TSrc extends any[]>(\n    supplier: EventKeeper<TSrc> | EventKeeper<[T]>,\n    extract?: (this: void, ...event: TSrc) => EventKeeper<[T]>,\n): ValueTracker<T> {\n  return (trackValue() as ValueTracker<T>).by(\n      supplier as EventKeeper<TSrc>,\n      extract as (this: void, ...event: TSrc) => EventKeeper<[T]>,\n  );\n}\n"],"names":["AfterEvent__symbol","Symbol","isEventKeeper","value","eventReceiver","receiver","supply","receive","Supply","_context","event","context","isOff","whenOff","EventReceiver$doDonReceive","_event","receiveByEach","receivers","send","sendNonRecurrent","actualReceivers","received","recurrent","push","processEvent","shift","recurrentReceivers","idx","length","[object Object]","recurrentReceiver","recurrentEvent","EventNotifier","rcs","this","_rcs","Set","clear","size","generic","needs","add","delete","OnEvent__symbol","isEventSender","NoEventsError","TypeError","message","super","sendEventsTo","noop","AfterEvent$noFallback","digEvents","input","extract","nestedSupply","neverSupply","prevSupply","extracted","reason","off","OnEvent$do","processors","reduce","arg","action","OnEvent$supplier","onceEvent","supplier","OnEvent$then","onEvent","onCutOff","Promise","resolve","reject","e","_ctx","shareEvents","sharer","EventSharer","on","bind","_on","_onInit","initialEvents","sharedSupply","onFirst","_onFirst","dispatch","_onNext","_addReceiver","cuts","forEach","supplyEvents","required","dependentSupply","translateEvents","translate","neverReceive","onEventBy","register","error","do","then","afterEventBy","fallback","cleanup","AfterEvent$noCleanup","lastEvent","numReceivers","afterEvent","dest","reported","undefined","_reason","isAfterEvent","isOnEvent","afterAll","sources","keys","Object","result","key","afterEach","source","index","afterSent","sender","afterSupplied","afterThe","valueProvider","consumeEvents","consume","consumerSupply","shareAfter","digAfter","processor","digAfter_","extractKeeper","events","EventEmitter","onNever","onSupplied","onAny","suppliers","remained","removeSupplier","onPromise","promise","alwaysReceiveValue","catch","shareOn","digOn_","extractSender","translateOn","mapper","translateOn_","filterOn_","test","mapAfter","convert","mapAfter_","mapOn","mapOn_","onceAfter","onceOn","supplyOn","isAlwaysSupply","asis","resolveOnOrdered","from","sourceSupply","numInProcess","numSent","numReceived","lastIndex","resolveOn","i","toSend","splice","supplyAfter","translateAfter","translateAfter_","valueOn","valueOf","valueOn_","statePath","path","Array","isArray","PathEntry","_drop","Map","emitter","newValue","oldValue","nested","_nested","get","slice","_dropIfEmpty","dontCreateMissing","found","created","_remove","set","values","done","Trackers","_entry","_root","entry","nest","SubStateTracker","_trackers","_path","update","_tracker","onUpdate","StateTracker","subTracker","track","ValueTracker","valueReceiver","onRecurrent","recurrentValue","it","read","acceptValuesFrom","byNone","container","_by","TrackedValue","_it","trackValue","initial","trackValueBy","by"],"mappings":"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"}