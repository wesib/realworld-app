{"version":3,"file":"supply.9762ee6d.js","sources":["../../../../../proc7ts/supply/src/impl/unexpected-abort.ts","../../../../../proc7ts/supply/src/impl/off.ts","../../../../../proc7ts/supply/src/impl/state.ts","../../../../../proc7ts/supply/src/supply.ts","../../../../../proc7ts/supply/src/always-supply.ts","../../../../../proc7ts/supply/src/never-supply.ts"],"sourcesContent":["/**\n * @internal\n */\nexport let Supply$unexpectedAbort: (reason: unknown) => void = Supply$unexpectedAbort$byDefault;\n\n/**\n * @internal\n */\nexport function Supply$unexpectedAbort$handle(handler = Supply$unexpectedAbort$byDefault): void {\n  Supply$unexpectedAbort = handler;\n}\n\nfunction Supply$unexpectedAbort$byDefault(reason: unknown): void {\n  console.error('Supply aborted unexpectedly.', reason);\n}\n","import { Supply$unexpectedAbort } from './unexpected-abort';\n\nlet Supply$off = false;\nlet Supply$off$unexpected$reasons: Set<unknown> | undefined;\n\n/**\n * @internal\n */\nexport function Supply$off$start(): boolean {\n\n  const prevOff = Supply$off;\n\n  Supply$off = true;\n\n  return prevOff;\n}\n\n/**\n * @internal\n */\nexport function Supply$off$unexpected(reason: unknown): void {\n  if (reason !== undefined) {\n    if (!Supply$off$unexpected$reasons) {\n      Supply$off$unexpected$reasons = new Set<unknown>();\n    }\n    Supply$off$unexpected$reasons.add(reason);\n  }\n}\n\n/**\n * @internal\n */\nexport function Supply$off$end(prevOff: boolean): void {\n  Supply$off = prevOff;\n  if (!prevOff) {\n\n    const reasons = Supply$off$unexpected$reasons;\n\n    if (reasons) {\n      Supply$off$unexpected$reasons = undefined;\n      for (const reason of reasons) {\n        Supply$unexpectedAbort(reason);\n      }\n    }\n  }\n}\n","import type { Supply } from '../supply';\nimport { Supply$off$end, Supply$off$start, Supply$off$unexpected } from './off';\n\n/**\n * @internal\n */\nexport const SupplyState__symbol = (/*#__PURE__*/ Symbol('SupplyState'));\n\n/**\n * @internal\n */\nexport interface SupplyState {\n\n  readonly isOff: boolean;\n\n  off(supply: Supply, reason?: unknown): void;\n\n  whenOff(supply: Supply, callback: (reason?: unknown) => void): void;\n\n}\n\nconst SupplyState$done: SupplyState = {\n  isOff: true,\n  off: SupplyState$done$off,\n  whenOff(_supply: Supply, callback: (reason?: unknown) => void) {\n    callback();\n  },\n};\n\nfunction SupplyState$off(reason: unknown): SupplyState {\n  if (reason === undefined) {\n    return SupplyState$done;\n  }\n\n  return {\n    isOff: true,\n    off: SupplyState$done$off,\n    whenOff(_supply: Supply, callback: (reason?: unknown) => void) {\n      callback(reason);\n    },\n  };\n}\n\nfunction SupplyState$done$off(_supply: Supply, _reason?: unknown): void {\n  /* no off */\n}\n\n/**\n * @internal\n */\nexport const SupplyState$noCallback: SupplyState = {\n  isOff: false,\n  off(supply: Supply, reason?: unknown): void {\n\n    const prevOff = Supply$off$start();\n\n    try {\n      supply[SupplyState__symbol] = SupplyState$off(reason);\n      Supply$off$unexpected(reason);\n    } finally {\n      Supply$off$end(prevOff);\n    }\n  },\n  whenOff(supply: Supply, callback: (reason?: unknown) => void): void {\n    supply[SupplyState__symbol] = SupplyState$withCallback(callback);\n  },\n};\n\n/**\n * @internal\n */\nexport function SupplyState$withCallback(off: (this: void, reason?: unknown) => void): SupplyState {\n  return {\n    isOff: false,\n    off(supply: Supply, reason?: unknown): void {\n\n      const prevOff = Supply$off$start();\n\n      try {\n        supply[SupplyState__symbol] = SupplyState$off(reason);\n        off(reason);\n      } finally {\n        Supply$off$end(prevOff);\n      }\n    },\n    whenOff(_supply: Supply, callback: (reason?: unknown) => void): void {\n\n      const prev = off;\n\n      off = reason => {\n        prev(reason);\n        callback(reason);\n      };\n    },\n  };\n}\n","import type { SupplyState } from './impl';\nimport {\n  Supply$unexpectedAbort$handle,\n  SupplyState$noCallback,\n  SupplyState$withCallback,\n  SupplyState__symbol,\n} from './impl';\nimport type { SupplyPeer } from './supply-peer';\n\n/**\n * Supply handle.\n *\n * Represents a supply of something.\n *\n * The supply can be {@link off cut off}, and can {@link whenOff inform} on cutting off.\n */\nexport class Supply implements SupplyPeer {\n\n  /**\n   * Assigns unexpected abort handler.\n   *\n   * When a supply {@link off aborted}, and there is no {@link whenOff cut off callback} registered, the given handler\n   * will be called with the abort reason.\n   *\n   * By default, the unexpected abort reason will be logged to console.\n   *\n   * @param handler - A handler to call on unexpected abort, or `undefined` to reset to default one.\n   */\n  static onUnexpectedAbort(handler?: (this: void, reason: unknown) => void): void {\n    Supply$unexpectedAbort$handle(handler);\n  }\n\n  /**\n   * @internal\n   */\n  [SupplyState__symbol]: SupplyState;\n\n  /**\n   * Constructs new supply instance.\n   *\n   * @param off - A function to call when the supply is {@link Supply.off cut off}. Accepts optional cut off reason\n   * as its only parameter. No-op by default.\n   */\n  constructor(off?: (this: void, reason?: unknown) => void) {\n    this[SupplyState__symbol] = off ? SupplyState$withCallback(off) : SupplyState$noCallback;\n  }\n\n  /**\n   * `this` supply instance.\n   */\n  get supply(): this {\n    return this;\n  }\n\n  /**\n   * Whether this supply is {@link off cut off} already.\n   *\n   * `true` means nothing would be supplied any more.\n   */\n  get isOff(): boolean {\n    return this[SupplyState__symbol].isOff;\n  }\n\n  /**\n   * Cuts off this supply.\n   *\n   * After this method call nothing would be supplied any more.\n   *\n   * Calling this method for the second time has no effect.\n   *\n   * @param reason - An optional reason why the supply is cut off. It will be reported to {@link whenOff} callbacks.\n   * By convenience, an absent reason means the supply is done successfully.\n   *\n   * @returns The cut off supply instance.\n   */\n  off(reason?: unknown): Supply {\n    this[SupplyState__symbol].off(this, reason);\n    return this;\n  }\n\n  /**\n   * Registers a callback function that will be called as soon as this supply is {@link off cut off}. This callback\n   * will be called immediately if {@link isOff} is `true`.\n   *\n   * @param callback - A callback function accepting optional cut off reason as its only parameter.\n   * By convenience an `undefined` reason means the supply is done successfully.\n   *\n   * @returns `this` instance.\n   */\n  whenOff(callback: (this: void, reason?: unknown) => void): this {\n    this[SupplyState__symbol].whenOff(this, callback);\n    return this;\n  }\n\n  /**\n   * Builds a promise that will be resolved once this supply is {@link off done}.\n   *\n   * @returns A promise that will be successfully resolved once this supply is cut off without a reason, or rejected\n   * once this supply is cut off with any reason except `undefined`.\n   */\n  whenDone(): Promise<void> {\n    return new Promise((resolve, reject) => this.whenOff(\n        reason => reason === undefined ? resolve() : reject(reason),\n    ));\n  }\n\n  /**\n   * Makes another supply depend on this one.\n   *\n   * Once this supply is {@link off cut off}, `another` one will be cut off with the same reason.\n   *\n   * Calling this method has the same effect as calling `another.supply.needs(this)`.\n   *\n   * @param another - A supply peer to make dependent on this one.\n   *\n   * @returns `this` instance.\n   */\n  cuts(another: SupplyPeer): this {\n    another.supply.needs(this);\n    return this;\n  }\n\n  /**\n   * Makes this supply depend on another one.\n   *\n   * Once `another` supply is {@link off cut off}, this one will be cut off with the same reason.\n   *\n   * @param another - A supply peer to make this one depend on.\n   *\n   * @returns `this` instance.\n   */\n  needs(another: SupplyPeer): this {\n    another.supply.whenOff(reason => this.off(reason));\n    return this;\n  }\n\n  /**\n   * Makes this and another supply depend on each other.\n   *\n   * Calling this method is the same as calling `.needs(another).cuts(another)`.\n   *\n   * @param another - A supply peer to make this one to mutually depend on.\n   *\n   * @returns `this` instance.\n   */\n  as(another: SupplyPeer): this {\n    return this.needs(another).cuts(another);\n  }\n\n}\n","import { Supply } from './supply';\nimport type { SupplyPeer } from './supply-peer';\n\n/**\n * @internal\n */\nclass AlwaysSupply extends Supply {\n\n  get isOff(): false {\n    return false;\n  }\n\n  off(_reason?: unknown): Supply {\n    return this;\n  }\n\n  whenOff(_callback: (this: void, reason?: unknown) => void): this {\n    return this;\n  }\n\n  cuts(_another: SupplyPeer): this {\n    return this;\n  }\n\n  needs(_another: SupplyPeer): this {\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nconst alwaysSupply$ = (/*#__PURE__*/ new AlwaysSupply());\n\n/**\n * Builds an always-supply instance.\n *\n * The {@link Supply.off} method of the returned supply does nothing.\n *\n * @returns A supply instance that can not be cut off.\n */\nexport function alwaysSupply(): Supply {\n  return alwaysSupply$;\n}\n\n/**\n * Checks whether the given supply is an {@link AlwaysSupply | always-supply} instance.\n *\n * @param supply - A supply to check.\n *\n * @returns `true` is the given `supply` can not be cut off, or `false` otherwise.\n */\nexport function isAlwaysSupply(supply: Supply): boolean {\n  return supply === alwaysSupply$;\n}\n","import { Supply } from './supply';\nimport type { SupplyPeer } from './supply-peer';\n\n/**\n * @internal\n */\nclass NeverSupply extends Supply {\n\n  get isOff(): true {\n    return true;\n  }\n\n  off(): this {\n    return this;\n  }\n\n  whenOff(callback: (reason?: any) => void): this {\n    callback();\n    return this;\n  }\n\n  cuts(another: SupplyPeer): this {\n    another.supply.off();\n    return this;\n  }\n\n  needs(_another: SupplyPeer): this {\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nconst neverSupply$ = (/*#__PURE__*/ new NeverSupply());\n\n/**\n * Builds a never-supply instance.\n *\n * @returns A supply instance that is already cut off without any particular reason.\n */\nexport function neverSupply(): Supply {\n  return neverSupply$;\n}\n"],"names":["Supply$unexpectedAbort","Supply$unexpectedAbort$byDefault","reason","console","error","Supply$off$unexpected$reasons","Supply$off","Supply$off$start","prevOff","Supply$off$end","reasons","undefined","SupplyState__symbol","Symbol","SupplyState$done","isOff","off","SupplyState$done$off","[object Object]","_supply","callback","SupplyState$off","_reason","SupplyState$noCallback","supply","Set","add","Supply$off$unexpected","SupplyState$withCallback","prev","Supply","this","handler","Supply$unexpectedAbort$handle","whenOff","Promise","resolve","reject","another","needs","cuts","AlwaysSupply","_callback","_another","alwaysSupply$","alwaysSupply","isAlwaysSupply","NeverSupply","neverSupply$","neverSupply"],"mappings":"AAGO,IAAIA,EAAoDC,EAS/D,SAASA,EAAiCC,GACxCC,QAAQC,MAAM,+BAAgCF,GCXhD,IACIG,EADAC,GAAa,WAMDC,IAEd,MAAMC,EAAUF,EAIhB,OAFAA,GAAa,EAENE,WAkBOC,EAAeD,GAE7B,GADAF,EAAaE,GACRA,EAAS,CAEZ,MAAME,EAAUL,EAEhB,GAAIK,EAAS,CACXL,OAAgCM,EAChC,IAAK,MAAMT,KAAUQ,EACnBV,EAAuBE,KCnCxB,MAAMU,EAAqCC,OAAO,eAenDC,EAAgC,CACpCC,OAAO,EACPC,IAAKC,EACLC,QAAQC,EAAiBC,GACvBA,MAIJ,SAASC,EAAgBnB,GACvB,YAAeS,IAAXT,EACKY,EAGF,CACLC,OAAO,EACPC,IAAKC,EACLC,QAAQC,EAAiBC,GACvBA,EAASlB,KAKf,SAASe,EAAqBE,EAAiBG,IAOxC,MAAMC,EAAsC,CACjDR,OAAO,EACPG,IAAIM,EAAgBtB,GAElB,MAAMM,EAAUD,IAEhB,IACEiB,EAAOZ,GAAuBS,EAAgBnB,YDrCdA,QACrBS,IAAXT,IACGG,IACHA,EAAgC,IAAIoB,KAEtCpB,EAA8BqB,IAAIxB,ICiChCyB,CAAsBzB,WAEtBO,EAAeD,KAGnBU,QAAQM,EAAgBJ,GACtBI,EAAOZ,GAAuBgB,EAAyBR,cAO3CQ,EAAyBZ,GACvC,MAAO,CACLD,OAAO,EACPG,IAAIM,EAAgBtB,GAElB,MAAMM,EAAUD,IAEhB,IACEiB,EAAOZ,GAAuBS,EAAgBnB,GAC9Cc,EAAId,WAEJO,EAAeD,KAGnBU,QAAQC,EAAiBC,GAEvB,MAAMS,EAAOb,EAEbA,EAAMd,IACJ2B,EAAK3B,GACLkB,EAASlB,YC3EJ4B,EA2BXZ,YAAYF,GACVe,KAAKnB,GAAuBI,EAAMY,EAAyBZ,GAAOO,EAhBpEL,yBAAyBc,aHpBmBA,EAAU/B,GACtDD,EAAyBgC,EGoBvBC,CAA8BD,GAqBhCR,aACE,OAAOO,KAQThB,YACE,OAAOgB,KAAKnB,GAAqBG,MAenCG,IAAIhB,GAEF,OADA6B,KAAKnB,GAAqBI,IAAIe,KAAM7B,GAC7B6B,KAYTb,QAAQE,GAEN,OADAW,KAAKnB,GAAqBsB,QAAQH,KAAMX,GACjCW,KASTb,WACE,OAAO,IAAIiB,SAAQ,CAACC,EAASC,IAAWN,KAAKG,SACzChC,QAAqBS,IAAXT,EAAuBkC,IAAYC,EAAOnC,OAe1DgB,KAAKoB,GAEH,OADAA,EAAQd,OAAOe,MAAMR,MACdA,KAYTb,MAAMoB,GAEJ,OADAA,EAAQd,OAAOU,SAAQhC,GAAU6B,KAAKf,IAAId,KACnC6B,KAYTb,GAAGoB,GACD,OAAOP,KAAKQ,MAAMD,GAASE,KAAKF,IC5IpC,MAAMG,UAAqBX,EAEzBf,YACE,OAAO,EAGTG,IAAII,GACF,OAAOS,KAGTb,QAAQwB,GACN,OAAOX,KAGTb,KAAKyB,GACH,OAAOZ,KAGTb,MAAMyB,GACJ,OAAOZ,MAQX,MAAMa,MAAmCH,WASzBI,IACd,OAAOD,WAUOE,EAAetB,GAC7B,OAAOA,IAAWoB,EChDpB,MAAMG,UAAoBjB,EAExBf,YACE,OAAO,EAGTG,MACE,OAAOa,KAGTb,QAAQE,GAEN,OADAA,IACOW,KAGTb,KAAKoB,GAEH,OADAA,EAAQd,OAAOR,MACRe,KAGTb,MAAMyB,GACJ,OAAOZ,MAQX,MAAMiB,MAAkCD,WAOxBE,IACd,OAAOD"}