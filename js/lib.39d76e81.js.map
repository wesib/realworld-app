{"version":3,"file":"lib.39d76e81.js","sources":["../../node_modules/call-thru/src/next-call.ts","../../node_modules/call-thru/src/passed-thru.ts","../../node_modules/call-thru/src/call-thru.ts","../../node_modules/call-thru/src/misc/asis.ts","../../node_modules/call-thru/src/misc/noop.ts","../../node_modules/call-thru/src/misc/presence.ts","../../node_modules/call-thru/src/misc/value-providers.ts","../../node_modules/call-thru/src/passes/args.ts","../../node_modules/call-thru/src/passes/each.ts","../../node_modules/call-thru/src/passes/iteration.ts","../../node_modules/call-thru/src/passes/skip.ts","../../node_modules/a-iterable/src/api.ts","../../node_modules/a-iterable/src/revertible-iterable.ts","../../node_modules/a-iterable/src/util.ts","../../node_modules/a-iterable/src/reverse.ts","../../node_modules/a-iterable/src/termination.ts","../../node_modules/a-iterable/src/thru.ts","../../node_modules/a-iterable/src/transform.ts","../../node_modules/a-iterable/src/a-iterable.ts","../../node_modules/a-iterable/src/construction.ts","../../node_modules/a-iterable/src/objects.ts","../../node_modules/fun-events/src/event-keeper.ts","../../node_modules/fun-events/src/event-supply.ts","../../node_modules/fun-events/src/event-receiver.ts","../../node_modules/fun-events/src/event-sender.ts","../../node_modules/fun-events/src/impl/once.ts","../../node_modules/fun-events/src/event-notifier.ts","../../node_modules/fun-events/src/impl/share.ts","../../node_modules/fun-events/src/impl/till-off.ts","../../node_modules/fun-events/src/on-event.ts","../../node_modules/fun-events/src/after-event.ts","../../node_modules/fun-events/src/event-emitter.ts","../../node_modules/fun-events/src/keepers/after-all.ts","../../node_modules/fun-events/src/keepers/after-each.ts","../../node_modules/fun-events/src/senders/on-any.ts","../../node_modules/fun-events/src/state/state-path.ts","../../node_modules/fun-events/src/state/state-tracker.ts","../../node_modules/fun-events/src/value/value-tracker.ts","../../node_modules/fun-events/src/value/track-value.ts","../../node_modules/context-values/src/context-key.ts","../../node_modules/context-values/src/context-key-error.ts","../../node_modules/context-values/src/context-value-spec.ts","../../node_modules/context-values/src/context-values.ts","../../node_modules/context-values/src/context-registry.ts","../../node_modules/context-values/src/context-up-key.ts","../../node_modules/context-values/src/fn-context-key.ts","../../node_modules/context-values/src/simple-context-key.ts","../../node_modules/namespace-aliaser/src/naming.ts","../../node_modules/namespace-aliaser/src/namings.ts","../../node_modules/namespace-aliaser/src/namespace.ts","../../node_modules/namespace-aliaser/src/name.ts","../../node_modules/namespace-aliaser/src/namespace-aliaser.ts","../../node_modules/render-scheduler/src/render-schedule.ts","../../node_modules/render-scheduler/src/custom-render-scheduler.ts","../../node_modules/render-scheduler/src/animation-render-scheduler.ts","../../node_modules/render-scheduler/src/render-scheduler.ts","../../node_modules/fun-events/src/dom/on-dom-event.ts","../../node_modules/fun-events/src/dom/dom-event-dispatcher.ts","../../node_modules/http-header-value/src/hthv-partial.impl.ts","../../node_modules/http-header-value/src/parser/add-param.ts","../../node_modules/http-header-value/src/parser/next-in-item.ts","../../node_modules/http-header-value/src/parser/parse-date-time.ts","../../node_modules/http-header-value/src/parser/parse-none.ts","../../node_modules/http-header-value/src/parser/item-parser.ts","../../node_modules/http-header-value/src/parser/quoted-string-parser.ts","../../node_modules/http-header-value/src/parser/angle-brackets-parser.ts","../../node_modules/http-header-value/src/parser/next-in-comment.ts","../../node_modules/http-header-value/src/parser/spaces-parser.ts","../../node_modules/http-header-value/src/parser/param-parser.ts","../../node_modules/http-header-value/src/parser/parser-config.ts","../../node_modules/http-header-value/src/hthv-parser.ts","../../node_modules/http-header-value/src/parser/item-delimit-parser.ts","../../node_modules/http-header-value/src/parser/comment-parser.ts","../../node_modules/http-header-value/src/hthv-parse.ts","../../node_modules/http-header-value/src/hthv-quote.ts","../../node_modules/delta-set/src/delta-set.ts","../../node_modules/input-aspects/src/aspect.ts","../../node_modules/input-aspects/src/aspect.impl.ts","../../node_modules/input-aspects/src/converter.ts","../../node_modules/input-aspects/src/control.ts","../../node_modules/input-aspects/src/container/container.control.ts","../../node_modules/input-aspects/src/container/parents.aspect.ts","../../node_modules/input-aspects/src/element.control.ts","../../node_modules/input-aspects/src/data/mode.aspect.ts","../../node_modules/input-aspects/src/data/data.aspect.ts","../../node_modules/input-aspects/src/container/group.control.ts","../../node_modules/input-aspects/src/validation/require-nothing.validator.ts","../../node_modules/input-aspects/src/validation/validator.ts","../../node_modules/input-aspects/src/validation/validator.impl.ts","../../node_modules/input-aspects/src/validation/validation.aspect.ts","../../node_modules/input-aspects/src/validation/require-all.validator.ts","../../node_modules/input-aspects/src/validation/require-present.validator.ts","../../node_modules/input-aspects/src/element/element.impl.ts","../../node_modules/input-aspects/src/element/text.control.ts","../../node_modules/input-aspects/src/focus/focus.aspect.ts","../../node_modules/input-aspects/src/focus/status.aspect.ts","../../node_modules/input-aspects/src/namespace-aliaser.aspect.ts","../../node_modules/input-aspects/src/render-scheduler.aspect.ts","../../node_modules/input-aspects/src/style/styled-element.aspect.ts","../../node_modules/input-aspects/src/style/css-classes.aspect.ts","../../node_modules/input-aspects/src/style/css-error.ts","../../node_modules/input-aspects/src/style/css-info.ts"],"sourcesContent":["/**\n * @module call-thru\n */\nimport { CallOutcome } from './call-outcome';\n\n/**\n * A key of a [[NextCall]] method responsible for calling the next function in chain.\n */\nexport const NextCall__symbol = /*#__PURE__*/ Symbol('next-call');\n\n/**\n * A key of a [[NextCall]] method responsible for returning the outcome of the las pass in chain.\n */\nexport const NextCall_lastOutcome__symbol = /*#__PURE__*/ Symbol('next-call:last-outcome');\n\n/**\n * A call of the next function in chain.\n *\n * This is basically a function with additional method, which is treated specially by call chaining functions.\n * When previous function in chain returns a [[NextCall]] instance, it will be used to call the next function in chain.\n * Otherwise the next function will be called with single argument containing a value returned.\n *\n * A [[NextCall]] is a function returning itself. So it can be chained like any other function.\n *\n * A [[nextCall]] function can be used to construct a next call.\n *\n * @typeparam OutKind  A kind of the call outcome.\n * @typeparam NextThis  A type of `this` context object reference of the next function.\n * @typeparam NextArgs  A type of argument tuple of the next function.\n * @typeparam NextReturn  A return type of the next function.\n * @typeparam Out  A type of the next function call outcome.\n * @typeparam Last  A type of the outcome of the next call returned from the last pass in chain.\n */\nexport abstract class NextCall<\n    OutKind extends CallOutcome.Kind,\n    NextArgs extends any[],\n    NextReturn,\n    Out = NextReturn,\n    Last = CallOutcome.OfKind<OutKind, NextArgs[0], Out>> extends Function {\n\n  /**\n   * Checks whether the `target` value is a next function call.\n   *\n   * @param target  A value to check.\n   *\n   * @returns `true`.\n   */\n  static is<V extends NextCall.Any>(target: V): target is V;\n\n  /**\n   * Checks whether the `target` value is a next function call.\n   *\n   * @param target  A value to check.\n   *\n   * @returns `true` if the `target` value is a function with a `[NextCall.mark]` property, or `false` otherwise.\n   */\n  static is(target: any): target is NextCall.Any;\n\n  static is(target: any): target is NextCall.Any {\n    return typeof target === 'function' && NextCall__symbol in target;\n  }\n\n  /**\n   * Converts a value returned from previous chained function call to the call of the next function in chain.\n   *\n   * @param nextCall  A next function call to return.\n   *\n   * @returns A `nextCall` itself.\n   */\n  static of<V extends NextCall.Any>(nextCall: V): V;\n\n  /**\n   * Converts a value returned from previous chained function call to the call of the next function in chain.\n   *\n   * @param value  A value to convert.\n   *\n   * @returns Either a `value` itself if it is a next function call, or a new next function call instance that passes\n   * a `value` as the only argument to the callee.\n   */\n  static of<V, Out>(value: V): NextCall<'default', [V], Out, Out, Out>;\n\n  static of<V, NextReturn>(value: V): NextCall<any, NextCall.Callee.Args<V>, NextReturn> {\n    if (NextCall.is(value)) {\n      return value;\n    }\n    return nextCall((callee: any) => callee(value));\n  }\n\n  /**\n   * Calls the next function in chain.\n   *\n   * This is invoked only when there _is_ a next function. When next call is returned by the last pass a\n   * `[NextCall_lastOutcome__symbol]()` is invoked instead.\n   *\n   * @param callee  A function to call.\n   *\n   * @returns A call outcome.\n   */\n  abstract [NextCall__symbol](callee: (this: void, ...args: NextArgs) => NextReturn): Out;\n\n  /**\n   * Builds an outcome of the last pass in chain.\n   *\n   * This is invoked for the last pass in chain only. If there is the next pass, a `[NextCall__symbol]()` is invoked\n   * instead.\n   */\n  abstract [NextCall_lastOutcome__symbol](): Last;\n\n}\n\nexport interface NextCall<\n    OutKind extends CallOutcome.Kind,\n    NextArgs extends any[],\n    NextReturn,\n    Out = NextReturn,\n    Last = CallOutcome.OfKind<OutKind, NextArgs[0], Out>> {\n\n  /**\n   * Returns itself to add it to functions chain.\n   */\n  (): NextCall<OutKind, NextArgs, NextReturn, Out, Last>; // tslint:disable-line:callable-types\n\n}\n\nexport namespace NextCall {\n\n  /**\n   * Any call of the next function.\n   */\n  export type Any = NextCall<any, any, any, any, any>;\n\n  export namespace Callee {\n\n    /**\n     * Arguments tuple type of a callee. Either extracted from [[NextCall]], or consisting of single argument of type\n     * `V`.\n     */\n    export type Args<V> = V extends NextCall<any, infer NextArgs, any, any, any> ? NextArgs : [V];\n\n    /**\n     * A return type of a callee. Either extracted from [[NextCall]], or `V` itself.\n     */\n    export type Return<V> = V extends NextCall<any, any, infer NextReturn, any, any> ? NextReturn : V;\n\n  }\n\n  /**\n   * A type of next call outcome. Either extracted from [[NextCall]], or `Return`.\n   */\n  export type Outcome<V, Return> = V extends NextCall<infer OutKind, any, any, infer Out, any>\n      ? CallOutcome.OfKind<OutKind, Return, Out>\n      : Return;\n\n  /**\n   * A type of last call outcome. Either extracted from the last call, or the value itself.\n   */\n  export type LastOutcome<V> = V extends NextCall<any, any, any, any, infer Last> ? Last : V;\n\n  /**\n   * A type of the result returned from chained function call, except for the last one.\n   *\n   * This may be either a [[NextCall]] instance, or single value.\n   *\n   * In any case the result provides arguments for the next pass in chain and thus should be compatible with next\n   * function signature.\n   *\n   * @typeparam NextArgs  A type of argument tuple of the next function in chain.\n   */\n  export type CallResult<NextArgs extends any[]> =\n      NextArgs extends [infer Result]\n          // Next function expects single argument.\n          // So the previous one may return either a single value, or a [[NextCall]] with compatible argument.\n          ? (Result | NextCall<any, NextArgs, any, any, any>)\n          // Next function expects multiple arguments.\n          // So the previous one should always return a [[NextCall]] instance with compatible arguments.\n          : NextCall<any, NextArgs, any, any, any>;\n\n  /**\n   * A result returned by last function in chain.\n   *\n   * This may be either a [[NextCall]] instance, or single value.\n   *\n   * @typeparam Last  A type of outcome of the last pass in chain.\n   */\n  export type LastResult<Last> =\n      Last | NextCall<any, any, any, any, Last>;\n\n}\n\nconst firstArg: (...args: any[]) => any = (arg: any) => arg;\n\n/**\n * Constructs a call to the next function.\n *\n * @param callNext  A next function caller function.\n * @param lastOutcome  A function building an outcome of the last pass in chain.\n *\n * @returns A next function call performed by the given `callNext` function.\n */\nexport function nextCall<OutKind extends CallOutcome.Kind, NextArgs extends any[], NextReturn, Out, Last>(\n    callNext: (this: void, callee: (this: void, ...args: NextArgs) => NextReturn) => Out,\n    lastOutcome: (this: void) => Last):\n    NextCall<OutKind, NextArgs, NextReturn, Out, Last>;\n\n/**\n * Constructs a call to the next function with default last pass outcome implementation.\n *\n * The last pass outcome is detected by passing to `callNext` a function that just returns its first argument.\n *\n * @param callNext  A next function caller function.\n *\n * @returns A next function call performed by the given `callNext` function.\n */\nexport function nextCall<OutKind extends CallOutcome.Kind, NextArgs extends any[], NextReturn, Out>(\n    callNext: (this: void, callee: (this: void, ...args: NextArgs) => NextReturn) => Out):\n    NextCall<OutKind, NextArgs, NextReturn, Out>;\n\nexport function nextCall<OutKind extends CallOutcome.Kind, NextArgs extends any[], NextReturn, Out, Last>(\n    callNext: (this: void, callee: (this: void, ...args: NextArgs) => NextReturn) => Out,\n    lastOutcome: (this: void) => Last = () => callNext(firstArg) as any):\n    NextCall<OutKind, NextArgs, NextReturn, Out, Last> {\n\n  const result = (() => result) as NextCall<OutKind, NextArgs, NextReturn, Out, Last>;\n\n  result[NextCall__symbol] = callee => callNext(callee);\n  result[NextCall_lastOutcome__symbol] = lastOutcome;\n\n  return result;\n}\n","/**\n * @module call-thru\n */\n/**\n * A key of a [[PassedThru]] property containing the actual outcome value.\n */\nexport const PassedThru__symbol = /*#__PURE__*/ Symbol('passed-thru');\n\n/**\n * An chained pass outcome value wrapping the actual outcome.\n *\n * When the outcome of the last chained pass is a [[PassedThru]] instance, it is be replaced with the value of its\n * [[PassedThru__symbol]] property.\n *\n * Also extends an `Iterable` interface, so that e.g. [[nextEach]] and [[nextFlatEach]] unwrap the passed through value\n * to convert it to arbitrary number of elements. Including zero, which is the case when `nextSkip()` is returned.\n */\nexport abstract class PassedThru<V, I = V> implements Iterable<I> {\n\n  /**\n   * The actual passed thru value.\n   */\n  abstract readonly [PassedThru__symbol]: V;\n\n  /**\n   * Checks whether `target` value is a [[PassedThru]] instance.\n   *\n   * @param target  A value to check.\n   *\n   * @returns `true`.\n   */\n  static is<V extends PassedThru<any, any>>(target: V): target is V;\n\n  /**\n   * Checks whether `target` value is a [[PassedThru]] instance.\n   *\n   * @param target  A value to check.\n   *\n   * @returns `true` if the `target` value is an object with a [[PassedThru__symbol]] property, or `false` otherwise.\n   */\n  static is<V>(target: any): target is PassedThru<V, any>;\n\n  static is(target: any): target is PassedThru<any, any> {\n    return typeof target === 'object' && PassedThru__symbol in target;\n  }\n\n  /**\n   * Extracts the passed through value.\n   *\n   * @param outcome  The outcome to extract the value from.\n   *\n   * @returns A [[PassedThru__symbol]] property value is the given `outcome` is a [[PassedThru]] instance, or `outcome`\n   * itself otherwise.\n   */\n  static get<V>(outcome: V): PassedThru.Value<V> {\n    if (PassedThru.is<V>(outcome)) {\n      return outcome[PassedThru__symbol] as PassedThru.Value<V>;\n    }\n    return outcome as PassedThru.Value<V>;\n  }\n\n  /**\n   * Extracts the passed through items.\n   *\n   * @param outcome  The outcome to extract the items from.\n   *\n   * @return An iterable of passed through items if the the given `outcome` is a [[PassedThru]] instance, or an iterable\n   * containing the `outcome` itself otherwise.\n   */\n  static items<V>(outcome: V): Iterable<PassedThru.Item<V>> {\n    if (PassedThru.is<V>(outcome)) {\n      return outcome;\n    }\n    return {\n      * [Symbol.iterator]() {\n        yield outcome as PassedThru.Item<V>;\n      },\n    };\n  }\n\n  abstract [Symbol.iterator](): Iterator<I>;\n\n}\n\nexport namespace PassedThru {\n\n  /**\n   * A type of the passed though value.\n   */\n  export type Value<V> = V extends PassedThru<infer T, any> ? T : V;\n\n  /**\n   * A type of the passed though item.\n   */\n  export type Item<V> = V extends PassedThru<any, infer I> ? I : V;\n\n}\n","/**\n * @module call-thru\n */\nimport { NextCall, NextCall__symbol, NextCall_lastOutcome__symbol } from './next-call';\nimport { PassedThru } from './passed-thru';\nimport Last = NextCall.LastResult;\nimport Out = NextCall.Outcome;\nimport Result = NextCall.CallResult;\n\n/**\n * Constructs a function that invokes the chained passes.\n *\n * Each pass is function accepts argument(s) passed from the previous one.\n *\n * The value returned from the pass is treated the following way:\n *\n * - When a [[NextCall]] is returned, this instance is used to perform the next function call.\n * - When plain value returned, this value is passed to the next function as the only argument.\n * - When a [[NextCall]] is returned by the last pass, it is used to construct the outcome.\n * - When a plain value is returned by the last pass, it is used as outcome.\n *\n * A [[NextCall]] instance returned the pass is responsible for next function call and may modify the call outcome.\n */\nexport function callThru<P extends any[], R>(\n    fn: (this: void, ...args: P) => Last<R>,\n): (this: void, ...args: P) =>\n    PassedThru.Value<R>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => Last<R2>,\n): (this: void, ...args: P1) =>\n    PassedThru.Value<Out<R1, R2>>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => Last<R3>,\n): (this: void, ...args: P1) =>\n    PassedThru.Value<Out<R1, Out<R2, R3>>>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => Last<R4>,\n): (this: void, ...args: P1) =>\n    PassedThru.Value<Out<R1, Out<R2, Out<R3, R4>>>>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => Last<R5>,\n): (this: void, ...args: P1) =>\n    PassedThru.Value<Out<R1, Out<R2, Out<R3, Out<R4, R5>>>>>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P6) => Last<R6>,\n): (this: void, ...args: P1) =>\n    PassedThru.Value<Out<R1, Out<R2, Out<R3, Out<R4,\n        Out<R5, R6>>>>>>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P7) => R6,\n    fn7: (this: void, ...args: P7) => Last<R7>,\n): (this: void, ...args: P1) =>\n    PassedThru.Value<Out<R1, Out<R2, Out<R3, Out<R4,\n        Out<R5, Out<R6, R7>>>>>>>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P7) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => Last<R8>,\n): (this: void, ...args: P1) =>\n    PassedThru.Value<Out<R1, Out<R2, Out<R3, Out<R4,\n        Out<R5, Out<R6, Out<R7, R8>>>>>>>>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8 extends Result<P9>,\n    P9 extends any[], R9>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P7) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => R8,\n    fn9: (this: void, ...args: P9) => Last<R9>,\n): (this: void, ...args: P1) =>\n    PassedThru.Value<Out<R1, Out<R2, Out<R3, Out<R4,\n        Out<R5, Out<R6, Out<R7, Out<R8, R9>>>>>>>>>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8 extends Result<P9>,\n    P9 extends any[], R9 extends Result<P10>,\n    P10 extends any[], R10>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P7) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => R8,\n    fn9: (this: void, ...args: P9) => R9,\n    fn10: (this: void, ...args: P10) => Last<R10>):\n    (this: void, ...args: P1) => PassedThru.Value<Out<R1, Out<R2, Out<R3, Out<R4,\n        Out<R5, Out<R6, Out<R7, Out<R8, Out<R9, R10>>>>>>>>>>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8 extends Result<P9>,\n    P9 extends any[], R9 extends Result<P10>,\n    P10 extends any[], R10 extends Result<P11>,\n    P11 extends any[], R11>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P7) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => R8,\n    fn9: (this: void, ...args: P9) => R9,\n    fn10: (this: void, ...args: P10) => R10,\n    fn11: (this: void, ...args: P11) => Last<R11>,\n): (this: void, ...args: P1) =>\n    PassedThru.Value<Out<R1, Out<R2, Out<R3, Out<R4,\n        Out<R5, Out<R6, Out<R7, Out<R8, Out<R9,\n            Out<R10, R11>>>>>>>>>>>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8 extends Result<P9>,\n    P9 extends any[], R9 extends Result<P10>,\n    P10 extends any[], R10 extends Result<P11>,\n    P11 extends any[], R11 extends Result<P12>,\n    P12 extends any[], R12>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P7) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => R8,\n    fn9: (this: void, ...args: P9) => R9,\n    fn10: (this: void, ...args: P10) => R10,\n    fn11: (this: void, ...args: P11) => R11,\n    fn12: (this: void, ...args: P12) => Last<R12>,\n): (this: void, ...args: P1) =>\n    PassedThru.Value<Out<R1, Out<R2, Out<R3, Out<R4,\n        Out<R5, Out<R6, Out<R7, Out<R8, Out<R9,\n            Out<R10, Out<R11, R12>>>>>>>>>>>>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8 extends Result<P9>,\n    P9 extends any[], R9 extends Result<P10>,\n    P10 extends any[], R10 extends Result<P11>,\n    P11 extends any[], R11 extends Result<P12>,\n    P12 extends any[], R12 extends Result<P13>,\n    P13 extends any[], R13>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P7) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => R8,\n    fn9: (this: void, ...args: P9) => R9,\n    fn10: (this: void, ...args: P10) => R10,\n    fn11: (this: void, ...args: P11) => R11,\n    fn12: (this: void, ...args: P12) => R12,\n    fn13: (this: void, ...args: P13) => Last<R13>,\n): (this: void, ...args: P1) =>\n    PassedThru.Value<Out<R1, Out<R2, Out<R3, Out<R4,\n        Out<R5, Out<R6, Out<R7, Out<R8, Out<R9,\n            Out<R10, Out<R11, Out<R12, R13>>>>>>>>>>>>>;\n\nexport function callThru<R>(...fns: ((...args: any[]) => any)[]): (...args: any[]) => R {\n\n  function callNext(idx: number, prev: any): any {\n\n    const len = fns.length;\n\n    if (idx < len) {\n      // There is a next pass in chain\n      if (!NextCall.is(prev)) {\n        return callNext(idx + 1, fns[idx].call(null, prev));\n      }\n      return prev[NextCall__symbol](function (this: any, ...args: any[]) {\n        return callNext(idx + 1, fns[idx].apply(this, args));\n      });\n    }\n\n    // Last in chain\n    if (!NextCall.is(prev)) {\n      return prev;\n    }\n\n    return prev[NextCall_lastOutcome__symbol]();\n  }\n\n  return function (this: any, ...args: any[]) {\n    return PassedThru.get(callNext(1, fns[0].apply(this, args)));\n  };\n}\n","/**\n * @module call-thru\n */\n/**\n * A function that returns its argument as is.\n *\n * @param value  A value to return.\n *\n * @returns `value`.\n */\nexport function asis<T>(value: T): T {\n  return value;\n}\n","/**\n * @module call-thru\n */\n/**\n * A function that does nothing.\n *\n * @returns `undefined`.\n */\nexport function noop(): undefined {\n  return;\n}\n","/**\n * @module call-thru\n */\n/**\n * A function that checks whether the given value is present.\n *\n * @param value  A value to check.\n *\n * @returns `true` when the given `value` is not `null` or `undefined`, or `false` otherwise.\n */\nexport function isPresent<T>(value: T | undefined | null): value is T {\n  return value != null;\n}\n\n/**\n * A function that checks whether the given value is not present.\n *\n * This is a direct opposite to `isPresent()`.\n *\n * @param value  A value to check.\n *\n * @returns `true` when the given `value` is `null` or `undefined`, or `false` otherwise.\n */\nexport function isNotPresent<T>(value: T | undefined | null): value is T {\n  return value == null;\n}\n\n/**\n * A function that checks whether the given value is defined.\n *\n * @param value  A value to check.\n *\n * @returns `true` when the given `value` is not `undefined`, or `false` otherwise.\n */\nexport function isDefined<T>(value: T | undefined): value is T {\n  return value !== undefined;\n}\n\n/**\n * A function that checks whether the given value is undefined.\n *\n * This is a direct opposite to `isDefined()`.\n *\n * @param value  A value to check.\n *\n * @returns `true` when the given `value` is `undefined`, or `false` otherwise.\n */\nexport function isUndefined<T>(value: T | undefined): value is T {\n  return value === undefined;\n}\n","/**\n * @module call-thru\n */\n/**\n * Creates a provider of the only argument.\n *\n * @param value  A value to return.\n *\n * @returns A function that returns `value`.\n */\nexport function valueProvider<T>(value: T): (this: void) => T {\n  return () => value;\n}\n\n/**\n * Creates a provider of arguments tuple.\n *\n * The returned tuple should never be modified as it is not cloned.\n *\n * @param values  Values to return.\n *\n * @returns A function that returns `values` tuple.\n */\nexport function valuesProvider<T extends readonly any[]>(...values: T): (this: void) => T {\n  return () => values;\n}\n\n/**\n * Creates a provider of cloned arguments tuple.\n *\n * The returned tuple can be modified as it is cloned before the return.\n *\n * @param values  Values to return.\n *\n * @returns A function that returns a clone of `values` tuple.\n */\nexport function valuesCloner<T extends any[]>(...values: T): (this: void) => T {\n  return () => [...values] as T;\n}\n","/**\n * @module call-thru\n */\nimport { NextCall, nextCall, NextCall__symbol, NextCall_lastOutcome__symbol } from '../next-call';\n\nexport interface NextArgs<Args extends any[], NextReturn>\n    extends NextCall<'default', Args, NextReturn, NextReturn, Args> {\n\n  (): NextArgs<Args, NextReturn>;\n\n  [NextCall__symbol](callee: (this: void, ...args: Args) => NextReturn): NextReturn;\n\n  [NextCall_lastOutcome__symbol](): Args;\n\n}\n\n/**\n * Constructs arguments for the next function call.\n *\n * When returned from the lass pass, the outcome will contain a tuple containing `args`.\n *\n * @param args  Next function call arguments.\n *\n * @return A next function call with the given arguments.\n */\nexport function nextArgs<Args extends any[], NextReturn>(...args: Args): NextArgs<Args, NextReturn> {\n  return nextCall(callee => callee.apply(undefined, args), () => args);\n}\n","/**\n * @module call-thru\n */\nimport { NextCall, nextCall, NextCall__symbol, NextCall_lastOutcome__symbol } from '../next-call';\nimport { PassedThru } from '../passed-thru';\nimport { forEachItem, lastItems } from './iteration';\n\ndeclare module '../call-outcome' {\n  export namespace CallOutcome {\n    export interface Map<Return, Out> {\n\n      /**\n       * Iterable outcome type.\n       */\n      each(): Iterable<PassedThru.Item<NextCall.Callee.Return<Return>>>;\n\n    }\n  }\n}\n\nexport interface NextEach<NextItem, NextReturn> extends NextCall<\n    'each',\n    NextCall.Callee.Args<NextItem>,\n    NextReturn,\n    Iterable<PassedThru.Item<NextCall.Callee.Return<NextReturn>>>,\n    Iterable<PassedThru.Item<NextCall.LastOutcome<NextItem>>>> {\n\n  (): NextEach<NextItem, NextReturn>;\n\n  [NextCall__symbol](callee: (this: void, ...args: NextCall.Callee.Args<NextItem>) => NextReturn):\n      Iterable<PassedThru.Item<NextCall.Callee.Return<NextReturn>>>;\n\n  [NextCall_lastOutcome__symbol](): Iterable<PassedThru.Item<NextCall.LastOutcome<NextItem>>>;\n\n}\n\n/**\n * Creates an next call that invokes subsequent passes for each item in the given iterable.\n *\n * If `items` are [[NextCall]] implementations, then the next pass will be processed by them.\n *\n * When returned from the last pass, the chain outcome will be an iterable of the last pass outcomes of the `items`.\n * Or an iterable of `items` if they are not implementing [[NextCall]].\n *\n * @param items  An iterable of items to invoke the passes for.\n */\nexport function nextEach<NextItem, NextReturn>(items: Iterable<NextItem>): NextEach<NextItem, NextReturn> {\n  return nextCall(\n      callee => ({\n        [Symbol.iterator]() {\n          return forEachItem(items, callee);\n        },\n      }),\n      () => ({\n        [Symbol.iterator]() {\n          return lastItems(items);\n        },\n      }));\n}\n","/**\n * @module call-thru\n */\nimport { NextCall, NextCall__symbol, NextCall_lastOutcome__symbol } from '../next-call';\nimport { PassedThru } from '../passed-thru';\n\nexport function *forEachItem<NextItem, NextReturn>(\n    items: Iterable<NextItem>,\n    callee: (this: void, ...args: NextCall.Callee.Args<NextItem>) => NextReturn) {\n  for (const item of items) {\n    yield* PassedThru.items(\n        NextCall.is(item)\n            ? item[NextCall__symbol](callee)\n            : (callee as (arg: NextItem) => NextReturn)(item));\n  }\n}\n\nexport function *lastItems<NextItem>(items: Iterable<NextItem>) {\n  for (const item of items) {\n    yield* PassedThru.items(\n        NextCall.is(item)\n            ? item[NextCall_lastOutcome__symbol]()\n            : item);\n  }\n}\n\nexport function *flatItems<I>(items: Iterable<unknown>, depth: number): IterableIterator<any> {\n  if (!depth) {\n    yield *items;\n    return;\n  }\n  for (const item of items) {\n    if (isIterable(item)) {\n      yield *flatItems(item, depth - 1);\n    } else {\n      yield item;\n    }\n  }\n}\n\nfunction isIterable<I>(value: any): value is Iterable<I> {\n\n  const type = typeof value;\n\n  return (type === 'object' || type === 'function') && Symbol.iterator in value;\n}\n","/**\n * @module call-thru\n */\nimport { NextCall, nextCall, NextCall__symbol, NextCall_lastOutcome__symbol } from '../next-call';\nimport { PassedThru, PassedThru__symbol } from '../passed-thru';\n\ndeclare module '../call-outcome' {\n  export namespace CallOutcome {\n    export interface Map<Return, Out> {\n\n      /**\n       * Skipped call outcome type. Always `undefined`.\n       */\n      skip(): PassedThru<undefined, never>;\n\n    }\n  }\n}\n\nexport type SkippedThru = PassedThru<undefined, never>;\n\nexport interface NextSkip<NextArgs extends any[], NextReturn>\n    extends NextCall<'skip', NextArgs, NextReturn, SkippedThru> {\n\n  (): NextSkip<NextArgs, NextReturn>;\n\n  [NextCall__symbol](callee: (this: void, ...args: NextArgs) => NextReturn): SkippedThru;\n\n  [NextCall_lastOutcome__symbol](): SkippedThru;\n\n}\n\nconst SKIP: SkippedThru = {\n  [PassedThru__symbol]: undefined,\n  * [Symbol.iterator](): Iterator<never> {},\n};\n\nfunction _skip(): SkippedThru {\n  return SKIP;\n}\n\nconst _nextSkip: NextCall<'skip', any[], any, SkippedThru> = nextCall(_skip, _skip);\n\n/**\n * Constructs a next call that skips the rest of the chain.\n *\n * This has the same effect as `nextReturn(undefined)`.\n */\nexport function nextSkip<NextArgs extends any[], NextReturn>(): NextSkip<NextArgs, NextReturn> {\n  return _nextSkip as NextCall<'skip', NextArgs, NextReturn, SkippedThru>;\n}\n","/**\n * @module a-iterable\n */\n/**\n * A type of elements of iterable.\n *\n * @typeparam T  A type of iterable.\n */\nexport type IterableElement<T extends Iterable<any>> = T extends Iterable<infer E> ? E : never;\n\n/**\n * Arbitrary class implementing `Iterable` interface.\n *\n * @typeparam T  A type of iterable.\n * @typeparam E  A type of elements to iterate.\n */\nexport interface IterableClass<T extends Iterable<E>, E = IterableElement<T>> extends Function {\n  prototype: T;\n  new (...args: any[]): T;\n}\n\n/**\n * Checks whether the given value is array-like.\n *\n * @param target  A value to check.\n *\n * @returns `true` if the `value` has a `length` property, or `false` otherwise.\n */\nexport function isArrayLike<T>(target: any): target is ArrayLike<T> {\n  return 'length' in target;\n}\n","/**\n * @module a-iterable\n */\n/**\n * An iterable which elements order can be reversed.\n *\n * Arrays implement this interface.\n */\nexport interface RevertibleIterable<T> extends Iterable<T> {\n\n  /**\n   * Returns an iterable containing this iterable's elements in reverse order.\n   *\n   * Corresponds to `Array.prototype.reverse()`. Note however, that the array counterpart reverses elements _in place_\n   * rather than creating a new array.\n   *\n   * @return Reversed iterable instance.\n   */\n  reverse(): Iterable<T>;\n\n}\n\n/**\n * Checks whether the given iterable is revertible.\n *\n * This is always `true` for arrays.\n *\n * @param iterable  Iterable to check.\n *\n * @returns `true` if `iterable` has a `reverse` property, or `false` otherwise.\n */\nexport function itsRevertible<T>(iterable: Iterable<T>): iterable is RevertibleIterable<T> {\n  return 'reverse' in iterable;\n}\n","/**\n * @module a-iterable\n */\nimport { RevertibleIterable } from './revertible-iterable';\n\n/**\n * Starts iteration over the given `iterable`.\n *\n * This is a shortcut for `iterable[Symbol.iterator]` to make it friendlier to minification.\n *\n * @param iterable  An iterable to iterate over.\n *\n * @return An iterator.\n */\nexport function itsIterator<T>(iterable: Iterable<T>): Iterator<T> {\n  return iterable[Symbol.iterator]();\n}\n\n/**\n * Builds an iterable iterator over the given `iterable`.\n *\n * @param iterable  An iterable to iterate over.\n *\n * @return An iterator.\n */\nexport function itsIterable<T>(iterable: Iterable<T>): IterableIterator<T> {\n  return function* () { yield* iterable; }();\n}\n\n/**\n * Creates custom iterable.\n *\n * @param iterate  A no-arg function constructing an iterator.\n * @param reverse  When `undefined` or unspecified the created iterable won't be reversible.\n *\n * @returns New iterable.\n */\nexport function makeIt<T>(iterate: (this: Iterable<T>) => Iterator<T>, reverse?: undefined): Iterable<T>;\n\n/**\n * Creates custom revertible iterable.\n *\n * @param iterate  A no-arg function constructing an iterator.\n * @param reverse  A no-arg function constructing a reverse iterable.\n *\n * @returns New reversible iterable.\n */\nexport function makeIt<T>(\n    iterate: (this: RevertibleIterable<T>) => Iterator<T>,\n    reverse: (this: RevertibleIterable<T>) => Iterable<T>): RevertibleIterable<T>;\n\nexport function makeIt<T>(\n    iterate: (this: RevertibleIterable<T>) => Iterator<T>,\n    reverse?: (this: RevertibleIterable<T>) => Iterable<T>): Iterable<T> {\n\n  const iterable: Iterable<T> = {\n    [Symbol.iterator]: iterate,\n  };\n\n  if (!reverse) {\n    return iterable;\n  }\n\n  const reversible = iterable as RevertibleIterable<T>;\n\n  reversible.reverse = reverse;\n\n  return reversible;\n}\n","/**\n * @module a-iterable\n */\nimport { isArrayLike } from './api';\nimport { itsRevertible, RevertibleIterable } from './revertible-iterable';\nimport { itsIterator, makeIt } from './util';\n\n/**\n * Constructs a reversed iterable.\n *\n * If the `source` iterable is an array-like structure, then uses `reverseArray()` function to revert the constructed\n * iterable.\n * If the `source` iterable is revertible, then uses its `reverse()` method to revert the constructed one.\n * Otherwise stores elements to array and reverts them with `reverseArray()` function.\n *\n * @param source  A source iterable.\n *\n * @returns An iterable of the `source` elements in reverse order.\n */\nexport function reverseIt<T>(source: Iterable<T> | RevertibleIterable<T> | ArrayLike<T>): Iterable<T> {\n  if (isArrayLike(source)) {\n    return reverseArray(source);\n  }\n  if (itsRevertible(source)) {\n\n    const reversed = source.reverse();\n\n    return makeIt(() => itsIterator(reversed));\n  }\n  return reverseArray([...source]);\n}\n\n/**\n * Constructs an iterable of array-like structure elements in reverse order.\n *\n * @param array  Source array.\n *\n * @returns An iterable of the `source` elements in reverse order.\n */\nexport function reverseArray<T>(array: ArrayLike<T>): Iterable<T> {\n  return makeIt(\n      function* () {\n\n        const len = array.length;\n\n        for (let i = len - 1; i >= 0; --i) {\n          yield array[i];\n        }\n      });\n}\n","/**\n * @module a-iterable\n */\nimport { isArrayLike } from './api';\nimport { itsRevertible, RevertibleIterable } from './revertible-iterable';\nimport { itsIterator } from './util';\n\n/**\n * Performs the given `action` for each element of the given `iterable`.\n *\n * @typeparam T  A type of `iterable` elements.\n * @param iterable  An iterable of elements to perform actions on.\n * @param action  An action to perform on each iterable element. This is a function accepting an element as its only\n * parameter.\n */\nexport function itsEach<T>(iterable: Iterable<T>, action: (element: T) => void) {\n  for (const element of iterable) {\n    action(element);\n  }\n}\n\n/**\n * Checks whether the given `iterable` is empty.\n *\n * @param iterable  Iterable to check for elements.\n *\n * @return `true` if the given iterable contains at least one element, or `false` otherwise.\n */\nexport function itsEmpty(iterable: Iterable<any>): boolean {\n  return !!itsIterator(iterable).next().done;\n}\n\n/**\n * Tests whether all elements of the given `iterable` pass the test implemented by the provided function.\n *\n * @typeparam T  A type of `iterable` elements.\n * @param iterable  An iterable to test elements of.\n * @param test  A predicate function to test each element. Returns `true` to continue tests, or `false` to stop it\n * and return `false` from the method call. It accepts the tested element as the only parameter.\n *\n * @returns `true` if the `test` function returned a truthy value for every element, or `false` otherwise.\n * Returns `true` for empty iterable.\n */\nexport function itsEvery<T>(iterable: Iterable<T>, test: (element: T) => boolean): boolean {\n  for (const element of iterable) {\n    if (!test(element)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Returns the first element of the given `iterable`.\n *\n * @typeparam T  A type of `iterable` elements.\n * @param iterable  Iterable to extract element from.\n *\n * @return Either the first element, or `undefined` if the given `iterable` is empty.\n */\nexport function itsFirst<T>(iterable: Iterable<T>): T | undefined {\n  return itsIterator(iterable).next().value;\n}\n\n/**\n * Returns the last element of the given `iterable`.\n *\n * If the given `iterable` is an array-like structure, then just returns its last element. If it is revertible,\n * then extracts the first element of reverted one. Otherwise iterates over elements to find the last one.\n *\n * @typeparam T  A type of `iterable` elements.\n * @param iterable  Iterable to extract element from.\n *\n * @return Either the last element, or `undefined` if the given `iterable` is empty.\n */\nexport function itsLast<T>(iterable: Iterable<T> | RevertibleIterable<T> | ArrayLike<T>): T | undefined {\n  if (isArrayLike(iterable)) {\n    return iterable[iterable.length - 1];\n  }\n  if (itsRevertible(iterable)) {\n    return itsFirst(iterable.reverse());\n  }\n\n  let last: T | undefined;\n\n  for (const element of iterable) {\n    last = element;\n  }\n\n  return last;\n}\n\n/**\n * Applies a function against an accumulator and each element of the given `iterable` to reduce elements to a single\n * value.\n *\n * @typeparam T  A type of `iterable` elements.\n * @typeparam R  A type of reduced value.\n * @param iterable  An iterable to reduce values of.\n * @param reducer  A function to apply the value returned from the previous `reducer` call and to each element.\n * @param initialValue  Initial value passed to the first `reducer` call.\n *\n * @return Reduced value returned from the last `reducer` call, or `initialValue` if there is no elements in the given\n * `iterable`.\n */\nexport function itsReduction<T, R>(\n    iterable: Iterable<T>,\n    reducer: (prev: R, element: T) => R,\n    initialValue: R): R {\n\n  let reduced = initialValue;\n\n  for (const element of iterable) {\n    reduced = reducer(reduced, element);\n  }\n\n  return reduced;\n}\n","/**\n * @module a-iterable\n */\nimport { callThru, NextCall, nextEach, PassedThru } from 'call-thru';\nimport Last = NextCall.LastResult;\nimport Out = NextCall.Outcome;\nimport Result = NextCall.CallResult;\n\n/**\n * Passes each element of the given iterable trough a chain of transformation passes.\n *\n * The passes are preformed by `callThru()` function.\n *\n * @returns Next iterable of transformed elements.\n */\nexport function thruIt<T, R1>(\n    it: Iterable<T>,\n    fn: (this: void, arg: T) => Last<R1>,\n): Iterable<PassedThru.Item<R1>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => Last<R2>,\n): Iterable<PassedThru.Item<Out<R1, R2>>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => Last<R3>,\n): Iterable<PassedThru.Item<Out<R1, Out<R2, R3>>>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => Last<R4>,\n): Iterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Last<R4>>>>>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => Last<R5>,\n): Iterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, R5>>>>>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P6) => Last<R6>,\n): Iterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n    R6>>>>>>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P6) => R6,\n    fn7: (this: void, ...args: P7) => Last<R7>,\n): Iterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n    Out<R6, R7>>>>>>>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P6) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => Last<R8>,\n): Iterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n    Out<R6, Out<R7, R8>>>>>>>>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8 extends Result<P9>,\n    P9 extends any[], R9>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P6) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => R8,\n    fn9: (this: void, ...args: P9) => Last<R9>,\n): Iterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n    Out<R6, Out<R7, Out<R8, R9>>>>>>>>>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8 extends Result<P9>,\n    P9 extends any[], R9 extends Result<P10>,\n    P10 extends any[], R10>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P6) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => R8,\n    fn9: (this: void, ...args: P9) => R9,\n    fn10: (this: void, ...args: P10) => Last<R10>,\n): Iterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n    Out<R6, Out<R7, Out<R8, Out<R9, R10>>>>>>>>>>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8 extends Result<P9>,\n    P9 extends any[], R9 extends Result<P10>,\n    P10 extends any[], R10 extends Result<P11>,\n    P11 extends any[], R11>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P6) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => R8,\n    fn9: (this: void, ...args: P9) => R9,\n    fn10: (this: void, ...args: P10) => R10,\n    fn11: (this: void, ...args: P11) => Last<R11>,\n): Iterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n    Out<R6, Out<R7, Out<R8, Out<R9, Out<R10,\n        R11>>>>>>>>>>>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8 extends Result<P9>,\n    P9 extends any[], R9 extends Result<P10>,\n    P10 extends any[], R10 extends Result<P11>,\n    P11 extends any[], R11 extends Result<P12>,\n    P12 extends any[], R12>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P6) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => R8,\n    fn9: (this: void, ...args: P9) => R9,\n    fn10: (this: void, ...args: P10) => R10,\n    fn11: (this: void, ...args: P11) => R11,\n    fn12: (this: void, ...args: P12) => Last<R12>,\n): Iterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n    Out<R6, Out<R7, Out<R8, Out<R9, Out<R10,\n        Out<R11, R12>>>>>>>>>>>>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8 extends Result<P9>,\n    P9 extends any[], R9 extends Result<P10>,\n    P10 extends any[], R10 extends Result<P11>,\n    P11 extends any[], R11 extends Result<P12>,\n    P12 extends any[], R12 extends Result<P13>,\n    P13 extends any[], R13>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P6) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => R8,\n    fn9: (this: void, ...args: P9) => R9,\n    fn10: (this: void, ...args: P10) => R10,\n    fn11: (this: void, ...args: P11) => R11,\n    fn12: (this: void, ...args: P12) => R12,\n    fn13: (this: void, ...args: P13) => Last<R13>,\n): Iterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n    Out<R6, Out<R7, Out<R8, Out<R9, Out<R10,\n        Out<R11, Out<R12, R13>>>>>>>>>>>>>>;\n\nexport function thruIt<T, R>(\n    it: Iterable<T>,\n    ...fns: ((...args: any[]) => any)[]): Iterable<PassedThru.Item<R>> {\n\n  const thru: () => Iterable<PassedThru.Item<R>> = (callThru as any)(\n      nextEach(it),\n      ...fns);\n\n  return thru();\n}\n","/**\n * @module a-iterable\n */\nimport { makeIt } from './util';\n\n/**\n * Creates an iterable with all `source` iterable elements that pass the test implemented by the provided function.\n *\n * @typeparam T  A type of source elements.\n * @param source  A source iterable.\n * @param test  A predicate function to test each element. Returns `true` to keep the element, or `false` otherwise.\n * It accepts the tested element as the only parameter.\n *\n * @return A new iterable with the elements that pass the test. If no elements passed the test, an empty iterable will\n * be returned.\n */\nexport function filterIt<T>(source: Iterable<T>, test: (element: T) => boolean): Iterable<T>;\n\n/**\n * Creates an iterable with all `source` iterable elements extending the given type.\n *\n * @typeparam T  A type of source elements\n * @typeparam R  Target type.\n * @param source  A source iterable.\n * @param test  A predicate function to test that element extends the type `R`. Returns `true` to keep the element, or\n * `false` otherwise. It accepts the tested element as the only parameter.\n *\n * @return A new iterable with the elements that pass the test. If no elements passed the test, an empty iterable will\n * be returned.\n */\nexport function filterIt<T, R extends T>(source: Iterable<T>, test: (element: T) => element is R): Iterable<R>;\n\nexport function filterIt<T>(source: Iterable<T>, test: (element: T) => boolean): Iterable<T> {\n  return makeIt(function* () {\n    for (const element of source) {\n      if (test(element)) {\n        yield element;\n      }\n    }\n  });\n}\n\n/**\n * First maps each element of the `source` iterable using a mapping function, then flattens the result into a new\n * iterable.\n *\n * @typeparam T  A type of source elements.\n * @typeparam R  A type of converted elements.\n * @param source  A source iterable.\n * @param convert  A function that produces a new iterable, taking the source element as the only parameter.\n *\n * @returns A new iterable with each element being the flattened result of the `convert` function call.\n */\nexport function flatMapIt<T, R>(source: Iterable<T>, convert: (element: T) => Iterable<R>): Iterable<R> {\n  return makeIt(function* () {\n    for (const element of source) {\n      yield* convert(element);\n    }\n  });\n}\n\n/**\n * Creates a new iterable with the results of calling a provided function on every element of the `source` one.\n *\n * @typeparam T  A type of source elements.\n * @typeparam R  A type of converted elements.\n * @param source  A source iterable.\n * @param convert  A function that produces an element of the new iterable, taking the source element as the only\n * parameter.\n */\nexport function mapIt<T, R>(source: Iterable<T>, convert: (element: T) => R): Iterable<R> {\n  return makeIt(function* () {\n    for (const element of source) {\n      yield convert(element);\n    }\n  });\n}\n","/**\n * @module a-iterable\n */\nimport { NextCall, PassedThru } from 'call-thru';\nimport { IterableClass, IterableElement } from './api';\nimport { ArrayLikeIterable } from './array-like-iterable';\nimport { reverseArray, reverseIt } from './reverse';\nimport { RevertibleIterable } from './revertible-iterable';\nimport { itsEach, itsEvery, itsReduction } from './termination';\nimport { thruIt } from './thru';\nimport { filterIt, flatMapIt, mapIt } from './transform';\nimport { itsIterator, makeIt } from './util';\nimport Result = NextCall.CallResult;\nimport Last = NextCall.LastResult;\nimport Out = NextCall.Outcome;\n\nconst API_METHODS: (keyof ArrayLikeIterable<any>)[] = [\n  'every',\n  'filter',\n  'flatMap',\n  'forEach',\n  'map',\n  'reduce',\n  'reverse',\n];\n\n/**\n * Abstract `Iterable` implementation with array-like iteration operations.\n *\n * @typeparam T  A type of elements.\n */\nexport abstract class AIterable<T> implements ArrayLikeIterable<T> {\n\n  /**\n   * Returns an iterable without elements.\n   *\n   * @returns An empty iterable instance.\n   */\n  static none<T>(): AIterable<T> {\n    return NONE; // tslint:disable-line:no-use-before-declare\n  }\n\n  /**\n   * Checks whether the given iterable is an array-like one.\n   *\n   * @param source  An iterable to check.\n   *\n   * @returns `true` is the `source` has all `ArrayLikeIterable` methods (like `Array` or `AIterable` instance),\n   * or `false` otherwise.\n   */\n  static is<T>(source: Iterable<T>): source is ArrayLikeIterable<T> {\n    return API_METHODS.every(name => name in source);\n  }\n\n  /**\n   * Creates an [[AIterable]] instance that iterates over the same elements as the given one if necessary.\n   *\n   * @param source  A source array-like iterable.\n   *\n   * @return A `source` itself.\n   */\n  static of<T>(source: ArrayLikeIterable<T>): typeof source;\n\n  /**\n   * Creates an [[AIterable]] instance that iterates over the same elements as the given one if necessary.\n   *\n   * @param source  A source iterable.\n   *\n   * @return Either `source` itself if it implements `ArrayLikeIterable` already (see `is()` method),\n   * or new [[AIterable]] instance iterating over the `source`.\n   */\n  static of<T>(source: Iterable<T>): AIterable<T>;\n\n  static of<T>(source: Iterable<T> | RevertibleIterable<T> | T[]): ArrayLikeIterable<T> {\n    if (AIterable.is(source)) {\n      return source;\n    }\n    return AIterable.from(source);\n  }\n\n  /**\n   * Creates an `AIterable` instance that iterates over the same elements as the given one.\n   *\n   * Uses [[reverseIt]] function to reverse the constructed iterable.\n   *\n   * @param source  A source iterable.\n   *\n   * @return Always new `AIterable` instance.\n   */\n  static from<T>(source: Iterable<T> | RevertibleIterable<T> | T[]): AIterable<T> {\n    return make(() => source, () => reverseIt(source));\n  }\n\n  abstract [Symbol.iterator](): Iterator<T>;\n\n  /**\n   * Tests whether all elements pass the test implemented by the provided function.\n   *\n   * Corresponds to `Array.prototype.every()`.\n   *\n   * @param test  A predicate function to test each element. Returns `true` to continue tests, or `false` to stop it\n   * and return `false` from the method call. It accepts the tested element as the only parameter.\n   *\n   * @returns `true` if the `test` function returned a truthy value for every element, or `false` otherwise.\n   * Returns `true` for empty iterable.\n   */\n  every(test: (element: T) => boolean): boolean {\n    return itsEvery(this, test);\n  }\n\n  /**\n   * Creates an iterable with all elements that pass the test implemented by the provided function.\n   *\n   * Corresponds to `Array.prototype.filter()`.\n   *\n   * @param test  A predicate function to test each element. Returns `true` to keep the element, or `false` otherwise.\n   * It accepts the tested element as the only parameter.\n   *\n   * @return A new [[AIterable]] with the elements that pass the test. If no elements passed the test, an empty iterable\n   * will be returned.\n   */\n  filter(test: (element: T) => boolean): AIterable<T>;\n\n  /**\n   * Creates an iterable with all elements extending the given type.\n   *\n   * Corresponds to `Array.prototype.filter()`.\n   *\n   * @typeparam R  Target type.\n   * @param test  A predicate function to test that element extends the type R. Returns `true` to keep the element, or\n   * `false` otherwise. It accepts the tested element as the only parameter.\n   *\n   * @return A new [[AIterable]] with the elements that pass the test. If no elements passed the test, an empty iterable\n   * will be returned.\n   */\n  filter<R extends T>(test: (element: T) => element is R): AIterable<R>;\n\n  filter(test: (element: T) => boolean): AIterable<T> {\n    return make(\n        () => filterIt(this, test),\n        () => filterIt(this.reverse(), test));\n  }\n\n  /**\n   * First maps each element using a mapping function, then flattens the result into a new iterable.\n   *\n   * Corresponds to `Array.prototype.flatMap()`.\n   *\n   * Note that the overridden `flatMap` method of `ArrayLikeIterable` expects an array to be returned from `convert`\n   * callback, while in this method it may return arbitrary iterable.\n   *\n   * @typeparam R  A type of converted elements.\n   * @param convert  A function that produces a new iterable, taking the source element as the only parameter.\n   *\n   * @returns A new [[AIterable]] with each element being the flattened result of the `convert` function call.\n   */\n  flatMap<R>(convert: (element: T) => Iterable<R>): AIterable<R> {\n    return make(\n        () => flatMapIt(this, convert),\n        () => flatMapIt(this.reverse(), element => reverseIt(convert(element))));\n  }\n\n  /**\n   * Performs the given `action` for each element.\n   *\n   * Corresponds to `Array.prototype.forEach()`.\n   *\n   * @param action  An action to perform on each iterable element. This is a function accepting an element as its only\n   * parameter.\n   */\n  forEach(action: (element: T) => void) {\n    itsEach(this, action);\n  }\n\n  /**\n   * Creates a new iterable with the results of calling a provided function on every element.\n   *\n   * Corresponds to `Array.prototype.map()`.\n   *\n   * @typeparam R  A type of converted elements.\n   * @param convert  A function that produces an element of the new iterable, taking the source element as the only\n   * parameter.\n   *\n   * @return A new [[AIterable]] with each element being the result of the `convert` function call.\n   */\n  map<R>(convert: (element: T) => R): AIterable<R> {\n    return make(\n        () => mapIt(this, convert),\n        () => mapIt(this.reverse(), convert));\n  }\n\n  /**\n   * Applies a function against an accumulator and each element to reduce elements to a single value.\n   *\n   * Corresponds to `Array.prototype.reduce()`.\n   *\n   * @typeparam R  A type of reduced value.\n   * @param reducer  A function to apply the value returned from the previous `reducer` call and to each element.\n   * @param initialValue  Initial value passed to the first `reducer` call.\n   *\n   * @return Reduced value returned from the last `reducer` call, or `initialValue` if there is no elements in this\n   * iterable.\n   */\n  reduce<R>(reducer: (prev: R, element: T) => R, initialValue: R): R {\n    return itsReduction(this, reducer, initialValue);\n  }\n\n  /**\n   * Constructs an iterable containing this iterable's elements in reverse order.\n   *\n   * By default this method converts iterable to array and then reverts its elements with [[reverseArray]] function.\n   *\n   * @return Reversed [[AIterable]] instance.\n   */\n  reverse(): AIterable<T> {\n\n    const elements = this;\n\n    return make(() => reverseArray([...elements]), () => this);\n  }\n\n  /**\n   * Passes each element of this iterable trough a chain of transformation passes.\n   *\n   * The passes are preformed by `callThru()` function.\n   *\n   * @returns Next iterable of transformed elements.\n   */\n  thru<R1>(\n      fn: (this: void, arg: T) => Last<R1>,\n  ): AIterable<PassedThru.Item<R1>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => Last<R2>,\n  ): AIterable<PassedThru.Item<Out<R1, R2>>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => Last<R3>,\n  ): AIterable<PassedThru.Item<Out<R1, Out<R2, R3>>>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => Last<R4>,\n  ): AIterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Last<R4>>>>>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => Last<R5>,\n  ): AIterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, R5>>>>>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => Last<R6>,\n  ): AIterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n      R6>>>>>>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => Last<R7>,\n  ): AIterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n      Out<R6, R7>>>>>>>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => Last<R8>,\n  ): AIterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n      Out<R6, Out<R7, R8>>>>>>>>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => Last<R9>,\n  ): AIterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n      Out<R6, Out<R7, Out<R8, R9>>>>>>>>>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => Last<R10>,\n  ): AIterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n      Out<R6, Out<R7, Out<R8, Out<R9, R10>>>>>>>>>>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => Last<R11>,\n  ): AIterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n      Out<R6, Out<R7, Out<R8, Out<R9, Out<R10,\n          R11>>>>>>>>>>>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => Last<R12>,\n  ): AIterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n      Out<R6, Out<R7, Out<R8, Out<R9, Out<R10,\n          Out<R11, R12>>>>>>>>>>>>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends Result<P13>,\n      P13 extends any[], R13>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n      fn13: (this: void, ...args: P13) => Last<R13>,\n  ): AIterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n      Out<R6, Out<R7, Out<R8, Out<R9, Out<R10,\n          Out<R11, Out<R12, R13>>>>>>>>>>>>>>;\n\n  thru<R>(...fns: ((...args: any[]) => any)[]): AIterable<PassedThru.Item<R>> {\n\n    const thru = thruIt as any;\n\n    return make(() => thru(this, ...fns));\n  }\n\n}\n\nclass None extends AIterable<any> {\n\n  *[Symbol.iterator](): Iterator<any> {}\n\n  reverse() {\n    return this;\n  }\n\n}\n\nconst NONE = /*#__PURE__*/ new None();\n\nfunction make<T>(iterate: () => Iterable<T>, reverse?: () => Iterable<T>): AIterable<T> {\n\n  class Iterable extends AIterable<T> {\n\n    [Symbol.iterator]() {\n      return itsIterator(iterate());\n    }\n\n    reverse(): Iterable {\n      if (!reverse) {\n        return super.reverse();\n      }\n      return AIterable.from(makeIt(() => itsIterator(reverse()), () => this));\n    }\n\n  }\n\n  return new Iterable();\n}\n\n/**\n * Extends an iterable class with `AIterable` API.\n *\n * @typeparam C  A type of iterable class to extend.\n * @typeparam E  A type of elements to iterate.\n * @param iterableClass  A class to extend.\n *\n * @returns A new class extending original `iterableClass` and implementing the missing [[AIterable]] methods.\n */\nexport function toAIterable<C extends IterableClass<any, E>, E = IterableElement<InstanceType<C>>>(\n    iterableClass: C):\n    C & IterableClass<AIterable<E>, E> {\n\n  class ExtendedIterable extends iterableClass {\n  }\n\n  const extended = ExtendedIterable;\n  const proto = extended.prototype;\n\n  API_METHODS.forEach(name => {\n    if (!(name in proto)) {\n      Object.defineProperty(proto, name, {\n        configurable: true,\n        value: AIterable.prototype[name],\n      });\n    }\n  });\n\n  return extended as C & IterableClass<AIterable<E>, E>;\n}\n","/**\n * @module a-iterable\n */\nimport { reverseArray } from './reverse';\nimport { RevertibleIterable } from './revertible-iterable';\nimport { makeIt } from './util';\n\n/**\n * Builds an iterable over elements of array-like structure.\n *\n * @param array  An array-like structure. E.g. `Array`, DOM `NodeList`, etc.\n *\n * @returns A revertible iterable over array elements.\n */\nexport function overArray<T>(array: ArrayLike<T>): RevertibleIterable<T> {\n  return makeIt<T>(\n      function* () {\n        for (let i = 0; i < array.length; ++i) {\n          yield array[i];\n        }\n      },\n      () => reverseArray(array));\n}\n\nconst NONE: RevertibleIterable<any> = {\n\n  *[Symbol.iterator](): Iterator<any> {},\n\n  reverse() { return this; },\n\n};\n\n/**\n * Returns an iterable without elements.\n *\n * @typeparam T  A type of constructed iterable elements.\n *\n * @returns An empty iterable instance revertible to itself.\n */\nexport function overNone<T>(): RevertibleIterable<T> {\n  return NONE;\n}\n","/**\n * @module a-iterable\n */\nimport { overArray } from './construction';\nimport { RevertibleIterable } from './revertible-iterable';\nimport { mapIt } from './transform';\nimport { itsIterator, makeIt } from './util';\n\n/**\n * Builds an iterable over the keys of the given object.\n *\n * A list of keys is constructed using `Reflect.ownKeys()`.\n *\n * @param target  An object to select keys from.\n */\nexport function overKeys<T extends object>(target: T): RevertibleIterable<keyof T> {\n  return overArray(Reflect.ownKeys(target) as (keyof T)[]);\n}\n\n/**\n * Object property entry. This is a tuple consisting of property key and value.\n */\nexport type ObjectEntry<T, K extends keyof T = keyof T> = [K, T[K]];\n\n/**\n * Builds an iterable over the key/value entries of the given object.\n *\n * A list of keys is constructed using `Reflect.ownKeys()`.\n *\n * @param target  An object to select keys and values from.\n */\nexport function overEntries<T extends object>(target: T): RevertibleIterable<ObjectEntry<T>> {\n\n  const keys = overKeys(target);\n\n  function mapToEntries(_keys: Iterable<keyof T>): Iterable<ObjectEntry<T>> {\n    return mapIt(_keys, key => [key, target[key]] as ObjectEntry<T>);\n  }\n\n  return makeIt(() => itsIterator(mapToEntries(keys)), () => mapToEntries(keys.reverse()));\n}\n","/**\n * @packageDocumentation\n * @module fun-events\n */\nimport { EventReceiver } from './event-receiver';\nimport { EventSupply } from './event-supply';\n\n/**\n * A key of event receiver registration method of [[EventKeeper]].\n *\n * @category Core\n */\nexport const AfterEvent__symbol = (/*#__PURE__*/ Symbol('after-event'));\n\n/**\n * An event supplier that keeps the last event sent.\n *\n * The registered event receiver would receive the kept event immediately upon registration, and all upcoming events\n * after that.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n */\nexport interface EventKeeper<E extends any[]> {\n\n  /**\n   * Registers a receiver of events kept and sent by this keeper.\n   *\n   * @param receiver  A receiver of events to register.\n   *\n   * @returns A supply of events from this keeper to the given `receiver`.\n   */\n  [AfterEvent__symbol](receiver: EventReceiver<E>): EventSupply;\n\n}\n\nexport namespace EventKeeper {\n\n  /**\n   * A type of events sent by the given event keeper.\n   *\n   * @typeparam T  Target event keeper.\n   */\n  export type Event<T extends EventKeeper<any>> = T extends EventKeeper<infer E> ? E : never;\n\n}\n\n/**\n * Checks whether the given object implements an [[EventKeeper]] interface.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param value  An object to check.\n *\n * @returns `true` if `value` contains an `[AfterEvent__symbol]` property, or `false` otherwise.\n */\nexport function isEventKeeper<E extends any[]>(value: object): value is EventKeeper<E> {\n  return AfterEvent__symbol in value;\n}\n","/**\n * @packageDocumentation\n * @module fun-events\n */\nimport { noop } from 'call-thru';\n\n/**\n * A supply of events from {@link EventSupplier event supplier} to {@link EventReceiver event receiver}.\n *\n * When no longer needed the supply may be {@link off cut off}.\n *\n * May be constructed using [[eventSupply]] function.\n *\n * @category Core\n */\nexport abstract class EventSupply {\n\n  /**\n   * Whether this supply is {@link off cut off} already.\n   *\n   * `true` means the events will no longer be supplied.\n   */\n  abstract readonly isOff: boolean;\n\n  /**\n   * Cuts off the supply of events.\n   *\n   * After this method call the receiver will no longer receive events.\n   *\n   * Calling this method for the second time has no effect.\n   *\n   * @param reason  An optional reason why supply is cut off. It will be reported to [[whenOff]] callbacks.\n   * @returns A cut off event supply instance.\n   */\n  abstract off(reason?: any): EventSupply;\n\n  /**\n   * Registers a callback function that will be called as soon as this supply is {@link off cut off}. This callback\n   * will be called immediately if [[isOff]] is `true`.\n   *\n   * @param callback  A callback function accepting optional cut off reason as its only parameter.\n   * By convenience an `undefined` reason means normal completion.\n   *\n   * @returns `this` instance.\n   */\n  abstract whenOff(callback: (this: void, reason?: any) => void): this;\n\n  /**\n   * Declares this event supply depends on another one.\n   *\n   * Once `another` supply is {@link off cut off}, this one is will be cut off with the same reason.\n   *\n   * @param another  An event supply this one depends on.\n   *\n   * @return `this` instance.\n   */\n  needs(another: EventSupply): this {\n    another.whenOff(reason => this.off(reason));\n    return this;\n  }\n\n}\n\n/**\n * Constructs new {@link EventSupply event supply}.\n *\n * @category Core\n * @param off  A function to call when supply will supply is {@link EventSupply.off cut off}. Accepts optional\n * cut off reason as its only parameter. No-op by default.\n */\nexport function eventSupply(off: (this: void, reason?: any) => void = noop): EventSupply {\n\n  let whenOff: (callback: (reason?: any) => void) => void;\n  let cutOff: (reason?: any) => void = reason => {\n    whenOff = callback => callback(reason);\n    cutOff = noop;\n    off(reason);\n  };\n\n  whenOff = callback => {\n\n    const prev = cutOff;\n\n    cutOff = reason => {\n      prev(reason);\n      callback(reason);\n    };\n  };\n\n  class Supply extends EventSupply {\n\n    get isOff(): boolean {\n      return cutOff === noop;\n    }\n\n    off(reason?: any): EventSupply {\n      cutOff(reason);\n      return this;\n    }\n\n    whenOff(callback: (reason?: any) => void): this {\n      whenOff(callback);\n      return this;\n    }\n\n  }\n\n  return new Supply();\n}\n\n/**\n * @internal\n */\nclass NoSupply extends EventSupply {\n\n  get isOff(): true {\n    return true;\n  }\n\n  off(): this {\n    return this;\n  }\n\n  whenOff(callback: (reason?: any) => void): this {\n    callback();\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nconst noSupply = (/*#__PURE__*/ new NoSupply());\n\n/**\n * Returns a no-event supply.\n *\n * @category Core\n *\n * @returns An event supply that is already cut off without any particular reason.\n */\nexport function noEventSupply(): EventSupply {\n  return noSupply;\n}\n","/**\n * @packageDocumentation\n * @module fun-events\n */\nimport { noop } from 'call-thru';\nimport { eventSupply, EventSupply } from './event-supply';\n\n/**\n * Event receiver is called on each event sent by [[EventSender]] when registered.\n *\n * A receiver may be represented either by {@link EventReceiver.Function function}, or by\n * {@link EventReceiver.Object object}. The former is a simplest form. The latter allows control all aspects of event\n * processing.\n *\n * To register an event receiver just call the event sender's `[OnEvent__symbol]` or event keeper's\n * `[AfterEvent__symbol]` method with this event receiver as argument.\n *\n * A _recurrent event_ is an event sent from inside event receiver and targeted the same receiver. Recurrent event\n * processing is scheduled until after the current event processing finishes. To handle recurrent events in a specific\n * way the event receiver may utilize an {@link EventReceiver.Context event processing context} available as\n * a first parameter of [[EventReceiver.Object.receive]] method.\n *\n * @category Core\n * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n */\nexport type EventReceiver<E extends any[]> = EventReceiver.Function<E> | EventReceiver.Object<E>;\n\nexport namespace EventReceiver {\n\n  /**\n   * Event receiver function signature.\n   *\n   * It never receives event processing context.\n   *\n   * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n   */\n  export type Function<E extends any[]> =\n  /**\n   * @param event  An event represented by function call arguments.\n   */\n      (this: void, ...event: E) => void;\n\n  /**\n   * Event receiver object.\n   *\n   * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n   */\n  export interface Object<E extends any[]> {\n\n    /**\n     * Event supply to this receiver.\n     *\n     * Events will be supplied to this receiver until this supply is {@link EventSupply.off cut off}.\n     *\n     * When omitted a new supply will be created per receiver registration within event supplier.\n     */\n    readonly supply?: EventSupply;\n\n    /**\n     * Receives an event.\n     *\n     * @param context  An event processing context.\n     * @param event  An event represented as the rest of arguments.\n     */\n    receive(context: Context<E>, ...event: E): void;\n\n  }\n\n  /**\n   * The most generic event receiver form.\n   *\n   * Any event receiver may be converted to generic form by [[eventReceiver]] function.\n   *\n   * In contrast to [[Object]] this one always has a supply.\n   *\n   * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n   */\n  export interface Generic<E extends any[]> extends Object<E> {\n\n    readonly supply: EventSupply;\n\n  }\n\n  /**\n   * Event processing context.\n   *\n   * It is passed to [[Object]] receivers.\n   *\n   * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n   */\n  export interface Context<E extends any[]> {\n\n    /**\n     * Schedules the given event receiver to be called to process recurrent event(s).\n     *\n     * If called during event processing the recurrent events will be sent to the given `receiver` after current event\n     * processed instead of original one.\n     *\n     * If called multiple times the latest `receiver` will be used.\n     *\n     * If not called the recurrent events will be sent to original event receiver.\n     *\n     * > This method should be called __before__ the recurrent event issued. Otherwise it may happen that recurrent\n     * > event will be ignored in some situations. E.g. when it is issued during receiver registration.\n     *\n     * @param receiver  Recurrent events receiver function.\n     */\n    onRecurrent(receiver: Function<E>): void;\n\n  }\n\n}\n\n/**\n * Converts arbitrary event receiver to generic form.\n *\n * The returned event receiver would never send events to original receiver after event supply is cut off.\n *\n * @category Core\n * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n * @param receiver  An event receiver to convert.\n *\n * @returns Event `receiver` in most generic form.\n */\nexport function eventReceiver<E extends any[]>(receiver: EventReceiver<E>): EventReceiver.Generic<E> {\n\n  let generic: {\n    readonly supply: EventSupply;\n    receive: (context: EventReceiver.Context<E>, ...event: E) => void;\n  };\n\n  if (typeof receiver === 'function') {\n    generic = {\n      supply: eventSupply(),\n      receive(_context, ...event) {\n        receiver(...event);\n      },\n    };\n  } else {\n    generic = {\n      supply: receiver.supply || eventSupply(),\n      receive(context, ...event) {\n        if (!this.supply.isOff) {\n          // Supply cut off callback may be called before the receiver disabled.\n          // Such callback may send an event that should not be received.\n          receiver.receive(context, ...event);\n        }\n      },\n    };\n  }\n\n  // Disable receiver when event supply is cut off. But see the comment above.\n  // For function receiver this callback is always the first one.\n  generic.supply.whenOff(() => generic.receive = noop);\n\n  return generic;\n}\n","/**\n * @packageDocumentation\n * @module fun-events\n */\nimport { EventReceiver } from './event-receiver';\nimport { EventSupply } from './event-supply';\n\n/**\n * A key of event receiver registration method of [[EventSender]].\n *\n * @category Core\n */\nexport const OnEvent__symbol = (/*#__PURE__*/ Symbol('on-event'));\n\n/**\n * A sender of events.\n *\n * It is able to register event receivers.\n *\n * @category Core\n * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n */\nexport interface EventSender<E extends any[]> {\n\n  /**\n   * Registers a receiver of events sent by this sender.\n   *\n   * @param receiver  A receiver of events to register.\n   *\n   * @returns A supply of events from this sender to the given `receiver`.\n   */\n  [OnEvent__symbol](receiver: EventReceiver<E>): EventSupply;\n\n}\n\nexport namespace EventSender {\n\n  /**\n   * A type of events sent by the given event sender.\n   *\n   * @typeparam T  Target event sender.\n   */\n  export type Event<T extends EventSender<any>> = T extends EventSender<infer E> ? E : never;\n\n}\n\n/**\n * Checks whether the given object implements an [[EventSender]] interface.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param value  An object to check.\n *\n * @returns `true` if `value` contains `[OnEvent__symbol]` property, or `false` otherwise.\n */\nexport function isEventSender<E extends any[]>(value: object): value is EventSender<E> {\n  return OnEvent__symbol in value;\n}\n","import { EventReceiver } from '../event-receiver';\n\n/**\n * @internal\n */\nexport function once<E extends any[]>(\n    register: (receiver: EventReceiver.Generic<E>) => void,\n): (receiver: EventReceiver.Generic<E>) => void {\n  return receiver => register({\n    supply: receiver.supply,\n    receive: (context, ...event) => {\n      receiver.receive(context, ...event);\n      receiver.supply.off();\n    },\n  });\n}\n","/**\n * @packageDocumentation\n * @module fun-events\n */\nimport { eventReceiver, EventReceiver } from './event-receiver';\nimport { EventSender, OnEvent__symbol } from './event-sender';\nimport { EventSupply } from './event-supply';\n\n/**\n * Event notifier can be used to register event receivers and send events to them.\n *\n * It does not implement an [[OnEvent]] interface though. Use an [[EventEmitter]] if you need one.\n *\n * Manages a list of registered event receivers, and removes them from the list once their supplies\n * are {@link EventSupply.off cut off}.\n *\n * Can be used as [[EventSender]].\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n */\nexport class EventNotifier<E extends any[]> implements EventSender<E> {\n\n  /**\n   * @internal\n   */\n  private readonly _rcvs = new Set<EventReceiver.Generic<E>>();\n\n  /**\n   * Sends the given `event` to all registered receivers.\n   *\n   * @param event  An event to send represented by function call arguments.\n   */\n  readonly send: (this: this, ...event: E) => void = receiveEventsByEach(this._rcvs);\n\n  /**\n   * The number of currently registered event receivers.\n   */\n  get size(): number {\n    return this._rcvs.size;\n  }\n\n  [OnEvent__symbol](receiver: EventReceiver<E>): EventSupply {\n    return this.on(receiver);\n  }\n\n  /**\n   * Registers an event receiver.\n   *\n   * Receivers registered with this method will receive the {@link send emitted} events.\n   *\n   * The `[OnEvent__symbol]` method is an alias of this one.\n   *\n   * @param receiver  A receiver of events to register.\n   *\n   * @returns A supply of events to the given `receiver`.\n   */\n  on(receiver: EventReceiver<E>): EventSupply {\n\n    const generic = eventReceiver(receiver);\n\n    this._rcvs.add(generic);\n\n    return generic.supply.whenOff(() => this._rcvs.delete(generic));\n  }\n\n  /**\n   * Removes all registered event receivers and cuts off corresponding event supplies.\n   *\n   * After this method call they won't receive any events.\n   *\n   * @param reason  A reason to stop sending events.\n   *\n   * @returns `this` instance.\n   */\n  done(reason?: any): this {\n    this._rcvs.forEach(({ supply }) => supply.off(reason));\n    return this;\n  }\n\n}\n\n/**\n * Creates an event receiver function that dispatches events to each of the given event receivers.\n *\n * @category Core\n * @param receivers  An iterable of event receivers to dispatch event to.\n *\n * @returns An event receiver function that does not utilize event processing context an thus can be called directly.\n */\nfunction receiveEventsByEach<E extends any[]>(\n    receivers: Iterable<EventReceiver.Generic<E>>,\n): (this: void, ...event: E) => void {\n\n  let send: (this: void, event: E) => void = sendNonRecurrent;\n\n  return (...event) => send(event);\n\n  function sendNonRecurrent(event: E): void {\n\n    let actualReceivers = receivers;\n    const received: E[] = [];\n\n    send = (recurrent: E) => received.push(recurrent);\n\n    try {\n      for (; ;) {\n        actualReceivers = processEvent(actualReceivers, event);\n\n        const recurrent = received.shift();\n\n        if (!recurrent) {\n          break;\n        }\n\n        event = recurrent;\n      }\n    } finally {\n      send = sendNonRecurrent;\n    }\n  }\n}\n\nfunction processEvent<E extends any[]>(\n    receivers: Iterable<EventReceiver.Generic<E>>,\n    event: E,\n): EventReceiver.Generic<E>[] {\n\n  const recurrentReceivers: EventReceiver.Generic<E>[] = [];\n\n  for (const receiver of receivers) {\n\n    const idx = recurrentReceivers.length;\n\n    recurrentReceivers.push(receiver);\n\n    const context: EventReceiver.Context<E> = {\n      onRecurrent(recurrentReceiver) {\n        recurrentReceivers[idx] = eventReceiver({\n          supply: receiver.supply,\n          receive(_context, ...recurrentEvent) {\n            recurrentReceiver(...recurrentEvent);\n          },\n        });\n      },\n    };\n\n    receiver.receive(context, ...event);\n  }\n\n  return recurrentReceivers;\n}\n","import { EventNotifier } from '../event-notifier';\nimport { EventReceiver } from '../event-receiver';\nimport { eventSupply, EventSupply } from '../event-supply';\n\n/**\n * @internal\n */\nexport function share<E extends any[]>(\n    register: (receiver: EventReceiver.Generic<E>) => EventSupply,\n): (receiver: EventReceiver.Generic<E>) => void {\n\n  const shared = new EventNotifier<E>();\n  let sharedSupply: EventSupply;\n  let initialEvents: E[] | undefined;\n\n  return receiver => {\n    if (!shared.size) {\n      initialEvents = [];\n      sharedSupply = eventSupply(() => initialEvents = undefined);\n\n      register({\n        supply: sharedSupply,\n        receive(_ctx, ...event) {\n          if (initialEvents) {\n            if (shared.size) {\n              // More events received\n              // Stop sending initial ones\n              initialEvents = undefined;\n            } else {\n              // Record events received during first receiver registration\n              // to send them to all receivers until more event received\n              initialEvents.push(event);\n            }\n          }\n          shared.send(...event);\n        },\n      });\n    }\n\n    receiver.supply.needs(sharedSupply);\n    shared.on(receiver).whenOff((reason?: any) => {\n      if (!shared.size) {\n        sharedSupply.off(reason);\n      }\n    });\n\n    if (initialEvents) {\n      // Send initial events to just registered receiver\n\n      const dispatcher = new EventNotifier<E>();\n\n      dispatcher.on(receiver);\n      initialEvents.forEach(event => dispatcher.send(...event));\n    }\n  };\n}\n","import { EventReceiver } from '../event-receiver';\nimport { EventSupply } from '../event-supply';\n\n/**\n * @internal\n */\nexport function tillOff<E extends any[]>(\n    register: (receiver: EventReceiver.Generic<E>) => void,\n    supply: EventSupply,\n): (receiver: EventReceiver.Generic<E>) => void {\n  return receiver => {\n    receiver.supply.needs(supply);\n    register(receiver);\n  };\n}\n","/**\n * @packageDocumentation\n * @module fun-events\n */\nimport { callThru, NextCall } from 'call-thru';\nimport { AfterEvent__symbol } from './event-keeper';\nimport { eventReceiver, EventReceiver } from './event-receiver';\nimport { EventSender, isEventSender, OnEvent__symbol } from './event-sender';\nimport { EventSupplier } from './event-supplier';\nimport { eventSupply, EventSupply, noEventSupply } from './event-supply';\nimport { once, share, tillOff } from './impl';\nimport Result = NextCall.CallResult;\n\n/**\n * An event receiver registration function interface.\n *\n * A registered event receiver would receive upcoming events, until the returned event supply will be\n * {@link EventSupply.off cut off}.\n *\n * An [[OnEvent]] function also has a set of handy methods. More could be added later. It also can be used as\n * [[EventSender]].\n *\n * To convert a plain event receiver registration function to [[OnEvent]] an [[onEventBy]] function can be used.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n */\nexport abstract class OnEvent<E extends any[]> extends Function implements EventSender<E> {\n\n  get [OnEvent__symbol](): this {\n    return this;\n  }\n\n  /**\n   * An [[OnEvent]] sender derived from this one that stops sending events to registered receiver after the first one.\n   */\n  get once(): OnEvent<E> {\n    return onEventBy(once(this));\n  }\n\n  /**\n   * Builds an [[OnEvent]] sender that sends events from this one until the required `supply` is cut off.\n   *\n   * @param supply  The required event supply.\n   *\n   * @returns New event sender.\n   */\n  tillOff(supply: EventSupply): OnEvent<E> {\n    return onEventBy(tillOff(this, supply));\n  }\n\n  /**\n   * Extracts event suppliers from incoming events.\n   *\n   * @typeparam F  Extracted event type.\n   * @param extract  A function extracting event supplier from incoming event. May return `undefined` when nothing\n   * extracted.\n   *\n   * @returns An [[OnEvent]] sender of events from extracted suppliers. The events supply is cut off once the incoming\n   * events supply do. The returned sender shares the supply of extracted events among receivers.\n   */\n  dig<F extends any[]>(\n      extract: (this: void, ...event: E) => EventSupplier<F> | void | undefined,\n  ): OnEvent<F> {\n    return onEventBy(share(this.dig_(extract)));\n  }\n\n  /**\n   * Extracts event suppliers from incoming events without sharing extracted events supply.\n   *\n   * This method does the same as [[OnEvent.dig]] one, except it does not share the supply of extracted events among\n   * receivers. This may be useful e.g. when the result will be further transformed. It is wise to {@link share share}\n   * the supply of events from final result in this case.\n   *\n   * @typeparam F  Extracted event type.\n   * @param extract  A function extracting event supplier from incoming event. May return `undefined` when\n   * nothing extracted.\n   *\n   * @returns An [[OnEvent]] sender of events from extracted suppliers. The events supply is cut off once the incoming\n   * events supply do.\n   */\n  dig_<F extends any[]>(\n      extract: (this: void, ...event: E) => EventSupplier<F> | void | undefined,\n  ): OnEvent<F> {\n    return onEventBy((receiver: EventReceiver.Generic<F>) => {\n\n      let nestedSupply = noEventSupply();\n\n      this({\n        supply: receiver.supply,\n        receive(_context, ...event: E) {\n\n          const prevSupply = nestedSupply;\n          const extracted = extract(...event);\n\n          try {\n            nestedSupply = extracted\n                ? onSupplied(extracted)({\n                  supply: eventSupply().needs(receiver.supply),\n                  receive(context, ...nestedEvent) {\n                    receiver.receive(context, ...nestedEvent);\n                  },\n                })\n                : noEventSupply();\n          } finally {\n            prevSupply.off();\n          }\n        },\n      });\n    });\n  }\n\n  /**\n   * Consumes events.\n   *\n   * @param consume  A function consuming events. This function may return an {@link EventSupply event supply} instance\n   * when registers a nested event receiver. This supply will be cut off on new event.\n   *\n   * @returns An event supply that will stop consuming events once {@link EventSupply.off cut off}.\n   */\n  consume(consume: (...event: E) => EventSupply | void | undefined): EventSupply {\n\n    let consumerSupply = noEventSupply();\n    const senderSupply = this((...event: E) => {\n\n      const prevSupply = consumerSupply;\n\n      try {\n        consumerSupply = consume(...event) || noEventSupply();\n      } finally {\n        prevSupply.off();\n      }\n    });\n\n    return eventSupply(reason => {\n      consumerSupply.off(reason);\n      senderSupply.off(reason);\n    }).needs(senderSupply);\n  }\n\n  /**\n   * Constructs an [[OnEvent]] sender that shares events supply among all registered receivers.\n   *\n   * The created sender receives events from this one and sends to registered receivers. The shared sender registers\n   * a receiver in this one only once, when first receiver registered. And cuts off original events supply once all\n   * supplies do.\n   *\n   * @returns An [[OnEvent]] sender sharing a common supply of events originated from this sender.\n   */\n  share(): OnEvent<E> {\n    return onEventBy(share(this));\n  }\n\n  /**\n   * Constructs an [[OnEvent]] sender of original events passed trough the chain of transformations.\n   *\n   * The passes are preformed by `callThru()` function. The event receivers registered by resulting event sender\n   * are called by the last pass in chain. Thus they can be e.g. filtered out or called multiple times.\n   *\n   * @returns An [[OnEvent]] sender of events transformed with provided passes. The returned sender shares the supply\n   * of transformed events among receivers.\n   */\n  thru<R1 extends any[]>(\n      fn1: (this: void, ...args: E) => NextCall<any, R1, void, void, void>,\n  ): OnEvent<R1>;\n\n  thru<R1>(\n      fn1: (this: void, ...args: E) => R1,\n  ): OnEvent<[R1]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => NextCall<any, R2, void, void, void>,\n  ): OnEvent<R2>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n  ): OnEvent<[R2]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n  ): OnEvent<R3>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], RE>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => RE,\n  ): OnEvent<[RE]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n  ): OnEvent<[R4]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => NextCall<any, R5, void, void, void>,\n  ): OnEvent<R5>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n  ): OnEvent<[R5]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => NextCall<any, R6, void, void, void>,\n  ): OnEvent<R6>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n  ): OnEvent<[R6]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => NextCall<any, R7, void, void, void>,\n  ): OnEvent<R7>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n  ): OnEvent<[R7]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => NextCall<any, R8, void, void, void>,\n  ): OnEvent<R8>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n  ): OnEvent<[R8]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => NextCall<any, R9, void, void, void>,\n  ): OnEvent<R9>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n  ): OnEvent<[R9]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => NextCall<any, R10, void, void, void>,\n  ): OnEvent<R10>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n  ): OnEvent<[R10]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => NextCall<any, R11, void, void, void>,\n  ): OnEvent<R11>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n  ): OnEvent<[R11]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => NextCall<any, R12, void, void, void>,\n  ): OnEvent<R12>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n  ): OnEvent<[R12]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends Result<P13>,\n      P13 extends any[], R13 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n      fn13: (this: void, ...args: P13) => NextCall<any, R13, void, void, void>,\n  ): OnEvent<R13>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends Result<P13>,\n      P13 extends any[], R13>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n      fn13: (this: void, ...args: P13) => R13,\n  ): OnEvent<[R13]>;\n\n  thru(...fns: any[]): OnEvent<any[]> {\n    return onEventBy(share((this as any).thru_(...fns)));\n  }\n\n  /**\n   * Constructs an [[OnEvent]] sender of original events passed trough the chain of transformations without sharing\n   * the transformed events supply.\n   *\n   * This method does the same as [[OnEvent.thru]] one, except it does not share the supply of transformed events\n   * among receivers. This may be useful e.g. when the result will be further transformed anyway. It is wise to\n   * {@link share share} the supply of events from final result in this case.\n   *\n   * @returns An [[OnEvent]] sender of events transformed with provided passes.\n   */\n  thru_<R1 extends any[]>(\n      fn1: (this: void, ...args: E) => NextCall<any, R1, void, void, void>,\n  ): OnEvent<R1>;\n\n  thru_<R1>(\n      fn1: (this: void, ...args: E) => R1,\n  ): OnEvent<[R1]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => NextCall<any, R2, void, void, void>,\n  ): OnEvent<R2>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n  ): OnEvent<[R2]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n  ): OnEvent<R3>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], RE>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => RE,\n  ): OnEvent<[RE]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n  ): OnEvent<[R4]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => NextCall<any, R5, void, void, void>,\n  ): OnEvent<R5>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n  ): OnEvent<[R5]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => NextCall<any, R6, void, void, void>,\n  ): OnEvent<R6>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n  ): OnEvent<[R6]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => NextCall<any, R7, void, void, void>,\n  ): OnEvent<R7>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n  ): OnEvent<[R7]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => NextCall<any, R8, void, void, void>,\n  ): OnEvent<R8>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n  ): OnEvent<[R8]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => NextCall<any, R9, void, void, void>,\n  ): OnEvent<R9>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n  ): OnEvent<[R9]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => NextCall<any, R10, void, void, void>,\n  ): OnEvent<R10>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n  ): OnEvent<[R10]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => NextCall<any, R11, void, void, void>,\n  ): OnEvent<R11>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n  ): OnEvent<[R11]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => NextCall<any, R12, void, void, void>,\n  ): OnEvent<R12>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n  ): OnEvent<[R12]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends Result<P13>,\n      P13 extends any[], R13 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n      fn13: (this: void, ...args: P13) => NextCall<any, R13, void, void, void>,\n  ): OnEvent<R13>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends Result<P13>,\n      P13 extends any[], R13>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n      fn13: (this: void, ...args: P13) => R13,\n  ): OnEvent<[R13]>;\n\n  thru_(...fns: any[]): OnEvent<any[]> {\n\n    const thru = callThru as any;\n\n    return onEventBy(\n        receiver => this({\n          supply: receiver.supply,\n          receive(context, ...event) {\n            thru(\n                ...fns,\n                (...transformed: any[]) => receiver.receive(context, ...transformed),\n            )(...event);\n          },\n        }),\n    );\n  }\n\n}\n\nexport interface OnEvent<E extends any[]> {\n\n  /**\n   * Registers a receiver of events sent by this sender.\n   *\n   * @param receiver  A receiver of events to register.\n   *\n   * @returns A supply of events from this sender to the given `receiver`.\n   */\n  (this: void, receiver: EventReceiver<E>): EventSupply;// eslint-disable-line @typescript-eslint/prefer-function-type\n\n}\n\n/**\n * Converts a plain event receiver registration function to [[OnEvent]] sender.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param register  Generic event receiver registration function. It will be called on each receiver registration,\n * unless the receiver's {@link EventReceiver.Generic.supply event supply} is cut off already.\n *\n * @returns An [[OnEvent]] sender registering event receivers with the given `register` function.\n */\nexport function onEventBy<E extends any[]>(\n    register: (this: void, receiver: EventReceiver.Generic<E>) => void,\n): OnEvent<E> {\n\n  const onEvent = ((receiver: EventReceiver<E>) => {\n\n    const generic = eventReceiver(receiver);\n    const { supply } = generic;\n\n    if (!supply.isOff) {\n      register(generic);\n    }\n\n    return supply;\n  }) as OnEvent<E>;\n\n  Object.setPrototypeOf(onEvent, OnEvent.prototype);\n\n  return onEvent;\n}\n\n/**\n * Builds an [[OnEvent]] sender of events supplied by the given `supplier`.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param supplier  An event supplier.\n *\n * @returns An [[OnEvent]] sender of events originated from the given `supplier`.\n */\nexport function onSupplied<E extends any[]>(supplier: EventSupplier<E>): OnEvent<E> {\n\n  const onEvent = isEventSender(supplier) ? supplier[OnEvent__symbol] : supplier[AfterEvent__symbol];\n\n  if (onEvent instanceof OnEvent) {\n    return onEvent;\n  }\n\n  return onEventBy(onEvent.bind(supplier));\n}\n\n/**\n * An [[OnEvent]] sender that never sends any events.\n *\n * @category Core\n */\nexport const onNever: OnEvent<any> = (/*#__PURE__*/ onEventBy(({ supply }) => supply.off()));\n","/**\n * @packageDocumentation\n * @module fun-events\n */\nimport { NextCall, noop, valueProvider } from 'call-thru';\nimport { AfterEvent__symbol, EventKeeper, isEventKeeper } from './event-keeper';\nimport { eventReceiver, EventReceiver } from './event-receiver';\nimport { EventSender, OnEvent__symbol } from './event-sender';\nimport { EventSupplier } from './event-supplier';\nimport { EventSupply, eventSupply } from './event-supply';\nimport { once, share, tillOff } from './impl';\nimport { OnEvent } from './on-event';\nimport Result = NextCall.CallResult;\n\n/**\n * A subset of [[AfterEvent]] transformation methods inherited that return [[AfterEvent]] keepers instead of\n * [[OnEvent]] senders.\n *\n * This can not be done automatically, as not every transformation results to [[EventKeeper]]. E.g. when some events\n * are filtered out.\n *\n * An instance of this class can be obtained from [[AfterEvent.keep]] property.\n *\n * @category Core\n */\nexport class AfterEventKeep<E extends any[]> {\n\n  /**\n   * @internal\n   */\n  private readonly _keeper: AfterEvent<E>;\n\n  constructor(keeper: AfterEvent<E>) {\n    this._keeper = keeper;\n  }\n\n  /**\n   * Extracts event keepers from incoming events.\n   *\n   * @typeparam F  Extracted event type.\n   * @param extract  A function extracting event keeper from incoming event.\n   *\n   * @returns An [[AfterEvent]] keeper of extracted events. The events supply is cut off once the incoming events supply\n   * do. The returned keeper shares the supply of extracted events among receivers.\n   */\n  dig<F extends any[]>(extract: (this: void, ...event: E) => EventKeeper<F>): AfterEvent<F> {\n    return this.dig_(extract).share();\n  }\n\n  /**\n   * Extracts event keepers from incoming events without sharing extracted events supply.\n   *\n   * This method does the same as [[AfterEventKeep.dig]] one, except it does not share the supply of extracted events\n   * among receivers. This may be useful e.g. when the result will be further transformed. It is wise to\n   * {@link AfterEvent.share share} the supply of events from the final result in this case.\n   *\n   * @typeparam F  Extracted event type.\n   * @param extract  A function extracting event keeper from incoming event.\n   *\n   * @returns An [[AfterEvent]] keeper of extracted events. The events supply is cut off once the incoming events\n   * supply do.\n   */\n  dig_<F extends any[]>(extract: (this: void, ...event: E) => EventKeeper<F>): AfterEvent<F> {\n    return afterSupplied(this._keeper.dig_((...event) => afterSupplied(extract(...event))));\n  }\n\n  /**\n   * Constructs an [[AfterEvent]] keeper of original events passed trough the chain of transformations.\n   *\n   * The passes are preformed by `callThru()` function. The event receivers registered by resulting event keeper\n   * are called by the last pass in chain. Thus they can be e.g. filtered out or called multiple times.\n   *\n   * @returns An [[AfterEvent]] keeper of events transformed with provided passes. The returned keeper shares the supply\n   * of transformed events among receivers.\n   */\n  thru<R1 extends any[]>(\n      fn1: (this: void, ...args: E) => NextCall<any, R1, void, void, void>,\n  ): AfterEvent<R1>;\n\n  thru<R1>(\n      fn1: (this: void, ...args: E) => R1,\n  ): AfterEvent<[R1]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => NextCall<any, R2, void, void, void>,\n  ): AfterEvent<R2>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n  ): AfterEvent<[R2]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n  ): AfterEvent<R3>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], RE>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => RE,\n  ): AfterEvent<[RE]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n  ): AfterEvent<[R4]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => NextCall<any, R5, void, void, void>,\n  ): AfterEvent<R5>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n  ): AfterEvent<[R5]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => NextCall<any, R6, void, void, void>,\n  ): AfterEvent<R6>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n  ): AfterEvent<[R6]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => NextCall<any, R7, void, void, void>,\n  ): AfterEvent<R7>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n  ): AfterEvent<[R7]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => NextCall<any, R8, void, void, void>,\n  ): AfterEvent<R8>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n  ): AfterEvent<[R8]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => NextCall<any, R9, void, void, void>,\n  ): AfterEvent<R9>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n  ): AfterEvent<[R9]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => NextCall<any, R10, void, void, void>,\n  ): AfterEvent<R10>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n  ): AfterEvent<[R10]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => NextCall<any, R11, void, void, void>,\n  ): AfterEvent<R11>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n  ): AfterEvent<[R11]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => NextCall<any, R12, void, void, void>,\n  ): AfterEvent<R12>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n  ): AfterEvent<[R12]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends Result<P13>,\n      P13 extends any[], R13 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n      fn13: (this: void, ...args: P13) => NextCall<any, R13, void, void, void>,\n  ): AfterEvent<R13>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends Result<P13>,\n      P13 extends any[], R13>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n      fn13: (this: void, ...args: P13) => R13,\n  ): AfterEvent<[R13]>;\n\n  thru(...fns: any[]): AfterEvent<any[]> {\n    return (this as any).thru_(...fns).share();\n  }\n\n  /**\n   * Constructs an [[AfterEvent]] keeper of original events passed trough the chain of transformations without sharing\n   * the transformed events supply.\n   *\n   * This method does the same as [[AfterEventKeep.thru]] one, except it does not share the supply of transformed\n   * events among receivers. This may be useful e.g. when the result will be further transformed anyway.\n   * It is wise to {@link AfterEvent.share share} the supply of events from final result in this case.\n   *\n   * @returns An [[AfterEvent]] keeper of events transformed with provided passes.\n   */\n  thru_<R1 extends any[]>(\n      fn1: (this: void, ...args: E) => NextCall<any, R1, void, void, void>,\n  ): AfterEvent<R1>;\n\n  thru_<R1>(\n      fn1: (this: void, ...args: E) => R1,\n  ): AfterEvent<[R1]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => NextCall<any, R2, void, void, void>,\n  ): AfterEvent<R2>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n  ): AfterEvent<[R2]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n  ): AfterEvent<R3>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], RE>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => RE,\n  ): AfterEvent<[RE]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n  ): AfterEvent<[R4]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => NextCall<any, R5, void, void, void>,\n  ): AfterEvent<R5>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n  ): AfterEvent<[R5]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => NextCall<any, R6, void, void, void>,\n  ): AfterEvent<R6>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n  ): AfterEvent<[R6]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => NextCall<any, R7, void, void, void>,\n  ): AfterEvent<R7>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n  ): AfterEvent<[R7]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => NextCall<any, R8, void, void, void>,\n  ): AfterEvent<R8>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n  ): AfterEvent<[R8]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => NextCall<any, R9, void, void, void>,\n  ): AfterEvent<R9>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n  ): AfterEvent<[R9]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => NextCall<any, R10, void, void, void>,\n  ): AfterEvent<R10>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n  ): AfterEvent<[R10]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => NextCall<any, R11, void, void, void>,\n  ): AfterEvent<R11>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n  ): AfterEvent<[R11]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => NextCall<any, R12, void, void, void>,\n  ): AfterEvent<R12>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n  ): AfterEvent<[R12]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends Result<P13>,\n      P13 extends any[], R13 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n      fn13: (this: void, ...args: P13) => NextCall<any, R13, void, void, void>,\n  ): AfterEvent<R13>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends Result<P13>,\n      P13 extends any[], R13>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n      fn13: (this: void, ...args: P13) => R13,\n  ): AfterEvent<[R13]>;\n\n  thru_(...fns: any[]): AfterEvent<any[]> {\n    return afterSupplied((this._keeper as any).thru_(...fns));\n  }\n\n}\n\n/**\n * A kept and upcoming events receiver registration function interface.\n *\n * A registered event receiver would receive the kept event immediately upon registration, and all upcoming events\n * after that.\n *\n * To convert a plain event receiver registration function to [[AfterEvent]] an [[afterEventBy]] function can be used.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n */\nexport abstract class AfterEvent<E extends any[]> extends OnEvent<E> implements EventKeeper<E> {\n\n  get [AfterEvent__symbol](): this {\n    return this;\n  }\n\n  /**\n   * A subset of [[AfterEvent]] transformation methods that return [[AfterEvent]] keepers instead of [[OnEvent]]\n   * senders.\n   *\n   * Note that not every transformation can properly result to [[EventKeeper]]. E.g. some events may be filtered out and\n   * the resulting [[AfterEvent]] would rise an exception on receiver registration, as it won't have any events to send.\n   */\n  get keep(): AfterEventKeep<E> {\n    return new AfterEventKeep(this);\n  }\n\n  /**\n   * An [[AfterEvent]] keeper derived from this one that sends currently the kept event to registered receiver\n   * and stops sending them after that.\n   */\n  get once(): AfterEvent<E> {\n    return afterEventBy(once(this));\n  }\n\n  /**\n   * Builds an [[AfterEvent]] keeper that sends events from this one until the required `supply` is cut off.\n   *\n   * @param supply  The required event supply.\n   *\n   * @returns New event keeper.\n   */\n  tillOff(supply: EventSupply): AfterEvent<E> {\n    return afterEventBy(tillOff(this, supply));\n  }\n\n  /**\n   * Constructs an [[AfterEvent]] keeper that shares events supply among all registered receivers.\n   *\n   * The created keeper receives events from this one and sends to registered receivers. The shared keeper registers\n   * a receiver in this one only once, when first receiver registered. And cuts off original events supply once all\n   * event supplies do.\n   *\n   * @returns An [[AfterEvent]] keeper sharing a common supply of events originating from this keeper.\n   */\n  share(): AfterEvent<E> {\n    return afterEventBy(share(this));\n  }\n\n}\n\n/**\n * Converts a plain event receiver registration function to [[AfterEvent]] keeper with a fallback.\n *\n * The event generated by `fallback` will be sent to the registered first receiver, unless `register` function sends\n * one.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param register  Generic event receiver registration function. It will be called on each receiver registration,\n * unless the receiver's {@link EventReceiver.Generic.supply event supply} is cut off already.\n * @param fallback  A function creating fallback event. When omitted, the initial event is expected to be sent by\n * `register` function. A receiver registration would lead to an error otherwise.\n *\n * @returns An [[AfterEvent]] keeper registering event receivers with the given `register` function.\n */\nexport function afterEventBy<E extends any[]>(\n    register: (this: void, receiver: EventReceiver.Generic<E>) => void,\n    fallback: (this: void) => E = noEvent,\n): AfterEvent<E> {\n\n  let lastEvent: E | undefined;\n  let numReceivers = 0;\n\n  const afterEvent = ((receiver: EventReceiver<E>) => {\n\n    let dest: (context: EventReceiver.Context<E>, ...event: E) => void = noop;\n    const generic = eventReceiver(receiver);\n\n    if (generic.supply.isOff) {\n      return generic.supply;\n    }\n\n    const supply = eventSupply().needs(generic.supply);\n    let reported = false;\n\n    register({\n      supply,\n      receive(context, ...event: E) {\n        reported = true;\n        lastEvent = event;\n        dest(context, ...event);\n      },\n    });\n    ++numReceivers;\n\n    if (!supply.isOff || reported) {\n      generic.receive(\n          {\n            onRecurrent(recurrent) {\n              dest = (_context, ...event) => recurrent(...event);\n            },\n          },\n          ...(lastEvent || (lastEvent = fallback())),\n      );\n      dest = (context, ...event) => generic.receive(context, ...event);\n    }\n\n    supply.whenOff(reason => {\n      if (!--numReceivers) {\n        lastEvent = undefined;\n      }\n      generic.supply.off(reason);\n    });\n\n    return supply;\n  }) as AfterEvent<E>;\n\n  Object.setPrototypeOf(afterEvent, AfterEvent.prototype);\n\n  return afterEvent;\n}\n\n/**\n * Builds an [[AfterEvent]] keeper of events sent by the given `keeper`.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param keeper  A keeper of events.\n *\n * @returns An [[AfterEvent]] keeper of events originated from the given `keeper`.\n */\nexport function afterSupplied<E extends any[]>(keeper: EventKeeper<E>): AfterEvent<E>;\n\n/**\n * Builds an [[AfterEvent]] keeper of events sent by the given `sender`.\n *\n * The event generated by `fallback` will be sent to the registered first receiver, unless `register` function sends\n * one.\n *\n * This is a synonym of [[afterSent]], unless `sender` is an [[EventKeeper]].\n *\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param sender  An event sender.\n * @param fallback  A function creating fallback event. When omitted, the initial event is expected to be sent by\n * `register` function. A receiver registration would lead to an error otherwise.\n *\n * @returns An [[AfterEvent]] keeper of events either originated from the given `sender`, or `initial` one.\n */\nexport function afterSupplied<E extends any[]>(\n    sender: EventSender<E>,\n    fallback?: (this: void) => E,\n): AfterEvent<E>;\n\nexport function afterSupplied<E extends any[]>(\n    supplier: EventSupplier<E>,\n    fallback?: (this: void) => E,\n): AfterEvent<E> {\n  if (!isEventKeeper(supplier)) {\n    return afterSent(supplier, fallback);\n  }\n\n  const afterEvent = supplier[AfterEvent__symbol];\n\n  if (afterEvent instanceof AfterEvent) {\n    return afterEvent;\n  }\n\n  return afterEventBy(afterEvent.bind(supplier));\n}\n\n/**\n * Builds an [[AfterEvent]] keeper of events sent by the given `sender`.\n *\n * The event generated by `fallback` will be sent to the registered first receiver, unless `register` function sends\n * one.\n *\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param sender  An event sender.\n * @param fallback  A function creating fallback event. When omitted, the initial event is expected to be sent by\n * `register` function. A receiver registration would lead to an error otherwise.\n *\n * @returns An [[AfterEvent]] keeper of events either originated from the given `sender`, or `initial` one.\n */\nexport function afterSent<E extends any[]>(\n    sender: EventSender<E>,\n    fallback?: (this: void) => E,\n): AfterEvent<E> {\n  return afterEventBy(receiver => sender[OnEvent__symbol](receiver), fallback);\n}\n\n/**\n * Builds an [[AfterEvent]] keeper of the given `event`.\n *\n * @category Core\n * @param event  An event that will be sent to all receivers upon registration.\n *\n * @returns An [[AfterEvent]] keeper that always sends the given `event`.\n */\nexport function afterThe<E extends any[]>(...event: E): AfterEvent<E> {\n  return afterEventBy(() => eventSupply(), valueProvider(event));\n}\n\n/**\n * An [[AfterEvent]] keeper that never sends any events.\n *\n * @category Core\n */\nexport const afterNever: AfterEvent<any> = (/*#__PURE__*/ afterEventBy(({ supply }) => supply.off()));\n\nfunction noEvent(): never {\n  throw new Error('No events to send');\n}\n","/**\n * @packageDocumentation\n * @module fun-events\n */\nimport { EventNotifier } from './event-notifier';\nimport { EventSender, OnEvent__symbol } from './event-sender';\nimport { OnEvent, onEventBy } from './on-event';\n\n/**\n * Event emitter is a handy implementation of [[OnEvent]] sender.\n *\n * Extends [[EventNotifier]] by making its [[EventNotifier.on]] method implement an [[OnEvent]] interface.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n */\nexport class EventEmitter<E extends any[]> extends EventNotifier<E> implements EventSender<E> {\n\n  /**\n   * An [[OnEvent]] sender.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  readonly on = onEventBy<E>(receiver => super.on(receiver));\n\n  readonly [OnEvent__symbol]: OnEvent<E> = this.on;\n\n}\n","/**\n * @packageDocumentation\n * @module fun-events\n */\nimport { noop } from 'call-thru';\nimport { AfterEvent, afterEventBy, afterNever, afterSupplied } from '../after-event';\nimport { AfterEvent__symbol, EventKeeper } from '../event-keeper';\nimport { EventNotifier } from '../event-notifier';\nimport { EventReceiver } from '../event-receiver';\n\n/**\n * Builds an [[AfterEvent]] keeper of events sent by all event keepers in `sources` map.\n *\n * @category Core\n * @typeparam S  A type of `sources` map.\n * @param sources  A map of named event keepers the events are originated from.\n *\n * @returns An event keeper sending a map of events received from each event keeper. Each event in this map has the\n * same name as its originating event keeper in `sources`.\n */\nexport function afterAll<S extends { readonly [key: string]: EventKeeper<any> }>(\n    sources: S,\n): AfterEvent<[{ readonly [K in keyof S]: EventKeeper.Event<S[K]> }]> {\n\n  const keys = Object.keys(sources);\n\n  if (!keys.length) {\n    return afterNever;\n  }\n\n  return afterEventBy(registerReceiver, latestEvent).share();\n\n  function registerReceiver(\n      receiver: EventReceiver.Generic<[{ readonly [K in keyof S]: EventKeeper.Event<S[K]> }]>,\n  ): void {\n\n    const notifier = new EventNotifier<[{ readonly [K in keyof S]: EventKeeper.Event<S[K]> }]>();\n    const supply = notifier.on(receiver);\n    let send: () => void = noop;\n    const result: { [K in keyof S]: EventKeeper.Event<S[K]> } = {} as any;\n\n    keys.forEach((key: keyof S) => {\n      supply.needs(sources[key][AfterEvent__symbol]((...event) => {\n        result[key] = event;\n        send();\n      }).needs(supply));\n    });\n\n    if (!supply.isOff) {\n      send = () => notifier.send(result);\n    }\n  }\n\n  function latestEvent(): [{ readonly [K in keyof S]: EventKeeper.Event<S[K]> }] {\n\n    const result: { [K in keyof S]: EventKeeper.Event<S[K]> } = {} as any;\n\n    keys.forEach(\n        key => afterSupplied(sources[key]).once(\n            (...event) => result[key as keyof S] = event,\n        ),\n    );\n\n    return [result];\n  }\n}\n","/**\n * @packageDocumentation\n * @module fun-events\n */\nimport { noop } from 'call-thru';\nimport { AfterEvent, afterEventBy, afterNever, afterSupplied } from '../after-event';\nimport { AfterEvent__symbol, EventKeeper } from '../event-keeper';\nimport { EventNotifier } from '../event-notifier';\nimport { EventReceiver } from '../event-receiver';\n\n/**\n * Builds an [[AfterEvent]] keeper of events sent by each of the `sources`.\n *\n * @category Core\n * @typeparam E  A type of events sent by each source.\n * @param sources  An array of source event keepers.\n *\n * @returns An event keeper sending events received from each event keeper. Each event item is an event tuple originated\n * from event keeper under the same index in `sources` array.\n */\nexport function afterEach<E extends any[]>(...sources: EventKeeper<E>[]): AfterEvent<E[]> {\n  if (!sources.length) {\n    return afterNever;\n  }\n\n  return afterEventBy(registerReceiver, latestEvent).share();\n\n  function registerReceiver(receiver: EventReceiver.Generic<E[]>): void {\n\n    const notifier = new EventNotifier<E[]>();\n    const supply = notifier.on(receiver);\n    let send: () => void = noop;\n    const result: E[] = [];\n\n    sources.forEach((source, index) => {\n      supply.needs(source[AfterEvent__symbol]((...event) => {\n        result[index] = event;\n        send();\n      }).needs(supply));\n    });\n\n    if (!supply.isOff) {\n      send = () => notifier.send(...result);\n    }\n  }\n\n  function latestEvent(): E[] {\n\n    const result: E[] = [];\n\n    sources.forEach(\n        source => afterSupplied(source).once(\n            (...event) => result.push(event),\n        ),\n    );\n\n    return result;\n  }\n}\n","/**\n * @packageDocumentation\n * @module fun-events\n */\nimport { EventReceiver } from '../event-receiver';\nimport { EventSupplier } from '../event-supplier';\nimport { eventSupply } from '../event-supply';\nimport { OnEvent, onEventBy, onNever, onSupplied } from '../on-event';\n\n/**\n * Builds an [[OnEvent]] sender of events sent by any of the given `suppliers`.\n *\n * The resulting event supply is cut off as soon as all source supplies do.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param suppliers  Original event suppliers.\n *\n * @returns An [[OnEvent]] sender of all supplied events.\n */\nexport function onAny<E extends any[]>(...suppliers: EventSupplier<E>[]): OnEvent<E> {\n  if (!suppliers.length) {\n    return onNever;\n  }\n\n  return onEventBy<E>(receiver => {\n\n    const { supply } = receiver;\n    let remained = suppliers.length;\n    const removeSupplier = (reason?: any): void => {\n      if (!--remained) {\n        supply.off(reason);\n      }\n    };\n    const receive = (context: EventReceiver.Context<E>, ...event: E): void => {\n      receiver.receive(context, ...event);\n    };\n\n    suppliers.forEach(\n        supplier => onSupplied(supplier)({\n          supply: eventSupply(removeSupplier).needs(supply),\n          receive,\n        }),\n    );\n  }).share();\n}\n","/**\n * @packageDocumentation\n * @module fun-events\n */\n/**\n * A path to state or its part. E.g. property value.\n *\n * May consist of one or more property keys.\n *\n * An array consisting of the only one property key is the same as this property key.\n *\n * An empty array is a path to the state itself.\n *\n * @category State Tracking\n */\nexport type StatePath = PropertyKey | StatePath.Normalized;\n\nexport namespace StatePath {\n\n  /**\n   * Normalized state path.\n   *\n   * This is always an array of property keys.\n   */\n  export type Normalized = readonly PropertyKey[];\n\n}\n\n/**\n * Normalizes a state path consisting of single key.\n *\n * @category State Tracking\n * @param key  A path key.\n *\n * @return Normalized state path.\n */\nexport function statePath<K extends PropertyKey>(key: K): [K];\n\n/**\n * Normalizes arbitrary state path. I.e. converts it to array.\n *\n * @param path  Arbitrary state path.\n *\n * @return Normalized state path.\n */\nexport function statePath(path: StatePath): StatePath.Normalized;\n\nexport function statePath(path: StatePath): StatePath.Normalized {\n  return Array.isArray(path) ? path : [path];\n}\n","/**\n * @packageDocumentation\n * @module fun-events\n */\nimport { noop } from 'call-thru';\nimport { EventEmitter } from '../event-emitter';\nimport { EventSender, OnEvent__symbol } from '../event-sender';\nimport { eventSupply, EventSupply } from '../event-supply';\nimport { onEventBy } from '../on-event';\nimport { OnStateUpdate } from './on-state-update';\nimport { statePath, StatePath } from './state-path';\nimport { StateUpdateReceiver } from './state-update-receiver';\n\nclass PathEntry {\n\n  readonly emitter = new EventEmitter<[StatePath, any, any]>();\n  private readonly _nested = new Map<PropertyKey, PathEntry>();\n\n  constructor(private readonly _drop: () => void) {\n    this.emitter.on((path, newValue, oldValue) => {\n      path = statePath(path);\n\n      const key = path[0];\n      const nested = this._nested.get(key);\n\n      if (nested) {\n        nested.emitter.send(path.slice(1), newValue, oldValue);\n      }\n    });\n  }\n\n  on(receiver: StateUpdateReceiver): EventSupply {\n\n    const supply = this.emitter.on(receiver);\n\n    return eventSupply(reason => {\n      supply.off(reason);\n      this._dropIfEmpty();\n    }).needs(supply);\n  }\n\n  nest(key: PropertyKey): PathEntry;\n\n  nest(key: PropertyKey, dontCreateMissing: true): PathEntry | undefined;\n\n  nest(key: PropertyKey, dontCreateMissing?: true): PathEntry | undefined;\n\n  nest(key: PropertyKey, dontCreateMissing?: true): PathEntry | undefined {\n\n    const found = this._nested.get(key);\n\n    if (found || dontCreateMissing) {\n      return found;\n    }\n\n    const created = new PathEntry(() => this._remove(key));\n\n    this._nested.set(key, created);\n\n    return created;\n  }\n\n  done(reason?: any): void {\n    for (const nested of this._nested.values()) {\n      nested.done(reason);\n    }\n    this.emitter.done(reason);\n  }\n\n  private _remove(key: PropertyKey): void {\n    this._nested.delete(key);\n    this._dropIfEmpty();\n  }\n\n  private _dropIfEmpty(): void {\n    if (!this._nested.size && this.emitter.size <= 1) {\n      this._drop();\n    }\n  }\n\n}\n\nclass Trackers {\n\n  private readonly _root = new PathEntry(noop);\n\n  on(path: StatePath.Normalized, receiver: StateUpdateReceiver): EventSupply {\n    return this._entry(path).on(receiver);\n  }\n\n  send<V>(path: StatePath.Normalized, newValue: V, oldValue: V): void {\n    this._root.emitter.send(path, newValue, oldValue);\n  }\n\n  done(path: StatePath.Normalized, reason?: any): void {\n\n    const entry = this._entry(path, true);\n\n    if (entry) {\n      entry.done(reason);\n    }\n  }\n\n  private _entry(path: StatePath.Normalized): PathEntry;\n\n  private _entry(path: StatePath.Normalized, dontCreateMissing: true): PathEntry | undefined;\n\n  private _entry(path: StatePath.Normalized, dontCreateMissing?: true): PathEntry | undefined {\n\n    let entry = this._root;\n\n    for (const key of path) {\n\n      const nested = entry.nest(key, dontCreateMissing);\n\n      if (!nested) {\n        return;\n      }\n\n      entry = nested;\n    }\n\n    return entry;\n  }\n\n}\n\nclass SubStateTracker implements StateTracker {\n\n  readonly update: <V>(\n      this: void,\n      path: StatePath,\n      newValue: V,\n      oldValue: V,\n  ) => void = (<V>(path: StatePath, newValue: V, oldValue: V) => {\n    this._trackers.send([...this._path, ...statePath(path)], newValue, oldValue);\n  });\n\n  readonly onUpdate: OnStateUpdate =\n      onEventBy<[StatePath, any, any]>(receiver => this._trackers.on(this._path, receiver));\n\n  constructor(private readonly _trackers: Trackers, private readonly _path: StatePath.Normalized) {\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  get _tracker(): this {\n    return this;\n  }\n\n  get [OnEvent__symbol](): OnStateUpdate {\n    return this.onUpdate;\n  }\n\n  track(path: StatePath): SubStateTracker {\n    path = statePath(path);\n    if (!path.length) {\n      return this; // Path to itself.\n    }\n    return new SubStateTracker(this._trackers, [...this._path, ...path]);\n  }\n\n  done(reason?: any): void {\n    this._trackers.done(this._path, reason);\n  }\n\n}\n\n/**\n * State changes tracker.\n *\n * A state is a tree-like structure of sub-states (nodes) available under [[StatePath]].\n *\n * When node modified a [[StateTracker.update]] should be called. Then all state update receivers registered by\n * [[StateTracker.onUpdate]] will receive this update.\n *\n * @category State Tracking\n */\nexport class StateTracker implements EventSender<[StatePath, any, any]> {\n\n  /**\n   * @internal\n   */\n  readonly _tracker: SubStateTracker = new SubStateTracker(new Trackers(), []);\n\n  /**\n   * A {@link OnStateUpdate state updates sender}.\n   *\n   * A state update will be sent to it whenever an `update()` function is called.\n   */\n  get onUpdate(): OnStateUpdate {\n    return this._tracker.onUpdate;\n  }\n\n  get [OnEvent__symbol](): OnStateUpdate {\n    return this.onUpdate;\n  }\n\n  // noinspection JSCommentMatchesSignature\n  /**\n   * Updates the component state.\n   *\n   * All receivers registered with [[onUpdate]] will receive this update.\n   *\n   * @typeparam V  A type of changed value.\n   * @param key  Changed value key.\n   * @param newValue  New value.\n   * @param oldValue  Previous value.\n   */\n  get update(): <V>(\n      this: void,\n      path: StatePath,\n      newValue: V,\n      oldValue: V,\n  ) => void {\n    return this._tracker.update;\n  }\n\n  /**\n   * Starts tracking of partial state under the given path.\n   *\n   * @param path  A path to state part.\n   *\n   * @return New partial state tracker.\n   */\n  track(path: StatePath): StateTracker {\n\n    const subTracker = this._tracker.track(path);\n\n    return subTracker === this._tracker ? this : subTracker;\n  }\n\n  /**\n   * Unregisters updates receivers and cuts off their supplies.\n   *\n   * After this method call the updates receivers of this partial state and all nested states won't receive any updates.\n   *\n   * @param reason  An optional reason to stop tracking.\n   */\n  done(reason?: any): void {\n    this._tracker.done(reason);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module fun-events\n */\nimport { AfterEvent, afterEventBy } from '../after-event';\nimport { AfterEvent__symbol, EventKeeper, isEventKeeper } from '../event-keeper';\nimport { EventReceiver } from '../event-receiver';\nimport { EventSender, OnEvent__symbol } from '../event-sender';\nimport { EventSupplier } from '../event-supplier';\nimport { EventSupply, noEventSupply } from '../event-supply';\nimport { OnEvent, onSupplied } from '../on-event';\n\n/**\n * Value accessor and changes tracker.\n *\n * Implements an [[EventSender]] interface by sending value changes to registered receivers as a pair of new and old\n * values.\n *\n * Implements an [[EventKeeper]] interface by sending current value and its updates.\n *\n * @category Value Tracking\n * @typeparam T  Tracked value type.\n * @typeparam N  New (updated) value type.\n */\nexport abstract class ValueTracker<T = any, N extends T = T> implements EventSender<[N, T]>, EventKeeper<[T]> {\n\n  /**\n   * @internal\n   */\n  private _by = noEventSupply();\n\n  /**\n   * An [[OnEvent]] sender of value changes. The new value is sent as first argument, and the old value as a second one.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly on: OnEvent<[N, T]>;\n\n  /**\n   * An [[AfterEvent]] keeper of current value.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  readonly read: AfterEvent<[T]> = afterEventBy<[T]>(\n      receiver => this.on(receiveNewValue(receiver)),\n      () => [this.it],\n  );\n\n  get [OnEvent__symbol](): OnEvent<[N, T]> {\n    return this.on;\n  }\n\n  get [AfterEvent__symbol](): AfterEvent<[T]> {\n    return this.read;\n  }\n\n  /**\n   * The tracked value.\n   */\n  abstract it: T;\n\n  /**\n   * Updates the tracked value by the given value `supplier`.\n   *\n   * If the value is already updated by another supplier, then unbinds from the old one first.\n   *\n   * Call the [[ValueTracker.byNone]] method to unbind the tracked value from the `source`.\n   *\n   * Note that explicitly updating the value would override the value received from the `source`.\n   *\n   * @param supplier  The source value sender or keeper.\n   *\n   * @returns `this` instance.\n   */\n  by(supplier: EventSupplier<[T]>): this;\n\n  /**\n   * Updates the tracked value by value suppliers extracted from events sent by the given `supplier`.\n   *\n   * If the value is already updated by another value supplier, then unbinds from the old one first.\n   *\n   * Call the [[ValueTracker.byNone]] method to unbind the tracked value from the `source`.\n   *\n   * Note that explicitly updating the value would override the value received from the `source`.\n   *\n   * @typeparam S  Source value type.\n   * @param supplier  The event supplier to extract value suppliers from.\n   * @param extract  A function extracting value supplier from event received from `supplier`.\n   * May return `undefined` to suspend receiving values.\n   *\n   * @returns `this` instance.\n   */\n  by<S extends any[]>(\n      supplier: EventSupplier<S>,\n      extract: (this: void, ...event: S) => EventSupplier<[T]> | undefined,\n  ): this;\n\n  by<S extends any[]>(\n      supplier: EventSupplier<S> | EventSupplier<[T]>,\n      extract?: (this: void, ...event: S) => EventSupplier<[T]> | undefined,\n  ): this {\n\n    const acceptValuesFrom = (sender: EventSupplier<[T]>): EventSupply => {\n\n      const registrar = isEventKeeper(sender) ? sender[AfterEvent__symbol] : sender[OnEvent__symbol];\n\n      return registrar(value => this.it = value);\n    };\n\n    this.byNone();\n    if (!extract) {\n\n      const sender = supplier as EventSupplier<[T]>;\n\n      this._by = acceptValuesFrom(sender);\n    } else {\n\n      const container = supplier as EventSupplier<S>;\n\n      this._by = onSupplied(container).consume((...event: S) => {\n\n        const sender = extract(...event);\n\n        if (sender) {\n          return acceptValuesFrom(sender);\n        }\n\n        return;\n      });\n    }\n\n    this._by.whenOff(() => this._by = noEventSupply());\n\n    return this;\n  }\n\n  /**\n   * Unbinds the tracked value from any value supplier this tracker is {@link ValueTracker.by updated by}.\n   *\n   * If the tracker is not bound then does nothing.\n   *\n   * @param reason  Arbitrary reason of unbinding the value.\n   *\n   * @returns `this` instance.\n   */\n  byNone(reason?: any): this {\n    this._by.off(reason);\n    return this;\n  }\n\n  /**\n   * Removes all registered event receivers and cuts off corresponding event supplies.\n   *\n   * After this method call they won't receive events.\n\n   * @param reason  A reason to stop sending events.\n   *\n   * @returns `this` instance.\n   */\n  abstract done(reason?: any): this;\n\n}\n\nfunction receiveNewValue<T, N extends T>(\n    valueReceiver: EventReceiver.Generic<[T]>,\n): EventReceiver.Generic<[N, T]> {\n  return {\n    supply: valueReceiver.supply,\n    receive(context, newValue) {\n      valueReceiver.receive(\n          {\n            onRecurrent(recurrentReceiver) {\n              context.onRecurrent(recurrentValue => recurrentReceiver(recurrentValue));\n            },\n          },\n          newValue,\n      );\n    },\n  };\n}\n","/**\n * @packageDocumentation\n * @module fun-events\n */\nimport { EventEmitter } from '../event-emitter';\nimport { EventKeeper } from '../event-keeper';\nimport { OnEvent } from '../on-event';\nimport { ValueTracker } from './value-tracker';\n\n/**\n * @internal\n */\nclass TrackedValue<T> extends ValueTracker<T> {\n\n  private readonly _on = new EventEmitter<[T, T]>();\n\n  constructor(private _it: T) {\n    super();\n  }\n\n  get on(): OnEvent<[T, T]> {\n    return this._on.on;\n  }\n\n  get it(): T {\n    return this._it;\n  }\n\n  set it(value: T) {\n\n    const oldValue = this._it;\n\n    if (oldValue !== value) {\n      this._it = value;\n      this._on.send(value, oldValue);\n    }\n  }\n\n  done(reason?: any): this {\n    this._on.done(reason);\n    return this;\n  }\n\n}\n\n/**\n * Constructs a value which changes can be tracked.\n *\n * @category Value Tracking\n * @param initial  Initial value.\n *\n * @returns Value tracker instance.\n */\nexport function trackValue<T>(initial: T): ValueTracker<T>;\n\n/**\n * Constructs an optional value which changes can be tracked.\n *\n * @param initial  Initial value.\n *\n * @returns Value tracker instance.\n */\nexport function trackValue<T>(initial?: T): ValueTracker<T | undefined>;\n\nexport function trackValue<T>(initial: T): ValueTracker<T> {\n  return new TrackedValue<T>(initial);\n}\n\n/**\n * Constructs a tracked value updated by the given value `supplier`.\n *\n * If the value is already updated by another supplier, then unbinds from the old one first.\n *\n * Call the [[ValueTracker.byNone]] method to unbind the tracked value from the `source`.\n *\n * Note that explicitly updating the value would override the value received from the `source`.\n *\n * @category Value Tracking\n * @param supplier  The source value keeper.\n *\n * @returns `this` instance.\n */\nexport function trackValueBy<T>(supplier: EventKeeper<[T]>): ValueTracker<T>;\n\n/**\n * Constructs a tracked value updated by value keepers extracted from events sent by the given `supplier`.\n *\n * If the value is already updated by another value supplier, then unbinds from the old one first.\n *\n * Call the [[ValueTracker.byNone]] method to unbind the tracked value from the `source`.\n *\n * Note that explicitly updating the value would override the value received from the `source`.\n *\n * @typeparam S  Source value type.\n * @param supplier  The event keeper to extract value keepers from.\n * @param extract  A function extracting value keeper from event received from `supplier`.\n *\n * @returns `this` instance.\n */\nexport function trackValueBy<T, S extends any[]>(\n    supplier: EventKeeper<S>,\n    extract: (this: void, ...event: S) => EventKeeper<[T]>,\n): ValueTracker<T>;\n\nexport function trackValueBy<T, S extends any[]>(\n    supplier: EventKeeper<S> | EventKeeper<[T]>,\n    extract?: (this: void, ...event: S) => EventKeeper<[T]>,\n): ValueTracker<T> {\n  return (trackValue() as any).by(supplier, extract);\n}\n","/**\n * @packageDocumentation\n * @module context-values\n */\nimport { ContextRef } from './context-ref';\nimport { ContextSeeder } from './context-seeder';\nimport { ContextValues } from './context-values';\n\n/**\n * A symbol of the property containing a [[ContextKey]] instance.\n */\nexport const ContextKey__symbol = /*#__PURE__*/ Symbol('context-key');\n\n/**\n * Context value key.\n *\n * Every key should be an unique instance of this class.\n *\n * Multiple source values pay be provided per per value key. They all grouped into single seed.\n * The value is grown from this seed by [[ContextKey.grow]] method.\n *\n * @typeparam Value  Context value type.\n * @typeparam Src  Source value type.\n * @typeparam Seed  Value seed type.\n */\nexport abstract class ContextKey<Value, Src = Value, Seed = unknown> implements ContextRef<Value, Src> {\n\n  /**\n   * Human-readable key name.\n   *\n   * This is not necessarily unique.\n   */\n  readonly name: string;\n\n  /**\n   * A key of context value holding a seed of the value associated with this key.\n   *\n   * Different context value keys may have the same [[seedKey]] to grow them from the same seed.\n   */\n  abstract readonly seedKey: ContextSeedKey<Src, Seed>;\n\n  /**\n   * Constructs context value key.\n   *\n   * @param name  Human-readable key name.\n   */\n  protected constructor(name: string) {\n    this.name = name;\n  }\n\n  /**\n   * Always the key itself.\n   *\n   * This is to use this context value key both as a context value request and its definition target.\n   */\n  get [ContextKey__symbol](): this {\n    return this;\n  }\n\n  /**\n   * Grows context value out of its seed.\n   *\n   * @typeparam Ctx  Context type.\n   * @param opts  Context value growth options.\n   *\n   * @returns Single context value, or `undefined` if there is no default value.\n   */\n  abstract grow<Ctx extends ContextValues>(opts: ContextValueOpts<Ctx, Value, Src, Seed>): Value | null | undefined;\n\n  toString(): string {\n    return `ContextKey(${this.name})`;\n  }\n\n}\n\n/**\n * Context value growth options.\n *\n * An instance of these options is passed to [[ContextKey.grow]] method to provide the necessary value growth context.\n *\n * @typeparam Ctx  Context type.\n * @typeparam Value  Context value type.\n * @typeparam Src  Source value type.\n * @typeparam Seed  Value seed type.\n */\nexport interface ContextValueOpts<Ctx extends ContextValues, Value, Src, Seed> {\n\n  /**\n   * Target context.\n   */\n  readonly context: Ctx;\n\n  /**\n   * Context value seeder.\n   */\n  readonly seeder: ContextSeeder<Ctx, Src, Seed>;\n\n  /**\n   * Context value seed.\n   */\n  readonly seed: Seed;\n\n  /**\n   * A fallback value to use if there is no value associated with the given key.\n   *\n   * Can be `null` or `undefined`.\n   */\n  readonly or?: Value | null;\n\n  /**\n   * Handles missing context value.\n   *\n   * It can be called to prefer a fallback value over the default one specified in the value key.\n   *\n   * @param defaultProvider  Default value provider. It is called unless a fallback value is specified.\n   * If it returns a non-null/non-undefined value, then the returned value will be associated with the context key.\n   */\n  byDefault(defaultProvider: () => Value | null | undefined): Value | null | undefined;\n\n}\n\n/**\n * A provider of default value of context key.\n *\n * This is typically passed as `byDefault` option to context value key constructor.\n *\n * @typeparam Ctx  Context type.\n * @typeparam Value  Context value type.\n * @typeparam Key  Context key type.\n */\nexport type ContextKeyDefault<Value, Key extends ContextKey<any, any, any>> =\n/**\n * @param context  Target context.\n * @param key  Context value key the default value is provided for.\n *\n * @return Either constructed value, or `null`/`undefined` if unknown.\n */\n    (this: void, context: ContextValues, key: Key) => Value | null | undefined;\n\n/**\n * A key of context value holding a seed of context value.\n *\n * @typeparam Src  Source value type.\n * @typeparam Seed  Value seed type.\n */\nexport abstract class ContextSeedKey<Src, Seed> extends ContextKey<Seed, Src, Seed> {\n\n  /**\n   * Constructs context value sources key.\n   *\n   * @param key  A key of context value having its sources associated with this key.\n   */\n  constructor(key: ContextKey<any, Src>) {\n    super(`${key.name}:seed`);\n  }\n\n  /**\n   * Always refers to itself.\n   */\n  get seedKey(): this {\n    return this;\n  }\n\n  /**\n   * Creates a seeder for values associated with this key.\n   *\n   * @typeparam Ctx  Context type.\n   *\n   * @returns New value seeder instance.\n   */\n  abstract seeder<Ctx extends ContextValues>(): ContextSeeder<Ctx, Src, Seed>;\n\n  grow<Ctx extends ContextValues>(opts: ContextValueOpts<Ctx, Seed, Src, Seed>): Seed | null | undefined {\n\n    const { seeder, seed } = opts;\n\n    return seeder.isEmpty(seed) ? opts.byDefault(() => seed) : seed;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module context-values\n */\nimport { ContextKey } from './context-key';\n\n/**\n * An error indicating the absence of context value with the given key.\n */\nexport class ContextKeyError extends Error {\n\n  /**\n   * A missing value key.\n   */\n  readonly key: ContextKey<any, any, any>;\n\n  /**\n   * Constructs an invalid context key error.\n   *\n   * @param key  Missing value key.\n   * @param message  Arbitrary error message.\n   */\n  constructor(key: ContextKey<any, any, any>, message = `There is no value with key ${key}`) {\n    super(message);\n    this.key = key;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module context-values\n */\nimport { valueProvider } from 'call-thru';\nimport { ContextRequest, ContextTarget } from './context-ref';\nimport { ContextValues } from './context-values';\n\n/**\n * Context value provider.\n *\n * It is responsible for constructing the values associated with particular key for the given context. Note that\n * provider generates source value, not the context values themselves.\n *\n * @typeparam Ctx  Context type.\n * @typeparam Src  Source value type.\n */\nexport type ContextValueProvider<Ctx extends ContextValues, Src> =\n/**\n * @param context  Target context.\n *\n * @return Either constructed value source, or `null`/`undefined` if unknown.\n */\n    (this: void, context: Ctx) => Src | null | undefined;\n\n/**\n * Context value specifier.\n *\n * @typeparam Ctx  Context type.\n * @typeparam Value  Context value type.\n * @typeparam Deps  Dependencies tuple type.\n * @typeparam Src  Source value type.\n * @typeparam Seed  Value seed type.\n */\nexport type ContextValueSpec<\n    Ctx extends ContextValues,\n    Value,\n    Deps extends any[] = unknown[],\n    Src = Value,\n    Seed = unknown> =\n    | ContextValueSpec.IsConstant<Src, Seed>\n    | ContextValueSpec.ViaAlias<Src, Seed>\n    | ContextValueSpec.ByProvider<Ctx, Src, Seed>\n    | ContextValueSpec.ByProviderWithDeps<Deps, Src, Seed>\n    | ContextValueSpec.AsInstance<Ctx, Src, Seed>\n    | ContextValueSpec.SelfInstance<Ctx, Src, Seed>\n    | ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed>\n    | ContextValueSpec.SelfInstanceWithDeps<Deps, Src, Seed>;\n\nexport namespace ContextValueSpec {\n\n  /**\n   * A specifier defining a context value is constant.\n   *\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface IsConstant<Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Constant context value.\n     */\n    is: Src;\n\n  }\n\n  /**\n   * A specifier defining a context value via another one (alias).\n   *\n   * @typeparam Sec  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface ViaAlias<Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Context value request for the another value that will be used instead as provided one.\n     */\n    via: ContextRequest<Src, Seed>;\n\n  }\n\n  /**\n   * A specifier of context value defined by provider function.\n   *\n   * @typeparam Ctx  Context type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface ByProvider<Ctx extends ContextValues, Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Context value provider.\n     */\n    by: ContextValueProvider<Ctx, Src>;\n\n  }\n\n  /**\n   * A specifier of context value defined by provider function depending on other context values.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface ByProviderWithDeps<Deps extends any[], Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Context value provider function.\n     */\n    by: (this: void, ...args: Deps) => Src | null | undefined;\n\n    /**\n     * Context value requests for corresponding value provider function arguments.\n     */\n    with: DepsRequests<Deps>;\n\n  }\n\n  /**\n   * A specifier of context value defined as instance of some class.\n   *\n   * @typeparam Ctx  Context type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface AsInstance<Ctx extends ContextValues, Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Context value class constructor.\n     */\n    as: new (context: Ctx) => Src;\n\n  }\n\n  /**\n   * A specifier of context value defined as instance of the same class as value.\n   *\n   * @typeparam Ctx  Context type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface SelfInstance<Ctx extends ContextValues, Src, Seed = unknown> {\n\n    /**\n     * Target value to define as its class constructor.\n     */\n    as: ContextTarget<Src, Seed> & (new (context: Ctx) => Src);\n\n  }\n\n  /**\n   * A specifier of context value defined as instance of some class with constructor depending on other context values.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface AsInstanceWithDeps<Deps extends any[], Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Context value class constructor.\n     */\n    as: new (...args: Deps) => Src;\n\n    /**\n     * Context value requests for corresponding constructor arguments.\n     */\n    with: DepsRequests<Deps>;\n\n  }\n\n  /**\n   * A specifier of context value defined as instance of the same class as value with constructor depending on other\n   * context values.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface SelfInstanceWithDeps<Deps extends any[], Src, Seed = unknown> {\n\n    /**\n     * Target value to define as its class constructor.\n     */\n    as: ContextTarget<Src, Seed> & (new (...args: Deps) => Src);\n\n    /**\n     * Context value requests for corresponding constructor arguments.\n     */\n    with: DepsRequests<Deps>;\n\n  }\n\n  /**\n   * Dependencies requests.\n   *\n   * This is a tuple of context value requests, each of which corresponds to dependency.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   */\n  export type DepsRequests<Deps extends any[]> = {\n    [K in keyof Deps]: ContextRequest<Deps[K]>;\n  };\n\n}\n\n/**\n * Constructs a specifier of context value defined by provider out of arbitrary one.\n *\n * @typeparam Ctx  Context type.\n * @typeparam Value  Context value type.\n * @typeparam Deps  Dependencies tuple type.\n * @typeparam Src  Source value type.\n * @param spec  Context value specifier to convert.\n *\n * @returns A specifier of context value defined by provider function.\n *\n * @throws TypeError  On malformed context value specifier.\n */\nexport function contextValueSpec<Ctx extends ContextValues, Value, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec<Ctx, Value, Deps, Src, Seed>,\n): ContextValueSpec.ByProvider<Ctx, Src, Seed> {\n  if (byProvider(spec)) {\n    if (!withDeps<Ctx, Deps, Src, Seed>(spec)) {\n      return spec;\n    }\n\n    const { a, by, with: deps } = spec;\n\n    return {\n      a,\n      by(this: void, context: Ctx) {\n        return by(...deps.map(dep => context.get(dep)) as Deps);\n      },\n    };\n  }\n  if (isConstant<Src, Seed>(spec)) {\n\n    const { a, is: value } = spec;\n\n    return {\n      a,\n      by: valueProvider(value),\n    };\n  }\n  if (viaAlias(spec)) {\n\n    const { a, via } = spec;\n\n    return {\n      a,\n      by(ctx: Ctx) {\n        return ctx.get(via);\n      },\n    };\n  }\n  if (asInstance<Ctx, Deps, Src, Seed>(spec)) {\n    if (selfInstance<Ctx, Deps, Src, Seed>(spec)) {\n      spec = toAsInstance(spec);\n    }\n    if (!withDeps<Ctx, Deps, Src, Seed>(spec)) {\n\n      const { as: Type } = spec;\n\n      return {\n        a: spec.a,\n        by(ctx: Ctx) {\n          return new Type(ctx);\n        },\n      };\n    }\n\n    const { as: DepType, with: deps } = spec;\n\n    return {\n      a: spec.a,\n      by(this: void, context: Ctx) {\n        return new DepType(...deps.map(dep => context.get(dep)) as Deps);\n      },\n    };\n  }\n\n  throw new TypeError(`Malformed context value specifier: ${spec}`);\n}\n\n/**\n * @internal\n */\nfunction byProvider<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec<Ctx, any, Deps, Src, Seed>,\n): spec is ContextValueSpec.ByProvider<Ctx, Src, Seed> | ContextValueSpec.ByProviderWithDeps<Deps, Src, Seed> {\n  return 'by' in spec;\n}\n\n/**\n * @internal\n */\nfunction asInstance<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec<Ctx, any, Deps, Src, Seed>,\n): spec is ContextValueSpec.AsInstance<Ctx, Src, Seed> | ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed> {\n  return 'as' in spec;\n}\n\n/**\n * @internal\n */\nfunction selfInstance<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec<Ctx, any, Deps, Src, Seed>,\n): spec is ContextValueSpec.SelfInstance<Ctx, Src, Seed> | ContextValueSpec.SelfInstanceWithDeps<Deps, Src, Seed> {\n  return !('a' in spec);\n}\n\n/**\n * @internal\n */\nfunction toAsInstance<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec.SelfInstance<Ctx, Src, Seed> | ContextValueSpec.SelfInstanceWithDeps<Deps, Src, Seed>,\n): ContextValueSpec.AsInstance<Ctx, Src, Seed> | ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed> {\n  return {\n    ...spec,\n    a: spec.as,\n  } as ContextValueSpec.AsInstance<Ctx, Src, Seed> | ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed>;\n}\n\n/**\n * @internal\n */\nfunction isConstant<Src, Seed>(\n    spec: ContextValueSpec<any, any, any, Src, Seed>,\n): spec is ContextValueSpec.IsConstant<Src, Seed> {\n  return 'is' in spec;\n}\n\n/**\n * @internal\n */\nfunction viaAlias<Src, Seed>(\n    spec: ContextValueSpec<any, any, any, Src, Seed>,\n): spec is ContextValueSpec.ViaAlias<Src, Seed> {\n  return 'via' in spec;\n}\n\n/**\n * @internal\n */\nfunction withDeps<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec.ByProvider<Ctx, Src, Seed> | ContextValueSpec.ByProviderWithDeps<Deps, Src, Seed>,\n): spec is ContextValueSpec.ByProviderWithDeps<Deps, Src, Seed>;\n\n/**\n * @internal\n */\nfunction withDeps<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec.AsInstance<Ctx, Src, Seed> | ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed>,\n): spec is ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed>;\n\n/**\n * @internal\n */\nfunction withDeps<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec<Ctx, any, Deps, Src, Seed>,\n): boolean {\n  return 'with' in spec;\n}\n","/**\n * @packageDocumentation\n * @module context-values\n */\nimport { ContextRequest } from './context-ref';\n\n/**\n * The values available from context.\n *\n * The values are available by their keys.\n */\nexport abstract class ContextValues {\n\n  /**\n   * Returns a value associated with the given key.\n   *\n   * @typeparam Value  A type of associated value.\n   * @param request  Context value request with target key.\n   * @param opts  Context value request options.\n   *\n   * @returns Associated value or `null` when there is no associated value.\n   */\n  abstract get<Value>(request: ContextRequest<Value>, opts: ContextRequest.OrNull<Value>): Value | null;\n\n  /**\n   * Returns a value associated with the given key.\n   *\n   * @typeparam Value  A type of associated value.\n   * @param request  Context value request with target key.\n   * @param opts  Context value request options.\n   *\n   * @returns Associated value or `undefined` when there is no associated value.\n   */\n  abstract get<Value>(request: ContextRequest<Value>, opts: ContextRequest.OrUndefined<Value>): Value | undefined;\n\n  /**\n   * Returns a value associated with the given key.\n   *\n   * @typeparam Value  A type of associated value.\n   * @param request  Context value request with target key.\n   * @param opts  Context value request options.\n   *\n   * @returns Associated value. Or the default one when there is no associated value. Or key default when there is\n   * neither.\n   *\n   * @throws Error  If there is no value associated with the given key, the default value is not provided,\n   * and the key has no default value.\n   */\n  abstract get<Value>(request: ContextRequest<Value>, opts?: ContextRequest.OrFallback<Value>): Value;\n\n}\n","/**\n * @packageDocumentation\n * @module context-values\n */\nimport { noop } from 'call-thru';\nimport { ContextKey, ContextKey__symbol, ContextSeedKey, ContextValueOpts } from './context-key';\nimport { ContextKeyError } from './context-key-error';\nimport { ContextRef, ContextRequest } from './context-ref';\nimport { ContextSeeder, ContextSeeds } from './context-seeder';\nimport { contextValueSpec, ContextValueSpec } from './context-value-spec';\nimport { ContextValues } from './context-values';\n\n/**\n * @internal\n */\ntype SeedFactory<Ctx extends ContextValues, Seed> = (this: void, context: Ctx) => Seed;\n\n/**\n * @internal\n */\ntype Seeding<Ctx extends ContextValues, Src, Seed> = [ContextSeeder<Ctx, Src, Seed>, SeedFactory<Ctx, Seed>];\n\n/**\n * A registry of context value providers.\n *\n * @typeparam Ctx  Context type.\n */\nexport class ContextRegistry<Ctx extends ContextValues = ContextValues> {\n\n  /** @internal */\n  private readonly _initial: ContextSeeds<Ctx>;\n\n  /** @internal */\n  private readonly _seeds = new Map<ContextSeedKey<any, any>, Seeding<Ctx, any, any>>();\n\n  /** @internal */\n  private _nonCachedValues?: ContextValues;\n\n  /**\n   * Constructs a registry for context value providers.\n   *\n   * It can be chained with another registry by providing an initially known source of known context values.\n   *\n   * @param initial  An optional source of initially known context values. This can be either a function, or\n   * `ContextValues` instance.\n   */\n  constructor(initial?: ContextSeeds<Ctx> | ContextValues) {\n    if (initial == null) {\n      this._initial = noop;\n    } else if (typeof initial === 'function') {\n      this._initial = initial;\n    } else {\n      this._initial = seedKey => initial.get(seedKey);\n    }\n  }\n\n  /**\n   * Provides context value.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  provide<Deps extends any[], Src, Seed>(spec: ContextValueSpec<Ctx, any, Deps, Src, Seed>): () => void {\n\n    const { a: { [ContextKey__symbol]: { seedKey } }, by } = contextValueSpec(spec);\n    const [seeder] = this._seeding<Src, Seed>(seedKey);\n\n    return seeder.provide(by);\n  }\n\n  /**\n   * @internal\n   */\n  private _seeding<Src, Seed>(seedKey: ContextSeedKey<Src, Seed>): Seeding<Ctx, Src, Seed> {\n\n    const found: Seeding<Ctx, Src, Seed> | undefined = this._seeds.get(seedKey);\n\n    if (found) {\n      return found;\n    }\n\n    const seeder: ContextSeeder<Ctx, Src, Seed> = seedKey.seeder();\n    const factory: SeedFactory<Ctx, Seed> = context => seeder.seed(context, this._initial(seedKey, context));\n    const seeding: Seeding<Ctx, Src, Seed> = [seeder, factory];\n\n    this._seeds.set(seedKey, seeding);\n\n    return seeding;\n  }\n\n  /**\n   * Creates a seed for the given key in target context.\n   *\n   * @param context  Target context.\n   * @param key  Context value seed key.\n   *\n   * @returns New context value seed.\n   */\n  seed<Src, Seed>(context: Ctx, key: ContextSeedKey<Src, Seed>): Seed {\n\n    const [, factory] = this._seeding(key);\n\n    return factory(context);\n  }\n\n  /**\n   * Builds context seeds provider that binds seeds to target `context`.\n   *\n   * @param context  Target value context.\n   * @param cache  Whether to cache context values. When `false` the value providers may be called multiple times.\n   *\n   * @returns A provider of context value seeds bound to the given `context`.\n   */\n  seedIn(context: Ctx, cache?: boolean): <Src, Seed>(this: void, key: ContextSeedKey<Src, Seed>) => Seed | undefined {\n    return this.newValues(cache).get.bind(context);\n  }\n\n  /**\n   * Creates new context values instance consulting this registry for value providers.\n   *\n   * @param cache  Whether to cache context values. When `false` the value providers may be called multiple times.\n   *\n   * @returns New context values instance which methods expect `this` instance to be a context the values provided for.\n   */\n  newValues(cache = true): ContextValues & ThisType<Ctx> {\n    if (!cache && this._nonCachedValues) {\n      return this._nonCachedValues;\n    }\n\n    const values = new Map<ContextKey<any>, any>();\n    const registry = this;\n\n    class Values extends ContextValues {\n\n      get<Value, Src>(\n          this: Ctx,\n          { [ContextKey__symbol]: key }: ContextRef<Value, Src>,\n          opts?: ContextRequest.Opts<Value>,\n      ): Value | null | undefined {\n\n        const context = this;\n        const cached: Value | undefined = values.get(key);\n\n        if (cached != null) {\n          return cached;\n        }\n\n        const [constructed, defaultUsed] = growValue(context, key, opts);\n\n        if (cache && !defaultUsed) {\n          values.set(key, constructed);\n        }\n\n        return constructed;\n      }\n\n    }\n\n    if (!cache) {\n      return this._nonCachedValues = new Values();\n    }\n\n    return new Values();\n\n    function growValue<Value, Src, Seed>(\n        context: Ctx,\n        key: ContextKey<Value, Src, Seed>,\n        opts: ContextRequest.Opts<Value> | undefined,\n    ): [Value | null | undefined, boolean] {\n\n      const [seeder, seed] = findSeed<Src, Seed>(context, key);\n      let defaultUsed = false;\n\n      const valueOpts: {\n        -readonly [K in keyof ContextValueOpts<Ctx, Value, Src, Seed>]: ContextValueOpts<Ctx, Value, Src, Seed>[K];\n      } = {\n        context,\n        seeder,\n        seed,\n        byDefault: (opts && 'or' in opts)\n            ? () => {\n              defaultUsed = true;\n              return opts.or;\n            }\n            : defaultProvider => {\n\n              const defaultValue = defaultProvider();\n\n              if (defaultValue == null) {\n                throw new ContextKeyError(key);\n              }\n\n              return defaultValue;\n            },\n      };\n\n      if (opts && 'or' in opts) {\n        valueOpts.or = opts.or;\n      }\n\n      return [\n        key.grow(valueOpts),\n        defaultUsed,\n      ];\n    }\n\n    function findSeed<Src, Seed>(\n        context: Ctx,\n        key: ContextKey<any, Src, Seed>,\n    ): [ContextSeeder<Ctx, Src, Seed>, Seed] {\n\n      const { seedKey } = key;\n      const [seeder, factory] = registry._seeding(seedKey);\n\n      if (seedKey !== key as any) {\n        // This is not a seed key\n        // Retrieve the seed by seed key\n        return [seeder, context.get(seedKey)];\n      }\n\n      return [seeder, factory(context)];\n    }\n  }\n\n  /**\n   * Appends values provided by another value registry to the ones provided by this one.\n   *\n   * @param other  Another context value registry.\n   *\n   * @return New context value registry which values provided by both registries.\n   */\n  append(other: ContextRegistry<Ctx>): ContextRegistry<Ctx> {\n    return new ContextRegistry(<Src, Seed>(key: ContextSeedKey<Src, Seed>, context: Ctx) => {\n\n      const [seeder, factory] = this._seeding(key);\n\n      return seeder.combine(factory(context), other.seed(context, key), context);\n    });\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module context-values\n */\nimport { flatMapIt, mapIt, overArray } from 'a-iterable';\nimport { asis, NextArgs, nextArgs, noop } from 'call-thru';\nimport {\n  afterEach,\n  AfterEvent,\n  afterEventBy,\n  afterSupplied,\n  afterThe,\n  EventKeeper,\n  isEventKeeper,\n  trackValue,\n  ValueTracker,\n} from 'fun-events';\nimport { ContextKey, ContextKey__symbol, ContextKeyDefault, ContextSeedKey, ContextValueOpts } from './context-key';\nimport { ContextKeyError } from './context-key-error';\nimport { ContextRef } from './context-ref';\nimport { ContextSeeder } from './context-seeder';\nimport { ContextValueProvider } from './context-value-spec';\nimport { ContextValues } from './context-values';\n\n/**\n * @internal\n */\nclass ContextUpSeeder<Ctx extends ContextValues, Src>\n    implements ContextSeeder<Ctx, Src | EventKeeper<Src[]>, AfterEvent<Src[]>> {\n\n  private readonly _providers: ValueTracker<ContextValueProvider<Ctx, Src | EventKeeper<Src[]>>[]> = trackValue([]);\n\n  provide(provider: ContextValueProvider<Ctx, Src | EventKeeper<Src[]>>): () => void {\n    this._providers.it = [...this._providers.it, provider];\n    return () => {\n\n      const providers = this._providers.it;\n      const found = providers.indexOf(provider);\n\n      if (found >= 0) {\n        this._providers.it = providers.slice(0, found).concat(providers.slice(found + 1));\n      }\n    };\n  }\n\n  seed(context: Ctx, initial: AfterEvent<Src[]> = afterThe<Src[]>()): AfterEvent<Src[]> {\n    return this.combine(initial, upSrcKeepers(context, this._providers));\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n\n  combine(first: AfterEvent<Src[]>, second: AfterEvent<Src[]>): AfterEvent<Src[]> {\n    return afterEach(\n        first,\n        second,\n    ).keep.thru(\n        flatUpSources,\n    );\n  }\n\n}\n\n/**\n * @internal\n */\nfunction upSrcKeepers<Ctx extends ContextValues, Src>(\n    context: Ctx,\n    providersTracker: ValueTracker<ContextValueProvider<Ctx, Src | EventKeeper<Src[]>>[]>,\n): AfterEvent<Src[]> {\n  return providersTracker.read.keep.dig(\n      providers => !providers.length\n          ? afterThe()\n          : afterEach(\n              ...mapIt(\n                  mapIt(\n                      overArray(providers),\n                      prov => prov(context),\n                  ),\n                  toUpSrcKeeper,\n              ),\n          ).keep.thru(\n              flatUpSources,\n          ),\n  );\n}\n\n/**\n * @internal\n */\nfunction toUpSrcKeeper<Src>(src: null | undefined | Src | EventKeeper<Src[]>): AfterEvent<Src[]> {\n  return src == null ? afterThe() : isUpSrcKeeper(src) ? afterSupplied(src) : afterThe(src);\n}\n\n/**\n * @internal\n */\nfunction isUpSrcKeeper<Src>(src: Src | EventKeeper<Src[]>): src is EventKeeper<Src[]> {\n  return (typeof src === 'object' || typeof src === 'function') && isEventKeeper(src as (object | Function));\n}\n\n/**\n * @internal\n */\nfunction flatUpSources<Src, NextReturn>(...sources: Src[][]): NextArgs<Src[], NextReturn> {\n  return nextArgs<Src[], NextReturn>(\n      ...flatMapIt(overArray(sources), asis),\n  );\n}\n\n/**\n * @internal\n */\nclass ContextSeedUpKey<Src> extends ContextSeedKey<Src | EventKeeper<Src[]>, AfterEvent<Src[]>> {\n\n  seeder<Ctx extends ContextValues>(): ContextSeeder<Ctx, Src | EventKeeper<Src[]>, AfterEvent<Src[]>> {\n    return new ContextUpSeeder();\n  }\n\n}\n\n/**\n * Updatable context value reference.\n *\n * @typeparam Value  Context value type.\n * @typeparam Src  Source value type.\n */\nexport interface ContextUpRef<Value, Src> extends ContextRef<Value, Src | EventKeeper<Src[]>> {\n\n  readonly [ContextKey__symbol]: ContextUpKey<Value, Src>;\n\n}\n\n/**\n * @internal\n */\nclass ContextUpKeyUpKey<Value, Src>\n    extends ContextKey<ContextUpKey.Up<Value>, Src | EventKeeper<Src[]>, AfterEvent<Src[]>> {\n\n  get seedKey(): ContextSeedKey<Src | EventKeeper<Src[]>, AfterEvent<Src[]>> {\n    return this._key.seedKey;\n  }\n\n  constructor(\n      private readonly _key: ContextUpKey<Value, Src>,\n      readonly grow: <Ctx extends ContextValues>(\n          opts: ContextValueOpts<Ctx, ContextUpKey.Up<Value>, EventKeeper<Src[]> | Src, AfterEvent<Src[]>>,\n      ) => ContextUpKey.Up<Value>,\n  ) {\n    super(_key.name + ':up');\n  }\n\n}\n\n/**\n * Abstract implementation of updatable context value key.\n *\n * Accepts single value sources and `EventKeeper`s of value source arrays.\n *\n * Collects value sources into `AfterEvent` keeper of source values.\n *\n * @typeparam Value  Context value type.\n * @typeparam Src  Source value type.\n */\nexport abstract class ContextUpKey<Value, Src>\n    extends ContextKey<Value, Src | EventKeeper<Src[]>, AfterEvent<Src[]>>\n    implements ContextUpRef<Value, Src> {\n\n  readonly seedKey: ContextSeedKey<Src | EventKeeper<Src[]>, AfterEvent<Src[]>>;\n\n  /**\n   * A key of context value containing an {@link ContextUpKey.Up updates keeper} of this key value.\n   *\n   * It is expected to report any updates to this key's value.\n   *\n   * The value of updates key is constructed by [[growUp]] function out of the same seed.\n   */\n  abstract readonly upKey: ContextUpKey.UpKey<Value, Src>;\n\n  /**\n   * Constructs simple context value key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   */\n  constructor(name: string, seedKey?: ContextSeedKey<Src | EventKeeper<Src[]>, AfterEvent<Src[]>>) {\n    super(name);\n    this.seedKey = seedKey || new ContextSeedUpKey(this);\n  }\n\n  /**\n   * A key of context value containing an {@link ContextUpKey.Up updates keeper} of the value of this key.\n   *\n   * @param grow  A function that grows an updates keeper of context value out of its seed.\n   *\n   * @returns New updates keeper key.\n   */\n  protected createUpKey(\n      grow: <Ctx extends ContextValues>(\n          opts: ContextValueOpts<Ctx, ContextUpKey.Up<Value>, EventKeeper<Src[]> | Src, AfterEvent<Src[]>>,\n      ) => ContextUpKey.Up<Value>,\n  ): ContextUpKey.UpKey<Value, Src> {\n    return new ContextUpKeyUpKey(this, grow);\n  }\n\n}\n\nexport namespace ContextUpKey {\n\n  /**\n   * A type of updates keeper of context value.\n   *\n   * It is the same as a type of original value if the value itself is an event keeper, or an `AfterEvent` keeper\n   * of original value otherwise.\n   *\n   * @typeparam Value  Original context value type.\n   */\n  export type Up<Value> = Value extends AfterEvent<any>\n      ? Value\n      : (Value extends EventKeeper<infer E>\n          ? AfterEvent<E>\n          : AfterEvent<[Value]>);\n\n  /**\n   * A key of context value containing an {@link ContextUpKey.Up updates keeper} of this key value.\n   *\n   * @typeparam Value  Context value type.\n   * @typeparam Src  Source value type.\n   */\n  export type UpKey<Value, Src> = ContextKey<ContextUpKey.Up<Value>, Src>;\n\n}\n\n/**\n * Single updatable context value reference.\n *\n * @typeparam Value  Context value type.\n */\nexport type SingleContextUpRef<Value> = ContextUpRef<AfterEvent<[Value]>, Value>;\n\n/**\n * Single updatable context value key.\n *\n * The associated value is an `AfterEvent` keeper of the last source value. It is always present,\n * but signals an [[ContextKeyError]] error on attempt to receive an absent value.\n *\n * It is an error to provide a `null` or `undefined` {@link ContextRequest.Opts.or fallback value} when requesting\n * an associated value. Use an `afterThe()` result as a fallback instead.\n *\n * @typeparam Value  Context value type.\n */\nexport class SingleContextUpKey<Value>\n    extends ContextUpKey<AfterEvent<[Value]>, Value>\n    implements SingleContextUpRef<Value> {\n\n  /**\n   * A provider of context value used when there is no value associated with this key.\n   */\n  readonly byDefault: ContextKeyDefault<Value, ContextUpKey<AfterEvent<[Value]>, Value>>;\n\n  get upKey(): this {\n    return this;\n  }\n\n  /**\n   * Constructs single updatable context value key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   * @param byDefault  Optional default value provider. If unspecified or `undefined` the key has no default\n   * value.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n        byDefault = noop,\n      }: {\n        seedKey?: ContextSeedKey<Value | EventKeeper<Value[]>, AfterEvent<Value[]>>;\n        byDefault?: ContextKeyDefault<Value, ContextUpKey<AfterEvent<[Value]>, Value>>;\n      } = {},\n  ) {\n    super(name, seedKey);\n    this.byDefault = byDefault;\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<Ctx, AfterEvent<[Value]>, EventKeeper<Value[]> | Value, AfterEvent<Value[]>>,\n  ): AfterEvent<[Value]> {\n    return opts.seed.keep.dig((...sources) => {\n      if (sources.length) {\n        // Sources present. Take the last one.\n        return afterThe(sources[sources.length - 1]);\n      }\n\n      // Sources absent. Attempt to detect the backup value.\n      const backup = opts.byDefault(() => {\n\n        const defaultValue = this.byDefault(opts.context, this);\n\n        return defaultValue && afterThe(defaultValue);\n      });\n\n      if (backup != null) {\n        return backup; // Backup value found.\n      }\n\n      // Backup value is absent. Construct an error response.\n      return afterEventBy<[Value]>(() => {\n        throw new ContextKeyError(this);\n      });\n    });\n  }\n\n}\n\n/**\n * Single updatable context value reference.\n *\n * @typeparam Src  Source value type.\n */\nexport type MultiContextUpRef<Src> = ContextUpRef<AfterEvent<Src[]>, Src>;\n\n/**\n * Multiple updatable context values key.\n *\n * The associated value is an `AfterEvent` keeper of the source values. It is always present, even though\n * the array can be empty.\n *\n * It is an error to provide a `null` or `undefined` {@link ContextRequest.Opts.or fallback value} when requesting\n * an associated value. Use an `afterThe()` result as a fallback instead.\n *\n * @typeparam Src  Source value type.\n */\nexport class MultiContextUpKey<Src>\n    extends ContextUpKey<AfterEvent<Src[]>, Src>\n    implements MultiContextUpRef<Src> {\n\n  /**\n   * A provider of context value used when there is no value associated with this key.\n   */\n  readonly byDefault: ContextKeyDefault<readonly Src[], ContextUpKey<AfterEvent<Src[]>, Src>>;\n\n  get upKey(): this {\n    return this;\n  }\n\n  /**\n   * Constructs multiple updatable context value key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   * @param byDefault  Optional default value provider. If unspecified or `undefined` the key has no default\n   * value.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n        byDefault = noop,\n      }: {\n        seedKey?: ContextSeedKey<Src | EventKeeper<Src[]>, AfterEvent<Src[]>>;\n        byDefault?: ContextKeyDefault<readonly Src[], ContextUpKey<AfterEvent<Src[]>, Src>>;\n      } = {},\n  ) {\n    super(name, seedKey);\n    this.byDefault = byDefault;\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<Ctx, AfterEvent<Src[]>, EventKeeper<Src[]> | Src, AfterEvent<Src[]>>,\n  ): AfterEvent<Src[]> {\n    return opts.seed.keep.dig((...sources) => {\n      if (sources.length) {\n        // Sources present. Use them.\n        return afterThe(...sources);\n      }\n\n      // Sources absent. Attempt to detect the backup value.\n      const backup = opts.byDefault(() => {\n\n        const defaultValue = this.byDefault(opts.context, this);\n\n        return defaultValue ? afterThe(...defaultValue) : afterThe();\n      });\n\n      if (backup != null) {\n        return backup; // Backup value found.\n      }\n\n      // Backup value is absent. Construct an error response.\n      return afterEventBy<Src[]>(() => {\n        throw new ContextKeyError(this);\n      });\n    });\n  }\n\n}\n","import { noop } from 'call-thru';\nimport { AfterEvent, afterThe, EventKeeper } from 'fun-events';\nimport { ContextKeyDefault, ContextSeedKey, ContextValueOpts } from './context-key';\nimport { ContextKeyError } from './context-key-error';\nimport { ContextUpKey, ContextUpRef } from './context-up-key';\nimport { ContextValues } from './context-values';\n\n/**\n * A reference to updatable context function value.\n *\n * @typeparam Args  Function arguments tuple type.\n * @typeparam Ret  Function return value type.\n */\nexport type FnContextRef<Args extends any[], Ret = void> =\n    ContextUpRef<(this: void, ...args: Args) => Ret, (this: void, ...args: Args) => Ret>;\n\n/**\n * A key of updatable context function value.\n *\n * The value associated with this key is a function that delegates to the last provided function. The target function\n * may be updated.\n *\n * The value is always present. But if the function to delegate is not provided, and no default/fallback function\n * provided, an attempt to call the delegate would throw an [[ContextKeyError]].\n *\n * It is an error to provide a `null` or `undefined` {@link ContextRequest.Opts.or fallback value} when requesting\n * an associated value. Use an `afterThe()` result as a fallback instead.\n *\n * @typeparam Args  Function arguments tuple type.\n * @typeparam Ret  Function return value type.\n */\nexport class FnContextKey<Args extends any[], Ret = void>\n    extends ContextUpKey<(this: void, ...args: Args) => Ret, (this: void, ...args: Args) => Ret>\n    implements FnContextRef<Args, Ret> {\n\n  /**\n   * Constructs a function that will be called unless fallback provided.\n   */\n  readonly byDefault: (this: void, context: ContextValues, key: FnContextKey<Args, Ret>) =>\n      (this: void, ...args: Args) => Ret;\n\n  readonly upKey: ContextUpKey.UpKey<(this: void, ...args: Args) => Ret, (this: void, ...args: Args) => Ret>;\n\n  /**\n   * Constructs updatable context function key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   * @param byDefault  Constructs a default function to call. If unspecified then the default function would raise\n   * an error.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n        byDefault = noop,\n      }: {\n        seedKey?: ContextSeedKey<\n            ((this: void, ...args: Args) => Ret) | EventKeeper<((this: void, ...args: Args) => Ret)[]>,\n            AfterEvent<((this: void, ...args: Args) => Ret)[]>>;\n        byDefault?: ContextKeyDefault<(this: void, ...args: Args) => Ret, FnContextKey<Args, Ret>>;\n      } = {},\n  ) {\n    super(name, seedKey);\n    this.byDefault = (context, key) => byDefault(context, key) || (() => { throw new ContextKeyError(this); });\n    this.upKey = this.createUpKey(\n        opts => opts.seed.keep.dig((...fns) => {\n          if (fns.length) {\n            return afterThe(fns[fns.length - 1]);\n          }\n\n          const defaultProvider = (): AfterEvent<[(this: void, ...args: Args) => Ret]> => afterThe(this.byDefault(\n              opts.context,\n              this,\n          ));\n\n          return opts.byDefault(defaultProvider) || defaultProvider();\n        }),\n    );\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          (this: void, ...args: Args) => Ret,\n          EventKeeper<((this: void, ...args: Args) => Ret)[]> | ((this: void, ...args: Args) => Ret),\n          AfterEvent<((this: void, ...args: Args) => Ret)[]>>,\n  ): (this: void, ...args: Args) => Ret {\n\n    let delegated!: (this: void, ...args: Args) => Ret;\n\n    opts.context.get(\n        this.upKey,\n        'or' in opts ? { or: opts.or != null ? afterThe(opts.or) : opts.or } : undefined,\n    )!(fn => delegated = fn);\n\n    return (...args) => delegated(...args);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module context-values\n */\nimport { AIterable, itsEmpty, itsLast, overArray, overNone } from 'a-iterable';\nimport { asis, isPresent, noop, valuesProvider } from 'call-thru';\nimport { ContextKey, ContextKeyDefault, ContextSeedKey, ContextValueOpts } from './context-key';\nimport { ContextRef } from './context-ref';\nimport { ContextSeeder } from './context-seeder';\nimport { ContextValueProvider } from './context-value-spec';\nimport { ContextValues } from './context-values';\n\nclass SimpleContextSeeder<Ctx extends ContextValues, Src> implements ContextSeeder<Ctx, Src, AIterable<Src>> {\n\n  private readonly _providers: ContextValueProvider<Ctx, Src>[] = [];\n\n  provide(provider: ContextValueProvider<Ctx, Src>): () => void {\n    this._providers.push(provider);\n    return () => {\n\n      const found = this._providers.indexOf(provider);\n\n      if (found >= 0) {\n        this._providers.splice(found, 1);\n      }\n    };\n  }\n\n  seed(context: Ctx, initial: AIterable<Src> = AIterable.from(overNone())): AIterable<Src> {\n    return AIterable.from([\n      initial,\n      sourceValues(context, this._providers),\n    ]).flatMap(asis);\n  }\n\n  isEmpty(seed: AIterable<Src>): boolean {\n    return itsEmpty(seed);\n  }\n\n  combine(first: AIterable<Src>, second: AIterable<Src>): AIterable<Src> {\n    return AIterable.from([first, second]).flatMap(asis);\n  }\n\n}\n\nclass SimpleSeedKey<Src> extends ContextSeedKey<Src, AIterable<Src>> {\n\n  seeder<Ctx extends ContextValues>(): SimpleContextSeeder<Ctx, Src> {\n    return new SimpleContextSeeder();\n  }\n\n}\n\n/**\n * Simple context value key implementation.\n *\n * Collects value sources into iterable instance.\n *\n * A context value associated with this key is never changes once constructed.\n *\n * @typeparam Value  Context value type.\n * @typeparam Src  Source value type.\n */\nexport abstract class SimpleContextKey<Value, Src = Value> extends ContextKey<Value, Src, AIterable<Src>> {\n\n  readonly seedKey: ContextSeedKey<Src, AIterable<Src>>;\n\n  /**\n   * Constructs simple context value key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   */\n  constructor(name: string, seedKey?: ContextSeedKey<Src, AIterable<Src>>) {\n    super(name);\n    this.seedKey = seedKey || new SimpleSeedKey(this);\n  }\n\n}\n\n/**\n * Single context value reference.\n *\n * @typeparam Value  Context value type.\n */\nexport type SingleContextRef<Value> = ContextRef<Value, Value>;\n\n/**\n * Single context value key.\n *\n * Treats the last source value as context one and ignores the rest of them.\n *\n * @typeparam Value  Context value type.\n */\nexport class SingleContextKey<Value>\n    extends SimpleContextKey<Value>\n    implements SingleContextRef<Value> {\n\n  /**\n   * A provider of context value used when there is no value associated with this key.\n   */\n  readonly byDefault: ContextKeyDefault<Value, ContextKey<Value>>;\n\n  /**\n   * Constructs single context value key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   * @param byDefault  Optional default value provider. If unspecified or `undefined` the key has no default\n   * value.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n        byDefault = noop,\n      }: {\n        seedKey?: ContextSeedKey<Value, AIterable<Value>>;\n        byDefault?: ContextKeyDefault<Value, ContextKey<Value>>;\n      } = {},\n  ) {\n    super(name, seedKey);\n    this.byDefault = byDefault;\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<Ctx, Value, Value, AIterable<Value>>,\n  ): Value | null | undefined {\n\n    const value = itsLast(opts.seed);\n\n    if (value != null) {\n      return value;\n    }\n\n    return opts.byDefault(() => this.byDefault(opts.context, this));\n  }\n\n}\n\n/**\n * Multiple context value reference.\n *\n * Represents context value as read-only array of source values.\n *\n * @typeparam Src  Value source type and context value item type.\n */\nexport type MultiContextRef<Src> = ContextRef<readonly Src[], Src>;\n\n/**\n * Multiple context values key.\n *\n * Represents context value as read-only array of source values.\n *\n * Associated with empty array by default.\n *\n * @typeparam Src  Value source type and context value item type.\n */\nexport class MultiContextKey<Src>\n    extends SimpleContextKey<readonly Src[], Src>\n    implements MultiContextRef<Src> {\n\n  /**\n   * A provider of context value used when there is no value associated with this key.\n   */\n  readonly byDefault: ContextKeyDefault<readonly Src[], ContextKey<readonly Src[], Src>>;\n\n  /**\n   * Constructs multiple context values key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   * @param byDefault  Optional default value provider. If unspecified then the default value is empty array.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n        byDefault = valuesProvider(),\n      }: {\n        seedKey?: ContextSeedKey<Src, AIterable<Src>>;\n        byDefault?: ContextKeyDefault<readonly Src[], ContextKey<readonly Src[], Src>>;\n      } = {},\n  ) {\n    super(name, seedKey);\n    this.byDefault = byDefault;\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<Ctx, readonly Src[], Src, AIterable<Src>>,\n  ): readonly Src[] | null | undefined {\n\n    const result = Array.from(opts.seed);\n\n    if (result.length) {\n      return result;\n    }\n\n    return opts.byDefault(() => {\n\n      const defaultSources = this.byDefault(opts.context, this);\n\n      if (defaultSources) {\n        return Array.from(defaultSources);\n      }\n\n      return;\n    });\n  }\n\n}\n\n/**\n * Context value provider and cached context value source.\n *\n * @internal\n */\ntype SourceEntry<Ctx extends ContextValues, Src> = [ContextValueProvider<Ctx, Src>, (Src | null | undefined)?];\n\n/**\n * @internal\n */\nfunction sourceValues<Ctx extends ContextValues, Src>(\n    context: Ctx,\n    providers: ContextValueProvider<Ctx, Src>[],\n): AIterable<Src> {\n  return AIterable.from(overArray(providers.map<SourceEntry<Ctx, Src>>(provider => [provider])))\n      .map(entry => {\n        if (entry.length > 1) {\n          return entry[1];\n        }\n\n        const source = entry[0](context);\n\n        entry.push(source);\n\n        return source;\n      })\n      .filter<Src>(isPresent);\n}\n","/**\n * @module namespace-aliaser\n */\nimport { QualifiedName } from './name';\nimport { NamespaceDef } from './namespace';\nimport { NamespaceAliaser } from './namespace-aliaser';\n\n/**\n * Naming schema is responsible for applying namespace aliases to simple names. E.g. by appending alias as prefix or\n * suffix of the name.\n */\nexport abstract class Naming {\n\n  /**\n   * Applies the given namespace `alias` to the given local `name`.\n   *\n   * @param name Local name to apply namespace alias to.\n   * @param alias Namespace alias to apply.\n   * @param namespace Aliased namespace definition.\n   *\n   * @returns A string containing the `name` with `alias` applied to it.\n   */\n  abstract applyAlias(name: string, alias: string, namespace: NamespaceDef): string;\n\n  /**\n   * Converts the given qualified `name` into simple one accordingly to this naming schema.\n   *\n   * @param name Qualified name to convert.\n   * @param nsAlias Namespace aliaser to use.\n   */\n  name(name: QualifiedName, nsAlias: NamespaceAliaser): string {\n    if (typeof name === 'string') {\n      return name;\n    }\n\n    const [local, ns] = name;\n\n    return ns.name(nsAlias(ns), local, this);\n  }\n\n}\n","/**\n * @module namespace-aliaser\n */\nimport { Naming } from './naming';\n\nclass DefaultNaming extends Naming {\n\n  applyAlias(name: string, alias: string): string {\n    return `${alias}-${name}`;\n  }\n\n}\n\n/**\n * Default naming schema.\n *\n * Prefixes a name with namespace alias separating them by dash.\n *\n * The result looks like `<alias>-<name>`.\n */\nexport const default__naming: Naming = (/*#__PURE__*/ new DefaultNaming());\n\n/**\n * HTML elements naming schema.\n *\n * Prefixes a name with namespace alias separating them by dash.\n *\n * The result looks like `<alias>-<name>`.\n */\nexport const html__naming: Naming = (/*#__PURE__*/ new DefaultNaming());\n\nclass XmlNaming extends Naming {\n\n  applyAlias(name: string, alias: string): string {\n    return `${alias}:${name}`;\n  }\n\n}\n\n/**\n * XML elements naming schema.\n *\n * Prefixes a name with namespace alias separating them by colon.\n *\n * The result looks like `<alias>:<name>`.\n */\nexport const xml__naming: Naming = (/*#__PURE__*/ new XmlNaming());\n\n/**\n * Element identifiers naming schema.\n *\n * Prefixes a name with namespace alias separating them by colon.\n *\n * The result looks like `<alias>:<name>`.\n */\nexport const id__naming: Naming = (/*#__PURE__*/ new XmlNaming());\n\nclass CssNaming extends Naming {\n\n  applyAlias(name: string, alias: string): string {\n    return `${name}@${alias}`;\n  }\n\n}\n\n/**\n * CSS classes naming scheme.\n *\n * Appends namespace alias as a name suffix separated by `@` sign.\n *\n * The result looks like `<name>@<alias>`.\n */\nexport const css__naming: Naming = (/*#__PURE__*/ new CssNaming());\n","/**\n * @module namespace-aliaser\n */\nimport { Naming } from './naming';\nimport { default__naming } from './namings';\n\n/**\n * Namespace definition.\n *\n * Namespaces are identified by their URLs.\n */\nexport class NamespaceDef {\n\n  /**\n   * Unique namespace URL.\n   */\n  readonly url: string;\n\n  /**\n   * Preferred namespace aliases.\n   */\n  readonly aliases: readonly string[];\n\n  /**\n   * The most preferred namespace alias.\n   *\n   * By default this is the first preferred alias, or `ns` if there is no preferred aliases.\n   */\n  get alias(): string {\n    return this.aliases[0] || 'ns';\n  }\n\n  /**\n   * Constructs new namespace definition.\n   *\n   * @param url  Unique namespace URL.\n   * @param aliases  Preferred namespace aliases. It is expected that each alias is an ASCII letter followed by\n   * any number of ASCII letters, digits, `-`, or `_` signs. Aliases starting with `xml` are reserved. Empty alias\n   * is reserved for [default namespace][[DEFAULT__NS]].\n   */\n  constructor(url: string, ...aliases: string[]) {\n    this.url = url;\n    this.aliases = aliases;\n  }\n\n  /**\n   * Converts a local `name` belonging to this namespace to simple one according to the given `naming` schema.\n   *\n   * Calls [[Naming.applyAlias]] by default.\n   *\n   * @param alias  Namespace alias to apply to the name.\n   * @param name  A name to convert.\n   * @param naming  Naming schema to use. {@link default__naming default naming schema} is used when omitted.\n   *\n   * @returns A simple name with this namespace alias applied.\n   */\n  name(alias: string, name: string, naming: Naming = default__naming): string {\n    return naming.applyAlias(name, alias, this);\n  }\n\n}\n","/**\n * @module namespace-aliaser\n */\nimport { DEFAULT__NS } from './default.ns';\nimport { NamespaceDef } from './namespace';\n\n/**\n * A name qualified with namespace.\n *\n * This can be either:\n * - a simple name string, which means a name in default namespace, or\n * - a name+namespace tuple.\n */\nexport type QualifiedName = string | NameAndNamespace;\n\n/**\n * A local name and namespace tuple.\n *\n * Consists of a local name string and namespace definition this name belongs to.\n */\nexport type NameAndNamespace = readonly [string, NamespaceDef];\n\n/**\n * Checks whether the given `value` is a name+namespace tuple.\n *\n * @param value  A value to check.\n *\n * @returns `true` if the given `value` is an array consisting of exactly two elements, where the first element is a\n * non-empty string, and the second element is an instance of [[NamespaceDef]]. Or `false` otherwise.\n */\nexport function isNameAndNamespace(value: any): value is NameAndNamespace {\n  return Array.isArray(value)\n      && value.length === 2\n      && typeof value[0] === 'string'\n      && value[1] instanceof NamespaceDef;\n}\n\n/**\n * Checks whether the given `value` is a qualified name.\n *\n * @param value  A value to check.\n *\n * @returns `true` if the given `value` is a non-empty string or an array consisting of exactly two elements,\n * where the first element is a non-empty string, and the second element is an instance of [[NamespaceDef]].\n * Or `false` otherwise.\n */\nexport function isQualifiedName(value: any): value is QualifiedName {\n  return typeof value === 'string' || isNameAndNamespace(value);\n}\n\n/**\n * Detects a namespace of the given qualified `name`\n *\n * @param name  Qualified name to detect a namespace of.\n *\n * @returns A namespace if the given `name` has it, or {@link DEFAULT__NS default namespace} otherwise.\n */\nexport function namespaceOf(name: QualifiedName): NamespaceDef {\n  return typeof name !== 'string' ? name[1] : DEFAULT__NS;\n}\n\n/**\n * Converts the given qualified `name` to local name and namespace tuple.\n *\n * @param name  Qualified name to convert.\n *\n * @returns The `name` itself if it has a namespace, or a tuple consisting of `name` and\n * {@link DEFAULT__NS default namespace} otherwise.\n */\nexport function nameAndNamespace(name: QualifiedName): NameAndNamespace {\n  return typeof name !== 'string' ? name : [name, DEFAULT__NS];\n}\n\n/**\n * Checks whether two qualified names are equal to each other.\n *\n * @param first  First qualified name to compare.\n * @param second  Second qualified name to compare.\n *\n * @returns `true` if both names are equal, or `false` otherwise.\n */\nexport function namesEqual(first: QualifiedName, second: QualifiedName): boolean {\n  if (typeof first === 'string') {\n    return typeof second === 'string' ? first === second : !second[1].url && second[0] === first;\n  }\n\n  const [firstName, { url: firstUrl }] = first;\n\n  if (typeof second === 'string') {\n    return !firstUrl && firstName === second;\n  }\n\n  return firstName === second[0] && firstUrl === second[1].url;\n}\n\n/**\n * Compares two qualified names.\n *\n * Names in default namespace considered less than other names. Namespaces are compared by their URLs.\n *\n * @param first  First qualified name to compare.\n * @param second  Second qualified name to compare.\n *\n * @returns `-1` if the `first` name is less than the `second` one, `0` if they are equal, or `1` if the `first` name\n * is greater than the `second` one.\n */\nexport function compareNames(first: QualifiedName, second: QualifiedName): -1 | 0 | 1 {\n  if (typeof first === 'string') {\n    if (typeof second === 'string') {\n      return compareStrings(first, second);\n    }\n    if (!second[1].url) {\n      return compareStrings(first, second[0]);\n    }\n    return -1;\n  }\n\n  const [firstName, { url: firstUrl }] = first;\n\n  if (typeof second === 'string') {\n    if (!firstUrl) {\n      return compareStrings(firstName, second);\n    }\n    return 1;\n  }\n\n  return compareStrings(firstUrl, second[1].url) || compareStrings(firstName, second[0]);\n}\n\nfunction compareStrings(first: string, second: string): -1 | 0 | 1 {\n  return first < second ? -1 : first > second ? 1 : 0;\n}\n","/**\n * @module namespace-aliaser\n */\nimport { NamespaceDef } from './namespace';\n\n/**\n * Namespace aliaser function interface.\n *\n * Maps namespaces to their unique aliases.\n */\nexport type NamespaceAliaser =\n/**\n * @param ns  A definition of namespace to find alias for.\n *\n * @returns Namespace alias.\n */\n    (ns: NamespaceDef) => string;\n\n/**\n * Creates a namespace aliaser.\n *\n * The returned function tries to find a registered alias for the given namespace. If not found then tries to use one\n * of its preferred aliases. If all of them are reserved already for another namespaces, generates a new unique alias.\n *\n * @returns New instance of namespace aliaser.\n */\nexport function newNamespaceAliaser(): NamespaceAliaser {\n\n  const aliasesByNs = new Map<string, string>();\n  const nsNumPerAlias = new Map<string, number>();\n\n  return function nsAlias(ns: NamespaceDef): string {\n\n    const found = aliasesByNs.get(ns.url);\n\n    if (found) {\n      return found;\n    }\n\n    const mostPreferred = ns.alias;\n    let nsNumRegistered = 0;\n\n    for (const preferred of [mostPreferred, ...ns.aliases]) {\n\n      const ids = nsNumPerAlias.get(preferred);\n\n      if (!ids) {\n        aliasesByNs.set(ns.url, preferred);\n        nsNumPerAlias.set(preferred, 1);\n        return preferred;\n      }\n      if (!nsNumRegistered) {\n        // Use the first one\n        nsNumRegistered = ids;\n      }\n    }\n\n    const generated = mostPreferred + (++nsNumRegistered);\n\n    aliasesByNs.set(ns.url, generated);\n    nsNumPerAlias.set(mostPreferred, nsNumRegistered);\n\n    return generated;\n  };\n}\n","/**\n * @packageDocumentation\n * @module render-scheduler\n */\nimport { ScheduledRender } from './scheduled-render';\n\n/**\n * Render schedule signature.\n *\n * This function accepts {@link ScheduledRender renders} to schedule.\n *\n * If multiple renders scheduled before execution starts, only the last one will be executed to limit their execution\n * rate.\n *\n * The render execution may fail. This should not prevent other scheduled or postponed renders from being executed.\n * The render execution failure reason is expected to be reported with [[RenderScheduleConfig.error]] method.\n *\n * Render schedules are constructed by {@link RenderScheduler render schedulers}, or by [[newRenderSchedule]] function\n * that uses the {@link setRenderScheduler default scheduler} for that.\n */\nexport type RenderSchedule =\n/**\n * @param render  A render to schedule.\n */\n    (this: void, render: ScheduledRender) => void;\n\n/**\n * Options for render schedule.\n *\n * This is passed to {@link RenderScheduler render scheduler} when constructing new {@link RenderSchedule schedule}.\n *\n * A {@link RenderScheduleConfig render configuration} can be constructed based on the options with\n * [[RenderScheduleConfig.by]] function.\n */\nexport interface RenderScheduleOptions {\n\n  /**\n   * A window for constructed schedule.\n   *\n   * Detected by [[nodeWindow]] by default, if [[node]] is specified. Falls back to current `window`.\n   *\n   * The schedulers that don't need a window never access this option value.\n   */\n  window?: Window;\n\n  /**\n   * A DOM node for constructed schedule.\n   *\n   * Used to detect missing [[window]] option.\n   */\n  node?: Node;\n\n  /**\n   * Reports an error. E.g. a render execution failure.\n   *\n   * Reports errors with `console.error()` by default.\n   *\n   * @param messages  Error messages to report.\n   */\n  error?(...messages: any[]): void;\n\n}\n\n/**\n * Render schedule configuration.\n *\n * This is based on {@link RenderScheduleOptions render options}, but has all properties present.\n *\n * The configuration ought to be constructed out of render options by [[RenderScheduleConfig.by]] function.\n */\nexport interface RenderScheduleConfig {\n\n  /**\n   * A window the schedule is constructed for.\n   *\n   * The schedulers that don't need a window should never access this option value.\n   */\n  window: Window;\n\n  /**\n   * A DOM node the schedule is constructed for.\n   */\n  node?: Node;\n\n  /**\n   * Reports an error. E.g. a render execution failure.\n   *\n   * @param messages  Error messages to report.\n   */\n  error(...messages: any[]): void;\n\n}\n\nexport const RenderScheduleConfig = {\n\n  /**\n   * Constructs a configuration of render scheduler by its options.\n   *\n   * @param options  Render scheduler options the configuration should be base on.\n   */\n  by(this: void, options: RenderScheduleOptions = {}): RenderScheduleConfig {\n\n    let win: Window | undefined;\n\n    return {\n      get node() {\n        return options.node;\n      },\n      get window() {\n        return win || (win = options.window || (options.node && nodeWindow(options.node)) || window);\n      },\n      error(...messages) {\n        if (options && options.error) {\n          options.error(...messages);\n        } else {\n          console.error(...messages);\n        }\n      },\n    };\n  },\n\n};\n\n/**\n * Detects a window the given DOM node is attached to.\n *\n * @param node  Target DOM node.\n *\n * @returns A window of the owner document, or `null` if absent.\n */\nexport function nodeWindow(node: Node): Window | null {\n\n  const document = node.ownerDocument || node as Document;\n\n  return document.defaultView;\n}\n","/**\n * @packageDocumentation\n * @module render-scheduler\n */\nimport { RenderScheduleConfig } from './render-schedule';\nimport { RenderScheduler } from './render-scheduler';\nimport { ScheduledRender, ScheduledRenderExecution } from './scheduled-render';\n\n/**\n * Custom render scheduler options.\n *\n * This is passed to [[customRenderScheduler]] function to construct new custom scheduler.\n */\nexport interface CustomRenderSchedulerOptions {\n\n  /**\n   * Obtains a queue for render schedule.\n   *\n   * This is called once per render schedule.\n   *\n   * Render schedules may share the queue.\n   *\n   * @param config  Render schedule configuration.\n   *\n   * @returns  Scheduled render queue.\n   */\n  newQueue(config: RenderScheduleConfig): ScheduledRenderQueue;\n\n}\n\n/**\n * A queue of scheduled renders.\n *\n * Utilized by render scheduler in order to collect scheduled renders and schedule their execution.\n *\n * The default implementation may constructed using [[ScheduledRenderQueue.by]] function.\n */\nexport interface ScheduledRenderQueue {\n\n  /**\n   * Adds a render to this queue.\n   *\n   * @param render  Scheduled render to add.\n   */\n  add(render: ScheduledRender): void;\n\n  /**\n   * Retrieves the first added render and removes it from the queue.\n   *\n   * @returns  Either pulled out scheduled render, or `undefined` when there is no more renders.\n   */\n  pull(): ScheduledRender | undefined;\n\n  /**\n   * Schedules queued renders execution.\n   *\n   * @param task  A function that performs scheduled renders execution task.\n   */\n  schedule(task: (this: void) => void): void;\n\n  /**\n   * Resets the queue for the next execution.\n   *\n   * @returns  Another (empty) queue that will collect scheduled renders from now on.\n   */\n  reset(): ScheduledRenderQueue;\n\n}\n\nexport const ScheduledRenderQueue = {\n\n  /**\n   * Builds the default implementation of scheduled renders queue.\n   *\n   * @param schedule  Schedules queued renders execution. This is an implementation of\n   * [[ScheduledRenderQueue.schedule]] method.\n   * @param replace  Called right after [[ScheduledRenderQueue.reset]] method in order to inform on queue that will\n   * collect scheduled renders from now.\n   *\n   * @returns New scheduled render queue.\n   */\n  by(\n      this: void,\n      {\n        schedule,\n        replace = () => {/* do not replace */},\n      }: {\n        schedule(this: ScheduledRenderQueue, task: (this: void) => void): void;\n        replace?(this: void, replacement: ScheduledRenderQueue): void;\n      },\n  ): ScheduledRenderQueue {\n\n    const renders: ScheduledRender[] = [];\n\n    return {\n      schedule,\n      add(render) {\n        renders.push(render);\n      },\n      pull() {\n        return renders.shift();\n      },\n      reset() {\n\n        const next = ScheduledRenderQueue.by({ schedule, replace });\n\n        replace(next);\n\n        return next;\n      },\n    };\n  },\n\n};\n\n/**\n * @internal\n */\nconst ScheduledRenderQ__symbol = Symbol('scheduled-render-q');\n\n/**\n * @internal\n */\nclass ScheduledRenderQ {\n\n  readonly ref: [ScheduledRenderQ];\n  schedule: (this: ScheduledRenderQ, config: RenderScheduleConfig) => void;\n  private scheduled?: RenderScheduleConfig;\n\n  static by(queue: ScheduledRenderQueue, ref?: [ScheduledRenderQ]): ScheduledRenderQ {\n    return (queue as any)[ScheduledRenderQ__symbol]\n        || ((queue as any)[ScheduledRenderQ__symbol] = new ScheduledRenderQ(queue, ref));\n  }\n\n  private constructor(private readonly q: ScheduledRenderQueue, ref?: [ScheduledRenderQ]) {\n    this.schedule = this.doSchedule;\n    this.ref = ref || [this];\n  }\n\n  add(render: ScheduledRender): void {\n    this.q.add(render);\n  }\n\n  private doSchedule(config: RenderScheduleConfig): void {\n    this.schedule = () => {/* do not schedule */};\n\n    const execution: ScheduledRenderExecution = {\n      get config() {\n        return config;\n      },\n      postpone: postponed => this.add(postponed),\n    };\n\n    this.q.schedule(() => {\n\n      const next = this.reset();\n\n      next.suspend();\n      this.exec(execution);\n      next.resume();\n    });\n  }\n\n  private exec(execution: ScheduledRenderExecution): void {\n    for (; ;) {\n\n      const render = this.q.pull();\n\n      if (!render) {\n        break;\n      }\n      render(execution);\n    }\n  }\n\n  private reset(): ScheduledRenderQ {\n    return this.ref[0] = ScheduledRenderQ.by(this.q.reset(), this.ref);\n  }\n\n  private suspend(): void {\n    this.schedule = config => {\n      this.scheduled = config;\n      this.schedule = () => {/* do not schedule */};\n    };\n  }\n\n  private resume(): void {\n    if (this.scheduled) {\n      this.doSchedule(this.scheduled);\n    } else {\n      this.schedule = this.doSchedule;\n    }\n  }\n\n}\n\n/**\n * Builds custom render scheduler.\n *\n * @param options  Render scheduler options.\n *\n * @returns New render scheduler.\n */\nexport function customRenderScheduler(\n    options: CustomRenderSchedulerOptions,\n): RenderScheduler {\n  return scheduleOptions => {\n\n    const config = RenderScheduleConfig.by(scheduleOptions);\n    const queueRef = ScheduledRenderQ.by(options.newQueue(config)).ref;\n    let enqueued: [ScheduledRenderQ, ScheduledRender] | [] = [];\n\n    return render => {\n\n      const [lastQueue] = enqueued;\n      const [nextQueue] = queueRef;\n\n      if (lastQueue === nextQueue) {\n        enqueued[1] = render;\n      } else {\n\n        const nextEnqueued = enqueued = [nextQueue, render];\n\n        nextQueue.add((execution: ScheduledRenderExecution) => {\n          try {\n            nextEnqueued[1]({\n              get config() {\n                return config;\n              },\n              postpone(postponed) {\n                execution.postpone(postponed);\n              },\n            });\n          } catch (e) {\n            config.error(e);\n          }\n        });\n      }\n\n      nextQueue.schedule(config);\n    };\n  };\n}\n","/**\n * @packageDocumentation\n * @module render-scheduler\n */\nimport { customRenderScheduler, ScheduledRenderQueue } from './custom-render-scheduler';\nimport { RenderScheduler } from './render-scheduler';\n\n/**\n * @internal\n */\nconst animationRenderQueues = (/*#__PURE__*/ new WeakMap<Window, ScheduledRenderQueue>());\n\n/**\n * A render scheduler that executes the scheduled renders within animation frame.\n *\n * Utilizes [requestAnimationFrame()] function for that.\n *\n * The renders scheduled by different schedules created for the same window are all executed in the same animation\n * frame. The {@link ScheduledRenderExecution.postpone postponed} renders are executed only after all scheduled ones\n * complete.\n *\n * [requestAnimationFrame()]: https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\n */\nexport const animationRenderScheduler: RenderScheduler = (/*#__PURE__*/ customRenderScheduler({\n  newQueue({ window }) {\n\n    const existing = animationRenderQueues.get(window);\n\n    if (existing) {\n      return existing;\n    }\n\n    const newQueue = ScheduledRenderQueue.by({\n      schedule: task => window.requestAnimationFrame(task),\n      replace: replacement => animationRenderQueues.set(window, replacement),\n    });\n\n    animationRenderQueues.set(window, newQueue);\n\n    return newQueue;\n  },\n}));\n","/**\n * @packageDocumentation\n * @module render-scheduler\n */\nimport { animationRenderScheduler } from './animation-render-scheduler';\nimport { RenderSchedule, RenderScheduleOptions } from './render-schedule';\n\n/**\n * Render scheduler signature.\n *\n * This function constructs {@link RenderSchedule render schedules} according to the given options.\n *\n * The default render scheduler is always available as [[newRenderSchedule]] function.\n *\n * There are several scheduler implementations exist:\n * - [[animationRenderScheduler]] (used by default),\n * - [[asyncRenderScheduler]],\n * - [[immediateRenderScheduler]],\n * - [[ManualRenderScheduler]],\n * - [[noopRenderScheduler]].\n *\n * Custom scheduler implementations could be created using [[customRenderScheduler]] function.\n */\nexport type RenderScheduler =\n/**\n * @param options  Options of constructed render schedule.\n *\n * @returns New render schedule.\n */\n    (this: void, options?: RenderScheduleOptions) => RenderSchedule;\n\n/**\n * @internal\n */\nlet defaultRenderScheduler = animationRenderScheduler;\n\n/**\n * Assigns or resets the default render scheduler.\n *\n * An {@link animationRenderScheduler animation frame render scheduler} is used bu default.\n *\n * @param scheduler  New default render scheduler. {@link animationRenderScheduler animation frame render scheduler}\n * will be used if `null`, `undefined`, or omitted.\n *\n * @returns New default render scheduler.\n */\nexport function setRenderScheduler(\n    scheduler?: RenderScheduler | null,\n): RenderScheduler {\n  return defaultRenderScheduler = scheduler || animationRenderScheduler;\n}\n\n/**\n * Constructs {@link RenderSchedule render schedule} using {@link setRenderScheduler default render scheduler}.\n *\n * @param options  Options of constructed render schedule.\n *\n * @returns New render schedule.\n */\nexport function newRenderSchedule(options?: RenderScheduleOptions): RenderSchedule {\n  return defaultRenderScheduler(options);\n}\n","/**\n * @packageDocumentation\n * @module fun-events/dom\n */\nimport { eventReceiver, EventReceiver } from '../event-receiver';\nimport { EventSupply } from '../event-supply';\nimport { once, tillOff } from '../impl';\nimport { OnEvent } from '../on-event';\n\n/**\n * DOM event listener.\n *\n * DOM events are never recurrent.\n *\n * @category DOM\n * @typeparam E  Supported DOM event type.\n */\nexport type DomEventListener<E extends Event> = EventReceiver<[E]>;\n\n/**\n * A DOM event listener registrar signature.\n *\n * @category DOM\n * @typeparam E  Supported DOM event type.\n */\nexport abstract class OnDomEvent<E extends Event> extends OnEvent<[E]> {\n\n  /**\n   * An [[OnDomEvent]] sender derived from this one that stops sending events to registered listener after the first\n   * one.\n   */\n  get once(): OnDomEvent<E> {\n    return onDomEventBy(once(this));\n  }\n\n  /**\n   * Builds an [[OnDomEvent]] sender that sends events from this one until the required `supply` is cut off.\n   *\n   * @param supply  The required event supply.\n   *\n   * @returns New DOM event sender.\n   */\n  tillOff(supply: EventSupply): OnDomEvent<E> {\n    return onDomEventBy(tillOff(this, supply));\n  }\n\n  /**\n   * An [[OnDomEvent]] sender derived from this one that enables event capturing by default.\n   *\n   * This corresponds to specifying `true` or `{ capture: true }` as a second argument to\n   * `EventTarget.addEventListener()`.\n   */\n  get capture(): OnDomEvent<E> {\n    return onDomEventBy((\n        listener: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => {\n      if (opts == null) {\n        return this(listener, true);\n      }\n      if (typeof opts === 'object' && opts.capture == null) {\n        return this(listener, { ...opts, capture: true });\n      }\n      return this(listener, opts);\n    });\n  }\n\n  /**\n   * An [[OnDomEvent]] sender derived from this one that registers listeners to invoke instead of the default action.\n   *\n   * It invokes an `Event.preventDefault()` method prior to calling the registered listeners.\n   */\n  get instead(): OnDomEvent<E> {\n    return onDomEventBy((\n        listener: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => {\n\n      const receiver = eventReceiver(listener);\n\n      return this(\n          {\n            supply: receiver.supply,\n            receive(context, event) {\n              event.preventDefault();\n              receiver.receive(context, event);\n            },\n          },\n          opts,\n      );\n    });\n  }\n\n  /**\n   * An [[OnDomEvent]] sender derived from this one that registers listeners preventing further propagation of\n   * current event in the capturing and bubbling phases.\n   *\n   * It invokes an `Event.stopPropagation()` method prior to calling the registered listeners.\n   */\n  get just(): OnDomEvent<E> {\n    return onDomEventBy((\n        listener: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => {\n\n      const receiver = eventReceiver(listener);\n\n      return this(\n          {\n            supply: receiver.supply,\n            receive(context, event) {\n              event.stopPropagation();\n              receiver.receive(context, event);\n            },\n          },\n          opts,\n      );\n    });\n  }\n\n  /**\n   * An [[OnDomEvent]] sender derived from this one that registers the last event listener.\n   *\n   * It invokes an `Event.stopImmediatePropagation()` method prior to calling the registered listeners.\n   */\n  get last(): OnDomEvent<E> {\n    return onDomEventBy((\n        listener: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => {\n\n      const receiver = eventReceiver(listener);\n\n      return this(\n          {\n            supply: receiver.supply,\n            receive(context, event) {\n              event.stopImmediatePropagation();\n              receiver.receive(context, event);\n            },\n          },\n          opts,\n      );\n    });\n  }\n\n  /**\n   * An [[OnDomEvent]] sender derived from this one that accepts listeners never calling `Event.preventDefault()`.\n   *\n   * This corresponds to specifying `{ passive: true }` as a second argument to `EventTarget.addEventListener()`.\n   */\n  get passive(): OnDomEvent<E> {\n    return onDomEventBy((\n        listener: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => {\n      if (opts == null) {\n        return this(listener, { passive: true });\n      }\n      if (typeof opts === 'boolean') {\n        return this(listener, { capture: opts, passive: true });\n      }\n      if (opts.passive == null) {\n        return this(listener, { ...opts, passive: true });\n      }\n      return this(listener, opts);\n    });\n  }\n\n}\n\nexport interface OnDomEvent<E extends Event> {\n\n  /**\n   * Registers a DOM event listener.\n   *\n   * @param listener  A DOM event listener to register.\n   * @param opts  DOM event listener options to pass to `EventTarget.addEventListener()`.\n   *\n   * @return A DOM events supply.\n   */\n  // eslint-disable-next-line @typescript-eslint/prefer-function-type\n  (this: void, listener: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): EventSupply;\n\n}\n\n/**\n * Converts a plain DOM event listener registration function to [[OnDomEvent]] sender.\n *\n * @category DOM\n * @typeparam E  Supported DOM event type.\n * @param register  A generic DOM event listener registration function.\n *\n * @returns An [[OnDomEvent]] sender registering event listeners with the given `register` function.\n */\nexport function onDomEventBy<E extends Event>(\n    register: (\n        this: void,\n        listener: EventReceiver.Generic<[E]>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => void,\n): OnDomEvent<E> {\n\n  const onDomEvent = (\n      (\n          listener: DomEventListener<E>,\n          opts?: AddEventListenerOptions | boolean,\n      ) => {\n\n        const receiver = eventReceiver(listener);\n\n        register(receiver, opts);\n\n        return receiver.supply;\n      }\n  ) as OnDomEvent<E>;\n\n  Object.setPrototypeOf(onDomEvent, OnDomEvent.prototype);\n\n  return onDomEvent;\n}\n","/**\n * @packageDocumentation\n * @module fun-events/dom\n */\nimport { noop } from 'call-thru';\nimport { EventReceiver } from '../event-receiver';\nimport { OnDomEvent, onDomEventBy } from './on-dom-event';\n\nconst domEventContext: EventReceiver.Context<any> = {\n  onRecurrent: noop,\n};\n\n/**\n * DOM event dispatcher can be used to register event listeners and dispatch events.\n *\n * @category DOM\n */\nexport class DomEventDispatcher {\n\n  /**\n   * @internal\n   */\n  private readonly _target: EventTarget;\n\n  /**\n   * Constructs DOM event dispatcher for the given event target.\n   *\n   * @param target  Event target to construct event dispatcher for.\n   */\n  constructor(target: EventTarget) {\n    this._target = target;\n  }\n\n  /**\n   * Returns a sender of DOM events of the given `type`.\n   *\n   * The returned DOM event sender calls an `EventTarget.addEventListener()` to register listeners.\n   * But, in contrast, it allows to register the same listener many times.\n   *\n   * The {@link EventSupply event supply} returned upon event listener registration unregisters it with\n   * `EventTarget.removeEventListener()` once {@link EventSupply.off cut off}.\n   *\n   * @typeparam E  Supported DOM event type.\n   * @param type  DOM event type name.\n   *\n   * @returns [[OnDomEvent]] sender of DOM events of the given `type`.\n   */\n  on<E extends Event>(type: string): OnDomEvent<E> {\n    return onDomEventBy<E>((listener, opts) => {\n\n      // Create unique DOM listener instance\n      const domListener: EventListener = event => listener.receive(domEventContext, event as E);\n\n      this._target.addEventListener(type, domListener, opts);\n      listener.supply.whenOff(() => this._target.removeEventListener(type, domListener));\n    });\n  }\n\n  /**\n   * Dispatches the given DOM event to event target.\n   *\n   * Calls `EventTarget.dispatchEvent()` method.\n   *\n   * @param event  An event to dispatch.\n   *\n   * @returns `true` if either event's `cancelable` attribute value is `false` or its `preventDefault()` method was not\n   * invoked, or `false` otherwise.\n   */\n  dispatch(event: Event): boolean {\n    return this._target.dispatchEvent(event);\n  }\n\n}\n","import { HthvItem } from './hthv-item';\n\n/**\n * @internal\n */\nexport interface HthvPartial<I extends HthvItem<any, any, any> = HthvItem> {\n  $: I['$'];\n  n?: I['n'];\n  t?: I['t'];\n  v: I['v'];\n  x?: I['x'];\n  p?: I['p'];\n  pl?: I['pl'];\n}\n\n/**\n * @internal\n */\nexport function hthvItem<I extends HthvItem<any, any, any>>(\n    {\n      $,\n      n,\n      t,\n      v,\n      x = [],\n      p = {},\n      pl = [],\n    }: HthvPartial<I>,\n): I {\n  return {\n    $,\n    n,\n    t,\n    v,\n    x,\n    p,\n    pl,\n  } as I;\n}\n","import { HthvItem, HthvParamItem } from '../hthv-item';\n\n/**\n * @internal\n */\nexport function addParam({ p, pl }: HthvItem, param: HthvParamItem) {\n\n  const key = param.n || param.v;\n  const prev = p[key];\n\n  if (!prev || !prev.n && param.n) {\n    p[key] = param;\n  }\n  pl.push(param);\n}\n","import { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function nextInItem(config: ParserConfig): (input: ParserInput) => string {\n  return input => {\n\n    const c = input.s[input.i];\n\n    input.d = config.delimiterOf(c);\n\n    return c;\n  };\n}\n","// tslint:disable-next-line:max-line-length\nimport { ParserInput } from './parser-input';\n\nconst datePattern = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d\\d (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d\\d\\d\\d \\d\\d:\\d\\d:\\d\\d GMT/;\n\n/**\n * @internal\n */\nexport function parseDateTime(input: ParserInput, out: (value: string) => void): boolean {\n  input.s = input.s.substring(input.i);\n  input.i = 0;\n  if (input.s.match(datePattern)) {\n    out(input.s.substring(input.i, input.i += 29));\n    return true;\n  }\n  return false;\n}\n","/**\n * @internal\n */\nexport const parseNone = () => false;\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { HthvExtraItem, HthvItem, HthvItemType } from '../hthv-item';\nimport { hthvItem } from '../hthv-partial.impl';\nimport { angleBracketsParser } from './angle-brackets-parser';\nimport { nextInItem } from './next-in-item';\nimport { parseDateTime } from './parse-date-time';\nimport { parseNone } from './parse-none';\nimport { quotedStringParser } from './quoted-string-parser';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport interface ItemParserOpts {\n  named?: boolean;\n  tagged?: boolean;\n  extra?: boolean;\n  next?: (input: ParserInput) => string;\n}\n\n/**\n * @internal\n */\nexport function itemParser(\n    config: ParserConfig,\n    {\n      named = true,\n      tagged = true,\n      extra = true,\n      next = nextInItem(config),\n    }: ItemParserOpts = {},\n): (input: ParserInput, out: (param: HthvItem<any, any, any>) => void) => boolean {\n\n  const parseQuotedString = quotedStringParser(config);\n  const parseAngleBrackets = angleBracketsParser(config);\n  const parseExtra = extra ? itemParser(config, { next, tagged: false, named: false, extra: false }) : parseNone;\n\n  return (input, out) => {\n\n    let name = '';\n    let type: HthvItemType = 'raw';\n    let tag: string | undefined;\n    let value: string | undefined;\n\n    while (input.i < input.s.length) {\n\n      const c = next(input);\n\n      if (input.d) {\n        if (input.d & (HthvDelimiter.Item | HthvDelimiter.Parameter)) {\n          break;\n        }\n        if (value == null) {\n          if (input.d & HthvDelimiter.Assignment) {\n            value = name ? '' : c;\n            ++input.i;\n            continue;\n          }\n          if (input.d & HthvDelimiter.Quote) {\n            if (tagged || !name) {\n              parseQuotedString(input, v => {\n                if (name) {\n                  type = 'tagged-string';\n                  tag = name;\n                } else {\n                  type = 'quoted-string';\n                }\n                name = '';\n                value = v;\n              });\n            }\n            break;\n          }\n          if (!name && parseAngleBrackets(input, v => {\n            type = 'angle-bracketed-string';\n            value = v;\n          })) {\n            break;\n          }\n          value = name;\n          name = '';\n        } else if (input.d & HthvDelimiter.Quote) {\n          if (tagged || !value) {\n            parseQuotedString(input, v => {\n              if (value) {\n                type = 'tagged-string';\n                tag = value;\n              } else {\n                type = 'quoted-string';\n              }\n              value = v;\n            });\n          }\n          break;\n        } else if (!value && parseAngleBrackets(input, v => {\n          type = 'angle-bracketed-string';\n          value = v;\n        })) {\n          break;\n        }\n      }\n\n      if (value == null) {\n        if (!name && parseDateTime(input, v => value = v)) {\n          type = 'date-time';\n          break;\n        }\n        if (named) {\n          name += c;\n        } else {\n          value = c;\n        }\n      } else if (!value && parseDateTime(input, v => value = v)) {\n        type = 'date-time';\n        break;\n      } else {\n        value += c;\n      }\n\n      ++input.i;\n    }\n\n    let item: HthvItem<any, any>;\n\n    if (value == null) {\n      if (!name) {\n        return false;\n      }\n      item = hthvItem({ $: type, v: name });\n    } else {\n      item = hthvItem({ $: type, n: name || undefined, t: tag, v: value });\n    }\n\n    // noinspection StatementWithEmptyBodyJS\n    while (parseExtra(input, extraItem => item.x.push(extraItem as HthvExtraItem),\n    )) ; // tslint:disable-line:curly\n\n    out(item);\n\n    return true;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function quotedStringParser(\n    config: ParserConfig,\n): (input: ParserInput, out: (value: string) => void) => void {\n  return (input, out) => {\n\n    let unquoted = '';\n\n    ++input.i;\n    for (; input.i < input.s.length; ++input.i) {\n\n      const c = input.s[input.i];\n\n      if (c === '\\\\') {\n\n        const next = input.s[++input.i];\n\n        if (next) {\n          unquoted += next;\n        } else {\n          unquoted += c;\n        }\n      } else if (config.delimiterOf(c) & HthvDelimiter.Quote) {\n        ++input.i;\n        out(unquoted);\n        return;\n      } else {\n        unquoted += c;\n      }\n    }\n\n    out(unquoted);\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function angleBracketsParser(\n    config: ParserConfig,\n): (input: ParserInput, out: (v: string) => void) => boolean {\n  return (input, out) => {\n     if (!(config.delimiterOf(input.s[input.i]) & HthvDelimiter.AngleBracketStart)) {\n       return false;\n     }\n\n     let result = '';\n\n     ++input.i;\n     while (input.i < input.s.length) {\n\n       const c = input.s[input.i++];\n\n       if (config.delimiterOf(c) & HthvDelimiter.AngleBracketEnd) {\n         break;\n       }\n       result += c;\n     }\n\n     out(result);\n\n     return true;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function nextInComment(config: ParserConfig): (input: ParserInput) => string {\n  return input => {\n\n    let c = input.s[input.i];\n\n    if (c !== '\\\\') {\n      input.d = config.delimiterOf(c);\n      return c;\n    }\n\n    ++input.i;\n    if (input.i < input.s.length) {\n      c = input.s[input.i];\n      input.d = config.delimiterOf(c) ? HthvDelimiter.NonToken : HthvDelimiter.None;\n    } else {\n      input.d = HthvDelimiter.NonToken;\n    }\n\n    return c;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function spacesParser(config: ParserConfig): (input: ParserInput) => boolean {\n  return input => {\n\n    const start = input.i;\n\n    do {\n\n      const c = input.s[input.i];\n\n      if (!(config.delimiterOf(c) & HthvDelimiter.Space)) {\n        break;\n      }\n      input.i++;\n    } while (input.i < input.s.length);\n\n    return input.i !== start;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { HthvParamItem } from '../hthv-item';\nimport { itemParser, ItemParserOpts } from './item-parser';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\nimport { spacesParser } from './spaces-parser';\n\n/**\n * @internal\n */\nexport function paramParser(\n    config: ParserConfig,\n    opts: ItemParserOpts = {},\n): (input: ParserInput, out: (param: HthvParamItem) => void) => boolean {\n\n  const skipSpaces = spacesParser(config);\n  const parseItem = itemParser(config, { ...opts, tagged: false });\n\n  return (input, out) => {\n    if (!(config.delimiterOf(input.s[input.i]) & HthvDelimiter.Parameter)) {\n      return false;\n    }\n\n    ++input.i;\n    skipSpaces(input);\n\n    return parseItem(input, out);\n  };\n}\n","import { HthvDelimiter, HthvDelimiterChar } from '../hthv-delimiter';\nimport { HthvDelimitConfig } from '../hthv-parser';\n\n/**\n * @internal\n */\nexport interface ParserConfig {\n  delimiterOf(char: string): number;\n}\n\n/**\n * @internal\n */\nexport type DelimitConfig = { [char in HthvDelimiterChar]: number };\n\n/**\n * @internal\n */\nexport const defaultDelimit: DelimitConfig = {\n  ' ': HthvDelimiter.NonToken | HthvDelimiter.Space | HthvDelimiter.Item,\n  '\\t': HthvDelimiter.NonToken | HthvDelimiter.Space | HthvDelimiter.Item,\n  ',': HthvDelimiter.NonToken | HthvDelimiter.Item,\n  ';': HthvDelimiter.NonToken | HthvDelimiter.Parameter,\n  '\"': HthvDelimiter.NonToken | HthvDelimiter.Escaped | HthvDelimiter.Quote,\n  '\\\\': HthvDelimiter.NonToken | HthvDelimiter.Escaped,\n  '<': HthvDelimiter.NonToken | HthvDelimiter.AngleBracketStart,\n  '>': HthvDelimiter.NonToken | HthvDelimiter.AngleBracketEnd,\n  '=': HthvDelimiter.NonToken | HthvDelimiter.Assignment,\n  '(': HthvDelimiter.NonToken,\n  ')': HthvDelimiter.NonToken,\n  '/': HthvDelimiter.NonToken,\n  ':': HthvDelimiter.NonToken,\n  '?': HthvDelimiter.NonToken,\n  '@': HthvDelimiter.NonToken,\n  '[': HthvDelimiter.NonToken,\n  ']': HthvDelimiter.NonToken,\n  '{': HthvDelimiter.NonToken,\n  '}': HthvDelimiter.NonToken,\n};\n\n/**\n * @internal\n */\nexport function buildParserConfig(\n    {\n      delimit,\n    }: {\n      delimit?: HthvDelimitConfig;\n    } = {}): ParserConfig {\n\n  const delimitConfig: DelimitConfig = delimit ? { ...defaultDelimit, ...delimit } : defaultDelimit;\n\n  return {\n    delimiterOf(c) {\n      return delimitConfig[c as HthvDelimiterChar]\n          || (c >= '\\u0000' && c <= ' ' || c === '\\u007f' ? HthvDelimiter.NonToken : HthvDelimiter.None);\n    },\n  };\n}\n\n/**\n * @internal\n */\nexport const defaultParserConfig = /*#__PURE__*/ buildParserConfig();\n\n/**\n * @internal\n */\nexport const commentParserConfig = /*#__PURE__*/ buildParserConfig({\n  delimit: {\n    ':': HthvDelimiter.NonToken | HthvDelimiter.Assignment,\n    '(': HthvDelimiter.NonToken | HthvDelimiter.Escaped | HthvDelimiter.Comment,\n    ')': HthvDelimiter.NonToken | HthvDelimiter.Escaped | HthvDelimiter.Item,\n    ' ': HthvDelimiter.NonToken | HthvDelimiter.Space,\n    '\\t': HthvDelimiter.NonToken | HthvDelimiter.Space,\n    '=': HthvDelimiter.NonToken,\n    ',': HthvDelimiter.NonToken,\n  },\n});\n","/**\n * @module http-header-value\n */\nimport { HthvDelimiterChar } from './hthv-delimiter';\nimport { HthvItem } from './hthv-item';\nimport { hthvItem } from './hthv-partial.impl';\nimport {\n  addParam,\n  buildParserConfig,\n  commentParser,\n  commentParserConfig,\n  defaultParserConfig,\n  itemDelimitParser,\n  itemParser,\n  paramParser,\n  parseNone,\n  ParserInput,\n} from './parser';\n\n/**\n * HTTP header value parser signature.\n *\n * Splits the value onto {@link HthvItem items}.\n *\n * @typeparam N  Whether parsed items have {@link HthvItem.n names}.\n * @typeparam T  Whether parsed items have {@link HthvItem.t tags}.\n * @typeparam P  Whether parsed items have {@link HthvItem.p parameters}.\n */\nexport type HthvParser<\n    N extends 'has-name' | 'no-name' = 'has-name' | 'no-name',\n    T extends 'has-tag' | 'no-tag' = 'has-tag' | 'no-tag',\n    P extends 'has-params' | 'no-params' = 'has-params' | 'no-params'> =\n/**\n * @param value  HTTP header value to parse.\n *\n * @returns An array of parsed value items.\n */\n    (this: void, value: string) => HthvItem<N, T, P>[];\n\n/**\n * A configuration of HTTP header value parser.\n *\n * This is used to {@link newHthvParser configure new parser}.\n */\nexport interface HthvParserConfig {\n\n  /**\n   * Delimits configuration.\n   *\n   * An object literal with {@link HthvDelimiterChar supported delimiter characters} as keys\n   * and corresponding {@link HthvDelimiter delimiters} as values.\n   */\n  readonly delimit?: HthvDelimitConfig;\n\n  /**\n   * Whether to parse comments.\n   *\n   * `false` by default.\n   */\n  readonly comments?: boolean;\n\n}\n\n/**\n * Delimits configuration for HTTP header value parser.\n *\n * This is an object literal with {@link HthvDelimiterChar supported delimiter characters} as keys\n * and corresponding {@link HthvDelimiter delimiters} as values.\n *\n * The default delimiter configuration is used for omitted characters.\n */\nexport type HthvDelimitConfig = { readonly [char in HthvDelimiterChar]?: number };\n\n/**\n * Creates and configures new HTTP header value parser.\n *\n * @param config  New parser configuration.\n *\n * @returns New HTTP header value parser function.\n */\nexport function newHthvParser(config?: HthvParserConfig): HthvParser {\n\n  const parserConfig = config ? buildParserConfig(config) : defaultParserConfig;\n  const parseItemDelimit = itemDelimitParser(parserConfig);\n  const parseParam = paramParser(parserConfig);\n  const parseItem = itemParser(parserConfig);\n  const parseComment = config?.comments ? commentParser(commentParserConfig) : parseNone;\n\n  return headerValue => {\n\n    const result: HthvItem[] = [];\n    const input: ParserInput = { i: 0, s: headerValue };\n\n    // noinspection StatementWithEmptyBodyJS\n    while (parseTopLevelItem()); // tslint:disable-line\n\n    return result;\n\n    function parseTopLevelItem(): boolean {\n      return input.i < input.s.length && (\n          parseItemDelimit(input)\n          || parseParam(\n              input,\n              param => {\n                if (!result.length) {\n                  result.push(hthvItem({ $: 'raw', v: '' }));\n                }\n                addParam(result[result.length - 1], param);\n              },\n          )\n          || parseComment(input, item => result.push(item))\n          || parseItem(input, item => result.push(item))\n      );\n    }\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\nimport { spacesParser } from './spaces-parser';\n\n/**\n * @internal\n */\nexport function itemDelimitParser(config: ParserConfig): (input: ParserInput) => boolean {\n\n  const skipSpaces = spacesParser(config);\n\n  return input => {\n    if (config.delimiterOf(input.s[input.i]) & HthvDelimiter.Item) {\n      input.i++;\n      skipSpaces(input);\n      return true;\n    }\n    return false;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { HthvItem } from '../hthv-item';\nimport { hthvItem } from '../hthv-partial.impl';\nimport { addParam } from './add-param';\nimport { itemParser, ItemParserOpts } from './item-parser';\nimport { nextInComment } from './next-in-comment';\nimport { paramParser } from './param-parser';\nimport { spacesParser } from './spaces-parser';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function commentParser(config: ParserConfig): (input: ParserInput, out: (item: HthvItem) => void) => boolean {\n\n  const skipSpaces = spacesParser(config);\n  const commentParserOpts: ItemParserOpts = {\n    next: nextInComment(config),\n  };\n  const parseItem = itemParser(config, commentParserOpts);\n  const parseParam = paramParser(config, commentParserOpts);\n\n  return (input, out) => {\n    if (!(config.delimiterOf(input.s[input.i]) & HthvDelimiter.Comment)) {\n      return false;\n    }\n\n    ++input.i;\n\n    let result: HthvItem | undefined;\n\n    // noinspection StatementWithEmptyBodyJS\n    while (\n        skipSpaces(input)\n        || parseParam(\n            input,\n            param => {\n              if (!result) {\n                result = hthvItem({ $: 'raw', v: '' });\n              }\n              addParam(result, param);\n            },\n        )\n        || parseItem(input, item => result = item)\n        ) ; /* tslint:disable-line:curly */\n\n    ++input.i; // closing parent\n    out(result || hthvItem({ $: 'raw', v: '' }));\n\n    return true;\n  };\n}\n","/**\n * @module http-header-value\n */\nimport { HthvParser, newHthvParser } from './hthv-parser';\n\n/**\n * Parses HTTP header value.\n *\n * Splits the value onto {@link HthvItem items}.\n *\n * Parser is configured with default {@link HthvParserConfig config}.\n *\n * Does not recognize comments.\n *\n * Handles date/time values in [IMF-fixdate] format only.\n *\n * Treats illegal characters as ASCII letters.\n *\n * [IMF-fixdate]: https://tools.ietf.org/html/rfc7231#section-7.1.1.1\n *\n * @param value  HTTP header value to parse.\n *\n * @returns An array of comma- or space- separated value items.\n */\nexport const hthvParse: HthvParser =\n    /*#__PURE__*/ newHthvParser();\n","/**\n * @module http-header-value\n */\nimport { HthvDelimiter } from './hthv-delimiter';\nimport { defaultParserConfig } from './parser';\n\n/**\n * Conditionally encloses HTTP header value or its part into double quotes.\n *\n * Quotes will be added if delimiter or special character is present in input `string`, or the input `string` is empty.\n * {@link hthvEscapeQ Escapes} `\"` and `\\` symbols.\n *\n * @param string  A string to quote.\n *\n * @returns Either a string enclosed in double quotes, or original `string` if there is no need to quote it.\n */\nexport function hthvQuote(string: string): string {\n  if (!string) {\n    return '\"\"';\n  }\n\n  let escaped: undefined | string;\n  let quote = false;\n\n  for (let i = 0; i < string.length; ++i) {\n\n    const c = string[i];\n    const delimiter = defaultParserConfig.delimiterOf(c);\n\n    if (delimiter) {\n      if (delimiter & HthvDelimiter.Escaped) {\n        if (!escaped) {\n          escaped = string.substring(0, i);\n        }\n        escaped += '\\\\' + c;\n      }\n      quote = true;\n    } else if (escaped) {\n      escaped += c;\n    }\n  }\n\n  return quote ? `\"${escaped || string}\"` : string;\n}\n","/**\n * @module delta-set\n */\n/**\n * A `Set` implementation that keeps a delta of changes made to it.\n *\n * @typeparam T  A type of elements of delta set.\n */\nexport class DeltaSet<T> extends Set<T> {\n\n  /** @internal */\n  private readonly _added: Set<T>;\n\n  /** @internal */\n  private readonly _removed: Set<T>;\n\n  /**\n   * Constructs new delta set.\n   *\n   * @param values  An iterable of elements be add to constructed delta set. Or `null` to add nothing.\n   */\n  constructor(values?: Iterable<T> | null) {\n    super();\n    this._added = new Set<T>(values);\n    this._removed = new Set<T>();\n    this._added.forEach(value => this.add(value));\n  }\n\n  /**\n   * Appends a new element with a specified value to the end of this delta set. Unless the set contains this element\n   * already.\n   *\n   * Records element addition and forgets its removal unless the set contains it already.\n   *\n   * @param value  The value of the element to add.\n   *\n   * @returns `this` delta set.\n   */\n  add(value: T): this {\n    if (!this.has(value)) {\n      this._added.add(value);\n      this._removed.delete(value);\n      super.add(value);\n    }\n    return this;\n  }\n\n  /**\n   * Removes the specified element from this delta set.\n   *\n   * Records element removal and forgets its addition if removal succeed.\n   *\n   * @param value  The value of the element to remove.\n   *\n   * @returns `true` if element removed successfully; or `false` if this set did not contain the element.\n   */\n  delete(value: T): boolean {\n    if (super.delete(value)) {\n      this._added.delete(value);\n      this._removed.add(value);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Removes all elements from this delta set.\n   *\n   * Records all elements removal and forgets all elements additions.\n   */\n  clear(): void {\n    this._added.clear();\n    this.forEach(value => this._removed.add(value));\n    super.clear();\n  }\n\n  /**\n   * Applies changes to this delta set.\n   *\n   * First removes elements to `remove`. Then appends elements to `add`.\n   *\n   * Records all changes made.\n   *\n   * @param add  An iterable of elements to add.\n   * @param remove  An iterable of elements to remove.\n   *\n   * @returns `this` delta set.\n   */\n  delta(add: Iterable<T>, remove: Iterable<T> = []): this {\n    deltaSetDeltaReceiver(this)(add, remove);\n    return this;\n  }\n\n  /**\n   * Replays changes made to this set in target receiver.\n   *\n   * @param receiver  A receiver of changes delta. E.g. another `Set`.\n   *\n   * @returns `this` delta set.\n   */\n  redelta(receiver: DeltaSet.DeltaReceiver<T>): this {\n\n    const receive = typeof receiver === 'function' ? receiver : deltaSetDeltaReceiver(receiver);\n\n    receive([...this._added], [...this._removed]);\n\n    return this;\n  }\n\n  /**\n   * Forgets all changes made to this set.\n   *\n   * Does not alter the set contents.\n   *\n   * @returns `this` delta set.\n   */\n  undelta(): this {\n    this._added.clear();\n    this._removed.clear();\n    return this;\n  }\n\n}\n\nexport namespace DeltaSet {\n\n  /**\n   * A delta set changes receiver.\n   *\n   * This can be either an {@link DeltaReceiverObject object}, or a {@link DeltaReceiverFunction function}.\n   *\n   * @typeparam T  A type of elements of delta set.\n   */\n  export type DeltaReceiver<T> =\n      | DeltaReceiverFunction<T>\n      | DeltaReceiverObject<T>;\n\n  /**\n   * A delta set changes receiver function.\n   *\n   * @typeparam T  A type of elements of delta set.\n   */\n  export type DeltaReceiverFunction<T> =\n  /**\n   * @param added  An array of added elements.\n   * @param removed  An array of removed elements.\n   */\n      (this: void, added: T[], remove: T[]) => void;\n\n  /**\n   * A delta set changes receiver object.\n   *\n   * A `Set` class implements this interface.\n   *\n   * @typeparam T  A type of elements of delta set.\n   */\n  export interface DeltaReceiverObject<T> {\n\n    /**\n     * Receives an element that has been added to delta set.\n     *\n     * @param value  The value of the added element.\n     */\n    add(value: T): void;\n\n    /**\n     * Receives an element that has been remove from delta set.\n     *\n     * @param value  The value of the removed element.\n     */\n    delete(value: T): void;\n\n  }\n\n}\n\n/**\n * @internal\n */\nfunction deltaSetDeltaReceiver<T>(\n    receiver: { add(value: T): void; delete(value: T): void; },\n): (this: void, add: Iterable<T>, remove: Iterable<T>) => void {\n  return (add, remove) => {\n    for (const removed of remove) {\n      receiver.delete(removed);\n    }\n    for (const added of add) {\n      receiver.add(added);\n    }\n  };\n}\n","/**\n * @packageDocumentation\n * @module input-aspects\n */\nimport { InControl } from './control';\n\n/**\n * Some aspect of the user input. Such as input focus or validity.\n *\n * An aspect is applied to input control first. This creates an aspect instance bound to that control. All\n * aspect-related operations are performed by that instance.\n *\n * @category Aspect\n * @typeparam Instance  Aspect instance type.\n * @typeparam Kind  Aspect application kind.\n */\nexport interface InAspect<Instance, Kind extends InAspect.Application.Kind = 'default'> {\n\n  /**\n   * Applies this aspect to the given input `control`.\n   *\n   * This method is called at most once per control when requested aspect is not applied to the control yet.\n   *\n   * @typeparam Value  Input value type.\n   * @param control  Input control to apply aspect to.\n   *\n   * @returns An aspect applied to the given `control`.\n   */\n  applyTo<Value>(control: InControl<Value>): InAspect.Applied<Instance>;\n\n}\n\n/**\n * A symbol of aspect key property containing a reference to aspect.\n *\n * @category Aspect\n */\nexport const InAspect__symbol = (/*#__PURE__*/ Symbol('in-aspect'));\n\nexport namespace InAspect {\n\n  /**\n   * A key of the aspect of user input.\n   *\n   * It is passed to `InControl.aspect()` method in order to apply target aspect to that control.\n   *\n   * This interface is typically implemented by aspect instance class object. I.e. by its static methods.\n   *\n   * @typeparam Instance  Aspect instance type.\n   * @typeparam Kind  Aspect application kind.\n   */\n  export interface Key<Instance, Kind extends Application.Kind = 'default'> {\n\n    /**\n     * A referenced aspect of user input.\n     */\n    [InAspect__symbol]: InAspect<Instance, Kind>;\n\n  }\n\n  /**\n   * An input aspect applied to control.\n   *\n   * This is what returned from `InAspect.applyTo()` method. Contains aspect instance and its manipulation methods.\n   *\n   * @typeparam Instance  Aspect instance type.\n   * @typeparam ConvertedInstance  A type of aspect instance applied to converted control.\n   * The same as `Instance` by default.\n   */\n  export interface Applied<Instance, ConvertedInstance extends Instance = Instance> {\n\n    /**\n     * Input aspect instance.\n     */\n    readonly instance: Instance;\n\n    /**\n     * Converts an aspect to another value type.\n     *\n     * This method is called by input control created by `InControl.convert()` method.\n     *\n     * @typeparam To  Converted input value type.\n     * @param target  Target input control.\n     *\n     * @returns The same aspect applied to `target` control, or `undefined` if aspect can not be converted.\n     */\n    convertTo<To>(target: InControl<To>): Applied<ConvertedInstance> | undefined;\n\n  }\n\n  export namespace Application {\n\n    /**\n     * A kind of input aspect application.\n     *\n     * This is a key of `InAspect.Application.Map` type.\n     */\n    export type Kind = keyof Map<unknown, unknown>;\n\n    /**\n     * A type of input aspect application result of the given application kind and input value type.\n     *\n     * @typeparam OfInstance  Aspect instance type.\n     * @typeparam OfValue  Input value type.\n     * @typeparam OfKind  Aspect application kind.\n     */\n    export type Result<OfInstance, OfValue, OfKind extends Kind> =\n        Applied<Instance<OfInstance, OfValue, OfKind>>;\n\n    /**\n     * A type of applied aspect instance of the given application kind and input value type.\n     *\n     * @typeparam OfInstance  Aspect instance type.\n     * @typeparam OfValue  Input value type.\n     * @typeparam OfKind  Aspect application kind.\n     */\n    export type Instance<OfInstance, OfValue, OfKind extends Kind> =\n        ReturnType<Map<OfInstance, OfValue>[OfKind]>;\n\n    /**\n     * A map implementing application result detection algorithms.\n     *\n     * Each method name here is a kind of aspect application, while the return value of this method is an aspect\n     * instance type.\n     *\n     * @typeparam OfInstance  Aspect instance type.\n     * @typeparam OfValue  Input value type.\n     */\n    export interface Map<OfInstance, OfValue> {\n\n      /**\n       * Default aspect application type. Just an aspect instance type.\n       */\n      default(): OfInstance;\n\n    }\n\n  }\n\n}\n","import { noop } from 'call-thru';\nimport { InAspect } from './aspect';\n\n/**\n * @internal\n */\nexport const inAspectNull: InAspect.Applied<any, any> = {\n  instance: null,\n  convertTo: noop,\n};\n\n/**\n * @internal\n */\nexport function inAspectValue<Instance>(instance: Instance): InAspect.Applied<Instance> {\n  return {\n    instance,\n    convertTo() {\n      return this;\n    },\n  };\n}\n","/**\n * @packageDocumentation\n * @module input-aspects\n */\nimport { filterIt, mapIt } from 'a-iterable';\nimport { asis, isPresent, valueProvider } from 'call-thru';\nimport { InAspect } from './aspect';\nimport { InControl } from './control';\n\n/**\n * Input control converter.\n *\n * Either a {@link InConverter.Conversion control conversion}, or a {@link InConverter.Factory conversion factory}.\n *\n * @category Converter\n * @typeparam From  Original input value type.\n * @typeparam To  Converted input value type.\n */\nexport type InConverter<From, To> =\n    | InConverter.Factory<From, To>\n    | InConverter.Conversion<From, To>;\n\nexport namespace InConverter {\n\n  /**\n   * Input control conversion factory signature.\n   *\n   * Called by [[InControl.convert]] to construct a {@link Conversion control conversion}.\n   *\n   * Should not access converted control value as the one does not exist at calling time.\n   *\n   * @typeparam From  Original input value type.\n   * @typeparam To  Converted input value type.\n   */\n  export type Factory<From, To> =\n  /**\n   * @param from  Original input control.\n   * @param to  Converted input control.\n   *\n   * @returns Control conversion.\n   */\n      (\n          this: void,\n          from: InControl<From>,\n          to: InControl<To>,\n      ) => InConverter.Conversion<From, To>;\n\n  /**\n   * Input control conversion.\n   *\n   * @typeparam From  Original input value type.\n   * @typeparam To  Converted input value type.\n   */\n  export interface Conversion<From, To> {\n\n    /**\n     * Applies the given aspect to converted control in a custom way.\n     *\n     * @typeparam Instance  Aspect instance type.\n     * @typeparam Kind  Aspect application kind.\n     * @param aspect  An aspect to apply.\n     *\n     * @returns Either applied aspect instance or `undefined` to apply the aspect in standard way (i.e. by converting\n     * it from corresponding aspect of original control).\n     */\n    applyAspect?<Instance, Kind extends InAspect.Application.Kind>(\n        aspect: InAspect<Instance, Kind>,\n    ): InAspect.Application.Result<Instance, To, Kind> | undefined;\n\n    /**\n     * Converts original value.\n     *\n     * @param value  Original value to convert.\n     *\n     * @returns New value of converted control.\n     */\n    set(this: void, value: From): To;\n\n    /**\n     * Restores original control value by converted one.\n     *\n     * @param value  A converted value to restore the original one by.\n     *\n     * @returns New value of original control.\n     */\n    get(this: void, value: To): From;\n\n  }\n\n  /**\n   * Input control aspect converter.\n   *\n   * Either an {@link InConverter.Aspect.Conversion control aspect conversion}, or {@link InConverter.Aspect.Factory\n   * input aspect conversion factory}.\n   *\n   * @typeparam From  Original input value type.\n   * @typeparam To  Converted input value type.\n   */\n  export type Aspect<From, To> =\n      | InConverter.Aspect.Conversion<To>\n      | InConverter.Aspect.Factory<From, To>;\n\n}\n\nexport namespace InConverter.Aspect {\n\n  /**\n   * Input control aspect conversion factory signature.\n   *\n   * Called by [[InControl.convert]] to construct an {@link Conversion control aspect conversion}.\n   *\n   * Should not access converted control value as the one does not exist at calling time.\n   *\n   * @typeparam From  Original input value type.\n   * @typeparam To  Converted input value type.\n   */\n  export type Factory<From, To> = (\n      this: void,\n      from: InControl<From>,\n      to: InControl<To>,\n  ) => Conversion<To>;\n\n  /**\n   * Input control aspect conversion.\n   *\n   * @typeparam Value  Input value type.\n   */\n  export interface Conversion<Value> {\n\n    /**\n     * Applies the given aspect to converted control in a custom way.\n     *\n     * @typeparam Instance  Aspect instance type.\n     * @typeparam Kind  Aspect application kind.\n     * @param aspect  An aspect to apply.\n     *\n     * @returns Either applied aspect instance or `undefined` to apply the aspect in standard way (i.e. by converting\n     * it from corresponding aspect of original control).\n     */\n    applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n        aspect: InAspect<Instance, Kind>,\n    ): InAspect.Application.Result<Instance, Value, Kind> | undefined;\n\n  }\n\n}\n\n/**\n * Creates converter that combines value converter with aspect converters.\n *\n * @category Converter\n * @typeparam From  Original input value type.\n * @typeparam To  Converted input value type.\n * @param converter  Input control converter.\n * @param converters  Additional input control aspect converters.\n *\n * @returns Input control conversion factory.\n */\nexport function intoConvertedBy<From, To>(\n    converter: InConverter<From, To>,\n    ...converters: InConverter.Aspect<From, To>[]\n): InConverter.Factory<From, To>;\n\n/**\n * Creates converter that combines aspect converters.\n *\n * @typeparam Value  Input value type.\n * @param converters  Input control aspect converters.\n *\n * @returns Input control aspect conversion factory.\n */\nexport function intoConvertedBy<From, To>(\n    ...converters: InConverter.Aspect<From, To>[]\n): InConverter.Aspect.Factory<From, To>;\n\nexport function intoConvertedBy<From, To>(\n    valueOrAspectConverter?: InConverter<From, To> | InConverter.Aspect<From, To>,\n    ...converters: InConverter.Aspect<From, To>[]\n): InConverter.Factory<From, To> | InConverter.Aspect.Factory<From, To> {\n  if (!valueOrAspectConverter) {\n    return noopInConverter;\n  }\n\n  const converter = inConverter(valueOrAspectConverter);\n  const aspectConverters = mapIt<InConverter.Aspect<From, To>, InConverter.Aspect.Factory<From, To>>(\n      converters,\n      inConverter,\n  );\n\n  return (from, to) => {\n\n    const conversion = converter(from, to);\n    const aspectConversions: InConverter.Aspect.Conversion<To>[] = Array.from(\n        filterIt<InConverter.Aspect.Conversion<To> | undefined, InConverter.Aspect.Conversion<To>>(\n            mapIt(\n                aspectConverters,\n                acf => acf(from, to),\n            ),\n            isPresent,\n        ),\n    );\n    const applyAspect: <Instance, Kind extends InAspect.Application.Kind>(\n        aspect: InAspect<Instance, Kind>,\n    ) => InAspect.Application.Result<Instance, To, Kind> | undefined = aspect => {\n      if (conversion.applyAspect) {\n\n        const applied = conversion.applyAspect(aspect);\n\n        if (applied) {\n          return applied;\n        }\n      }\n      for (const asc of aspectConversions) {\n\n        const applied = asc.applyAspect(aspect);\n\n        if (applied) {\n          return applied;\n        }\n      }\n\n      return;\n    };\n\n    if (/*#__INLINE__*/ isAspectConversion(conversion)) {\n      return {\n        get: asis as (value: To) => From,\n        set: asis as (value: From) => To,\n        applyAspect,\n      };\n    }\n\n    return {\n      set: value => conversion.set(value),\n      get: value => conversion.get(value),\n      applyAspect,\n    };\n  };\n}\n\n/**\n * @internal\n */\nconst noopInConversion: InConverter.Conversion<any, any> = {\n  get: asis,\n  set: asis,\n};\n\n/**\n * @internal\n */\nfunction noopInConverter(): InConverter.Conversion<any, any> {\n  return noopInConversion;\n}\n\n/**\n * @internal\n */\nfunction isAspectConversion<From, To>(\n    conversion: InConverter.Conversion<From, To> | InConverter.Aspect.Conversion<To>,\n): conversion is InConverter.Aspect.Conversion<To> {\n  return (conversion as any).get == null;\n}\n\n/**\n * @internal\n */\nfunction inConverter<From, To>(\n    converter: InConverter<From, To>,\n): InConverter.Factory<From, To>;\n\n/**\n * @internal\n */\nfunction inConverter<From, To>(\n    converter: InConverter.Aspect<From, To>,\n): InConverter.Aspect.Factory<From, To>;\n\n/**\n * @internal\n */\nfunction inConverter<From, To>(\n    converter: InConverter<From, To> | InConverter.Aspect<From, To>,\n): InConverter.Factory<From, To> | InConverter.Aspect.Factory<From, To>;\n\nfunction inConverter<From, To>(\n    converter: InConverter<From, To> | InConverter.Aspect<From, To>,\n): InConverter.Factory<From, To> | InConverter.Aspect.Factory<From, To> {\n  return typeof converter === 'function' ? converter : valueProvider<any>(converter);\n}\n","/**\n * @packageDocumentation\n * @module input-aspects\n */\nimport { noop } from 'call-thru';\nimport { EventEmitter, OnEvent, trackValue, ValueTracker } from 'fun-events';\nimport { InAspect, InAspect__symbol } from './aspect';\nimport { InConverter, intoConvertedBy } from './converter';\n\n/**\n * User input control.\n *\n * Maintains input value and various aspects of the user input, such as input focus, validity, etc.\n *\n * @category Control\n * @typeparam Value  Input value type.\n */\nexport abstract class InControl<Value> extends ValueTracker<Value> {\n\n  /**\n   * @internal\n   */\n  private readonly _aspects = new Map<InAspect<any, any>, InAspect.Applied<any, any>>();\n\n  /**\n   * Input value.\n   */\n  abstract it: Value;\n\n  /**\n   * Retrieves an aspect instance applied to this control.\n   *\n   * If the given `aspect` is not applied yet, then applies it first.\n   *\n   * @typeparam Instance  Aspect instance type.\n   * @typeparam Kind  Aspect application kind.\n   * @param aspectKey  A key of aspect to apply to this control.\n   *\n   * @returns An applied aspect instance.\n   */\n  aspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspectKey: InAspect.Key<Instance, Kind>,\n  ): InAspect.Application.Instance<Instance, Value, Kind> {\n    return this._aspect(aspectKey[InAspect__symbol]).instance;\n  }\n\n  /**\n   * Performs additional setup of this control.\n   *\n   * @param setup  A function that accepts this control as its only parameter to configure it.\n   *\n   * @returns `this` control instance.\n   */\n  setup(setup: (this: void, control: this) => void): this;\n\n  /**\n   * Performs additional setup of this control's aspect.\n   *\n   * @typeparam Instance  Aspect instance type.\n   * @typeparam Kind  Aspect application kind.\n   * @param aspectKey  A key of aspect to set up.\n   * @param setup  A function that accepts the aspect and this control as parameters to configure them.\n   *\n   * @returns `this` control instance.\n   */\n  setup<Instance, Kind extends InAspect.Application.Kind>(\n      aspectKey: InAspect.Key<Instance, Kind>,\n      setup?: (this: void, aspect: InAspect.Application.Instance<Instance, Value, Kind>, control: this) => void,\n  ): this;\n\n  setup<Instance, Kind extends InAspect.Application.Kind>(\n      aspectKeyOrSetup: InAspect.Key<Instance, Kind> | ((this: void, control: this) => void),\n      aspectSetup: (\n          this: void,\n          aspect: InAspect.Application.Instance<Instance, Value, Kind>,\n          control: this,\n      ) => void = noop,\n  ): this {\n    if (isAspectKey(aspectKeyOrSetup)) {\n      aspectSetup(this.aspect(aspectKeyOrSetup), this);\n    } else {\n      aspectKeyOrSetup(this);\n    }\n    return this;\n  }\n\n  /**\n   * Converts this control to another one.\n   *\n   * The converted aspect may have another value and input aspects.\n   *\n   * @typeparam To  Converted input value type.\n   * @param by  Input control converter.\n   * @param and  Additional input control aspect converters.\n   *\n   * @returns Converted control.\n   */\n  convert<To>(\n      by: InConverter<Value, To>,\n      ...and: InConverter.Aspect<Value, To>[]\n  ): InControl<To>;\n\n  /**\n   * Converts this control to another one without changing its value type.\n   *\n   * The converted aspect may have another value and input aspects.\n   *\n   * @typeparam To  Converted input value type.\n   * @param by  Input control aspect converters.\n   *\n   * @returns Converted control.\n   */\n  convert(\n      ...by: InConverter.Aspect<Value, Value>[]\n  ): InControl<Value>;\n\n  convert<To>(\n      by?: InConverter<Value, To> | InConverter.Aspect<Value, To>,\n      ...and: InConverter.Aspect<Value, To>[]\n  ): InControl<Value> | InControl<To> {\n    return new InConverted(this, intoConvertedBy(by as InConverter<Value, To>, ...and));\n  }\n\n  /**\n   * @internal\n   */\n  _aspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspect: InAspect<Instance, Kind>,\n  ): InAspect.Application.Result<Instance, Value, Kind> {\n\n    const existing = this._aspects.get(aspect);\n\n    if (existing) {\n      return existing as InAspect.Application.Result<Instance, Value, Kind>;\n    }\n\n    const applied = this._applyAspect(aspect) || aspect.applyTo(this);\n\n    this._aspects.set(aspect, applied);\n\n    return applied as InAspect.Application.Result<Instance, Value, Kind>;\n  }\n\n  /**\n   * Applies the given aspect to this control in a custom way.\n   *\n   * @typeparam Instance  Aspect instance type.\n   * @typeparam Kind  Aspect application kind.\n   * @param _aspect  An aspect to apply.\n   *\n   * @returns Either applied aspect instance or `undefined` to apply the aspect in standard way (i.e. using\n   * `InAspect.applyTo()` method).\n   */\n  protected _applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n      _aspect: InAspect<Instance, Kind>,\n  ): InAspect.Application.Result<Instance, Value, Kind> | undefined {\n    return;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction isAspectKey<Instance, Kind extends InAspect.Application.Kind>(\n    value: any,\n): value is InAspect.Key<Instance, Kind> {\n  return InAspect__symbol in value;\n}\n\nexport namespace InControl {\n\n  /**\n   * A value type of the given input control type.\n   *\n   * @typeparam Control  Input control type.\n   */\n  export type ValueType<Control extends InControl<any>> = Control extends InControl<infer Value> ? Value : never;\n\n}\n\n/**\n * @internal\n */\nclass InConverted<From, To> extends InControl<To> {\n\n  readonly on: OnEvent<[To, To]>;\n  private readonly _it: ValueTracker<[To, number]>;\n  protected readonly _applyAspect: <Instance, Kind extends InAspect.Application.Kind>(\n      this: this,\n      aspect: InAspect<Instance, Kind>,\n  ) => InAspect.Application.Result<Instance, To, Kind> | undefined;\n\n  constructor(src: InControl<From>, by: InConverter.Factory<From, To>) {\n    super();\n\n    let lastRev = 0;\n    let backward: From | undefined;\n\n    const on = new EventEmitter<[To, To]>();\n\n    this.on = on.on;\n\n    const conversion = by(src, this);\n    const convertAspect = <Instance, Kind extends InAspect.Application.Kind>(\n        aspect: InAspect<Instance, Kind>,\n    ): InAspect.Application.Result<Instance, To, Kind> | undefined => {\n\n      const fallback: InAspect.Applied<any, any> = src._aspect(aspect);\n\n      return fallback.convertTo<Instance>(this as any);\n    };\n\n    this._applyAspect = aspect => conversion.applyAspect?.(aspect) || convertAspect(aspect);\n    this._it = trackValue([conversion.set(src.it), 0]);\n    this._it.on(([newValue], [oldValue]) => {\n      if (newValue !== oldValue) {\n        on.send(newValue, oldValue);\n      }\n    }).whenOff(reason => on.done(reason));\n    src.on(value => {\n      if (value !== backward) {\n        this._it.it = [conversion.set(value), ++lastRev];\n      }\n    }).whenOff(reason => this.done(reason));\n    this._it.on(([value, rev]) => {\n      if (rev !== lastRev) {\n        lastRev = rev;\n        backward = conversion.get(value);\n        try {\n          src.it = backward;\n        } finally {\n          backward = undefined;\n        }\n      }\n    });\n  }\n\n  get it(): To {\n    return this._it.it[0];\n  }\n\n  set it(value: To) {\n\n    const [prevValue, prevRev] = this._it.it;\n\n    if (value !== prevValue) {\n      this._it.it = [value, prevRev + 1];\n    }\n  }\n\n  done(reason?: any): this {\n    this._it.done(reason);\n    return this;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module input-aspects\n */\nimport { AfterEvent, AfterEvent__symbol, EventKeeper, EventSender, OnEvent, OnEvent__symbol } from 'fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectNull, inAspectValue } from '../aspect.impl';\nimport { InControl } from '../control';\n\n/**\n * @internal\n */\nconst InContainer__aspect: InAspect<InContainer<any> | null, 'container'> = {\n  applyTo() {\n    return inAspectNull;\n  },\n};\n\n/**\n * An input control containing other controls.\n *\n * Container is available as aspect of itself.\n *\n * @category Control\n * @typeparam Value  Input value type.\n */\nexport abstract class InContainer<Value> extends InControl<Value> {\n\n  static get [InAspect__symbol](): InAspect<InContainer<any> | null, 'container'> {\n    return InContainer__aspect;\n  }\n\n  /**\n   * Controls of this input container.\n   */\n  abstract readonly controls: InContainerControls;\n\n  protected _applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspect: InAspect<Instance, Kind>,\n  ): InAspect.Application.Result<Instance, Value, Kind> | undefined {\n    return aspect === InContainer__aspect as InAspect<any>\n        ? inAspectValue(this) as InAspect.Application.Result<Instance, Value, Kind>\n        : undefined;\n  }\n\n}\n\nexport namespace InContainer {\n\n  /**\n   * Input controls container entry.\n   *\n   * This is a tuple containing control key and control itself.\n   *\n   * Container implementations may apply limitations on the type of keys and input values they support.\n   *\n   * @typeparam L  Input container layout interface.\n   */\n  export type Entry = readonly [PropertyKey, InControl<any>];\n\n  /**\n   * A snapshot of input controls within container.\n   *\n   * Extends an `Iterable` interface by iterating over all nested controls.\n   */\n  export interface Snapshot extends Iterable<InControl<any>> {\n\n    [Symbol.iterator](): IterableIterator<InControl<any>>;\n\n    /**\n     * Iterates over nested control entries.\n     *\n     * @returns An iterable iterator over entries.\n     */\n    entries(): IterableIterator<InContainer.Entry>;\n\n  }\n\n}\n\n/**\n * Controls of input container.\n *\n * Allows to track container contents. I.e. nested controls, their additions and removal.\n *\n * Implements `EventSender` interface by sending arrays of added and removed control entries.\n *\n * Implements `EventKeeper` interface by sending container contents instance each time it is changed.\n *\n * @category Control\n */\nexport abstract class InContainerControls\n     implements EventSender<[InContainer.Entry[], InContainer.Entry[]]>, EventKeeper<[InContainer.Snapshot]> {\n\n  /**\n   * An `OnEvent` sender of container updates.\n   *\n   * Sends two arrays on each container update: the first one contains added control entries, while the second one\n   * contains removed control entries.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly on: OnEvent<[InContainer.Entry[], InContainer.Entry[]]>;\n\n  get [OnEvent__symbol](): OnEvent<[InContainer.Entry[], InContainer.Entry[]]> {\n    return this.on;\n  }\n\n  /**\n   * An `AfterEvent` keeper of input container contents.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[InContainer.Snapshot]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[InContainer.Snapshot]> {\n    return this.read;\n  }\n\n}\n\ndeclare module '../aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<OfInstance, OfValue> {\n\n      /**\n       * Input controls container application type.\n       */\n      container(): InContainer<OfValue>;\n\n    }\n\n  }\n\n}\n","/**\n *@packageDocumentation\n *@module input-aspects\n */\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  afterEventBy,\n  EventEmitter,\n  EventKeeper,\n  EventSender,\n  eventSupply,\n  EventSupply,\n  OnEvent,\n  OnEvent__symbol,\n} from 'fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectValue } from '../aspect.impl';\nimport { InContainer } from './container.control';\n\n/**\n * @internal\n */\nconst InParents__aspect: InAspect<InParents> = {\n  applyTo(): InAspect.Applied<InParents> {\n    return inAspectValue(new InControlParents());\n  },\n};\n\n/**\n * Parents of input control.\n *\n * Reflects all containers the control belongs to. Note that component may belong to multiple containers. Or even\n * to the same container multiple times.\n *\n * Implements `EventSender` interface by sending arrays of parent entries the control is added to and removed from.\n *\n * Implements `EventKeeper` interface by sending a snapshot of all parents each time it is updated.\n *\n * @category Aspect\n */\nexport abstract class InParents\n    implements EventKeeper<[Iterable<InParents.Entry>]>, EventSender<[InParents.Entry[], InParents.Entry[]]> {\n\n  static get [InAspect__symbol](): InAspect<InParents> {\n    return InParents__aspect;\n  }\n\n  /**\n   * An `OnEvent` sender of parent updates.\n   *\n   * Sends two arrays on each parents update: the first one contains added parent entries, while the second one\n   * contains removed parent entries.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly on: OnEvent<[InParents.Entry[], InParents.Entry[]]>;\n\n  get [OnEvent__symbol](): OnEvent<[InParents.Entry[], InParents.Entry[]]> {\n    return this.on;\n  }\n\n  /**\n   * An `AfterEvent` keeper of control parents.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[InParents.All]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[InParents.All]> {\n    return this.read;\n  }\n\n  /**\n   * Adds the input control to the given parent container under the given key.\n   *\n   * @param entry  Parent container entry.\n   *\n   * @returns A parent container supply. Removes the control from the parent container once cut off.\n   */\n  abstract add(entry: InParents.Entry): EventSupply;\n\n}\n\nexport namespace InParents {\n\n  /**\n   * Parent container entry of input control.\n   */\n  export interface Entry {\n\n    /**\n     * Parent container.\n     */\n    readonly parent: InContainer<any>;\n\n  }\n\n  /**\n   * All control parents as iterable instance.\n   */\n  export interface All extends Iterable<Entry> {\n\n    [Symbol.iterator](): IterableIterator<Entry>;\n\n  }\n\n}\n\n/**\n * @internal\n */\nclass InControlParents extends InParents {\n\n  private readonly _map = new Map<InParents.Entry, EventSupply>();\n  private readonly _on = new EventEmitter<[InParents.Entry[], InParents.Entry[]]>();\n  readonly read: AfterEvent<[InParents.All]>;\n\n  constructor() {\n    super();\n\n    const map = this._map;\n\n    this.read = afterEventBy(\n        this._on.on.thru(\n            allParents,\n        ),\n        () => [allParents()],\n    );\n\n    function allParents(): IterableIterator<InParents.Entry> {\n      return map.keys();\n    }\n  }\n\n  get on(): OnEvent<[InParents.Entry[], InParents.Entry[]]> {\n    return this._on.on;\n  }\n\n  add(entry: InParents.Entry): EventSupply {\n\n    const existingSupply = this._map.get(entry);\n\n    if (existingSupply) {\n      // Parent entry already added. Doing nothing\n      return existingSupply;\n    }\n\n    // Adding new entry\n    const supply = eventSupply(() => {\n      this._map.delete(entry);\n      this._on.send([], [entry]);\n    });\n\n    this._map.set(entry, supply);\n    this._on.send([entry], []);\n\n    return supply;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module input-aspects\n */\nimport { AfterEvent } from 'fun-events';\nimport { DomEventDispatcher } from 'fun-events/dom';\nimport { InAspect, InAspect__symbol } from './aspect';\nimport { inAspectNull, inAspectValue } from './aspect.impl';\nimport { InControl } from './control';\n\n/**\n * @internal\n */\nconst InElement__aspect: InAspect<InElement<any> | null, 'element'> = {\n  applyTo() {\n    return inAspectNull;\n  },\n};\n\n/**\n * HTML input element control.\n *\n * It is also available as aspect of itself and converted controls. It is not available as aspect of other controls.\n *\n * @category Control\n * @typeparam Value  Input value type.\n * @typeparam Elt  A type of input HTML element.\n */\nexport abstract class InElement<Value, Elt = HTMLElement> extends InControl<Value> {\n\n  /**\n   * HTML input element this control is based on.\n   */\n  abstract readonly element: Elt;\n\n  /**\n   * An `AfterEvent` keeper of user input.\n   */\n  abstract readonly input: AfterEvent<[InElement.Input<Value>]>;\n\n  /**\n   * DOM event dispatcher of this element.\n   */\n  abstract readonly events: DomEventDispatcher;\n\n  static get [InAspect__symbol](): InAspect<InElement<any> | null, 'element'> {\n    return InElement__aspect;\n  }\n\n  protected _applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspect: InAspect<Instance, Kind>,\n  ): InAspect.Application.Result<Instance, Value, Kind> | undefined {\n    return aspect === InElement__aspect as InAspect<any, any>\n        ? inAspectValue(this) as InAspect.Application.Result<Instance, Value, Kind>\n        : undefined;\n  }\n\n}\n\nexport namespace InElement {\n\n  /**\n   * User input.\n   *\n   * @typeparam Value  Input value type.\n   */\n  export interface Input<Value> {\n\n    /**\n     * The value user entered.\n     */\n    value: Value;\n\n    /**\n     * An event caused the value to be applied.\n     *\n     * The value has been applied programmatically if missing.\n     */\n    event?: Event;\n\n  }\n\n}\n\ndeclare module './aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<OfInstance, OfValue> {\n\n      /**\n       * Input element application type.\n       */\n      element(): InElement<OfValue>;\n\n    }\n\n  }\n\n}\n","/**\n *@packageDocumentation\n *@module input-aspects\n */\nimport { nextArgs, nextSkip, valuesProvider } from 'call-thru';\nimport {\n  afterAll,\n  afterEach,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterEventBy,\n  afterSupplied,\n  afterThe,\n  EventEmitter,\n  EventKeeper,\n  EventSender,\n  eventSupply,\n  EventSupply,\n  OnEvent,\n  OnEvent__symbol,\n  trackValue,\n  ValueTracker,\n} from 'fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectValue } from '../aspect.impl';\nimport { InParents } from '../container/parents.aspect';\nimport { InControl } from '../control';\nimport { InElement } from '../element.control';\n\n/**\n * @internal\n */\nconst InMode__aspect: InAspect<InMode> = {\n\n  applyTo<Value>(control: InControl<Value>): InAspect.Applied<InMode> {\n    return inAspectValue(new InControlMode(control));\n  },\n\n};\n\n/**\n * Input mode aspect of control.\n *\n * Control can be either enabled, disabled, or readonly.\n *\n * Each control maintains its own state, while nested controls respect container ones. I.e. when container is disabled\n * all nested ones are also disabled. When container is readonly, all nested ones are also readonly, unless explicitly\n * disabled.\n *\n * When applied to input element this aspect maintains its `disabled` and `readonly` attributes (not properties!).\n *\n * Implements `EventSender` interface by sending new and old mode values on each update.\n *\n * Implements `EventKeeper` interface by sending actual mode value.\n *\n * @category Aspect\n */\nexport abstract class InMode implements EventSender<[InMode.Value, InMode.Value]>, EventKeeper<[InMode.Value]> {\n\n  static get [InAspect__symbol](): InAspect<InMode> {\n    return InMode__aspect;\n  }\n\n  /**\n   * An `OnEvent` sender of input mode updates. Sends a new mode value along with old one as second parameter.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly on: OnEvent<[InMode.Value, InMode.Value]>;\n\n  get [OnEvent__symbol](): OnEvent<[InMode.Value, InMode.Value]> {\n    return this.on;\n  }\n\n  /**\n   * An `AfterEvent` keeper of input mode.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[InMode.Value]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[InMode.Value]> {\n    return this.read;\n  }\n\n  /**\n   * Own input mode tracker.\n   */\n  abstract readonly own: ValueTracker<InMode.Value>;\n\n  /**\n   * Checks whether control in the given `mode` has data to submit.\n   *\n   * @param mode  Input control mode to check.\n   *\n   * @returns `true` if control in the given `mode` has data to submit, or `false` otherwise.\n   */\n  static hasData(mode: InMode.Value): boolean {\n    return mode !== 'off' && mode[0] !== '-';\n  }\n\n  /**\n   * Derives input mode from another `source`.\n   *\n   * If the `source` mode is disabled, this one would be disabled too. If the `source` mode is read-only, then this one\n   * would be read-only, unless disabled already.\n   *\n   * @param source  A source to derive input mode from.\n   *\n   * @returns Derived input mode supply. Disables `source` mode derivation once cut off.\n   */\n  abstract derive(source: EventKeeper<[InMode.Value]>): EventSupply;\n\n  /**\n   * Unregisters all receivers.\n   *\n   * @param reason  Optional reason.\n   *\n   * @returns `this` instance.\n   */\n  done(reason?: any): this {\n    this.own.done(reason);\n    return this;\n  }\n\n}\n\nexport namespace InMode {\n\n  /**\n   * Possible input control mode value:\n   *\n   * - `on` when control is writable. This is the default.\n   * - `ro` when control is read-only. Such control can not be edited, but still can be submitted.\n   * - `off` when control is disabled. Such control is not submitted.\n   * - `-on` when control is writable, but not submitted.\n   * - `-ro` when control is read-only, but not submitted.\n   */\n  export type Value = 'on' | 'ro' | 'off' | '-on' | '-ro';\n\n}\n\n/**\n * @internal\n */\nclass OwnModeTracker extends ValueTracker<InMode.Value> {\n\n  private readonly _tracker: ValueTracker<InMode.Value>;\n\n  constructor(element?: InElement<any>) {\n    super();\n    this._tracker = trackValue(element ? initialInMode(element.element) : 'on');\n  }\n\n  get on(): OnEvent<[InMode.Value, InMode.Value]> {\n    return this._tracker.on;\n  }\n\n  get it(): InMode.Value {\n    return this._tracker.it;\n  }\n\n  set it(value: InMode.Value) {\n    switch (value) {\n      case 'off':\n      case 'ro':\n      case '-on':\n      case '-ro':\n        break;\n      default:\n        value = 'on'; // Correct the value.\n    }\n\n    this._tracker.it = value;\n  }\n\n  done(reason?: any): this {\n    this._tracker.done(reason);\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nclass DerivedInModes {\n\n  readonly read: AfterEvent<[InMode.Value]>;\n  private readonly _all = new Set<AfterEvent<[InMode.Value]>>();\n  private readonly _on = new EventEmitter<[]>();\n\n  constructor() {\n\n    const sources: AfterEvent<[Set<AfterEvent<[InMode.Value]>>]> = afterEventBy(\n        this._on.on.thru(() => this._all),\n        valuesProvider(this._all),\n    );\n\n    this.read = sources.keep.dig(set => afterEach(...set).keep.thru(mergeInModes));\n  }\n\n  add(source: EventKeeper<[InMode.Value]>): EventSupply {\n\n    const src = afterSupplied(source);\n    const supply = eventSupply(() => {\n      this._all.delete(src);\n      this._on.send();\n    });\n\n    this._all.add(src);\n    this._on.send();\n\n    return supply;\n  }\n\n}\n\n/**\n * @internal\n */\nclass InControlMode extends InMode {\n\n  readonly own: OwnModeTracker;\n  readonly read: AfterEvent<[InMode.Value]>;\n  readonly on: OnEvent<[InMode.Value, InMode.Value]>;\n  private readonly _derived = new DerivedInModes();\n\n  constructor(control: InControl<any>) {\n    super();\n\n    const element = control.aspect(InElement);\n\n    this.own = new OwnModeTracker(element);\n    this.derive(control.aspect(InParents).read.keep.dig_(parentsInMode));\n\n    let last: InMode.Value = 'on';\n\n    this.read = afterEventBy<[InMode.Value]>(\n        afterAll({\n          derived: this._derived.read,\n          own: this.own,\n        }).thru(({ derived: [derived], own: [own] }) => {\n\n          let next: InMode.Value;\n\n          if (own === 'off' || derived === 'off') {\n            next = 'off';\n          } else {\n\n            let off = false;\n\n            if (own[0] === '-') {\n              off = true;\n              own = own.substring(1) as InMode.Value;\n            }\n            if (derived[0] === '-') {\n              off = true;\n              derived = derived.substring(1) as InMode.Value;\n            }\n            next = derived === 'ro' ? 'ro' : own;\n            if (off) {\n              next = '-' + next as InMode.Value;\n            }\n          }\n\n          return last === next ? nextSkip() : nextArgs(last = next);\n        }),\n        valuesProvider<[InMode.Value]>(last),\n    );\n    if (element) {\n      this.read(value => applyInMode(element.element, value));\n    }\n\n    let lastUpdate: InMode.Value = 'on';\n\n    this.on = this.read.thru(value => {\n\n      const old = lastUpdate;\n\n      return old === value ? nextSkip() : nextArgs(lastUpdate = value, old);\n    });\n  }\n\n  derive(source: EventKeeper<[InMode.Value]>): EventSupply {\n    return this._derived.add(source);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction initialInMode(element: HTMLElement): InMode.Value {\n  return element.getAttribute('disabled') != null\n      ? 'off' : (\n          element.getAttribute('readonly') != null ? 'ro' : 'on'\n      );\n}\n\n/**\n * @internal\n */\nfunction applyInMode(element: HTMLElement, value: InMode.Value): void {\n  switch (value) {\n    case 'off':\n      element.setAttribute('disabled', '');\n      break;\n    case 'ro':\n    case '-ro':\n      // Workaround of https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n      element.setAttribute('disabled', '');\n      element.removeAttribute('disabled');\n      element.setAttribute('readonly', '');\n      break;\n    default:\n      // Workaround of https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n      element.setAttribute('disabled', '');\n      element.removeAttribute('disabled');\n      // Workaround of https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n      element.setAttribute('readonly', '');\n      element.removeAttribute('readonly');\n  }\n}\n\n/**\n * @internal\n */\nfunction parentsInMode(parents: InParents.All): AfterEvent<[InMode.Value]> {\n\n  const parentList = Array.from(parents);\n\n  if (!parentList.length) {\n    return afterThe('on');\n  }\n\n  const parentModes = parentList.map(({ parent }) => parent.aspect(InMode));\n\n  return afterEach(...parentModes).keep.thru_(mergeInModes);\n}\n\n/**\n * @internal\n */\nfunction mergeInModes(...modes: [InMode.Value][]): InMode.Value {\n\n  let ro = false;\n  let off = false;\n\n  for (const [mode] of modes) {\n    switch (mode) {\n      case 'off':\n        return 'off';\n      case 'ro':\n        ro = true;\n        break;\n      case '-on':\n        off = true;\n        break;\n      case '-ro':\n        off = true;\n        ro = true;\n        break;\n    }\n  }\n\n  return off ? (ro ? '-ro' : '-on') : (ro ? 'ro' : 'on');\n}\n","/**\n *@packageDocumentation\n *@module input-aspects\n */\nimport { NextArgs, nextArgs, noop } from 'call-thru';\nimport { afterAll, AfterEvent } from 'fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { InControl } from '../control';\nimport { InMode } from './mode.aspect';\n\n/**\n * A data aspect of the input.\n *\n * Represents input control data that will be submitted.\n *\n * Input data is typically the same as control value with respect to {@link InMode input mode}. I.e. when input mode is\n * `off` the data is `undefined`.\n *\n * An aspect interface is an `AfterEvent` keeper of input data.\n *\n * @category Aspect\n * @typeparam Value  Input value type.\n */\nexport type InData<Value> = AfterEvent<[InData.DataType<Value>?]>;\n\n/**\n * @internal\n */\nconst InData__symbol: Aspect = {\n\n  applyTo<Value>(control: InControl<Value>): Applied<Value> {\n\n    const instance: InData<Value> = afterAll({\n      value: control,\n      mode: control.aspect(InMode),\n    }).keep.thru(\n        ({ value: [value], mode: [mode] }) => inDataByValue(value, mode),\n    );\n\n    return {\n      instance,\n      convertTo: noop,\n    };\n  },\n\n};\n\n/**\n * @internal\n */\nfunction inDataByValue<Value, NextReturn>(\n    value: Value,\n    mode: InMode.Value,\n): NextArgs<[InData.DataType<Value>?], NextReturn> {\n  return InMode.hasData(mode) ? nextArgs(value as InData.DataType<Value>) : nextArgs();\n}\n\n/**\n * Input data aspect.\n */\ninterface Aspect extends InAspect<InData<any>, 'data'> {\n\n  applyTo<Value>(control: InControl<Value>): Applied<Value>;\n\n}\n\n/**\n * An input data aspect applied to control.\n */\ninterface Applied<Value> extends InAspect.Applied<InData<Value>, InData<any>> {\n\n  convertTo<To>(target: InControl<To>): Applied<To> | undefined;\n\n}\n\nexport const InData = {\n\n  get [InAspect__symbol](): InAspect<InData<any>, 'data'> {\n    return InData__symbol;\n  },\n\n};\n\n/**\n * @category Aspect\n */\nexport namespace InData {\n\n  /**\n   * Input data type.\n   *\n   * This is either a partial value (for the object), or the value itself (for everything else).\n   *\n   * @typeparam Value  Input value type.\n   */\n  export type DataType<Value> =\n      | (Value extends object ? { [K in keyof Value]?: DataType<Value[K]> } : Value)\n      | undefined;\n\n}\n\ndeclare module '../aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<OfInstance, OfValue> {\n\n      /**\n       * Input data aspect application type.\n       */\n      data(): InData<OfValue>;\n\n    }\n\n  }\n\n}\n","/**\n *@packageDocumentation\n *@module input-aspects\n */\nimport { itsEach, itsIterable, mapIt, overEntries } from 'a-iterable';\nimport { nextArgs, noop } from 'call-thru';\nimport {\n  afterAll,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterEventBy,\n  afterThe,\n  EventEmitter,\n  EventKeeper,\n  EventSender,\n  eventSupply,\n  EventSupply,\n  OnEvent,\n  OnEvent__symbol,\n  trackValue,\n  ValueTracker,\n} from 'fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { InControl } from '../control';\nimport { InData, InMode } from '../data';\nimport { InContainer, InContainerControls } from './container.control';\nimport { InParents } from './parents.aspect';\n\n/**\n * A group of input controls.\n *\n * Nested controls are identified by keys and can be added and removed via `controls` property.\n *\n * Group value (called model) is an object formed by nested control values. The model property value is the one of the\n * control with the same key, if present. When model is updated corresponding controls are also updated.\n *\n * @category Control\n * @typeparam Model  Group model type, i.e. its value type.\n */\nexport abstract class InGroup<Model extends object> extends InContainer<Model> {\n\n  /**\n   * Input group controls.\n   */\n  abstract readonly controls: InGroupControls<Model>;\n\n}\n\nexport namespace InGroup {\n\n  /**\n   * Input group controls.\n   *\n   * This is a read-only object containing an input control per each model property under the same key.\n   *\n   * @typeparam Model  Group model type, i.e. its value type.\n   */\n  export type Controls<Model> = {\n    readonly [K in keyof Model]?: InControl<Model[K]>;\n  };\n\n  /**\n   * Input controls group entry.\n   *\n   * This is a tuple containing model key and corresponding control.\n   *\n   * @typeparam Model  Group model type, i.e. its value type.\n   */\n  export type Entry<Model, K extends keyof Model = any> = readonly [K, InControl<Model[K]>];\n\n  /**\n   * A snapshot of input control group controls.\n   *\n   * @typeparam Model  Group model type, i.e. its value type.\n   */\n  export interface Snapshot<Model> extends InContainer.Snapshot {\n\n    entries(): IterableIterator<Entry<Model>>;\n\n    /**\n     * Returns input control with the given key, if present.\n     *\n     * @param key  Control key, i.e. corresponding model property key.\n     *\n     * @returns Target control, or `undefined` if there is no control set for this key.\n     */\n    get<K extends keyof Model>(key: K): InGroup.Controls<Model>[K] | undefined;\n\n  }\n\n}\n\n/**\n * Input group controls.\n *\n * @category Control\n * @typeparam Model  Group model type, i.e. its value type.\n */\nexport abstract class InGroupControls<Model>\n    extends InContainerControls\n    implements EventSender<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]>, EventKeeper<[InGroup.Snapshot<Model>]> {\n\n  abstract readonly on: OnEvent<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]>;\n\n  abstract readonly read: AfterEvent<[InGroup.Snapshot<Model>]>;\n\n  /**\n   * Sets input control with the given key.\n   *\n   * Replaces existing control if already present.\n   *\n   * @param key  A key of input control to set. I.e. corresponding model property key.\n   * @param control  Input control to add, or `undefined` to remove control.\n   *\n   * @returns `this` controls instance.\n   */\n  abstract set<K extends keyof Model>(key: K, control: InControl<Model[K]> | undefined): this;\n\n  /**\n   * Sets multiple input controls at a time.\n   *\n   * @param controls  A map of controls under their keys. A value can be `undefined` to remove corresponding control.\n   *\n   * @returns `this` controls instance.\n   */\n  abstract set(controls: InGroup.Controls<Model>): this;\n\n  /**\n   * Removes input control with the given key.\n   *\n   * Calling this method is the same as calling `set(key, undefined)`\n   *\n   * @param key  A key of input control to remove. I.e. corresponding model property key.\n   *\n   * @returns `this` controls instance.\n   */\n  remove(key: keyof Model): this {\n    return this.set(key, undefined);\n  }\n\n  /**\n   * Removes all input controls.\n   *\n   * @returns `this` controls instance.\n   */\n  abstract clear(): this;\n\n}\n\nexport interface InGroupControls<Model> {\n\n  readonly [OnEvent__symbol]: OnEvent<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]>;\n\n  readonly [AfterEvent__symbol]: AfterEvent<[InGroup.Snapshot<Model>]>;\n\n}\n\n/**\n * @internal\n */\ntype InGroupEntry = readonly [InControl<any>, EventSupply]; // When event supply is done the control is unused\n\n/**\n * @internal\n */\nconst inControlReplacedReason = {};\n\n/**\n * @internal\n */\nclass InGroupSnapshot<Model> implements InGroup.Snapshot<Model> {\n\n  constructor(private readonly _map: Map<keyof Model, InGroupEntry>) {\n  }\n\n  get<K extends keyof Model>(key: K): InGroup.Controls<Model>[K] | undefined {\n\n    const entry = this._map.get(key);\n\n    return entry && entry[0] as InGroup.Controls<Model>[K];\n  }\n\n  [Symbol.iterator](): IterableIterator<InControl<any>> {\n    return itsIterable(mapIt(this._map.values(), ([control]) => control));\n  }\n\n  entries(): IterableIterator<InGroup.Entry<Model>> {\n    return itsIterable(mapIt(this._map.entries(), ([key, [control]]) => [key, control]));\n  }\n\n}\n\n/**\n * @internal\n */\nclass InGroupMap<Model extends object> {\n\n  readonly _supply = eventSupply();\n  private _map = new Map<keyof Model, InGroupEntry>();\n  private _shot?: InGroupSnapshot<Model>;\n\n  constructor(private readonly _controls: InGroupControlControls<Model>) {\n  }\n\n  set<K extends keyof Model>(\n      key: K,\n      control: InControl<Model[K]> | undefined,\n      added: [keyof Model, InGroupEntry][],\n      removed: [keyof Model, InGroupEntry][],\n  ): void {\n\n    const self = this;\n    const replaced = this._map.get(key);\n\n    if (control) {\n      if (replaced) {\n        if (replaced[0] === control) {\n          // Do not replace control with itself\n          return;\n        }\n        removed.push([key, replaced]);\n      }\n\n      const entry: InGroupEntry = [control, eventSupply(reason => {\n        if (reason !== inControlReplacedReason) {\n          self._controls.remove(key);\n        }\n      }).needs(self._supply)];\n\n      modify().set(key, entry);\n      added.push([key, entry]);\n    } else if (replaced) {\n      removed.push([key, replaced]);\n      modify().delete(key);\n    }\n    if (replaced) {\n      replaced[1].off(inControlReplacedReason);\n    }\n\n    function modify(): Map<keyof Model, InGroupEntry> {\n      if (self._shot) {\n\n        const map = new Map<keyof Model, InGroupEntry>();\n\n        itsEach(self._map.entries(), ([k, e]) => map.set(k, e));\n        self._shot = undefined;\n        self._map = map;\n      }\n\n      return self._map;\n    }\n  }\n\n  snapshot(): InGroup.Snapshot<Model> {\n    return this._shot || (this._shot = new InGroupSnapshot<Model>(this._map));\n  }\n\n  clear(): [keyof Model, InGroupEntry][] {\n\n    const added: [keyof Model, InGroupEntry][] = [];\n    const removed: [keyof Model, InGroupEntry][] = [];\n\n    itsEach(this._map.keys(), key => this.set(key, undefined, added, removed));\n\n    return removed;\n  }\n\n}\n\n/**\n * @internal\n */\nclass InGroupControlControls<Model extends object> extends InGroupControls<Model> {\n\n  private readonly _map: InGroupMap<Model>;\n  private readonly _updates = new EventEmitter<[[keyof Model, InGroupEntry][], [keyof Model, InGroupEntry][]]>();\n  readonly on: OnEvent<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]>;\n  readonly read: AfterEvent<[InGroup.Snapshot<Model>]>;\n\n  constructor(private readonly _group: InGroupControl<Model>) {\n    super();\n\n    const self = this;\n\n    this._map = new InGroupMap<Model>(this);\n    this.on = this._updates.on.thru(\n        (added, removed) => nextArgs(\n            added.map(controlEntryToGroupEntry),\n            removed.map(controlEntryToGroupEntry),\n        ),\n    );\n    this.read = afterEventBy(\n        this._updates.on.thru(\n            () => this._map.snapshot(),\n        ),\n        () => [this._map.snapshot()],\n    );\n    this._map._supply.needs(_group.read(applyModelToControls));\n\n    function applyModelToControls(model: Model): void {\n      self.read.once(snapshot => {\n\n        const withValues = new Set<keyof Model>();\n\n        itsEach(overEntries(model), ([key, value]) => {\n          withValues.add(key);\n\n          const control = snapshot.get(key);\n\n          if (control) {\n            control.it = value;\n          }\n        });\n\n        itsEach(snapshot.entries(), ([key, control]) => {\n          if (!withValues.has(key)) {\n            control.it = undefined!;\n          }\n        });\n      });\n    }\n  }\n\n  set<K extends keyof Model>(\n      keyOrControls: K | InGroup.Controls<Model>,\n      newControl?: InControl<Model[K]> | undefined,\n  ): this {\n\n    const group = this._group;\n    const added: [keyof Model, InGroupEntry][] = [];\n    const removed: [keyof Model, InGroupEntry][] = [];\n\n    if (typeof keyOrControls === 'object') {\n      itsEach(overEntries(keyOrControls), ([key, value]) => {\n        this._map.set(key, value, added, removed);\n      });\n    } else {\n      this._map.set(keyOrControls, newControl, added, removed);\n    }\n    if (added.length || removed.length) {\n      this._updates.send(added, removed);\n      if (added.length) {\n        applyControlsToModel();\n      }\n    }\n\n    return this;\n\n    function applyControlsToModel(): void {\n\n      let newModel: Model | undefined;\n\n      added.forEach(([key, [control, supply]]) => {\n        supply.needs(control.aspect(InParents).add({ parent: group }).needs(supply));\n\n        const value = control.it;\n\n        if (newModel) {\n          newModel[key] = value;\n        } else {\n\n          const model = group.it;\n\n          if (model[key] !== value) {\n            newModel = { ...model, [key]: value };\n          }\n        }\n      });\n\n      if (newModel) {\n        group.it = newModel;\n      }\n\n      added.forEach(([key, [control, supply]]) => {\n        supply.needs(control.read(value => {\n          if (group.it[key] !== value) {\n            group.it = {\n              ...group.it,\n              [key]: value,\n            };\n          }\n        }).needs(supply));\n      });\n    }\n  }\n\n  clear(): this {\n\n    const removed = this._map.clear();\n\n    if (removed.length) {\n      this._updates.send([], removed);\n    }\n\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction controlEntryToGroupEntry<Model extends object>(\n    [key, [control]]: [keyof Model, InGroupEntry],\n): InGroup.Entry<Model> {\n  return [key, control];\n}\n\n/**\n * @internal\n */\nclass InGroupControl<Model extends object> extends InGroup<Model> {\n\n  private readonly _model: ValueTracker<Model>;\n  readonly controls: InGroupControlControls<Model>;\n\n  constructor(model: Model) {\n    super();\n    this._model = trackValue(model);\n    this.controls = new InGroupControlControls(this);\n  }\n\n  get on(): OnEvent<[Model, Model]> {\n    return this._model.on;\n  }\n\n  get it(): Model {\n    return this._model.it;\n  }\n\n  set it(value: Model) {\n    this._model.it = value;\n  }\n\n  done(reason?: any): this {\n    this._model.done(reason);\n    return this;\n  }\n\n  protected _applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspect: InAspect<Instance, Kind>,\n  ): InAspect.Application.Result<Instance, Model, Kind> | undefined {\n    if (aspect as InAspect<any> === InData[InAspect__symbol]) {\n      return {\n        instance: inGroupData(this),\n        convertTo: noop,\n      } as InAspect.Application.Result<any, any, any>;\n    }\n    return super._applyAspect(aspect);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction inGroupData<Model extends object>(group: InGroup<Model>): InData<Model> {\n  return afterAll({\n    cs: group.controls,\n    model: group,\n    mode: group.aspect(InMode),\n  }).keep.dig_(\n      readInGroupData,\n  );\n}\n\n/**\n * @internal\n */\nfunction readInGroupData<Model extends object>(\n    {\n      cs: [controls],\n      model: [model],\n      mode: [mode],\n    }: {\n      cs: [InGroup.Snapshot<Model>];\n      model: [Model];\n      mode: [InMode.Value];\n    },\n): InData<Model> {\n  if (!InMode.hasData(mode)) {\n    return afterThe();\n  }\n\n  const csData: { [key in keyof Model]: InData<any> } = {} as any;\n\n  itsEach(controls.entries(), ([key, control]) => {\n    csData[key as keyof Model] = control.aspect(InData);\n  });\n\n  return afterAll(csData).keep.thru(controlsData => {\n\n    const data: Partial<Model> = { ...model };\n\n    itsEach(overEntries(controlsData), ([key, [controlData]]) => {\n      data[key] = controlData;\n    });\n\n    return data as InData.DataType<Model>;\n  });\n}\n\n/**\n * Constructs input controls group.\n *\n * @category Control\n * @typeparam Model  Group model type, i.e. its value type.\n * @param model  Initial model of the group.\n *\n * @returns New input controls group.\n */\nexport function inGroup<Model extends object>(model: Model): InGroup<Model> {\n  return new InGroupControl(model);\n}\n","/**\n *@packageDocumentation\n *@module input-aspects\n */\nimport { AfterEvent, afterThe } from 'fun-events';\n\n/**\n * @internal\n */\nconst _requireNothing = (/*#__PURE__*/ afterThe<[]>());\n\n/**\n * Input validator that requires nothing.\n *\n * @category Validation\n */\nexport function requireNothing(): AfterEvent<[]> {\n  return _requireNothing;\n}\n","/**\n *@packageDocumentation\n *@module input-aspects\n */\nimport { nextArgs, NextArgs, valueProvider } from 'call-thru';\nimport { AfterEvent, afterSupplied, EventKeeper, isEventKeeper } from 'fun-events';\nimport { InControl } from '../control';\nimport { InValidation } from './validation.aspect';\n\n/**\n * Input validator.\n *\n * Validator can be added to input validation aspect using `InValidation.by()` method. After that all validation\n * messages it sends are reported by validation aspect. Multiple messages could be sent at a time. These messages\n * replace the previously sent ones. To report the absence of error just send an empty event without messages.\n *\n * This can be one either a validation messages event keeper, a function returning one and accepting input control\n * as its only parameter, or simple validator instance.\n *\n * @category Validation\n * @typeparam Value  Input value type.\n */\nexport type InValidator<Value> =\n    | EventKeeper<InValidation.Message[]>\n    | ((this: void, control: InControl<Value>) => EventKeeper<InValidation.Message[]>)\n    | InValidator.Simple<Value>;\n\nexport namespace InValidator {\n\n  /**\n   * Simple input validator.\n   *\n   * @typeparam Value  Input value type.\n   */\n  export interface Simple<Value> {\n\n    /**\n     * Validates the user input.\n     *\n     * This method is called each time input value changes. The returned messages then reported by input validation\n     * aspect.\n     *\n     * @param control  Input control to validate.\n     *\n     * @returns Either validation message, array of validation messages, or `null`/`unknown` to indicate their absence.\n     */\n    validate(control: InControl<Value>): InValidation.Message | InValidation.Message[] | null | undefined;\n\n  }\n\n}\n\n/**\n * Converts arbitrary input validator to normalized form.\n *\n * @category Validation\n * @typeparam Value  Input value type.\n * @param validator  Validator to convert.\n *\n * @returns A function accepting input control as its only parameter and returning an `AfterEvent` keeper of validation\n * messages.\n */\nexport function inValidator<Value>(\n    validator: InValidator<Value>,\n): (this: void, control: InControl<Value>) => AfterEvent<InValidation.Message[]> {\n  if (isEventKeeper(validator)) {\n    return valueProvider(afterSupplied(validator));\n  }\n  if (typeof validator === 'function') {\n    return control => afterSupplied(validator(control));\n  }\n  return control => control.read.keep.thru(simpleInValidator(control, validator));\n}\n\n/**\n * @internal\n */\nfunction simpleInValidator<Value>(\n    control: InControl<Value>,\n    validator: InValidator.Simple<Value>,\n): <NextReturn>(value: Value) => NextArgs<InValidation.Message[], NextReturn> | InValidation.Message {\n  return () => {\n\n    const messages = validator.validate(control);\n\n    return messages == null\n        ? nextArgs()\n        : Array.isArray(messages)\n            ? nextArgs(...messages)\n            : messages;\n  };\n}\n","import { flatMapIt, itsEach } from 'a-iterable';\nimport { asis, noop, valuesProvider } from 'call-thru';\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  afterEventBy,\n  afterSupplied,\n  EventEmitter,\n  EventKeeper,\n  EventSupply,\n  eventSupply,\n} from 'fun-events';\nimport { InControl } from '../control';\nimport { InValidation } from './validation.aspect';\nimport { inValidator, InValidator } from './validator';\n\nconst dontRemove = {};\n\n/**\n * @internal\n */\nexport class InValidationMessages<Value> implements EventKeeper<InValidation.Message[]> {\n\n  readonly [AfterEvent__symbol]: AfterEvent<InValidation.Message[]>;\n  readonly from: (this: void, validator: InValidator<Value>) => EventSupply;\n\n  constructor(control: InControl<Value>) {\n\n    const emitter = new EventEmitter<InValidation.Message[]>();\n    const validators = new Map<AfterEvent<InValidation.Message[]>, EventSupply>();\n    const validatorMessages = new Map<InValidator<Value>, InValidation.Message[]>();\n    // Sends validation messages\n    let send: () => void = noop;\n    // Validates using the given validator\n    let validate: (validator: AfterEvent<InValidation.Message[]>, validatorSupply: EventSupply) => void = noop;\n\n    this[AfterEvent__symbol] = afterEventBy(receiver => {\n\n      // A validation messages supply\n      const resultSupply = afterSupplied(emitter, valuesProvider())(receiver).whenOff(() => {\n        send = noop; // Disable message sending\n        validate = noop; // Disable validation\n      });\n\n      // Enable validation using the given validator\n      validate = (validator: AfterEvent<InValidation.Message[]>, validatorSupply: EventSupply) => {\n\n        const supply = validator(\n            (...messages) => {\n              if (messages.length) {\n                // Replace messages reported by validator.\n                validatorMessages.set(validator, messages);\n              } else if (!validatorMessages.delete(validator)) {\n                // Nothing removed. No need to send messages\n                return;\n              }\n              send(); // Send all messages.\n            },\n        )\n            .needs(validatorSupply)\n            .whenOff(reason => {\n              if (reason !== dontRemove) {\n                validatorSupply.off(reason);\n              }\n              if (validatorMessages.delete(validator)) {\n                // Send all messages only if the removed validator reported some messages earlier\n                send();\n              }\n            });\n\n        resultSupply.whenOff(() => supply.off(dontRemove));\n      };\n\n      // Enable each validator\n      itsEach(validators.entries(), ([validator, validatorSupply]) => validate(validator, validatorSupply));\n\n      // Enable message sending\n      send = () => {\n        emitter.send(...allMessages());\n      };\n\n      // Send messages if present already\n      if (validatorMessages.size) {\n        send();\n      }\n    }).share();\n\n    this.from = validator => {\n\n      const source = inValidator(validator)(control);\n      const validatorSupply = eventSupply(() => {\n        validators.delete(source);\n      });\n\n      validators.set(source, validatorSupply);\n      validate(source, validatorSupply); // Start validation using validator\n\n      return validatorSupply;\n    };\n\n    function allMessages(): Iterable<InValidation.Message> {\n      return flatMapIt(validatorMessages.values(), asis);\n    }\n  }\n\n}\n","/**\n *@packageDocumentation\n *@module input-aspects\n */\nimport { flatMapIt, itsEach, mapIt, overEntries } from 'a-iterable';\nimport { asis, NextArgs, nextArgs } from 'call-thru';\nimport { afterEach, AfterEvent, AfterEvent__symbol, afterSupplied, EventKeeper, EventSupply } from 'fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { InContainer } from '../container';\nimport { InControl } from '../control';\nimport { requireAll } from './require-all.validator';\nimport { InValidator } from './validator';\nimport { InValidationMessages } from './validator.impl';\n\n/**\n * @internal\n */\nconst InValidation__aspect: Aspect = {\n  applyTo<Value>(control: InControl<Value>): Applied<Value> {\n\n    const instance = new InControlValidation(control);\n\n    return {\n      instance,\n      convertTo<To>(target: InControl<To>) {\n        return convert(instance, target);\n      },\n    };\n\n    function convert<To>(\n        from: InControlValidation<any>,\n        to: InControl<To>,\n    ): Applied<To> {\n\n      const converted = new InControlValidation<To>(to);\n\n      converted.by(from._messages);\n\n      return {\n        instance: converted,\n        convertTo<CC>(target: InControl<CC>) {\n          return convert<CC>(converted, target);\n        },\n      };\n    }\n  },\n};\n\n/**\n * @internal\n */\ninterface Aspect extends InAspect<InValidation<any>, 'validation'> {\n\n  applyTo<Value>(control: InControl<Value>): Applied<Value>;\n\n}\n\n/**\n * @internal\n */\ninterface Applied<Value> extends InAspect.Applied<InValidation<Value>, InValidation<any>> {\n\n  convertTo<To>(target: InControl<To>): Applied<To>;\n\n}\n\n/**\n * Validation aspect of the input.\n *\n * Reports validation messages sent by registered validators. To register validator call a `InValidation.by()` method.\n *\n * Implements an `EventKeeper` interface by sending validation result whenever validation messages reported.\n *\n * A validation aspect of converted control reports all messages from original control in addition to its own.\n *\n * A validation aspect of input controls container reports all messages from nested controls in addition to its own.\n *\n * @category Aspect\n * @typeparam Value  Input value type.\n */\nexport abstract class InValidation<Value> implements EventKeeper<[InValidation.Result]> {\n\n  /**\n   * Input validation aspect.\n   */\n  static get [InAspect__symbol](): InAspect<InValidation<any>, 'validation'> {\n    return InValidation__aspect;\n  }\n\n  get [AfterEvent__symbol](): AfterEvent<[InValidation.Result]> {\n    return this.read;\n  }\n\n  /**\n   * An `AfterEvent` keeper of input validation result.\n   *\n   * An `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[InValidation.Result]>;\n\n  /**\n   * Validates the input using the given validators.\n   *\n   * Messages sent by each registered validator are handled independently. This means that every time the event received\n   * from validator, it replaces the list of validation messages reported previously by the same validator. But it never\n   * affects messages received from other validators.\n   *\n   * @param validators  Input validators to use.\n   *\n   * @returns Validators supply. Removes validators and their messages once cut off.\n   */\n  abstract by(...validators: InValidator<Value>[]): EventSupply;\n\n}\n\nexport namespace InValidation {\n\n  /**\n   * Input validation messages.\n   *\n   * This is a map of key/value pairs, where the key is a message code, while the value is arbitrary. Message codes\n   * are ignored when their values are falsy (i.e. `!message[code] === true`).\n   *\n   * Some message codes are treated specially by convenience.\n   */\n  export type Message = {\n    readonly [code in Extract<keyof GenericMessage, string>]?: any;\n  };\n\n  /**\n   * Generic input validation messages.\n   */\n  export interface GenericMessage {\n\n    readonly [code: string]: any;\n\n    /**\n     * Missing input.\n     */\n    readonly missing?: any;\n\n    /**\n     * The message with this code would be reported by `requireNeeded()` validator despite there are messages with\n     * `missing` code.\n     */\n    readonly despiteMissing?: any;\n\n    /**\n     * Incomplete input, except missing one.\n     */\n    readonly incomplete?: any;\n\n    /**\n     * The message with this code would be reported by `requireNeeded()` validator despite there are messages with\n     * `incomplete` code.\n     */\n    readonly despiteIncomplete?: any;\n\n    /**\n     * Invalid input, except missing or incomplete one.\n     */\n    readonly invalid?: any;\n\n    /**\n     * Submit failure.\n     *\n     * This is set by input submit aspect.\n     */\n    readonly submit?: any;\n\n  }\n\n  /**\n   * Input validation result.\n   *\n   * Combines messages sent by all registered validators.\n   *\n   * Implements `Iterable` interface by iterating over all validation messages.\n   */\n  export interface Result extends Iterable<Message> {\n\n    /**\n     * Whether validation succeed.\n     *\n     * This is `true` when there is no validation messages, or `false` otherwise.\n     */\n    readonly ok: boolean;\n\n    /**\n     * Returns messages with the given code.\n     *\n     * @param code  Target code. All messages reported when absent.\n     *\n     * @returns An array of matching messages. Possibly empty.\n     */\n    messages(code?: string): readonly Message[];\n\n    /**\n     * Checks whether there are errors with the given code.\n     *\n     * @param code  Target code. Any message matches when absent.\n     *\n     * @returns `true` if there is at least one message with the given code, or `false` otherwise.\n     */\n    has(code?: string): boolean;\n\n    [Symbol.iterator](): IterableIterator<Message>;\n\n  }\n\n  /**\n   * Successful input validation result.\n   */\n  export interface Ok extends Result {\n\n    readonly ok: true;\n\n  }\n\n  /**\n   * Unsuccessful input validation result.\n   */\n  export interface Errors extends Result {\n\n    readonly ok: false;\n\n  }\n\n}\n\n/**\n * @internal\n */\nconst noInValidationErrors: InValidation.Result = {\n  get ok() {\n    return true;\n  },\n  messages() {\n    return [];\n  },\n  has() {\n    return false;\n  },\n  [Symbol.iterator]() {\n    return [][Symbol.iterator]();\n  },\n};\n\n/**\n * @internal\n */\nclass InValidationErrors implements InValidation.Result {\n\n  private readonly _all: InValidation.Message[];\n  private readonly _byCode = new Map<string, InValidation.Message[]>();\n\n  constructor(messages: InValidation.Message[]) {\n    this._all = [];\n    itsEach(\n        messages,\n        message => {\n\n          let nonEmpty = false;\n\n          itsEach(overEntries(message), ([code, codePresent]) => {\n            if (codePresent) {\n              nonEmpty = true;\n\n              const prev = this._byCode.get(code);\n\n              if (prev) {\n                prev.push(message);\n              } else {\n                this._byCode.set(code, [message]);\n              }\n            }\n          });\n\n          // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n          if (nonEmpty) {\n            this._all.push(message);\n          }\n        },\n    );\n  }\n\n  get ok(): boolean {\n    return !this._all.length;\n  }\n\n  messages(code?: string): InValidation.Message[] {\n    return code == null ? this._all : this._byCode.get(code) || [];\n  }\n\n  has(code?: string): boolean {\n    return code == null || this._byCode.has(code);\n  }\n\n  [Symbol.iterator](): IterableIterator<InValidation.Message> {\n    return this._all[Symbol.iterator]();\n  }\n\n}\n\n/**\n * Returns successful input validation result.\n *\n * @category Validation\n * @returns Successful input validation result.\n */\nexport function inValidationResult(): InValidation.Ok;\n\n/**\n * Creates input validation result out of validation messages.\n *\n * @param messages  Input validation messages.\n *\n * @returns New input validation result containing the given `messages`.\n */\nexport function inValidationResult(...messages: InValidation.Message[]): InValidation.Result;\n\nexport function inValidationResult(...messages: InValidation.Message[]): InValidation.Result {\n  return messages.length ? new InValidationErrors(messages) : noInValidationErrors;\n}\n\n/**\n * @internal\n */\nclass InControlValidation<Value> extends InValidation<Value> {\n\n  readonly _messages: InValidationMessages<Value>;\n  readonly read: AfterEvent<[InValidation.Result]>;\n\n  constructor(control: InControl<Value>) {\n    super();\n    this._messages = new InValidationMessages(control);\n\n    const container = control.aspect(InContainer);\n\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (container) {\n      this._messages.from(nestedInValidationMessages(container));\n    }\n\n    this.read = afterSupplied(this._messages).keep.thru(inValidationResult);\n  }\n\n  by(...validators: InValidator<Value>[]): EventSupply {\n    return this._messages.from(requireAll(...validators));\n  }\n\n}\n\n/**\n * @internal\n */\nfunction nestedInValidationMessages(container: InContainer<any>): EventKeeper<InValidation.Message[]> {\n  return container.controls.read.keep.dig_(\n      nestedInValidations,\n  ).keep.thru(\n      combineInValidationResults,\n  );\n}\n\n/**\n * @internal\n */\nfunction nestedInValidations(controls: InContainer.Snapshot): AfterEvent<[InValidation.Result][]> {\n  return afterEach(...mapIt(controls, control => control.aspect(InValidation)));\n}\n\n/**\n * @internal\n */\nfunction combineInValidationResults<NextReturn>(\n    ...[messages]: [InValidation.Result][]\n): NextArgs<InValidation.Message[], NextReturn> {\n\n  const msg: Iterable<InValidation.Message> = flatMapIt(messages, asis);\n\n  return nextArgs<InValidation.Message[], NextReturn>(...msg);\n}\n\ndeclare module '../aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<OfInstance, OfValue> {\n\n      /**\n       * Input validation aspect application type.\n       */\n      validation(): InValidation<OfValue>;\n\n    }\n\n  }\n\n}\n","/**\n *@packageDocumentation\n *@module input-aspects\n */\nimport { InControl } from '../control';\nimport { requireNothing } from './require-nothing.validator';\nimport { InValidator } from './validator';\nimport { InValidationMessages } from './validator.impl';\n\n/**\n * Creates input validator that validates using all listed validators.\n *\n * @category Validation\n * @param validators  Validators to validate the input with.\n *\n * @returns Validator that requires all the given `validators`. Or just the given validator if it is the only one given.\n */\nexport function requireAll<Value>(...validators: InValidator<Value>[]): InValidator<Value> {\n\n  const numValidators = validators.length;\n\n  if (numValidators === 1) {\n    return validators[0];\n  }\n  if (!numValidators) {\n    return requireNothing;\n  }\n\n  return (control: InControl<Value>) => {\n\n    const messages = new InValidationMessages(control);\n\n    validators.forEach(validator => messages.from(validator));\n\n    return messages;\n  };\n}\n","/**\n *@packageDocumentation\n *@module input-aspects\n */\nimport { nextArgs } from 'call-thru';\nimport { EventKeeper } from 'fun-events';\nimport { InControl } from '../control';\nimport { InValidation } from './validation.aspect';\nimport { InValidator } from './validator';\n\n/**\n * Creates input validator that requires value to present.\n *\n * Reports empty (falsy) values with `missing` message code.\n *\n * @category Validation\n */\nexport function requirePresent(): InValidator<any>;\n\n/**\n * Input validator that requires value to present.\n *\n * Reports empty (falsy) values with `missing` message code.\n */\nexport function requirePresent(control: InControl<any>): EventKeeper<InValidation.Message[]>;\n\nexport function requirePresent(\n    control?: InControl<any>,\n): InValidator<any> | EventKeeper<InValidation.Message[]> {\n  return control ? control.read.keep.thru(value => value ? nextArgs() : { missing: 'missing' }) : requirePresent;\n}\n","import { asis, nextArgs, nextSkip } from 'call-thru';\nimport { AfterEvent, afterSupplied, EventEmitter, eventSupply, EventSupply, OnEvent } from 'fun-events';\nimport { DomEventDispatcher } from 'fun-events/dom';\nimport { InElement } from '../element.control';\n\n/**\n * @internal\n */\nexport class InElementControl<Value, Elt extends HTMLElement> extends InElement<Value, Elt> {\n\n  readonly input: AfterEvent<[InElement.Input<Value>]>;\n  readonly on: OnEvent<[Value, Value]>;\n  readonly events: DomEventDispatcher;\n  private readonly _get: (this: InElementControl<Value, Elt>) => Value;\n  private readonly _set: (this: InElementControl<Value, Elt>, value: Value) => void;\n  private readonly _input: EventEmitter<[InElement.Input<Value>, Value]> = new EventEmitter();\n  private readonly _supply: EventSupply;\n  private _value: Value;\n  // noinspection TypeScriptFieldCanBeMadeReadonly\n  private _update: (value: Value, oldValue: Value) => void;\n\n  constructor(\n      readonly element: Elt,\n      {\n        get,\n        set,\n      }: {\n        get: (this: InElementControl<Value, Elt>) => Value;\n        set: (this: InElementControl<Value, Elt>, value: Value) => void;\n      },\n  ) {\n    super();\n    this._get = get;\n    this._set = set;\n    this._value = this.it;\n\n    const update = this._update = (value: Value, oldValue: Value): void => send({ value }, oldValue);\n\n    this.input = afterSupplied<[InElement.Input<Value>]>(\n        this._input.on.thru(asis),\n        () => [{ value: this.it }],\n    );\n\n    this.on = this._input.on.thru(\n        ({ value: newValue }, oldValue) => newValue === oldValue ? nextSkip() : nextArgs(newValue, oldValue),\n    );\n\n    this.events = new DomEventDispatcher(element);\n\n    const self = this;\n    const supply = this._supply = eventSupply(reason => this._input.done(reason));\n    const onInput = (event: Event): void => send({ value: self.it, event }, self._value);\n\n    this.events.on('input')(onInput).needs(supply);\n    this.events.on('change')(onInput).needs(supply);\n\n    function send(input: InElement.Input<Value>, oldValue: Value): void {\n      for (;;) {\n        self._value = input.value;\n\n        // Corrections are value updates performed by update event receivers\n        // The last correction is recorded and sent later, when all receivers receive current update\n        let correction: [InElement.Input<Value>, Value] | undefined;\n\n        // Record corrections\n        self._update = (newValue: Value, old: Value) => {\n          // Corrections retain the event instance\n          correction = [{ ...input, value: newValue }, old];\n        };\n        try {\n          self._input.send(input, oldValue);\n        } finally {\n          self._update = update;\n        }\n\n        if (!correction) {\n          break; // No more corrections\n        }\n\n        // Apply last correction\n        // noinspection JSUnusedAssignment\n        [input, oldValue] = correction;\n      }\n    }\n  }\n\n  get it(): Value {\n    return this._get();\n  }\n\n  set it(value: Value) {\n\n    const oldValue = this.it;\n\n    if (value !== oldValue) {\n      this._set(value);\n      this._update(this._get(), oldValue);\n    }\n  }\n\n  done(reason?: any): this {\n    this._supply.off(reason);\n    return this;\n  }\n\n}\n","/**\n *@packageDocumentation\n *@module input-aspects\n */\nimport { InElement } from '../element.control';\nimport { InElementControl } from './element.impl';\n\n/**\n * Textual input control.\n *\n * @category Control\n */\nexport type InText = InElement<string, InText.Element>;\n\nexport namespace InText {\n\n  /**\n   * Text input element.\n   *\n   * Either `<input>`, `<textarea>`, or `<select>`.\n   */\n  export type Element = HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\n\n}\n\n/**\n * Creates control for the given textual input element.\n *\n * Note that this won't work for files, checkboxes, or radio buttons.\n *\n * For `<select multiple>` this would only reflect the first option. Consider to use `inSelect()` for multi-selects.\n *\n * @category Control\n * @param element  Target text input element.\n *\n * @return New textual input control instance.\n */\nexport function inText(element: InText.Element): InText {\n  return new InElementControl(\n      element,\n      {\n        get(): string {\n          return this.element.value;\n        },\n        set(value) {\n          this.element.value = value;\n        },\n      },\n  );\n}\n","/**\n *@packageDocumentation\n *@module input-aspects\n */\nimport { noop } from 'call-thru';\nimport { OnEvent, trackValue, ValueTracker } from 'fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectNull, inAspectValue } from '../aspect.impl';\nimport { InControl } from '../control';\nimport { InElement } from '../element.control';\n\n/**\n * @internal\n */\nconst InFocus__aspect: InAspect<InFocus | null> = {\n\n  applyTo<Value>(control: InControl<Value>): InAspect.Applied<InFocus | null> {\n\n    const element = control.aspect(InElement);\n\n    return element ? inAspectValue(new InControlFocus(element)) : inAspectNull;\n  },\n\n};\n\n/**\n * Input focus aspect.\n *\n * This is a value tracker of element focus flag. Or `null` when [[InElement]] aspect is absent.\n *\n * @category Aspect\n */\nexport abstract class InFocus extends ValueTracker<boolean> {\n\n  static get [InAspect__symbol](): InAspect<InFocus | null> {\n    return InFocus__aspect;\n  }\n\n}\n\n/**\n * @internal\n */\nclass InControlFocus extends InFocus {\n\n  private readonly _it: ValueTracker<boolean>;\n\n  constructor({ element, events }: InElement<any>) {\n    super();\n\n    const owner: DocumentOrShadowRoot | null = element.getRootNode\n        ? element.getRootNode() as any\n        : element.ownerDocument;\n\n    this._it = trackValue(!!owner && owner.activeElement === element);\n    events.on('focus')(() => this._it.it = true);\n    events.on('blur')(() => this._it.it = false);\n    this.on({\n      receive(ctx, newValue) {\n        ctx.onRecurrent(noop);\n        if (newValue) {\n          element.focus();\n        } else {\n          element.blur();\n        }\n      },\n    });\n  }\n\n  get on(): OnEvent<[boolean, boolean]> {\n    return this._it.on;\n  }\n\n  get it(): boolean {\n    return this._it.it;\n  }\n\n  set it(value: boolean) {\n    this._it.it = value;\n  }\n\n  done(reason?: any): this {\n    this._it.done(reason);\n    return this;\n  }\n\n}\n","/**\n *@packageDocumentation\n *@module input-aspects\n */\nimport { itsEach, mapIt } from 'a-iterable';\nimport {\n  afterAll,\n  afterEach,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterThe,\n  EventKeeper,\n  trackValue,\n  ValueTracker,\n} from 'fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectValue } from '../aspect.impl';\nimport { InContainer } from '../container';\nimport { InControl } from '../control';\nimport { InElement } from '../element.control';\nimport { InFocus } from './focus.aspect';\n\n/**\n * @internal\n */\nconst InStatus__aspect: InAspect<InStatus> = {\n\n  applyTo<Value>(control: InControl<Value>): InAspect.Applied<InStatus> {\n\n    const container = control.aspect(InContainer);\n\n    return inAspectValue(container != null ? new InContainerStatus(container) : new InControlStatus(control));\n  },\n\n};\n\n/**\n * Aggregate status aspect of user input.\n *\n * Collects and reports input status flags. Like whether the input ever had focus or being altered.\n *\n * Supports input elements and containers. For the rest of input controls always sends default status flags.\n *\n * Implements `EventKeeper` interface by sending collected status flags to receivers.\n *\n * @category Aspect\n */\nexport abstract class InStatus implements EventKeeper<[InStatus.Flags]> {\n\n  static get [InAspect__symbol](): InAspect<InStatus> {\n    return InStatus__aspect;\n  }\n\n  /**\n   * An `AfterEvent` keeper of input status flags.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[InStatus.Flags]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[InStatus.Flags]> {\n    return this.read;\n  }\n\n  /**\n   * Marks the input as touched.\n   *\n   * For container invokes this method for each of the nested controls.\n   *\n   * @param touched  Whether to mark the input as touched or not. `true` by default. When `false` the input would be\n   * marked as non-edited too. Setting to `false` affects only edited flag when input has focus.\n   *\n   * @returns `this` aspect instance.\n   */\n  abstract markTouched(touched?: boolean): this;\n\n  /**\n   * Marks the input as edited by user.\n   *\n   * For container invokes this method for each of the nested controls.\n   *\n   * @param edited  Whether to mark the input as edited by user. `true` by default, in which case the input will be\n   * marked as touched as well.\n   *\n   * @returns `this` aspect instance.\n   */\n  abstract markEdited(edited?: boolean): this;\n\n}\n\nexport namespace InStatus {\n\n  /**\n   * A flags representing aggregated input status.\n   */\n  export interface Flags {\n\n    /**\n     * Whether the input has focus currently.\n     */\n    readonly hasFocus: boolean;\n\n    /**\n     * Whether the input had focus already.\n     *\n     * This flag can be set using `InStatus.markTouched()`.\n     */\n    readonly touched: boolean;\n\n    /**\n     * Whether the input has been edited by user.\n     *\n     * This flag can be set using `InStatus.markEdited()`.\n     */\n    readonly edited: boolean;\n\n  }\n\n}\n\n/**\n * @internal\n */\nconst defaultInStatusFlags: InStatus.Flags = {\n  hasFocus: false,\n  touched: false,\n  edited: false,\n};\n\n/**\n * @internal\n */\nclass InControlStatus extends InStatus {\n\n  private readonly _flags = trackValue<InStatus.Flags>(defaultInStatusFlags);\n\n  get read(): AfterEvent<[InStatus.Flags]> {\n    return this._flags.read;\n  }\n\n  constructor(control: InControl<any>) {\n    super();\n    this._flags.by(elementInStatusFlags(this._flags, control));\n  }\n\n  markTouched(touched = true): this {\n\n    const flags = this._flags.it;\n\n    if (!touched) {\n      if (flags.touched) {\n        // Try to reset touched.\n        // Still touched if in focus. Not edited anyway.\n        this._flags.it = { ...flags, touched: flags.hasFocus, edited: false };\n      }\n    } else if (!flags.touched) {\n      // Do not modify if already touched.\n      this._flags.it = { ...flags, touched };\n    }\n\n    return this;\n  }\n\n  markEdited(edited = true): this {\n\n    const flags = this._flags.it;\n\n    if (edited) {\n      if (!flags.edited) {\n        // Touched if edited\n        this._flags.it = { ...flags, touched: true, edited };\n      }\n    } else if (flags.edited) {\n      // Assume not edited\n      this._flags.it = { ...flags, edited };\n    }\n\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction elementInStatusFlags(\n    origin: ValueTracker<InStatus.Flags>,\n    control: InControl<any>,\n): AfterEvent<[InStatus.Flags]> {\n\n  const element = control.aspect(InElement);\n  const focus = control.aspect(InFocus);\n\n  return afterAll({\n    hasFocus: focus || afterThe(false),\n    edited: element ? element.input.keep.thru(({ event }) => !!event) : afterThe(false),\n  }).keep.thru(\n      ({ hasFocus: [hasFocus], edited: [edited] }) => updateInStatusFlags(origin.it, hasFocus, edited),\n  );\n}\n\n/**\n * @internal\n */\nfunction updateInStatusFlags(flags: InStatus.Flags, hasFocus: boolean, edited: boolean): InStatus.Flags {\n  if (hasFocus) {\n    flags = { ...flags, hasFocus, touched: true };\n  } else {\n    flags = { ...flags, hasFocus };\n  }\n  if (edited) {\n    flags = { ...flags, edited, touched: true };\n  }\n  return flags;\n}\n\n/**\n * @internal\n */\nclass InContainerStatus extends InStatus {\n\n  readonly read: AfterEvent<[InStatus.Flags]>;\n\n  constructor(private readonly _container: InContainer<any>) {\n    super();\n\n    this.read = containerInStatusFlags(_container);\n  }\n\n  markEdited(edited?: boolean): this {\n    this._container.controls.read.once(\n        snapshot => itsEach(\n            snapshot,\n            control => control.aspect(InStatus).markEdited(edited),\n        ),\n    );\n    return this;\n  }\n\n  markTouched(touched?: boolean): this {\n    this._container.controls.read.once(\n        snapshot => itsEach(\n            snapshot,\n            control => control.aspect(InStatus).markTouched(touched),\n        ),\n    );\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction containerInStatusFlags(container: InContainer<any>): AfterEvent<[InStatus.Flags]> {\n  return container.controls.read.keep.dig_(\n      snapshot => afterEach(...inControlStatuses(snapshot)),\n  ).keep.thru(\n      combineInStatusFlags,\n  );\n}\n\n/**\n * @internal\n */\nfunction inControlStatuses(snapshot: InContainer.Snapshot): Iterable<InStatus> {\n  return mapIt(snapshot, c => c.aspect(InStatus));\n}\n\n/**\n * @internal\n */\nfunction combineInStatusFlags(...flags: [InStatus.Flags][]): InStatus.Flags {\n\n  const result: { -readonly [K in keyof InStatus.Flags]: InStatus.Flags[K] } = {\n    hasFocus: false,\n    touched: false,\n    edited: false,\n  };\n\n  itsEach(\n      flags,\n      (([{ hasFocus, touched, edited }]) => {\n            if (touched) {\n              result.touched = true;\n            }\n            if (hasFocus) {\n              result.hasFocus = result.touched = true;\n            }\n            if (edited) {\n              result.edited = result.touched = true;\n            }\n          }\n      ),\n  );\n\n  return result;\n}\n","/**\n * @packageDocumentation\n * @module input-aspects\n */\nimport { NamespaceAliaser, NamespaceDef, newNamespaceAliaser } from 'namespace-aliaser';\nimport { InAspect, InAspect__symbol } from './aspect';\nimport { inAspectValue } from './aspect.impl';\nimport { InConverter } from './converter';\n\n/**\n * Namespace aliaser aspect.\n *\n * Used by other aspect to generate unique names.\n *\n * Creates new namespace aliaser and reuses it across converted controls unless overridden e.g. by\n * [[InNamespaceAliaser.to]] converter.\n *\n * @category Aspect\n */\nexport type InNamespaceAliaser = NamespaceAliaser;\n\n/**\n * Default input-aspects namespace definition.\n *\n * @category Aspect\n */\nexport const InputAspects__NS: NamespaceDef = (/*#__PURE__*/ new NamespaceDef(\n    'https://surol.github.io/input-aspects/ns',\n    'inasp',\n    'input-aspects',\n));\n\n/**\n * @internal\n */\nconst InNamespaceAliaser__aspect: InAspect<InNamespaceAliaser> = {\n\n  applyTo() {\n    return inAspectValue(newNamespaceAliaser());\n  },\n\n};\n\n/**\n * @category Aspect\n */\nexport const InNamespaceAliaser = {\n\n  get [InAspect__symbol](): InAspect<InNamespaceAliaser> {\n    return InNamespaceAliaser__aspect;\n  },\n\n  /**\n   * Creates input control aspect converter that assigns the given namespace aliaser to converted control.\n   *\n   * @param nsAlias  Target namespace aliaser.\n   *\n   * @returns Input control aspect converter.\n   */\n  to<Value>(nsAlias: InNamespaceAliaser): InConverter.Aspect<any, Value> {\n    return {\n      applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n          aspect: InAspect<any, any>,\n      ): InAspect.Applied<InAspect.Application.Instance<Instance, Value, Kind>> | undefined {\n        return aspect === InNamespaceAliaser__aspect\n            ? inAspectValue(nsAlias) as InAspect.Application.Result<Instance, Value, Kind>\n            : undefined;\n      },\n    };\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module input-aspects\n */\nimport { newRenderSchedule, RenderScheduler } from 'render-scheduler';\nimport { InAspect, InAspect__symbol } from './aspect';\nimport { inAspectValue } from './aspect.impl';\nimport { InConverter } from './converter';\n\n/**\n * Input elements render scheduler.\n *\n * It is used e.g. to schedule CSS updates. The control values and attributes are updated instantly.\n *\n * Uses the default render scheduler unless overridden e.g. by [[InRenderScheduler.to]] converter.\n *\n * @category Aspect\n */\nexport type InRenderScheduler = RenderScheduler;\n\n/**\n * @internal\n */\nconst InRenderScheduler__aspect: InAspect<InRenderScheduler> = {\n\n  applyTo() {\n    return inAspectValue(newRenderSchedule);\n  },\n\n};\n\n/**\n * @category Aspect\n */\nexport const InRenderScheduler = {\n\n  get [InAspect__symbol](): InAspect<InRenderScheduler> {\n    return InRenderScheduler__aspect;\n  },\n\n  /**\n   * Creates input control aspect converter that assigns the given render scheduler to converted control.\n   *\n   * @param scheduler  Target DOM render scheduler.\n   *\n   * @returns Input control aspect converter.\n   */\n  to<Value>(scheduler: InRenderScheduler): InConverter.Aspect<any, Value> {\n    return {\n      applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n          aspect: InAspect<any, any>,\n      ): InAspect.Applied<InAspect.Application.Instance<Instance, Value, Kind>> | undefined {\n        return aspect === InRenderScheduler__aspect\n            ? inAspectValue(scheduler) as InAspect.Application.Result<Instance, Value, Kind>\n            : undefined;\n      },\n    };\n  },\n\n};\n","/**\n *@packageDocumentation\n *@module input-aspects\n */\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectNull, inAspectValue } from '../aspect.impl';\nimport { InControl } from '../control';\nimport { InConverter } from '../converter';\nimport { InElement } from '../element.control';\n\n/**\n * An input aspect representing DOM element to apply styles to.\n *\n * This is a HTML element for input element control, and `null` for everything else by default.\n *\n * @category Aspect\n */\nexport type InStyledElement = Element;\n\n/**\n * @internal\n */\nconst InStyledElement__aspect: InAspect<InStyledElement | null> = {\n\n  applyTo(control: InControl<any>): InAspect.Applied<InStyledElement | null> {\n\n    const element = control.aspect(InElement);\n\n    return element ? inAspectValue(element.element) : inAspectNull;\n  },\n\n};\n\n/**\n * @category Aspect\n */\nexport const InStyledElement = {\n\n  get [InAspect__symbol]() {\n    return InStyledElement__aspect;\n  },\n\n  /**\n   * Creates input control aspect converter that assigns the given styled element to converted control.\n   *\n   * This is useful for controls without elements (such as input groups), or can be used to apply CSS classes to input\n   * element wrappers (such as `form-group` in Bootstrap).\n   *\n   * @param element  A DOM element to apply styles to. Styles won't be applied when `null` or undefined.\n   *\n   * @returns Input control aspect converter.\n   */\n  to<Value>(element: InStyledElement | null = null): InConverter.Aspect<any, Value> {\n    return {\n      applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n          aspect: InAspect<any, any>,\n      ): InAspect.Applied<InAspect.Application.Instance<Instance, Value, Kind>> | undefined {\n        return aspect === InStyledElement__aspect\n            ? inAspectValue(element) as InAspect.Application.Result<Instance, Value, Kind>\n            : undefined;\n      },\n    };\n  },\n\n};\n","/**\n *@packageDocumentation\n *@module input-aspects\n */\nimport { filterIt, itsEach, ObjectEntry, overEntries } from 'a-iterable';\nimport { noop, valueProvider } from 'call-thru';\nimport { DeltaSet } from 'delta-set';\nimport {\n  afterEach,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterEventBy, afterSupplied,\n  afterThe,\n  EventKeeper,\n  EventNotifier,\n  eventSupply,\n  EventSupply,\n  isEventKeeper,\n  trackValue,\n  ValueTracker,\n} from 'fun-events';\nimport { css__naming, isQualifiedName, QualifiedName } from 'namespace-aliaser';\nimport { RenderSchedule } from 'render-scheduler';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { InControl } from '../control';\nimport { InNamespaceAliaser } from '../namespace-aliaser.aspect';\nimport { InRenderScheduler } from '../render-scheduler.aspect';\nimport { InStyledElement } from './styled-element.aspect';\n\n/**\n * @internal\n */\nconst InCssClasses__aspect: InAspect<InCssClasses> = {\n\n  applyTo(control: InControl<any>): InAspect.Applied<InCssClasses> {\n    return {\n      instance: new InControlCssClasses(control),\n      convertTo: noop,\n    };\n  },\n\n};\n\n/**\n * An aspect of the user input representing CSS classes to apply to styled element.\n *\n * Implements an `EventKeeper` interface by reporting all CSS classes applied to styled element.\n *\n * @category Aspect\n */\nexport abstract class InCssClasses implements EventKeeper<[InCssClasses.Map]> {\n\n  static get [InAspect__symbol](): InAspect<InCssClasses> {\n    return InCssClasses__aspect;\n  }\n\n  /**\n   * An `AfterEvent` keeper of CSS classes to be applied to styled element.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[InCssClasses.Map]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[InCssClasses.Map]> {\n    return this.read;\n  }\n\n  /**\n   * An `AfterEvent` keeper of added and removed CSS classes.\n   *\n   * Reports current CSS classes as added ones on receiver registration.\n   */\n  abstract readonly track: AfterEvent<[readonly string[], readonly string[]]>;\n\n  /**\n   * Appends CSS classes from the given `source` to styled element.\n   *\n   * @param source  A source of CSS class names.\n   *\n   * @returns CSS class names supply. Removes `source` CSS classes from styled element once cut off.\n   */\n  abstract add(source: InCssClasses.Source): EventSupply;\n\n  /**\n   * Applies CSS classes to the given styled element.\n   *\n   * @param element  Target element to apply CSS classes to.\n   * @param schedule  DOM render schedule to add CSS class updates to. A new schedule is constructed by\n   * {@link InRenderScheduler input render scheduler} by default.\n   *\n   * @returns CSS classes supply that stops their application and removes already applied ones once cut off.\n   */\n  abstract applyTo(element: InStyledElement, schedule?: RenderSchedule): EventSupply;\n\n  /**\n   * Removes all CSS class sources and stops applying CSS classes to styled elements.\n   *\n   * @param reason  An optional reason.\n   *\n   * @returns `this` instance.\n   */\n  abstract done(reason?: any): this;\n\n}\n\nexport namespace InCssClasses {\n\n  /**\n   * A source of CSS class names for styled element.\n   *\n   * This is either an event keeper of CSS class names, or a function returning one and accepting target input\n   * control as the only parameter.\n   */\n  export type Source =\n      | EventKeeper<Spec[]>\n      | ((control: InControl<any>) => EventKeeper<Spec[]>);\n\n  /**\n   * A specifier of CSS classes for styled element.\n   *\n   * This is either a single (potentially qualified) class name, or a {@link Map map of class names}.\n   *\n   * Qualified names are converted to simple ones by [[InNamespaceAliaser]] aspect.\n   */\n  export type Spec =\n      | QualifiedName\n      | Map;\n\n  /**\n   * A map of CSS class names for styled element.\n   *\n   * The keys of this map are class names to apply.\n   * - When the value is `true` corresponding class name will be added.\n   * - When the value is `false` corresponding class name will not be added.\n   * - The `undefined` value is ignored.\n   */\n  export type Map = {\n    readonly [name in string]?: boolean;\n  };\n\n}\n\n/**\n * @internal\n */\nconst UnsubscribeReason__symbol = (/*#__PURE__*/ Symbol('reason'));\n\n/**\n * @internal\n */\ninterface UnsubscribeReason {\n  readonly [UnsubscribeReason__symbol]?: any;\n}\n\n/**\n * @internal\n */\nfunction isUnsubscribeReason(reason: any): reason is UnsubscribeReason {\n  return reason && typeof reason === 'object' && UnsubscribeReason__symbol in reason;\n}\n\n/**\n * @internal\n */\nclass InControlCssClasses extends InCssClasses {\n\n  readonly read: AfterEvent<[InCssClasses.Map]>;\n  readonly track: AfterEvent<[readonly string[], readonly string[]]>;\n  private readonly _sources: ValueTracker<[Map<AfterEvent<[InCssClasses.Map]>, EventSupply>]> = trackValue([new Map()]);\n  private _schedule?: RenderSchedule;\n\n  constructor(private readonly _control: InControl<any>) {\n    super();\n    this.read = this._sources.read.keep.dig_(\n        ([sources]) => sources.size ? afterEach(...sources.keys()) : afterThe(),\n    ).keep.thru((...classes) => {\n\n      const result: { [name: string]: boolean } = {};\n\n      classes.forEach(([map]) => mergeInCssClassesMap(map, result));\n\n      return result;\n    });\n    this.track = afterEventBy(receiver => {\n\n      const classes = new DeltaSet<string>();\n      const emitter = new EventNotifier<[readonly string[], readonly string[]]>();\n      let classesSent = false;\n      const sendClasses = (): void => {\n        classesSent = true;\n        classes.redelta(\n            (add, remove) => emitter.send(add, remove),\n        ).undelta();\n      };\n\n      emitter.on(receiver);\n\n      return this.read(map => {\n\n        const remove = new Set(classes);\n        const add: string[] = [];\n\n        itsEach(\n            filterIt<ObjectEntry<InCssClasses.Map>>(\n                overEntries<InCssClasses.Map>(map),\n                ([, flag]) => !!flag,\n            ),\n            ([name]) => {\n              if (!remove.delete(name)) {\n                add.push(name);\n              }\n            },\n        );\n\n        if (!classesSent || add.length || remove.size) {\n          classes.delta(add, remove);\n          sendClasses();\n        }\n      });\n    });\n\n    const element = _control.aspect(InStyledElement);\n\n    if (element) {\n      this.applyTo(element, this.schedule);\n    }\n  }\n\n  get schedule(): RenderSchedule {\n    return this._schedule || (this._schedule = controlSchedule(\n        this._control,\n        this._control.aspect(InStyledElement)!,\n    ));\n  }\n\n  add(source: InCssClasses.Source): EventSupply {\n\n    const keeper = inCssClassesSource(source)(this._control);\n    const classesSupply = eventSupply();\n    const src = afterEventBy<[InCssClasses.Map]>(receiver => {\n\n      const supply = keeper({\n        receive(context, ...event) {\n          receiver.receive(context, ...event);\n        },\n      });\n\n      receiver.supply.whenOff(reason => {\n        classesSupply.off({ [UnsubscribeReason__symbol]: reason });\n      });\n      classesSupply.needs(supply).whenOff(reason => {\n        if (isUnsubscribeReason(reason)) {\n          supply.off(reason[UnsubscribeReason__symbol]);\n        }\n      });\n    }).share();\n\n    const [sources] = this._sources.it;\n\n    sources.set(src, classesSupply);\n    classesSupply.whenOff(reason => {\n      if (!isUnsubscribeReason(reason)) {\n        sources.delete(src);\n        this._sources.it = [sources];\n      }\n    });\n\n    this._sources.it = [sources];\n\n    return classesSupply;\n  }\n\n  applyTo(\n      element: Element,\n      schedule: RenderSchedule = controlSchedule(this._control, element),\n  ): EventSupply {\n\n    const { classList } = element;\n    const classes = new DeltaSet<string>();\n    const updateClasses = (): void => {\n      classes.redelta((add, remove) => {\n        classList.remove(...remove);\n        classList.add(...add);\n      }).undelta();\n    };\n\n    return this.track((add, remove) => {\n      classes.delta(add, remove);\n      schedule(updateClasses);\n    }).whenOff(() => {\n      if (classes.size) {\n        classes.clear();\n        schedule(updateClasses);\n      }\n    });\n  }\n\n  done(reason?: any): this {\n    itsEach(\n        this._sources.it[0].values(),\n        supply => supply.off(reason),\n    );\n    this._sources.done(reason);\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction inCssClassesSource(source: InCssClasses.Source): (control: InControl<any>) => AfterEvent<[InCssClasses.Map]> {\n\n  const keeper = isEventKeeper(source) ? valueProvider(source) : source;\n\n  return control => {\n\n    const nsAlias = control.aspect(InNamespaceAliaser);\n\n    return afterSupplied(keeper(control)).keep.thru(\n        (...names) => {\n\n          const result: { [name: string]: boolean } = {};\n\n          names.forEach(name => {\n            if (isQualifiedName(name)) {\n              result[css__naming.name(name, nsAlias)] = true;\n            } else {\n              mergeInCssClassesMap(name, result);\n            }\n          });\n\n          return result;\n        },\n    );\n  };\n}\n\n/**\n * @internal\n */\nfunction mergeInCssClassesMap(map: InCssClasses.Map, result: { [name: string]: boolean }): void {\n  itsEach(\n      overEntries(map),\n      ([name, flag]) => {\n        if (flag != null) {\n          result[name] = flag;\n        }\n      },\n  );\n}\n\n/**\n * @internal\n */\nfunction controlSchedule(control: InControl<any>, node: Node | undefined): RenderSchedule {\n  return control.aspect(InRenderScheduler)({ node });\n}\n","/**\n *@packageDocumentation\n *@module input-aspects\n */\nimport { nextArgs } from 'call-thru';\nimport { InputAspects__NS } from '../namespace-aliaser.aspect';\nimport { InValidation } from '../validation';\nimport { InCssClasses } from './css-classes.aspect';\n\n/**\n * @internal\n */\nconst defaultInCssErrorMarks: InCssClasses.Spec[] = [['has-error', InputAspects__NS]];\n\n/**\n * @internal\n */\nfunction defaultInCssHasError(errors: InValidation.Result): boolean {\n  return !errors.ok;\n}\n\n/**\n * Builds a source of error marker CSS classes.\n *\n * Applies error marker class(es) when the given error message codes present in\n * {@link InValidation.Result validation result}.\n *\n * @category Style\n * @param mark  Error mark. Specifies CSS class(es) to apply when requested error present.\n * A class with `has-error` name in {@link InputAspects__NS input\n * aspects namespace} is used by default.\n * @param when  {@link InValidation.Message Validation message} code(s) to expect.\n * {@link InValidation.Result.ok Any} error matches by default.\n *\n * @returns A source of CSS class names to apply.\n */\nexport function inCssError(\n    {\n      mark,\n      when,\n    }: {\n      mark?: InCssClasses.Spec | InCssClasses.Spec[];\n      when?: string | string[];\n    } = {},\n): InCssClasses.Source {\n\n  let hasError: (errors: InValidation.Result) => boolean;\n\n  if (!when) {\n    hasError = defaultInCssHasError;\n  } else if (Array.isArray(when)) {\n    hasError = when.length ? errors => when.every(code => errors.has(code)) : defaultInCssHasError;\n  } else {\n    hasError = errors => errors.has(when);\n  }\n\n  let marks: InCssClasses.Spec[];\n\n  if (!mark) {\n    marks = defaultInCssErrorMarks;\n  } else if (Array.isArray(mark)) {\n    marks = mark.length ? mark : defaultInCssErrorMarks;\n  } else {\n    marks = [mark];\n  }\n\n  return control => control.aspect(InValidation).read.keep.thru(\n      errors => hasError(errors) ? nextArgs(...marks) : nextArgs(),\n  );\n}\n","/**\n *@packageDocumentation\n *@module input-aspects\n */\nimport { nextArgs } from 'call-thru';\nimport { afterAll } from 'fun-events';\nimport { NamespaceDef, QualifiedName } from 'namespace-aliaser';\nimport { InControl } from '../control';\nimport { InMode } from '../data';\nimport { InStatus } from '../focus';\nimport { InputAspects__NS } from '../namespace-aliaser.aspect';\nimport { InValidation } from '../validation';\nimport { InCssClasses } from './css-classes.aspect';\n\n/**\n * Builds a source of informative CSS classes.\n *\n * Generates the following CSS classes:\n * - `disabled` when input control is disabled (i.e. has no data).\n * - `readonly` when input control is read-only,\n * - `invalid` when input control validation failed,\n * - `missing` when there are validation messages with `missing` code,\n * - `incomplete` when there are validation messages with `incomplete`,\n * - `hasFocus` when input control has input focus,\n * - `touched` when input control is touched (i.e. had focus already),\n * - `edited` when input control is edited by user.\n *\n * These names are qualified with the given (or {@link InputAspects__NS default}) namespace.\n *\n * @category Style\n * @param ns  A definition of namespace to qualify CSS class names with. The {@link InputAspects__NS default namespace}\n * will be used when omitted.\n *\n * @returns A source of CSS class names to apply.\n */\nexport function inCssInfo(\n    {\n      ns = InputAspects__NS,\n    }: {\n      ns?: NamespaceDef;\n    } = {},\n): InCssClasses.Source {\n  return (control: InControl<any>) => {\n\n    const cls = (name: string) => [name, ns] as const;\n\n    return afterAll({\n      md: control.aspect(InMode),\n      vl: control.aspect(InValidation),\n      st: control.aspect(InStatus),\n    }).keep.thru(\n        ({ md: [mode], vl: [valid], st: [{ hasFocus, touched, edited }] }) => {\n\n          const names: QualifiedName[] = [];\n\n          if (!InMode.hasData(mode)) {\n            names.push(cls('disabled'));\n          }\n          if (mode === 'ro' || mode === '-ro') {\n            names.push(cls('readonly'));\n          }\n          if (!valid.ok) {\n            names.push(cls('invalid'));\n          }\n          if (valid.has('missing')) {\n            names.push(cls('missing'));\n          }\n          if (valid.has('incomplete')) {\n            names.push(cls('incomplete'));\n          }\n          if (hasFocus) {\n            names.push(cls('has-focus'));\n          }\n          if (touched) {\n            names.push(cls('touched'));\n          }\n          if (edited) {\n            names.push(cls('edited'));\n          }\n\n          return nextArgs(...names);\n        },\n    );\n  };\n}\n"],"names":["NextCall__symbol","Symbol","NextCall_lastOutcome__symbol","NextCall","Function","[object Object]","target","value","is","nextCall","callee","firstArg","arg","callNext","lastOutcome","result","PassedThru__symbol","PassedThru","outcome","iterator","callThru","fns","args","get","idx","prev","len","length","apply","this","call","asis","noop","isPresent","valueProvider","valuesProvider","values","nextArgs","undefined","nextEach","items","item","forEachItem","lastItems","SKIP","_skip","_nextSkip","nextSkip","isArrayLike","itsRevertible","iterable","itsIterator","itsIterable","makeIt","iterate","reverse","reversible","reverseIt","source","reverseArray","reversed","array","i","itsEach","action","element","itsFirst","next","itsReduction","reducer","initialValue","reduced","thruIt","it","thru","filterIt","test","flatMapIt","convert","mapIt","API_METHODS","AIterable","NONE","every","name","from","make","itsEvery","elements","None","super","overArray","overEntries","keys","Reflect","ownKeys","overKeys","mapToEntries","_keys","key","AfterEvent__symbol","isEventKeeper","EventSupply","another","whenOff","reason","off","eventSupply","cutOff","callback","isOff","NoSupply","noSupply","noEventSupply","eventReceiver","receiver","generic","supply","_context","event","context","receive","OnEvent__symbol","once","register","EventNotifier","Set","receivers","send","sendNonRecurrent","actualReceivers","received","recurrent","push","processEvent","shift","receiveEventsByEach","_rcvs","size","on","add","delete","forEach","recurrentReceivers","recurrentReceiver","recurrentEvent","share","shared","sharedSupply","initialEvents","_ctx","needs","dispatcher","tillOff","OnEvent","onEventBy","extract","dig_","nestedSupply","prevSupply","extracted","onSupplied","nestedEvent","consume","consumerSupply","senderSupply","thru_","transformed","onEvent","Object","setPrototypeOf","prototype","supplier","bind","onNever","AfterEventKeep","keeper","_keeper","afterSupplied","AfterEvent","keep","afterEventBy","fallback","noEvent","lastEvent","numReceivers","afterEvent","dest","reported","sender","afterSent","afterThe","afterNever","Error","EventEmitter","afterAll","sources","notifier","afterEach","index","onAny","suppliers","remained","removeSupplier","statePath","path","Array","isArray","PathEntry","_drop","Map","emitter","newValue","oldValue","nested","_nested","slice","_dropIfEmpty","dontCreateMissing","found","created","_remove","set","done","Trackers","_entry","_root","entry","nest","SubStateTracker","_trackers","_path","_tracker","onUpdate","StateTracker","update","subTracker","track","ValueTracker","valueReceiver","onRecurrent","recurrentValue","read","acceptValuesFrom","byNone","container","_by","TrackedValue","_it","_on","trackValue","initial","ContextKey__symbol","ContextKey","ContextSeedKey","seedKey","opts","seeder","seed","isEmpty","byDefault","ContextKeyError","message","contextValueSpec","spec","byProvider","withDeps","a","by","with","deps","map","dep","isConstant","viaAlias","via","ctx","asInstance","selfInstance","as","toAsInstance","Type","DepType","TypeError","ContextValues","ContextRegistry","_initial","_seeding","provide","_seeds","seeding","factory","cache","newValues","_nonCachedValues","registry","Values","cached","constructed","defaultUsed","findSeed","valueOpts","or","defaultProvider","defaultValue","grow","growValue","other","combine","ContextUpSeeder","provider","_providers","providers","indexOf","concat","providersTracker","dig","prov","toUpSrcKeeper","flatUpSources","upSrcKeepers","first","second","src","isUpSrcKeeper","ContextSeedUpKey","ContextUpKeyUpKey","_key","ContextUpKey","SingleContextUpKey","upKey","backup","FnContextKey","createUpKey","delegated","fn","SimpleContextSeeder","splice","sourceValues","flatMap","SimpleSeedKey","SimpleContextKey","SingleContextKey","last","itsLast","filter","Naming","nsAlias","local","ns","DefaultNaming","alias","default__naming","html__naming","CssNaming","css__naming","NamespaceDef","url","aliases","naming","applyAlias","isQualifiedName","isNameAndNamespace","newNamespaceAliaser","aliasesByNs","nsNumPerAlias","mostPreferred","nsNumRegistered","preferred","ids","generated","RenderScheduleConfig","options","win","node","window","ownerDocument","defaultView","messages","error","console","ScheduledRenderQueue","schedule","replace","renders","render","pull","ScheduledRenderQ__symbol","ScheduledRenderQ","q","ref","doSchedule","queue","config","execution","postpone","postponed","reset","suspend","exec","resume","scheduled","customRenderScheduler","scheduleOptions","queueRef","newQueue","enqueued","lastQueue","nextQueue","nextEnqueued","e","animationRenderQueues","WeakMap","defaultRenderScheduler","existing","task","requestAnimationFrame","replacement","newRenderSchedule","OnDomEvent","onDomEventBy","capture","listener","instead","preventDefault","just","stopPropagation","stopImmediatePropagation","passive","onDomEvent","domEventContext","DomEventDispatcher","_target","type","domListener","addEventListener","removeEventListener","dispatchEvent","hthvItem","$","n","t","v","x","p","pl","addParam","param","nextInItem","input","c","s","d","delimiterOf","datePattern","parseDateTime","out","substring","match","parseNone","itemParser","named","tagged","extra","parseQuotedString","unquoted","quotedStringParser","parseAngleBrackets","angleBracketsParser","parseExtra","tag","extraItem","nextInComment","spacesParser","start","paramParser","skipSpaces","parseItem","defaultDelimit"," ","\t",",",";","\"","\\","<",">","=","(",")","/",":","?","@","[","]","{","}","buildParserConfig","delimit","delimitConfig","defaultParserConfig","commentParserConfig","newHthvParser","parserConfig","parseItemDelimit","itemDelimitParser","parseParam","parseComment","comments","commentParserOpts","commentParser","headerValue","hthvParse","hthvQuote","string","escaped","quote","delimiter","DeltaSet","_added","_removed","has","clear","remove","deltaSetDeltaReceiver","removed","added","InAspect__symbol","inAspectNull","instance","convertTo","inAspectValue","intoConvertedBy","valueOrAspectConverter","converters","noopInConverter","converter","inConverter","aspectConverters","to","conversion","aspectConversions","acf","applyAspect","aspect","applied","asc","isAspectConversion","noopInConversion","InControl","aspectKey","_aspect","aspectKeyOrSetup","aspectSetup","and","InConverted","_aspects","_applyAspect","applyTo","backward","lastRev","convertAspect","rev","prevValue","prevRev","InContainer__aspect","InContainer","InParents__aspect","InControlParents","InParents","_map","allParents","existingSupply","InElement__aspect","InElement","InMode__aspect","control","InControlMode","InMode","mode","own","OwnModeTracker","getAttribute","initialInMode","DerivedInModes","_all","mergeInModes","derive","parentsInMode","derived","_derived","setAttribute","removeAttribute","applyInMode","lastUpdate","old","parents","parentList","parent","modes","ro","InData__symbol","hasData","inDataByValue","InData","InGroup","inControlReplacedReason","InGroupSnapshot","entries","InGroupMap","_controls","self","replaced","_supply","modify","_shot","k","InGroupControlControls","_group","_updates","controlEntryToGroupEntry","snapshot","model","withValues","keyOrControls","newControl","group","newModel","applyControlsToModel","InGroupControl","_model","controls","cs","readInGroupData","csData","controlsData","data","controlData","inGroup","_requireNothing","requireNothing","inValidator","validator","validate","simpleInValidator","dontRemove","InValidationMessages","validators","validatorMessages","resultSupply","validatorSupply","InValidation__aspect","InControlValidation","converted","_messages","InValidation","noInValidationErrors","ok","InValidationErrors","nonEmpty","code","codePresent","_byCode","inValidationResult","nestedInValidations","combineInValidationResults","nestedInValidationMessages","numValidators","requireAll","requirePresent","missing","InElementControl","_get","_set","_value","_update","_input","events","onInput","correction","inText","InFocus__aspect","InControlFocus","InFocus","owner","getRootNode","activeElement","focus","blur","InStatus__aspect","InContainerStatus","InControlStatus","InStatus","defaultInStatusFlags","hasFocus","touched","edited","_flags","origin","flags","updateInStatusFlags","elementInStatusFlags","_container","inControlStatuses","combineInStatusFlags","markEdited","markTouched","InputAspects__NS","InNamespaceAliaser__aspect","InNamespaceAliaser","InRenderScheduler__aspect","InRenderScheduler","scheduler","InStyledElement__aspect","InStyledElement","InCssClasses__aspect","InControlCssClasses","InCssClasses","UnsubscribeReason__symbol","isUnsubscribeReason","_control","_sources","classes","mergeInCssClassesMap","classesSent","flag","delta","redelta","undelta","_schedule","controlSchedule","names","inCssClassesSource","classesSupply","classList","updateClasses","defaultInCssErrorMarks","defaultInCssHasError","errors","inCssError","mark","when","hasError","marks","inCssInfo","cls","md","vl","st","valid"],"mappings":"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"}