{"version":3,"file":"wesib.026f685a.js","sources":["../../node_modules/@wesib/wesib/src/boot/bootstrap-context.key.impl.ts","../../node_modules/@wesib/wesib/src/boot/bootstrap-context.ts","../../node_modules/@wesib/wesib/src/boot/bootstrap-default.ts","../../node_modules/@wesib/wesib/src/component/definition/component-factory.ts","../../node_modules/@wesib/wesib/src/boot/globals/bootstrap-window.ts","../../node_modules/@wesib/wesib/src/boot/globals/bootstrap-root.ts","../../node_modules/@wesib/wesib/src/boot/globals/default-namespace-aliaser.ts","../../node_modules/@wesib/wesib/src/boot/globals/default-render-scheduler.ts","../../node_modules/@wesib/wesib/src/common/types.impl.ts","../../node_modules/@wesib/wesib/src/common/array-set.ts","../../node_modules/@wesib/wesib/src/common/classes.ts","../../node_modules/@wesib/wesib/src/common/decorators.ts","../../node_modules/@wesib/wesib/src/common/reflect.ts","../../node_modules/@wesib/wesib/src/common/functions.ts","../../node_modules/@wesib/wesib/src/common/is-element.ts","../../node_modules/@wesib/wesib/src/common/meta-accessor.ts","../../node_modules/@wesib/wesib/src/common/promises.ts","../../node_modules/@wesib/wesib/src/feature/feature-def.ts","../../node_modules/@wesib/wesib/src/feature/feature.decorator.ts","../../node_modules/@wesib/wesib/src/feature/feature-context.ts","../../node_modules/@wesib/wesib/src/feature/feature-needs-error.ts","../../node_modules/@wesib/wesib/src/component/component-def.ts","../../node_modules/@wesib/wesib/src/component/component.decorator.ts","../../node_modules/@wesib/wesib/src/component/component-context.key.impl.ts","../../node_modules/@wesib/wesib/src/component/component-event.key.impl.ts","../../node_modules/@wesib/wesib/src/component/content-root.ts","../../node_modules/@wesib/wesib/src/component/state-updater.ts","../../node_modules/@wesib/wesib/src/component/component-context.ts","../../node_modules/@wesib/wesib/src/component/component-event.ts","../../node_modules/@wesib/wesib/src/component/component-property.decorator.ts","../../node_modules/@wesib/wesib/src/boot/globals/element-adapter.ts","../../node_modules/@wesib/wesib/src/boot/globals/element-observer.ts","../../node_modules/@wesib/wesib/src/boot/impl/component-factory.symbol.impl.ts","../../node_modules/@wesib/wesib/src/component/definition/custom-elements.ts","../../node_modules/@wesib/wesib/src/component/definition/definition.context.key.impl.ts","../../node_modules/@wesib/wesib/src/component/definition/element-def.ts","../../node_modules/@wesib/wesib/src/component/definition/definition-context.ts","../../node_modules/@wesib/wesib/src/boot/impl/bootstrap-context-registry.impl.ts","../../node_modules/@wesib/wesib/src/boot/impl/component-context-registry.impl.ts","../../node_modules/@wesib/wesib/src/boot/impl/definition-context-registry.impl.ts","../../node_modules/@wesib/wesib/src/boot/impl/post-def-setup.impl.ts","../../node_modules/@wesib/wesib/src/boot/impl/when-component.impl.ts","../../node_modules/@wesib/wesib/src/boot/impl/element-builder.impl.ts","../../node_modules/@wesib/wesib/src/component/component-mount.ts","../../node_modules/@wesib/wesib/src/boot/impl/unloader.impl.ts","../../node_modules/@wesib/wesib/src/feature/loader/component-registry.impl.ts","../../node_modules/@wesib/wesib/src/feature/loader/feature-loader.impl.ts","../../node_modules/@wesib/wesib/src/feature/loader/feature-request.impl.ts","../../node_modules/@wesib/wesib/src/feature/loader/feature-requester.impl.ts","../../node_modules/@wesib/wesib/src/boot/bootstrap/bootstrap-components.ts","../../node_modules/@wesib/wesib/src/feature/feature-ref.ts","../../node_modules/@wesib/wesib/src/feature/attributes/attribute-descriptor.ts","../../node_modules/@wesib/wesib/src/feature/attributes/attribute-path.ts","../../node_modules/@wesib/wesib/src/feature/attributes/attribute-state-update.impl.ts","../../node_modules/@wesib/wesib/src/feature/attributes/attribute-registry.impl.ts","../../node_modules/@wesib/wesib/src/feature/attributes/attributes-support.feature.ts","../../node_modules/@wesib/wesib/src/feature/attributes/attributes.decorator.ts","../../node_modules/@wesib/wesib/src/feature/state/component-state.ts","../../node_modules/@wesib/wesib/src/feature/state/state-support.feature.ts","../../node_modules/@wesib/wesib/src/feature/attributes/track-attribute.ts","../../node_modules/@wesib/wesib/src/feature/dom-properties/dom-property-descriptor.ts","../../node_modules/@wesib/wesib/src/feature/dom-properties/dom-property-registry.impl.ts","../../node_modules/@wesib/wesib/src/feature/dom-properties/dom-properties-support.feature.ts","../../node_modules/@wesib/wesib/src/feature/dom-properties/dom-property-path.ts","../../node_modules/@wesib/wesib/src/feature/dom-properties/property-state-update.impl.ts","../../node_modules/@wesib/wesib/src/feature/dom-properties/dom-property.decorator.ts","../../node_modules/@wesib/wesib/src/feature/dom-properties/dom-property-descriptor.impl.ts","../../node_modules/@wesib/wesib/src/feature/render/element-render.ts","../../node_modules/@wesib/wesib/src/feature/render/render.decorator.ts","../../node_modules/@wesib/wesib/src/wesib.ns.ts","../../node_modules/@wesib/generic/src/fetch/fetch-agent-key.impl.ts","../../node_modules/@wesib/generic/src/fetch/http-fetch-agent.ts","../../node_modules/@wesib/generic/src/fetch/http-fetch.impl.ts","../../node_modules/@wesib/generic/src/fetch/http-fetch.ts","../../node_modules/@wesib/generic/src/hierarchy/hierarchy-updates.impl.ts","../../node_modules/@wesib/generic/src/hierarchy/hierarchy-context.ts","../../node_modules/@wesib/generic/src/hierarchy/hierarchy-registry.impl.ts","../../node_modules/@wesib/generic/src/tree/element-node.ts","../../node_modules/@wesib/generic/src/tree/element-node-list.ts","../../node_modules/@wesib/generic/src/tree/element-node-list.impl.ts","../../node_modules/@wesib/generic/src/tree/node-attributes.impl.ts","../../node_modules/@wesib/generic/src/tree/node-properties.impl.ts","../../node_modules/@wesib/generic/src/tree/element-node.impl.ts","../../node_modules/@wesib/generic/src/tree/component-tree-support.feature.ts","../../node_modules/@wesib/generic/src/navigation/navigation.ts","../../node_modules/@wesib/generic/src/navigation/page-param.ts","../../node_modules/@wesib/generic/src/navigation/page-param-context.ts","../../node_modules/@wesib/generic/src/navigation/nav-history.impl.ts","../../node_modules/@wesib/generic/src/navigation/navigation-agent.ts","../../node_modules/@wesib/generic/src/navigation/navigation.event.ts","../../node_modules/@wesib/generic/src/navigation/navigation.impl.ts","../../node_modules/@wesib/generic/src/navigation/navigation-support.feature.ts","../../node_modules/@wesib/generic/src/navigation/activate-nav-link.decorator.ts","../../node_modules/@wesib/generic/src/navigation/handle-nav-links.decorator.ts","../../node_modules/@wesib/generic/src/util/import-node.ts","../../node_modules/@wesib/generic/src/navigation/page-load/caching-page-loader.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-load-requests.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-load-agent.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-load-url-modifier.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-loader.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-load-param.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-cache-buster.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-scripts-agent.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-style-agent.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-title-agent.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-load-support.feature.ts","../../node_modules/@wesib/generic/src/navigation/page-load/include-page.decorator.ts","../../node_modules/@wesib/generic/src/input/default-in-aspects.ts","../../node_modules/@wesib/generic/src/input/input-from-control.ts","../../node_modules/@wesib/generic/src/input/convert-input.decorator.ts","../../node_modules/@wesib/generic/src/input/input-to-form.ts","../../node_modules/@wesib/generic/src/input/fill-input-form.decorator.ts","../../node_modules/@wesib/generic/src/input/on-submit.decorator.ts","../../node_modules/@wesib/generic/src/input/set-input-name.decorator.ts","../../node_modules/@wesib/generic/src/input/use-input-element.decorator.ts"],"sourcesContent":["import { SingleContextKey } from 'context-values';\nimport { BootstrapContext } from './bootstrap-context';\n\n/**\n * @internal\n */\nexport const BootstrapContext__key = (/*#__PURE__*/ new SingleContextKey<BootstrapContext>('bootstrap-context'));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues } from 'context-values';\nimport { OnEvent } from 'fun-events';\nimport { Class } from '../common';\nimport { ComponentClass, ComponentFactory } from '../component/definition';\nimport { FeatureRef } from '../feature';\nimport { BootstrapContext__key } from './bootstrap-context.key.impl';\n\n/**\n * Components bootstrap context.\n *\n * An instance of this class is passed to [[FeatureDef.Options.init]] method so that the feature can configure itself.\n *\n * Extends `BootstrapValues` interface. The values could be {@link BootstrapSetup.provide pre-configured} in feature\n * definitions.\n *\n * @category Core\n */\nexport abstract class BootstrapContext extends ContextValues {\n\n  /**\n   * A key of bootstrap context value containing the bootstrap context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<BootstrapContext> {\n    return BootstrapContext__key;\n  }\n\n  /**\n   * An `OnEvent` sender of bootstrap readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete.\n   *\n   * If bootstrap is complete already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[BootstrapContext]>;\n\n  /**\n   * Allows to wait for component definition.\n   *\n   * This corresponds to `window.customElements.whenDefined()` method.\n   *\n   * @param componentType  Component class constructor.\n   *\n   * @return A promise that is resolved to component factory when the given `componentType` is registered.\n   *\n   * @throws TypeError  If `componentType` does not contain a component definition.\n   */\n  abstract whenDefined<C extends object>(componentType: ComponentClass<C>): Promise<ComponentFactory<C>>;\n\n  /**\n   * Allows to loads the given `feature`.\n   *\n   * @param feature  The feature to load.\n   *\n   * @returns  Loaded feature reference.\n   */\n  abstract load(feature: Class): FeatureRef;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKeyDefault } from 'context-values';\nimport { BootstrapContext } from './bootstrap-context';\n\n/**\n * Provides a default value for bootstrap context key.\n *\n * @category Core\n * @param provide  A function accepting bootstrap context and target key as parameters, and returning either a default\n * value, or `null`/`undefined` if unknown.\n *\n * @returns A provider of default value for bootstrap context value key.\n */\nexport function bootstrapDefault<Value, Key extends ContextKey<any, any, any>>(\n    provide: (this: void, context: BootstrapContext, key: Key) => Value | null | undefined,\n): ContextKeyDefault<Value, Key> {\n  return (context, key) => {\n\n    const bootstrapContext = context.get(BootstrapContext);\n\n    return context === bootstrapContext ? provide(bootstrapContext, key) : bootstrapContext.get(key);\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { Class } from '../../common';\nimport { ComponentMount } from '../component-mount';\nimport { ComponentClass } from './component-class';\nimport { ElementDef } from './element-def';\n\n/**\n * @internal\n */\nconst ComponentFactory__key = (/*#__PURE__*/ new SingleContextKey<ComponentFactory>('component-factory'));\n\n/**\n * A factory of components of particular type.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class ComponentFactory<T extends object = any> {\n\n  /**\n   * A key of definition context value containing a component factory.\n   */\n  static get [ContextKey__symbol](): ContextKey<ComponentFactory> {\n    return ComponentFactory__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element class constructor.\n   *\n   * It is an error accessing this property before the element class is created, e.g. from inside of\n   * `DefinitionListener` or `ComponentDef.define()` function. In these cases you may wish to add a `whenReady()`\n   * callback.\n   */\n  abstract readonly elementType: Class;\n\n  /**\n   * Custom element definition.\n   */\n  abstract readonly elementDef: ElementDef;\n\n  /**\n   * Mounts a component to arbitrary element.\n   *\n   * This method creates a component, but instead of creating a custom element for, it mounts it to the target\n   * `element`.\n   *\n   * It is up to the features to update the target element. They can use a `ComponentContext.mount` property to check\n   * whether the component is mounted or is constructed in standard way.\n   *\n   * The constructed component will be in disconnected state. To update its connection state either update a\n   * `ComponentMount.connected` property, or use a `connectTo()` method.\n   *\n   * @param element  Target element to mount new component to.\n   *\n   * @returns New component mount.\n   *\n   * @throws Error If target element is already bound to some component.\n   */\n  abstract mountTo(element: any): ComponentMount<T>;\n\n  /**\n   * Connects a component to arbitrary element.\n   *\n   * This method does the same as `mountTo()`, but also marks the mounted component as connected.\n   *\n   * @param element  Target element to mount new component to.\n   *\n   * @returns New component mount.\n   *\n   * @throws Error If target element is already bound to some component.\n   */\n  connectTo(element: any): ComponentMount<T> {\n\n    const mount = this.mountTo(element);\n\n    mount.connected = true;\n\n    return mount;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\n\n/**\n * A window the components bootstrap is performed against.\n *\n * @category Core\n */\nexport type BootstrapWindow = Window & typeof globalThis;\n\n/**\n * A key of bootstrap context value containing a window instance the bootstrap is performed against.\n *\n * Target value defaults to current window.\n *\n * @category Core\n */\nexport const BootstrapWindow: SingleContextRef<BootstrapWindow> = (/*#__PURE__*/ new SingleContextKey(\n    'window',\n    {\n      byDefault() {\n        return window;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { BootstrapWindow } from './bootstrap-window';\n\n/**\n * A window (e.g. DOM) element all bootstrapped components belong to.\n *\n * @category Core\n */\nexport type BootstrapRoot = any;\n\n/**\n * A key of bootstrap context value containing a bootstrap root.\n *\n * Target value defaults to document body of [[BootstrapWindow]].\n *\n * @category Core\n */\nexport const BootstrapRoot: SingleContextRef<BootstrapRoot> = (/*#__PURE__*/ new SingleContextKey(\n    'bootstrap-root',\n    {\n      byDefault(ctx) {\n        return ctx.get(BootstrapWindow).document.body;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { NamespaceAliaser } from 'namespace-aliaser';\n\n/**\n * Namespace aliaser used by default.\n *\n * Maps namespaces to their unique aliases.\n *\n * @category Core\n */\nexport type DefaultNamespaceAliaser = NamespaceAliaser;\n\n/**\n * A key of bootstrap context value containing the default namespace aliaser.\n *\n * @category Core\n */\nexport const DefaultNamespaceAliaser: SingleContextRef<DefaultNamespaceAliaser> = (\n    /*#__PURE__*/ new SingleContextKey<DefaultNamespaceAliaser>('default-namespace-aliaser')\n);\n","import { FnContextKey, FnContextRef } from 'context-values/updatable';\nimport { newRenderSchedule, RenderScheduler } from 'render-scheduler';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { BootstrapWindow } from './bootstrap-window';\n\n/**\n * Default rendering tasks scheduler.\n *\n * @category Core\n */\nexport type DefaultRenderScheduler = RenderScheduler;\n\n/**\n * A key of bootstrap, definition, or component context value containing [[DefaultRenderScheduler]] instance.\n *\n * Uses the default `RenderScheduler` (`newRenderSchedule()`) for {@link BootstrapWindow bootstrap window}.\n *\n * @category Core\n */\nexport const DefaultRenderScheduler:\n    FnContextRef<Parameters<DefaultRenderScheduler>, ReturnType<DefaultRenderScheduler>> = (\n    /*#__PURE__*/ new FnContextKey<Parameters<DefaultRenderScheduler>, ReturnType<DefaultRenderScheduler>>(\n        'default-render-scheduler',\n        {\n          byDefault: bootstrapDefault(\n              context => (options = {}) => newRenderSchedule({\n                ...options,\n                window: options.window || context.get(BootstrapWindow),\n              }),\n          ),\n        },\n    )\n);\n","/**\n * @internal\n */\nexport function isArray<T>(value: T | T[]): value is T[];\n\n/**\n * @internal\n */\nexport function isArray<T>(value: T | readonly T[]): value is readonly T[];\n\nexport function isArray<T>(value: T | readonly T[]): value is T[] {\n  return Array.isArray(value);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { AIterable } from 'a-iterable';\nimport { isArray } from './types.impl';\n\n/**\n * @category Utility\n */\nexport class ArraySet<T> extends AIterable<T> {\n\n  readonly items: Set<T>;\n\n  constructor(value?: T | readonly T[]) {\n    super();\n    this.items = value == null ? new Set() : isArray(value) ? new Set(value) : new Set([value]);\n  }\n\n  get value(): T | T[] | undefined {\n    switch (this.items.size) {\n    case 0: return;\n    case 1: return this.items[Symbol.iterator]().next().value;\n    default: return [...this.items];\n    }\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.items[Symbol.iterator]();\n  }\n\n  add(...items: T[]): this {\n    items.forEach(item => this.items.add(item));\n    return this;\n  }\n\n  get size(): number {\n    return this.items.size;\n  }\n\n  merge(items: readonly T[] | T | undefined): this {\n    if (items == null) {\n      return this;\n    }\n    if (isArray(items)) {\n      return this.add(...items);\n    }\n    return this.add(items);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Arbitrary class constructor.\n *\n * @category Utility\n * @typeparam T  A type of object.\n */\nexport interface Class<T extends object = any> extends Function {\n  new(...args: any[]): T;\n  prototype: T;\n}\n\n/**\n * Detects super class of the given class optionally satisfying the given criteria.\n *\n * Traverses all class ancestors until reaches the one satisfying the given criteria, or stops when there is no more\n * ancestors.\n *\n * @category Utility\n * @param type  The class constructor to find super class of.\n * @param satisfying  The criteria of super class matching. It is a function accepting a super class constructor\n * as the only parameter and returning `true` if the given super class matches, or `false` otherwise. Always returns\n * `true` by default.\n *\n * @return A super class `satisfying` the given criteria, or `undefined` if there is no such super class, or there is no\n * super class at all (e.g. when `Object` is passed in).\n */\nexport function superClassOf(type: Class, satisfying: (type: Class) => boolean = () => true): Class | undefined {\n\n  const prototype = Object.getPrototypeOf(type.prototype);\n\n  if (prototype == null) {\n    return;\n  }\n\n  const superType = prototype.constructor as Class;\n\n  if (satisfying(superType)) {\n    return superType;\n  }\n\n  return superClassOf(superType, satisfying);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from './classes';\nimport { fieldAccessorDescriptor, PropertyAccessorDescriptor, toPropertyAccessorDescriptor } from './reflect';\n\n/**\n * Typed class decorator.\n *\n * @category Utility\n * @typeparam T  A type of class to decorate.\n */\nexport type TypedClassDecorator<T extends Class> = (type: T) => T | void;\n\n/**\n * Typed property decorator.\n *\n * @category Utility\n * @typeparam T  A type of class the decorated property belongs to.\n */\nexport type TypedPropertyDecorator<T extends Class> =\n    <V>(target: InstanceType<T>, propertyKey: string | symbol, descriptor?: TypedPropertyDescriptor<V>) => any | void;\n\n/**\n * Property decorator helper converting a field or property to the one with accessor (`get` and optionally `set`).\n *\n * @category Utility\n * @typeparam T  A type of target object.\n * @typeparam V  A property value type.\n * @param target  Target object containing the property.\n * @param propertyKey  Target property key.\n * @param desc  Target property descriptor, or `undefined` for object fields.\n * @param updateDescriptor  Descriptor updater. Accepts the accessor descriptor as the only argument. If returns\n * a descriptor, then it is applied to the property. Otherwise the target property descriptor is never updated.\n *\n * @returns Updated property descriptor to return from decorator to apply to the property, or `undefined` if there is\n * nothing to update.\n */\nexport function decoratePropertyAccessor<T, V>(\n    target: T,\n    propertyKey: string | symbol,\n    desc: TypedPropertyDescriptor<V> | undefined,\n    updateDescriptor: (desc: PropertyAccessorDescriptor<V>) => PropertyAccessorDescriptor<V>,\n): PropertyAccessorDescriptor<V> | undefined {\n\n  const isField = !desc;\n  const accessorDesc: PropertyAccessorDescriptor<V> = desc\n      ? toPropertyAccessorDescriptor(desc)\n      : fieldAccessorDescriptor(target, propertyKey as keyof T) as any;\n  const updatedDesc = updateDescriptor(accessorDesc);\n\n  if (isField && updatedDesc) {\n    Object.defineProperty(target, propertyKey, updatedDesc);\n    return;\n  }\n\n  return updatedDesc;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Converts an object field to property accessor.\n *\n * Defines a new property with the given name in the target object and returns its descriptor.\n *\n * The converted descriptor is always configurable, enumerable, and writable.\n *\n * @category Utility\n * @typeparam T  The type of target object.\n * @typeparam K  Target object property keys type.\n * @param target  The object containing target field.\n * @param fieldKey  Target field key.\n *\n * @return New property accessor descriptor.\n */\nexport function field2accessor<T, K extends keyof T>(\n    target: T,\n    fieldKey: K,\n): PropertyAccessorDescriptor<T[K]> {\n\n  const desc = fieldAccessorDescriptor(target, fieldKey);\n\n  Object.defineProperty(target, fieldKey, desc);\n\n  return desc;\n}\n\n/**\n * Creates an property accessor descriptor for the given field.\n *\n * @category Utility\n * @typeparam T  The type of target object.\n * @typeparam K  Target object property keys type.\n * @param target  The object containing target field.\n * @param fieldKey  Target field key.\n */\nexport function fieldAccessorDescriptor<T, K extends keyof T>(\n    target: T,\n    fieldKey: K,\n): PropertyAccessorDescriptor<T[K]> {\n\n  const value__symbol = Symbol(`${String(fieldKey)}:value`);\n  const initial: T[K] = target[fieldKey];\n\n  return {\n    configurable: true,\n    enumerable: true,\n    get(this: any) {\n      return value__symbol in this ? this[value__symbol] : initial;\n    },\n    set(this: any, newValue) {\n      this[value__symbol] = newValue;\n    },\n  };\n}\n\n/**\n * Property accessor descriptor. I.e. the one with `get` and `set` functions.\n *\n * @category Utility\n * @typeparam V  Property value type.\n */\nexport interface PropertyAccessorDescriptor<V> extends TypedPropertyDescriptor<V> {\n  enumerable?: boolean;\n  configurable?: boolean;\n  writable?: undefined;\n  value?: undefined;\n  get?: () => V;\n  set?: (value: V) => void;\n}\n\n/**\n * Detects whether the given property descriptor is the one of property accessor.\n *\n * @category Utility\n * @typeparam V  Property value type.\n * @param desc  Target property descriptor.\n *\n * @return `true` if the descriptor has no `value` or `writable` attributes set.\n */\nexport function isPropertyAccessorDescriptor<V>(\n    desc: TypedPropertyDescriptor<V>,\n): desc is PropertyAccessorDescriptor<V> {\n  return desc.value === undefined && desc.writable === undefined;\n}\n\n/**\n * Converts a property descriptor to property accessor descriptor.\n *\n * @category Utility\n * @typeparam V  Property value type.\n * @param desc  Target property descriptor.\n *\n * @return Either an accessor descriptor constructed from data descriptor, or `desc` if it is an accessor descriptor\n * already.\n */\nexport function toPropertyAccessorDescriptor<V>(\n    desc: TypedPropertyDescriptor<V>,\n): PropertyAccessorDescriptor<V> {\n  if (isPropertyAccessorDescriptor(desc)) {\n    return desc;\n  }\n\n  const value__symbol = Symbol('value');\n  const initial = desc.value as V;\n\n  const accessorDesc: PropertyAccessorDescriptor<V> = {\n    ...desc,\n    writable: undefined,\n    value: undefined,\n    get(this: any) {\n      return value__symbol in this ? this[value__symbol] : initial;\n    },\n  };\n\n  if (desc.writable) {\n    accessorDesc.set = function (this: any, newValue: V) {\n      this[value__symbol] = newValue;\n    };\n  }\n\n  delete accessorDesc.writable;\n  delete accessorDesc.value;\n\n  return accessorDesc;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Merges two functions by calling one after another.\n *\n * Optionally merges function call results.\n *\n * @category Utility\n * @typeparam P  Function parameter types as tuple.\n * @typeparam R  A type of function result.\n * @typeparam T  A type if `this` object expected by function.\n * @param first  The first function to call.\n * @param second  The second function to call.\n * @param merge  Optional function call results merger. Accepts two function results as arguments and returns the final\n * result. When omitted the first function call result is ignored and the second function's call result is returned.\n *\n * @return A function that calls both of the given ones and merges their results. If one of the functions is absent,\n * then just returns another one. If both are absent, then returns `undefined`.\n */\nexport function mergeFunctions<P extends any[], R, T>(\n    first: (this: T, ...args: P) => R,\n    second: ((this: T, ...args: P) => R) | undefined,\n    merge: (first: R, second: R) => R,\n): (this: T, ...args: P) => R;\n\nexport function mergeFunctions<P extends any[], R, T>(\n    first: ((this: T, ...args: P) => R) | undefined,\n    second: (this: T, ...args: P) => R,\n    merge?: (first: R, second: R) => R,\n): (this: T, ...args: P) => R;\n\nexport function mergeFunctions<P extends any[], R, T>(\n    first: ((this: T, ...args: P) => R) | undefined,\n    second: ((this: T, ...args: P) => R) | undefined,\n    merge?: (first: R, second: R) => R,\n): ((this: T, ...args: P) => R) | undefined;\n\nexport function mergeFunctions<P extends any[], R, T>(\n    first: ((this: T, ...args: P) => R) | undefined,\n    second: ((this: T, ...args: P) => R) | undefined,\n    merge: (first: R, second: R) => R = (_f, s) => s,\n): ((this: T, ...args: P) => R) | undefined {\n  if (!first) {\n    return second;\n  }\n  if (!second) {\n    return first;\n  }\n  return function (this: T, ...args: P): R {\n    return merge(\n        first.apply(this, args),\n        second.apply(this, args),\n    );\n  };\n}\n","/**\n * Checks whether the given DOM node is element.\n *\n * @category Utility\n * @param node  A DOM node to check.\n *\n * @returns `true` is `node` is element, or `false` otherwise.\n */\nexport function isElement(node: Node): node is Element {\n  return node.nodeType === Node.ELEMENT_NODE;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { flatMapIt, mapIt } from 'a-iterable';\nimport { Class, superClassOf } from './classes';\n\n/**\n * @category Utility\n */\nexport abstract class MetaAccessor<M, S = M> {\n\n  readonly symbol: symbol;\n\n  protected constructor(symbol: symbol) {\n    this.symbol = symbol;\n  }\n\n  own(type: Class): M | undefined {\n    // eslint-disable-next-line no-prototype-builtins\n    return type.hasOwnProperty(this.symbol) ? (type as any)[this.symbol] : undefined;\n  }\n\n  of(type: Class): M | undefined {\n\n    const ownDef: M | undefined = this.own(type);\n    const superType = superClassOf(type);\n    const superDef = superType && this.of(superType);\n\n    return ownDef ? (superDef ? this.merge([superDef, ownDef]) : ownDef) : superDef;\n  }\n\n  define<C extends Class>(type: C, sources: Iterable<S>): C {\n\n    const prevMeta = this.own(type);\n    const updates = mapIt(sources, source => this.meta(source, type));\n    const newMeta: M = this.merge(prevMeta ? flatMapIt([[prevMeta], updates]) : updates);\n\n    Object.defineProperty(\n        type,\n        this.symbol,\n        {\n          configurable: true,\n          value: newMeta,\n        },\n    );\n\n    return type;\n  }\n\n  abstract merge(metas: Iterable<M>): M;\n\n  protected abstract meta(source: S, type: Class): M;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * @category Utility\n */\nexport class PromiseResolver<T = void> {\n\n  readonly promise: Promise<T>;\n  private _resolve!: (value: T) => void;\n  private _reject!: (error: any) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  resolve(value: T): void {\n    this._resolve(value);\n  }\n\n  reject(error: any): void {\n    this._reject(error);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { itsReduction } from 'a-iterable';\nimport { BootstrapSetup } from '../boot';\nimport { ArraySet, Class, mergeFunctions, MetaAccessor } from '../common';\nimport { FeatureContext } from './feature-context';\n\n/**\n * A key of a property holding a feature definition within its class constructor.\n *\n * @category Core\n */\nexport const FeatureDef__symbol = (/*#__PURE__*/ Symbol('feature-def'));\n\n/**\n * Feature definition.\n *\n * This can be one of:\n * - feature definition options object,\n * - feature definition holder, or\n * - feature definition factory.\n *\n * @category Core\n */\nexport type FeatureDef =\n    | FeatureDef.Options\n    | FeatureDef.Holder\n    | FeatureDef.Factory;\n\nexport namespace FeatureDef {\n\n  /**\n   * Feature definition options.\n   */\n  export interface Options {\n\n    readonly [FeatureDef__symbol]?: undefined;\n\n    /**\n     * Features this one requires.\n     */\n    readonly needs?: Class | readonly Class[];\n\n    /**\n     * Features this one provides.\n     *\n     * The feature always provides itself.\n     */\n    readonly has?: Class | readonly Class[];\n\n    /**\n     * Sets up bootstrap.\n     *\n     * This method is called before bootstrap context created.\n     *\n     * @param setup  Bootstrap setup.\n     */\n    setup?(setup: BootstrapSetup): void;\n\n    /**\n     * Bootstraps this feature by calling the given bootstrap context constructed.\n     *\n     * @param context  Feature initialization context.\n     */\n    init?(context: FeatureContext): void;\n\n  }\n\n  /**\n   * Feature definition holder.\n   */\n  export interface Holder {\n\n    /**\n     * The feature definition this holder contains.\n     */\n    readonly [FeatureDef__symbol]: FeatureDef;\n\n  }\n\n  /**\n   * Feature definition factory.\n   */\n  export interface Factory {\n\n    /**\n     * Builds feature definition.\n     *\n     * @param featureType  A feature class constructor to build definition for.\n     *\n     * @returns Built feature definition.\n     */\n    [FeatureDef__symbol](featureType: Class): FeatureDef;\n\n  }\n\n}\n\n/**\n * @internal\n */\nclass FeatureMeta extends MetaAccessor<FeatureDef.Options, FeatureDef> {\n\n  constructor() {\n    super(FeatureDef__symbol);\n  }\n\n  merge(defs: Iterable<FeatureDef.Options>): FeatureDef.Options {\n    return itsReduction<FeatureDef.Options, FeatureDef.Options>(\n        defs,\n        (prev, def) => ({\n          needs: new ArraySet(prev.needs).merge(def.needs).value,\n          has: new ArraySet(prev.has).merge(def.has).value,\n          setup: mergeFunctions<[BootstrapSetup], void, Class>(prev.setup, def.setup),\n          init: mergeFunctions<[FeatureContext], void, Class>(prev.init, def.init),\n        }),\n        {},\n    );\n  }\n\n  meta(source: FeatureDef, type: Class): FeatureDef.Options {\n\n    const def = source[FeatureDef__symbol];\n\n    return def == null\n        ? source as FeatureDef.Options\n        : this.meta(\n            typeof def === 'function' ? (source as FeatureDef.Factory)[FeatureDef__symbol](type) : def,\n            type,\n        );\n  }\n\n}\n\n/**\n * @internal\n */\nconst featureMeta = (/*#__PURE__*/ new FeatureMeta());\n\n/**\n * @internal\n */\nconst noFeatureDef: FeatureDef.Factory = {\n  [FeatureDef__symbol]() {\n    return {};\n  },\n};\n\n/**\n * @category Core\n */\nexport const FeatureDef = {\n\n  /**\n   * Extracts feature definition options from its type.\n   *\n   * @param featureType  Target feature class constructor.\n   *\n   * @returns Feature definition options. May be empty when there is no feature definition found in the given\n   * `featureType`.\n   */\n  of(this: void, featureType: Class): FeatureDef.Options {\n    return featureMeta.of(featureType) || {};\n  },\n\n  /**\n   * Builds feature definition options for the given feature class.\n   *\n   * @param featureType  Target feature class constructor.\n   * @param def  A feature definition.\n   *\n   * @returns Feature definition options.\n   */\n  for(this: void, featureType: Class, def: FeatureDef): FeatureDef.Options {\n    return featureMeta.meta(def, featureType);\n  },\n\n  /**\n   * Merges multiple feature definition options.\n   *\n   * @param defs  Feature definition options to merge.\n   *\n   * @returns Merged feature definition options.\n   */\n  merge(this: void, ...defs: readonly FeatureDef.Options[]): FeatureDef.Options {\n    return featureMeta.merge(defs);\n  },\n\n  /**\n   * Merges multiple feature definitions.\n   *\n   * @param defs  Feature definitions to merge.\n   *\n   * @returns Merged feature definition.\n   */\n  all(this: void, ...defs: readonly FeatureDef[]): FeatureDef {\n    return itsReduction<FeatureDef, FeatureDef.Factory>(\n        defs,\n        (prev, def) => ({\n          [FeatureDef__symbol](featureType: Class) {\n            return FeatureDef.merge(\n                FeatureDef.for(featureType, prev),\n                FeatureDef.for(featureType, def),\n            );\n          },\n        }),\n        noFeatureDef,\n    );\n  },\n\n  /**\n   * Defines a feature.\n   *\n   * Either creates new or extends an existing feature definition and stores it under `[FeatureDef__symbol]` key.\n   *\n   * @typeparam T  Feature type.\n   * @param featureType  Feature class constructor.\n   * @param defs  Feature definitions.\n   *\n   * @returns The `type` instance.\n   */\n  define<T extends Class>(this: void, featureType: T, ...defs: readonly FeatureDef[]): T {\n    return featureMeta.define(featureType, defs);\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class, TypedClassDecorator } from '../common';\nimport { FeatureDef } from './feature-def';\n\n/**\n * Feature class decorator.\n *\n * Decorate a class with this decorator to define it as a feature like this:\n * ```TypeScript\n * @Feature({ needs: [OtherFeature, MyComponent] })\n * class MyFeature {\n *   // ...\n * }\n * ```\n *\n * Such feature can be passed to [[bootstrapComponents]] function or referenced by other features.\n *\n * This is an alternative to direct call to [[FeatureDef.define]] method.\n *\n * @category Core\n * @typeparam T  A type of decorated feature class.\n * @param defs  Feature definitions.\n *\n * @returns A feature class decorator.\n */\nexport function Feature<T extends Class = any>(...defs: FeatureDef[]): TypedClassDecorator<T> {\n  return (type: T) => FeatureDef.define(type, ...defs);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValueSpec, SingleContextKey } from 'context-values';\nimport { OnEvent } from 'fun-events';\nimport { BootstrapContext, BootstrapSetup } from '../boot';\nimport { Class } from '../common';\nimport { ComponentContext } from '../component';\nimport { ComponentClass, ComponentFactory, DefinitionContext, DefinitionSetup } from '../component/definition';\nimport { FeatureRef } from './feature-ref';\n\n/**\n * @internal\n */\nconst FeatureContext__key = (/*#__PURE__*/ new SingleContextKey<FeatureContext>('feature-context'));\n\n/**\n * Feature initialization context.\n *\n * @category Core\n */\nexport abstract class FeatureContext extends BootstrapContext implements BootstrapSetup {\n\n  /**\n   * A key of feature context value containing the feature context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<FeatureContext> {\n    return FeatureContext__key;\n  }\n\n  /**\n   * Feature class this context is created for.\n   */\n  abstract readonly feature: Class;\n\n  abstract readonly whenReady: OnEvent<[FeatureContext]>;\n\n  abstract readonly onDefinition: OnEvent<[DefinitionContext]>;\n\n  abstract readonly onComponent: OnEvent<[ComponentContext]>;\n\n  /**\n   * Provides bootstrap context value.\n   *\n   * Note that this happens when bootstrap context already exists. To provide a value before bootstrap context created\n   * a [[BootstrapSetup.provide]] method can be used.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  abstract provide<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<BootstrapContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract perDefinition<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<DefinitionContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract perComponent<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<ComponentContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract setupDefinition<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionSetup]>;\n\n  /**\n   * Defines a component.\n   *\n   * Creates a custom element according to component definition, and registers it with custom elements registry.\n   *\n   * Note that custom element definition will happen only when all features configuration complete.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Component class constructor.\n   *\n   * @return Custom element class constructor registered as custom element.\n   *\n   * @throws TypeError  If `componentType` does not contain a component definition.\n   */\n  abstract define<T extends object>(componentType: ComponentClass<T>): void;\n\n  whenDefined<C extends object>(componentType: ComponentClass<C>): Promise<ComponentFactory<C>> {\n    return this.get(BootstrapContext).whenDefined(componentType);\n  }\n\n  load(feature: Class): FeatureRef {\n    return this.get(BootstrapContext).load(feature);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '../common';\n\n/**\n * Feature need.\n *\n * Indicates why one feature needs another one. The reason can be one of:\n *\n * - `needs` when feature {@link FeatureDef.Options.needs depends} on another one, or\n * - `has` when feature {@link FeatureDef.Options.has provides} another one.\n *\n * @category Core\n */\nexport type FeatureNeed = [Class, 'needs' | 'has', Class];\n\n/**\n * An error in feature needs. I.e. circular dependency.\n *\n * @category Core\n */\nexport class FeatureNeedsError extends Error {\n\n  /**\n   * Feature needs causing this error.\n   */\n  readonly needs: readonly FeatureNeed[];\n\n  /**\n   * Constructs feature needs error.\n   *\n   * @param needs  Feature needs causing the error.\n   */\n  constructor(needs: readonly FeatureNeed[]) {\n    super(\n        'Circular feature needs: ' + needs.reduce(\n        (\n            prev,\n            [feature, reason, need],\n        ) => (prev ? prev : feature.name) + ` ${reason} ${need.name}`,\n        '',\n        ),\n    );\n    this.needs = needs;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { itsReduction } from 'a-iterable';\nimport { isQualifiedName, QualifiedName } from 'namespace-aliaser';\nimport { mergeFunctions, MetaAccessor } from '../common';\nimport { FeatureDef, FeatureDef__symbol } from '../feature';\nimport { ComponentClass, DefinitionContext, DefinitionSetup, ElementDef } from './definition';\n\n/**\n * A key of a property holding a component definition within its class constructor.\n *\n * @category Core\n */\nexport const ComponentDef__symbol = (/*#__PURE__*/ Symbol('component-def'));\n\n/**\n * Component definition.\n *\n * A custom element class will be created for each registered component in accordance to this definition.\n *\n * This can be one of:\n * - custom element name (possibly qualified),\n * - component definition options,\n * - component definition holder,\n * - component definition factory,\n * - feature definition holder, or\n * - feature definition factory.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport type ComponentDef<T extends object = any> =\n    | QualifiedName\n    | ComponentDef.Options<T>\n    | ComponentDef.Holder<T>\n    | ComponentDef.Factory<T>\n    | FeatureDef.Holder\n    | FeatureDef.Factory;\n\nexport namespace ComponentDef {\n\n  /**\n   * Component definition options.\n   */\n  export interface Options<T extends object = any> {\n\n    readonly [ComponentDef__symbol]?: undefined;\n\n    /**\n     * Custom element name.\n     *\n     * The name may belong to some namespace to avoid naming conflicts. I.e. it can be either a string, or\n     * name/namespace tuple.\n     *\n     * When omitted an anonymous component will be registered. Such component is not bound to custom element, but it\n     * still can be mounted.\n     */\n    readonly name?: QualifiedName;\n\n    /**\n     * Existing element to extend by custom one.\n     */\n    readonly extend?: ElementDef.Extend;\n\n    /**\n     * Additional feature definition options.\n     */\n    readonly feature?: FeatureDef.Options;\n\n    /**\n     * Sets up component definition.\n     *\n     * This method is called before component definition context constructed.\n     *\n     * @param setup  Component definition setup.\n     */\n    setup?(setup: DefinitionSetup<T>): void;\n\n    /**\n     * Defines this component by calling the given component definition context methods.\n     *\n     * This function is called before the custom element is defined.\n     *\n     * @param context  Component definition context.\n     */\n    define?(context: DefinitionContext<T>): void;\n\n  }\n\n  /**\n   * Component definition holder.\n   *\n   * @typeparam T  A type of component.\n   */\n  export interface Holder<T extends object = any> {\n\n    /**\n     * The component definition this holder contains.\n     */\n    readonly [ComponentDef__symbol]: ComponentDef<T>;\n\n  }\n\n  /**\n   * Component definition factory.\n   *\n   * @typeparam T  A type of component.\n   */\n  export interface Factory<T extends object = any> {\n\n    /**\n     * Builds component definition.\n     *\n     * @param componentType  A component class constructor to build definition for.\n     *\n     * @returns Built component definition.\n     */\n    [ComponentDef__symbol](componentType: ComponentClass<T>): ComponentDef<T>;\n\n  }\n\n}\n\n/**\n * @internal\n */\nclass ComponentMeta extends MetaAccessor<ComponentDef.Options, ComponentDef> {\n\n  constructor() {\n    super(ComponentDef__symbol);\n  }\n\n  merge<T extends object>(defs: Iterable<ComponentDef.Options<T>>): ComponentDef.Options<T> {\n    return itsReduction<ComponentDef.Options<T>, ComponentDef.Options<T>>(\n        defs,\n        (prev, def) => ({\n          ...prev,\n          ...def,\n          setup: mergeFunctions(prev.setup, def.setup),\n          define: mergeFunctions(prev.define, def.define),\n          feature: prev.feature\n              ? def.feature ? FeatureDef.merge(prev.feature, def.feature) : prev.feature\n              : def.feature,\n        }),\n        {},\n    );\n  }\n\n  meta<T extends object>(source: ComponentDef<T>, componentType: ComponentClass<T>): ComponentDef.Options<T> {\n\n    const def = (source as any)[ComponentDef__symbol];\n\n    if (def != null) {\n      return this.meta(\n          typeof def === 'function' ? (source as ComponentDef.Factory<T>)[ComponentDef__symbol](componentType) : def,\n          componentType,\n      );\n    }\n    if ((source as any)[FeatureDef__symbol] != null) {\n      return {\n        feature: FeatureDef.for(componentType, source as FeatureDef),\n      };\n    }\n    if (isQualifiedName(source)) {\n      return { name: source };\n    }\n\n    return source as ComponentDef.Options;\n  }\n\n}\n\n/**\n * @internal\n */\nconst componentMeta = (/*#__PURE__*/ new ComponentMeta());\n\n/**\n * @internal\n */\nconst noComponentDef: ComponentDef.Factory = {\n  [ComponentDef__symbol]() {\n    return {};\n  },\n};\n\n/**\n * @category Core\n */\nexport const ComponentDef = {\n\n  /**\n   * Extracts component definition options from its type.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Target component class constructor.\n   *\n   * @returns Component definition options. May be empty if there is not definition attached to component type.\n   */\n  of<T extends object>(this: void, componentType: ComponentClass<T>): ComponentDef.Options<T> {\n    return componentMeta.of(componentType) as ComponentDef.Options<T> || {};\n  },\n\n  /**\n   * Builds component definition options for the given component class.\n   *\n   * @param componentType  Target component class constructor.\n   * @param source  A source of component definition.\n   *\n   * @returns Component definition.\n   */\n  for<T extends object>(\n      this: void,\n      componentType: ComponentClass<T>,\n      source: ComponentDef<T>,\n  ): ComponentDef.Options<T> {\n    return componentMeta.meta(source, componentType);\n  },\n\n  /**\n   * Merges multiple component definition options.\n   *\n   * @typeparam T  A type of component.\n   * @param defs  Component definition options to merge.\n   *\n   * @returns Merged component definition options.\n   */\n  merge<T extends object>(this: void, ...defs: ComponentDef.Options<T>[]): ComponentDef.Options<T> {\n    return componentMeta.merge(defs);\n  },\n\n  /**\n   * Merges multiple component definitions.\n   *\n   * @typeparam T  A type of component.\n   * @param defs  Component definitions to merge.\n   *\n   * @returns Merged component definition.\n   */\n  all<T extends object>(this: void, ...defs: ComponentDef<T>[]): ComponentDef<T> {\n    return itsReduction<ComponentDef<T>, ComponentDef.Factory<T>>(\n        defs,\n        (prev, def) => ({\n          [ComponentDef__symbol](componentType: ComponentClass<T>) {\n            return ComponentDef.merge(\n                ComponentDef.for(componentType, prev),\n                ComponentDef.for(componentType, def),\n            );\n          },\n        }),\n        noComponentDef,\n    );\n  },\n\n  /**\n   * Defines a component.\n   *\n   * Either assigns new or extends existing component definition and stores it under [[ComponentDef__symbol]] key.\n   *\n   * Each component can be passed directly to [[bootstrapComponents]] function or added as a requirement\n   * of another feature.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Component class constructor.\n   * @param defs  Component definitions.\n   *\n   * @returns The `type` instance.\n   */\n  define<T extends ComponentClass>(\n      this: void,\n      componentType: T,\n      ...defs: ComponentDef<InstanceType<T>>[]\n  ): T {\n    return componentMeta.define(componentType, defs);\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '../common';\nimport { ComponentDef, ComponentDef__symbol } from './component-def';\nimport { ComponentClass } from './definition';\n\n/**\n * Component decorator interface.\n *\n * In addition to being a decorator for component class, it may also serve as {@link ComponentDef component definition}.\n * Thus it can be added as parameter to {@link Component @Component} decorator, or used as class decorator by itself.\n *\n * Constructed by [[Component]] function.\n *\n * @category Core\n * @typeparam T  A type of decorated component class.\n */\nexport type ComponentDecorator<T extends ComponentClass = Class> =\n    & ((this: void, type: T) => T | void)\n    & ComponentDef<InstanceType<T>>;\n\n/**\n * Decorator of component class.\n *\n * Decorated class becomes component:\n * ```TypeScript\n * @Component({ name: 'my-element' })\n * class MyComponent {\n *   // ...\n * }\n * ```\n *\n * Such component can be registered with [[FeatureContext.define]] method or used as a feature, e.g. passed to\n * [[bootstrapComponents]] function, or added to [[FeatureDef.Options.needs]] property of another feature.\n *\n * This is an alternative to direct call to [[ComponentDef.Options.define]] method.\n *\n * @category Core\n * @typeparam T  A type of decorated component class.\n * @param defs  Component definitions.\n *\n * @returns A component class decorator.\n */\nexport function Component<T extends ComponentClass = Class>(\n    ...defs: ComponentDef<InstanceType<T>>[]\n): ComponentDecorator<T> {\n\n  const decorator = ((type: T) => ComponentDef.define(type, ...defs)) as ComponentDecorator<T>;\n  const def = decorator as ComponentDef.Factory<InstanceType<T>>;\n\n  def[ComponentDef__symbol] = () => ComponentDef.all(...defs);\n\n  return decorator;\n}\n","import { SingleContextKey } from 'context-values';\nimport { ComponentContext } from './component-context';\n\n/**\n * @internal\n */\nexport const ComponentContext__key = (/*#__PURE__*/ new SingleContextKey<ComponentContext>('component-context'));\n","import { SingleContextKey } from 'context-values';\nimport { eventSupplyOf } from 'fun-events';\nimport { DomEventDispatcher, OnDomEvent } from 'fun-events/dom';\nimport { ComponentContext__key } from './component-context.key.impl';\nimport { ComponentEventDispatcher } from './component-event';\n\n/**\n * @internal\n */\nexport const ComponentEventDispatcher__key = (/*#__PURE__*/ new SingleContextKey<ComponentEventDispatcher>(\n    'component-event-dispatcher',\n    {\n      byDefault(values) {\n\n        const context = values.get(ComponentContext__key);\n        const dispatcher = new DomEventDispatcher(context.element);\n\n        eventSupplyOf(dispatcher).needs(context);\n\n        return {\n          dispatch(event: Event): boolean {\n            return dispatcher.dispatch(event);\n          },\n          on<E extends Event>(type: string): OnDomEvent<E> {\n            return dispatcher.on(type);\n          },\n        };\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { ComponentContext__key } from './component-context.key.impl';\n\n/**\n * Component content root node.\n *\n * @category Core\n */\nexport type ContentRoot = any;\n\n/**\n * A key of component context value containing a component root element.\n *\n * This is an element itself by default. But can be overridden e.g. by {@link AttachShadow @AttachShadow} decorator.\n *\n * @category Core\n */\nexport const ContentRoot: SingleContextRef<ContentRoot> = (/*#__PURE__*/ new SingleContextKey<ContentRoot>(\n    'content-root',\n    {\n      byDefault(ctx) {\n        return ctx.get(ComponentContext__key).element;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { noop, valueProvider } from 'call-thru';\nimport { FnContextKey, FnContextRef } from 'context-values/updatable';\nimport { StatePath } from 'fun-events';\n\n/**\n * Component state updater function.\n *\n * @category Core\n */\nexport type StateUpdater =\n/**\n * @typeparam V  Updated value type\n * @param path  Updated state node path.\n * @param newValue  New value.\n * @param oldValue  Replaced value.\n */\n    <V>(this: void, path: StatePath, newValue: V, oldValue: V) => void;\n\n/**\n * A key of component context value containing a component state updates receiver function.\n *\n * Features are calling this function by default when component state changes, e.g. attribute value or DOM property\n * modified.\n *\n * Note that this value is not provided, unless the `StateSupport` feature is enabled.\n *\n * @category Core\n */\nexport const StateUpdater: FnContextRef<Parameters<StateUpdater>> = (/*#__PURE__*/ new FnContextKey(\n    'state-updater',\n    {\n      byDefault: valueProvider(noop),\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues } from 'context-values';\nimport { EventSupply, EventSupply__symbol, EventSupplyPeer, OnEvent, StatePath } from 'fun-events';\nimport { OnDomEvent } from 'fun-events/dom';\nimport { ComponentContext__key } from './component-context.key.impl';\nimport { ComponentEventDispatcher__key } from './component-event.key.impl';\nimport { ComponentMount } from './component-mount';\nimport { ContentRoot } from './content-root';\nimport { ComponentClass } from './definition';\nimport { StateUpdater } from './state-updater';\n\n/**\n * A key of a custom element and component properties containing a reference to component context.\n *\n * @category Core\n */\nexport const ComponentContext__symbol = (/*#__PURE__*/ Symbol('component-context'));\n\n/**\n * Component context.\n *\n * Passed to component constructor as its only parameter.\n *\n * Extends `ContextValues` interface. The values are provided by corresponding providers registered with\n * [[BootstrapSetup.perComponent]] and [[DefinitionSetup.perComponent]] methods.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class ComponentContext<T extends object = any> extends ContextValues implements EventSupplyPeer {\n\n  /**\n   * A key of component context value containing the component context instance itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<ComponentContext> {\n    return ComponentContext__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element constructed for the component according to its type.\n   *\n   * E.g. `HTMLElement` instance.\n   */\n  abstract readonly element: any;\n\n  /**\n   * A component instance.\n   *\n   * It is an error accessing this property before the component is created, e.g. from inside of component constructor\n   * or {@link DefinitionContext.whenComponent component instantiation event} receiver. A [[whenReady]] callback could\n   * be utilized to work this around.\n   */\n  abstract readonly component: T;\n\n  /**\n   * Component mount.\n   *\n   * This is defined when component is mounted to arbitrary element by [[ComponentFactory.mountTo]]. Ot is `undefined`\n   * for components created in standard way.\n   */\n  abstract readonly mount: ComponentMount<T> | undefined;\n\n  /**\n   * Whether the custom element is connected.\n   *\n   * This becomes `true` right before [[whenOn]] event is sent, and becomes `false` right before [[whenOff]] event is\n   * sent.\n   */\n  abstract readonly connected: boolean;\n\n  /**\n   * An event supply that {@link destroy destroys} component when cut off.\n   */\n  abstract readonly [EventSupply__symbol]: EventSupply;\n\n  /**\n   * An `OnEvent` sender of custom element connection events.\n   *\n   * The registered receivers are called when custom element is connected, i.e. its `connectedCallback()` method is\n   * called. If component is connected already the receiver is called immediately.\n   *\n   * Sends a connection supply that is cut off once custom element is disconnected.\n   */\n  abstract readonly whenOn: OnEvent<[EventSupply]>;\n\n  /**\n   * An `OnEvent` sender of custom element disconnection events.\n   *\n   * The registered receivers are called when custom element is disconnected, i.e. its `disconnectedCallback()` method\n   * is called. If component is ready but disconnected, the receiver is called immediately.\n   */\n  abstract readonly whenOff: OnEvent<[]>;\n\n  /**\n   * An `OnEvent` sender of component readiness event.\n   *\n   * The component is constructed shortly after custom element. So the component may not exist when requested\n   * e.g. inside component constructor or {@link DefinitionContext.whenComponent component instantiation event}\n   * receiver. The registered receiver will be notified when the component is constructed.\n   *\n   * If the component is constructed already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[this]>;\n\n  /**\n   * An `OnEvent` sender of component destruction reason event.\n   *\n   * The registered receiver is notified when [[destroy]] method is called. If the component is destroyed already\n   * the receiver is notified immediately.\n   */\n  abstract readonly whenDestroyed: OnEvent<[any]>;\n\n  /**\n   * Updates component's state.\n   *\n   * This is a shorthand for invoking a component {@link StateUpdater state updater} .\n   *\n   * Note that state update has no effect unless [[StateSupport]] feature is enabled or [[StateUpdater]] context value\n   * is provided by other means.\n   *\n   * @typeparam V  A type of changed value.\n   * @param key  Changed value key.\n   * @param newValue  New value.\n   * @param oldValue  Previous value.\n   */\n  readonly updateState: StateUpdater = updateComponentState.bind(this);\n\n  /**\n   * Extracts component context from its custom element or from component itself.\n   *\n   * @param element  Custom element instance created for the component or the component itself.\n   *\n   * @return Component context reference stored under [[ComponentContext__symbol]] key.\n   *\n   * @throws TypeError  When the given `element` does not contain component context reference.\n   */\n  static of<T extends object>(element: any): ComponentContext<T> {\n\n    const context = element[ComponentContext__symbol];\n\n    if (!context) {\n      throw TypeError(`No component context found in ${element}`);\n    }\n\n    return context;\n  }\n\n  /**\n   * Component content root.\n   *\n   * This is a shorthand for requesting a {@link ContentRoot content root} from component context.\n   */\n  get contentRoot(): any {\n    return this.get(ContentRoot);\n  }\n\n  /**\n   * Returns a `super` property value inherited from custom element parent.\n   *\n   * @param key  Target property key.\n   */\n  abstract elementSuper(key: PropertyKey): any;\n\n  /**\n   * Returns a DOM event producer for the given event type.\n   *\n   * This is a shorthand for invoking a component event producer function available under\n   * `[ComponentEventProducer.key]` key.\n   *\n   * @param type  An event type to listen for.\n   *\n   * @returns A producer of DOM event events of the given type.\n   */\n  on<E extends Event>(type: string): OnDomEvent<E> {\n    return this.get(ComponentEventDispatcher__key).on(type);\n  }\n\n  /**\n   * Dispatches an event to component element.\n   *\n   * This is a shorthand for invoking a component {@link ComponentEventDispatcher event dispatcher}.\n   *\n   * @param event  An event to dispatch.\n   */\n  dispatchEvent(event: Event): void {\n    this.get(ComponentEventDispatcher__key).dispatch(event);\n  }\n\n  /**\n   * Destroys the component.\n   *\n   * Removes element from the DOM tree. I.e. disconnects custom element first.\n   *\n   * After this method call the component should no longer be used.\n   *\n   * Note that component destruction is virtual. It is up to developer to decide when component is no longer needed.\n   *\n   * @param reason  Optional reason of destruction.\n   */\n  abstract destroy(reason?: any): void;\n\n}\n\n/**\n * @internal\n */\nfunction updateComponentState<V>(this: ComponentContext<any>, key: StatePath, newValue: V, oldValue: V): void {\n  this.get(StateUpdater)(key, newValue, oldValue);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextRef } from 'context-values';\nimport { OnDomEvent } from 'fun-events/dom';\nimport { ComponentContext } from './component-context';\nimport { ComponentEventDispatcher__key } from './component-event.key.impl';\n\n/**\n * Component event.\n *\n * Events of this type are thrown by various services to inform on component status changes.\n *\n * It is illegal to dispatch such events for elements not bound to components. It is reasonable to dispatch events\n * using [[ComponentEventDispatcher]] available in component context.\n *\n * The following event types supported:\n * - `wesib:component` is dispatched when component is bound to element. I.e. when HTML element is upgraded to custom\n *   one defined by component, or component is mounted to element. The event is dispatched when component is connected\n *   for the first time. I.e. when element is added to the document.\n *   This event bubbles and is not cancelable.\n *\n * @category Core\n * @event ComponentEvent#wesib:component\n */\nexport class ComponentEvent extends Event {\n\n  /**\n   * Target component context.\n   */\n  get context(): ComponentContext {\n    return ComponentContext.of(this.target);\n  }\n\n}\n\n/**\n * Component event dispatcher is used to listen for and dispatch component events.\n *\n * It is available in bootstrap context context.\n *\n * By default treats a component element as event target.\n *\n * @category Core\n */\nexport interface ComponentEventDispatcher {\n\n  /**\n   * Dispatches the DOM event for the given component.\n   *\n   * @param event  An event to dispatch.\n   *\n   * @returns `true` if either event's `cancelable` attribute value is `false` or its `preventDefault()` method was not\n   * invoked, or `false` otherwise.\n   */\n  dispatch(event: Event): boolean;\n\n  /**\n   * Returns an `OnDomEvent` sender of DOM events of the given type.\n   *\n   * @param type  An event type to listen for.\n   *\n   * @returns A producer of DOM event events of the given type.\n   */\n  on<E extends Event>(type: string): OnDomEvent<E>;\n\n}\n\n/**\n * A key of component context value containing component event dispatcher.\n *\n * @category Core\n */\nexport const ComponentEventDispatcher: SingleContextRef<ComponentEventDispatcher> = ComponentEventDispatcher__key;\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { valueProvider } from 'call-thru';\nimport { Class, decoratePropertyAccessor, PropertyAccessorDescriptor } from '../common';\nimport { ComponentDef, ComponentDef__symbol } from './component-def';\nimport { Component, ComponentDecorator } from './component.decorator';\nimport { ComponentClass } from './definition';\n\n/**\n * Component property decorator interface.\n *\n * Allows to construct a {@link ComponentDecorator component decorator} by declaring a virtual property to use instead\n * of decorated one.\n *\n * Constructed by [[ComponentProperty]] function.\n *\n * @category Core\n * @typeparam V  Property value type.\n * @typeparam T  A type of decorated component class.\n */\nexport interface ComponentPropertyDecorator<V, T extends ComponentClass = Class> {\n\n  /**\n   * Decorates component method.\n   *\n   * @typeparam P  Property value type.\n   * @param proto  Decorated class prototype.\n   * @param propertyKey  Decorated property key.\n   * @param descriptor  Decorated property descriptor.\n   *\n   * @returns  Either updated property descriptor, or nothing.\n   */\n  // eslint-disable-next-line\n  <P extends V>(\n      this: void,\n      proto: InstanceType<T>,\n      propertyKey: string | symbol,\n      descriptor?: TypedPropertyDescriptor<P>,\n  ): any | void;\n\n  /**\n   * Builds component decorator assuming the virtual property has the given value.\n   *\n   * @param value  Virtual property value.\n   * @param key  Virtual property key. Defaults to [[AnonymousComponentProperty__symbol]].\n   *\n   * @returns New component decorator.\n   */\n  As(\n      this: void,\n      value: V,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n  /**\n   * Builds component decorator assuming the virtual property value is provided by the given `provider`.\n   *\n   * @param provider  Virtual property read-only value provider.\n   * @param key  Virtual property key. Defaults to [[AnonymousComponentProperty__symbol]].\n   *\n   * @returns New component decorator.\n   */\n  By(\n      this: void,\n      provider: ComponentProperty.Provider<V, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n  /**\n   * Builds component decorator assuming the decorated property is available via the given `access` specifier.\n   *\n   * @param accessor  Virtual property accessor.\n   * @param key  Virtual property key. Defaults to [[AnonymousComponentProperty__symbol]].\n   *\n   * @returns New component decorator.\n   */\n  With(\n      this: void,\n      accessor: ComponentProperty.Accessor<V, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n}\n\nexport namespace ComponentProperty {\n\n  /**\n   * Component property value provider signature.\n   *\n   * This function will be called each time the property value is requested.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component.\n   */\n  export type Provider<V, T extends object = any> =\n  /**\n   * @param component  Component instance.\n   * @param key  Target property key.\n   *\n   * @returns Property value.\n   */\n      (\n          this: void,\n          component: T,\n          key: string | symbol,\n      ) => V;\n\n  /**\n   * Component property accessor.\n   *\n   * Allows to read and write property value.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component.\n   */\n  export interface Accessor<V, T extends object = any> {\n\n    /**\n     * Reads property value.\n     *\n     * May throw if the property is not readable.\n     *\n     * @param component  Target component instance.\n     * @param key  Property key.\n     *\n     * @returns Property value.\n     */\n    get(this: void, component: T, key: string | symbol): V;\n\n    /**\n     * Assigns new property value.\n     *\n     * May throw is the property is not writable.\n     *\n     * @param component  Target component instance.\n     * @param value  New property value.\n     * @param key  Property key.\n     */\n    set(this: void, component: T, value: V, key: string | symbol): void;\n\n  }\n\n  /**\n   * Component property descriptor.\n   *\n   * Passed to {@link Definer property definer} by [[ComponentProperty]] function to construct a {@link Definition\n   * property definition}.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component class.\n   */\n  export interface Descriptor<V, T extends ComponentClass = Class> {\n\n    /**\n     * Component class constructor.\n     */\n    readonly type: T;\n\n    /**\n     * Component property key.\n     */\n    readonly key: string | symbol;\n\n    /**\n     * Whether the property is initially writable.\n     *\n     * This can be changed by {@link Definition.get property read definition}.\n     */\n    readonly readable: boolean;\n\n    /**\n     * Whether the property is initially writable.\n     *\n     * This can be changed by {@link Definition.set property assignment definition}.\n     */\n    readonly writable: boolean;\n\n    /**\n     * Whether the property is initially enumerable.\n     *\n     * This can be changed by {@link Definition.enumerable property definition}.\n     */\n    readonly enumerable: boolean;\n\n    /**\n     * Whether the property is initially configurable.\n     *\n     * This can be changed by {@link Definition.configurable property definition}.\n     */\n    readonly configurable: boolean;\n\n    /**\n     * Reads property value.\n     *\n     * May throw if the property is not readable.\n     *\n     * @param component  Target component instance.\n     *\n     * @returns Property value.\n     */\n    get(this: void, component: InstanceType<T>): V;\n\n    /**\n     * Assigns new property value.\n     *\n     * May throw is the property is not writable.\n     *\n     * @param component  Target component instance.\n     * @param value  New property value.\n     */\n    set(this: void, component: InstanceType<T>, value: V): void;\n\n  }\n\n  /**\n   * Component property definition builder signature.\n   *\n   * This is a function called by [[ComponentProperty]] to define the property.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component class.\n   */\n  export type Definer<V, T extends ComponentClass = Class> =\n  /**\n   * @param descriptor  Component property descriptor.\n   *\n   * @returns Component property definition. Or nothing if the property definition is not to be changed.\n   */\n      (\n          this: void,\n          descriptor: Descriptor<V, T>,\n      ) => Definition<V, T> | void;\n\n  /**\n   * Property definition to apply to existing property.\n   *\n   * When applying to decorated property, this definition updates its definition.\n   *\n   * When applying to virtual property assumed by one of [[ComponentPropertyDescriptor]] methods, most of returned\n   * values ignored. Except for {@link Definition.componentDef component definition} and {@link Definition.access\n   * access specifier}.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component class.\n   */\n  export interface Definition<V, T extends ComponentClass = Class> {\n\n    /**\n     * Component definition to apply to component.\n     *\n     * When specified, it is used to enable certain functionality for decorated (or virtual) property.\n     */\n    readonly componentDef?: ComponentDef<InstanceType<T>>;\n\n    /**\n     * Whether to make the property enumerable.\n     *\n     * When specified, it is used as `enumerable` attribute value of decorated property descriptor.\n     */\n    readonly enumerable?: boolean;\n\n    /**\n     * Whether to make the property configurable.\n     *\n     * When specified, it is used as `configurable` attribute value of decorated property descriptor.\n     */\n    readonly configurable?: boolean;\n\n    /**\n     * Reads property value.\n     *\n     * When specified it changes how the property value is read.\n     *\n     * When neither [[get]], nor [[set]] specified, the property access does not change.\n     *\n     * @param component  Target component instance.\n     * @param key  Property key.\n     *\n     * @returns Property value.\n     */\n    get?(this: void, component: InstanceType<T>, key: string | symbol): V;\n\n    /**\n     * Assigns new property value.\n     *\n     * When specified it changes how the property value is assigned.\n     *\n     * When neither [[get]], nor [[set]] specified, the property access does not change.\n     *\n     * @param component  Target component instance.\n     * @param value  New property value.\n     * @param key  Property key.\n     */\n    set?(this: void, component: InstanceType<T>, value: V, key: string | symbol): void;\n\n  }\n\n}\n\n/**\n * Anonymous component property key.\n *\n * Used as a default virtual property key.\n *\n * @category Core\n */\nexport const AnonymousComponentProperty__symbol = (/*#__PURE__*/ Symbol('anonymous-component-property'));\n\n/**\n * Decorator of component property.\n *\n * Updates decorated property and component definition. Can be converted to {@link ComponentDecorator component\n * decorator} by calling appropriate method of returned decorator instance.\n *\n * @category Core\n * @typeparam V  Decorated property value type.\n * @typeparam T  A type of decorated component class.\n * @param define  Component property definition builder.\n *\n * @returns Component property decorator.\n */\nexport function ComponentProperty<V, T extends ComponentClass = Class>(\n    define: ComponentProperty.Definer<V, T>,\n): ComponentPropertyDecorator<V, T> {\n\n  const decorator = (\n      proto: InstanceType<T>,\n      propertyKey: string | symbol,\n      descriptor?: TypedPropertyDescriptor<V>,\n  ): any | void => decoratePropertyAccessor(\n      proto,\n      propertyKey,\n      descriptor,\n      desc => {\n\n        const { get: getValue, set: setValue } = desc;\n        const type = proto.constructor;\n        const { get, set, configurable, enumerable, componentDef = {} } = define({\n          type,\n          key: propertyKey,\n          readable: !!desc.get,\n          writable: !!desc.set,\n          enumerable: !!desc.enumerable,\n          configurable: !!desc.configurable,\n          get: getValue\n              ? ((component: InstanceType<T>) => getValue.call(component))\n              : (() => { throw new TypeError(`\"${String(propertyKey)}\" is not readable`); }),\n          set: setValue\n              ? ((component, value) => setValue.call(component, value))\n              : (() => { throw new TypeError(`\"${String(propertyKey)}\" is read-only`); }),\n        }) || {};\n\n        ComponentDef.define(type, componentDef);\n\n        const updated: PropertyAccessorDescriptor<V> = {\n          ...desc,\n          configurable: configurable ?? desc.configurable,\n          enumerable: enumerable ?? desc.enumerable,\n        };\n\n        if (get || set) {\n          updated.get = get && function (this: InstanceType<T>) {\n            return get(this, propertyKey);\n          };\n          updated.set = set && function (this: InstanceType<T>, value: V) {\n            set(this, value, propertyKey);\n          };\n        }\n\n        return updated;\n      },\n  );\n  const decorateWith = (\n      { get, set }: ComponentProperty.Accessor<V, InstanceType<T>>,\n      key: string | symbol = AnonymousComponentProperty__symbol,\n      writable: boolean,\n  ): ComponentDecorator<T> => Component({\n    [ComponentDef__symbol](type: InstanceType<T>) {\n\n      const def = define({\n        type,\n        key,\n        readable: true,\n        writable,\n        enumerable: false,\n        configurable: false,\n        get: component => get(component, key),\n        set: (component, value) => set(component, value, key),\n      });\n\n      return (def && def.componentDef) || {};\n    },\n  });\n  const By = (\n      provider: ComponentProperty.Provider<V, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T> => decorateWith(\n      ({\n        get(component, key) {\n          return provider(component, key);\n        },\n      } as ComponentProperty.Accessor<V>),\n      key,\n      false,\n  );\n\n  const result = decorator as ComponentPropertyDecorator<V, T>;\n\n  result.With = (access, key) => decorateWith(access, key, true);\n  result.By = By;\n  result.As = (value, key?) => By(valueProvider(value), key);\n\n  return result;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextValueOpts, ContextValues } from 'context-values';\nimport { ContextUpKey, ContextUpRef } from 'context-values/updatable';\nimport { AfterEvent, afterThe, EventKeeper, nextAfterEvent } from 'fun-events';\nimport { ComponentContext, ComponentContext__symbol } from '../../component';\n\n/**\n * Element adapter is a function able to convert a raw element to component. E.g. mount a component to it.\n *\n * Features may use it internally. E.g. an `AutoConnectSupport` applies it to each added DOM element.\n *\n * Multiple element adapters can be registered in bootstrap context.\n *\n * @category Core\n */\nexport type ElementAdapter =\n/**\n * @param element  Target raw element to adapt.\n *\n * @returns An adapted component's context, or `undefined` if element can not be adapted.\n */\n    (this: void, element: any) => ComponentContext | undefined;\n\n/**\n * @internal\n */\nclass ElementAdapterKey extends ContextUpKey<ElementAdapter, ElementAdapter> {\n\n  readonly upKey: ContextUpKey.UpKey<ElementAdapter, ElementAdapter>;\n\n  constructor() {\n    super('element-adapter');\n    this.upKey = this.createUpKey(\n        opts => opts.seed.keep.thru((...adapters) => {\n\n          const combined: ElementAdapter = adapters.reduce(\n              (prev, adapter) => element => prev(element) || adapter(element),\n              defaultElementAdapter,\n          );\n\n          const defaultProvider = (): AfterEvent<[ElementAdapter]> => afterThe(defaultElementAdapter);\n\n          return combined !== defaultElementAdapter\n              ? combined\n              : nextAfterEvent(opts.byDefault(defaultProvider) || defaultProvider());\n        }),\n    );\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          ElementAdapter,\n          EventKeeper<ElementAdapter[]> | ElementAdapter,\n          AfterEvent<ElementAdapter[]>>,\n  ): ElementAdapter {\n\n    let delegated: ElementAdapter;\n\n    opts.context.get(\n        this.upKey,\n        'or' in opts ? { or: opts.or != null ? afterThe(opts.or) : opts.or } : undefined,\n    )!(adapter => delegated = adapter);\n\n    return element => delegated(element);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultElementAdapter(element: any): ComponentContext {\n  return element[ComponentContext__symbol];\n}\n\n/**\n * A key of bootstrap context value containing combined [[ElementAdapter]] instance.\n *\n * @category Core\n */\nexport const ElementAdapter: ContextUpRef<ElementAdapter, ElementAdapter> = (/*#__PURE__*/ new ElementAdapterKey());\n","/**\n * @packageDocumentation\n * @module wesib/wesib\n */\nimport { filterIt, itsEach, overArray } from 'a-iterable';\nimport { FnContextKey } from 'context-values/updatable';\nimport { isElement } from '../../common';\nimport { ComponentContext__symbol, ComponentMount } from '../../component';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { ElementAdapter } from './element-adapter';\n\n/**\n * Element mutations observer.\n *\n * It is a `MutationObserver` implementation that:\n * - always observes target's children,\n * - applies {@link ElementAdapter element adapter} to added elements,\n * - tracks mounted components {@link ComponentMount.connected connection state}.\n *\n * A function constructing element observer instance could be obtained from bootstrap context.\n *\n * @category Core\n */\nexport interface ElementObserver extends MutationObserver {\n\n  /**\n   * Configures the observer callback to begin receiving notifications of changes to the DOM that match the given\n   * options.\n   * To stop the MutationObserver (so that none of its callbacks will be triggered any longer), call\n   * [[disconnect]].\n   *\n   * @param target  A DOM node within the DOM tree to watch for changes, and to be the root of a subtree of nodes\n   * to be watched.\n   * @param options  An options that describe what DOM mutations should be reported to the observer's callback.\n   */\n  observe(target: Node, options?: ElementObserverInit): void;\n\n}\n\n/**\n * A key of bootstrap context value containing a function constructing a new [[ElementObserver]] instance.\n *\n * @category Core\n */\nexport const ElementObserver: FnContextKey<[MutationCallback], ElementObserver> = (/*#__PURE__*/ new FnContextKey(\n    'element-observer',\n    {\n      byDefault: bootstrapDefault(bsContext => {\n\n        const adapter = bsContext.get(ElementAdapter);\n        class DefaultElementObserver extends MutationObserver implements ElementObserver {\n\n          constructor(callback: MutationCallback) {\n            super(mutations => {\n              mutations.forEach(mutation => {\n                itsEach(\n                    overArray(mutation.removedNodes),\n                    node => mountOf(node)?.checkConnected(),\n                );\n                itsEach(\n                    filterIt(\n                        overArray(mutation.addedNodes),\n                        isElement,\n                    ),\n                    element => adapter(element)?.mount?.checkConnected(),\n                );\n              });\n              callback(mutations, this);\n            });\n          }\n\n          observe(target: Node, options?: ElementObserverInit): void {\n            super.observe(target, { ...options, childList: true });\n          }\n\n        }\n\n        return callback => new DefaultElementObserver(callback);\n      }),\n    },\n));\n\n/**\n * Element observer initialization options.\n *\n * @category Core\n */\nexport interface ElementObserverInit extends MutationObserverInit {\n\n  /**\n   * Whether mutations to target's children are to be observed.\n   *\n   * Always `true`.\n   */\n  childList?: true;\n\n}\n\n/**\n * @internal\n */\nfunction mountOf(node: any): ComponentMount | undefined {\n  return node[ComponentContext__symbol]?.mount;\n}\n","import { ComponentClass, ComponentFactory } from '../../component/definition';\n\n/**\n * @internal\n */\nexport const ComponentFactory__symbol = (/*#__PURE__*/ Symbol('component-factory'));\n\n/**\n * @internal\n */\nexport function componentFactoryOf<T extends object>(componentType: ComponentClass<T>): ComponentFactory<T> {\n\n  const factory = (componentType as any)[ComponentFactory__symbol];\n\n  if (!factory) {\n    throw new TypeError(`Component is not defined: ${componentType}`);\n  }\n\n  return factory;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues, SingleContextKey } from 'context-values';\nimport { html__naming, isQualifiedName, QualifiedName } from 'namespace-aliaser';\nimport { BootstrapWindow, DefaultNamespaceAliaser } from '../../boot/globals';\nimport { componentFactoryOf } from '../../boot/impl/component-factory.symbol.impl';\nimport { Class, PromiseResolver } from '../../common';\nimport { ComponentClass } from './component-class';\n\n/**\n * @internal\n */\nconst CustomElements__key = (/*#__PURE__*/ new SingleContextKey<CustomElements>(\n    'custom-elements',\n    {\n      byDefault: createCustomElements,\n    },\n));\n\n/**\n * Custom elements registry.\n *\n * This is used to register custom elements.\n *\n * Typically implemented by `window.customElements`.\n *\n * @category Core\n */\nexport abstract class CustomElements {\n\n  /**\n   * A key of bootstrap context value containing a `CustomElements` instance used to register custom\n   * elements.\n   *\n   * Target value defaults to `window.customElements` from the window provided under `[BootstrapWindow.key]`.\n   */\n  static get [ContextKey__symbol](): ContextKey<CustomElements> {\n    return CustomElements__key;\n  }\n\n  /**\n   * Defines custom element.\n   *\n   * @param componentTypeOrName  A component class constructor or custom element name. The latter may belong to\n   * namespace to avoid naming conflicts.\n   * @param elementType  A constructor of custom element to define.\n   */\n  abstract define(componentTypeOrName: ComponentClass | QualifiedName, elementType: Class): void;\n\n  /**\n   * Allows to wait for component definition.\n   *\n   * This corresponds to `window.customElements.whenDefined()` method.\n   *\n   * @param componentTypeOrName  Component class constructor or custom element name possibly belonging to some\n   * namespace.\n   *\n   * @return A promise that is resolved when custom element is registered.\n   *\n   * @throws TypeError If `componentType` does not contain a component definition.\n   */\n  abstract whenDefined(componentTypeOrName: ComponentClass | QualifiedName): Promise<void>;\n\n}\n\n/**\n * @internal\n */\nfunction createCustomElements(values: ContextValues): CustomElements {\n\n  const customElements: CustomElementRegistry = values.get(BootstrapWindow).customElements;\n  const nsAlias = values.get(DefaultNamespaceAliaser);\n\n  class WindowCustomElements extends CustomElements {\n\n    define(componentTypeOrName: ComponentClass | string, elementType: Class): void {\n      if (isQualifiedName(componentTypeOrName)) {\n        customElements.define(html__naming.name(componentTypeOrName, nsAlias), elementType);\n        return;\n      }\n\n      const factory = componentFactoryOf(componentTypeOrName);\n      const { name, extend } = factory.elementDef;\n\n      if (!name) {\n        componentResolver(componentTypeOrName).resolve(undefined);\n        return; // Anonymous component.\n      }\n      if (extend && extend.name) {\n        customElements.define(\n            html__naming.name(name, nsAlias),\n            elementType,\n            {\n              extends: extend.name,\n            },\n        );\n      } else {\n        customElements.define(html__naming.name(name, nsAlias), elementType);\n      }\n    }\n\n    whenDefined(componentTypeOrName: ComponentClass | string): Promise<void> {\n      if (isQualifiedName(componentTypeOrName)) {\n        return customElements.whenDefined(html__naming.name(componentTypeOrName, nsAlias));\n      }\n\n      const factory = componentFactoryOf(componentTypeOrName);\n      const { name } = factory.elementDef;\n\n      if (!name) {\n        return componentResolver(componentTypeOrName).promise;\n      }\n\n      return customElements.whenDefined(html__naming.name(name, nsAlias));\n    }\n\n  }\n\n  return new WindowCustomElements();\n}\n\n/**\n * @internal\n */\nconst ComponentResolver__symbol = (/*#__PURE__*/ Symbol('component-resolver'));\n\n/**\n * @internal\n */\nfunction componentResolver(componentType: ComponentClass): PromiseResolver<void> {\n  return (componentType as any)[ComponentResolver__symbol]\n      || ((componentType as any)[ComponentResolver__symbol] = new PromiseResolver());\n}\n","import { SingleContextKey } from 'context-values';\nimport { DefinitionContext } from './definition-context';\n\n/**\n * @internal\n */\nexport const DefinitionContext__key = (/*#__PURE__*/ new SingleContextKey<DefinitionContext>('definition-context'));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { QualifiedName } from 'namespace-aliaser';\nimport { BootstrapWindow } from '../../boot/globals';\nimport { Class } from '../../common';\nimport { ComponentDef } from '../component-def';\nimport { DefinitionContext__key } from './definition.context.key.impl';\n\n/**\n * Custom element definition meta.\n *\n * @category Core\n */\nexport interface ElementDef {\n\n  /**\n   * Custom element name.\n   *\n   * The name may belong to some namespace to avoid naming conflicts. I.e. it can be either a string, or\n   * name/namespace tuple.\n   *\n   * When omitted an anonymous component will be registered. Such component is not bound to custom element, but it\n   * still can be mounted.\n   */\n  readonly name?: QualifiedName;\n\n  /**\n   * Existing element to extend by custom one.\n   */\n  readonly extend: ElementDef.Extend;\n\n}\n\n/**\n * A key of definition context value containing a custom element definition.\n *\n * Target value defaults to `HTMLElement` from the window provided under `[BootstrapWindow.key]`,\n * unless `ComponentDef.extend.type` is specified.\n */\nexport const ElementDef: SingleContextRef<ElementDef> = (/*#__PURE__*/ new SingleContextKey<ElementDef>(\n    'element-def',\n    {\n      byDefault(values) {\n\n        const componentType = values.get(DefinitionContext__key).componentType;\n        const { name, extend } = ComponentDef.of(componentType);\n\n        const elementExtend: ElementDef.Extend = {\n          get type() {\n            return extend && extend.type || values.get(BootstrapWindow).HTMLElement;\n          },\n          get name() {\n            return extend && extend.name;\n          },\n        };\n\n        return {\n          get name() {\n            return name;\n          },\n          get extend() {\n            return elementExtend;\n          },\n        };\n      },\n    },\n));\n\n/**\n * @category Core\n */\nexport namespace ElementDef {\n\n  /**\n   * The definition of element to extend by custom one.\n   */\n  export interface Extend {\n\n    /**\n     * The class constructor of element to extend.\n     */\n    readonly type: Class;\n\n    /**\n     * The name of element to extend.\n     *\n     * This is to support `as` attribute of standard HTML element. Note that this is not supported by polyfills.\n     */\n    readonly name?: string;\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues, ContextValueSpec } from 'context-values';\nimport { OnEvent } from 'fun-events';\nimport { Class } from '../../common';\nimport { ComponentContext } from '../component-context';\nimport { ComponentClass } from './component-class';\nimport { DefinitionContext__key } from './definition.context.key.impl';\nimport { ElementDef } from './element-def';\n\n/**\n * Component definition context.\n *\n * Extends `ContextValues` interface. The values are provided by corresponding providers registered with\n * [[BootstrapSetup.perDefinition]] and [[DefinitionSetup.perDefinition]] methods. All [[BootstrapContext]] values\n * are available too.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class DefinitionContext<T extends object = any> extends ContextValues {\n\n  /**\n   * A key of definition context value containing the definition context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<DefinitionContext> {\n    return DefinitionContext__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element class constructor.\n   *\n   * It is an error accessing this property before the element class is created, e.g. from inside of\n   * `DefinitionListener` or `ComponentDef.define()` function. In these cases you may wish to add a `whenReady()`\n   * callback.\n   */\n  abstract readonly elementType: Class;\n\n  /**\n   * An `OnEvent` sender of component definition context upon its readiness.\n   *\n   * The custom element class is not constructed until component definition is complete.\n   * The registered receiver will be notified when the custom element class is constructed.\n   *\n   * If the custom element class is constructed already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[this]>;\n\n  /**\n   * An `OnEvent` sender of component context upon its instantiation.\n   *\n   * If component instantiated after the receiver is registered, that receiver would receive an instantiated component's\n   * context immediately.\n   *\n   * If component already exists when the receiver is registered, that receiver would receive instantiated component's\n   * context only when/if component is {@link ComponentContext.whenOn connected}. This is to prevent resource leaking\n   * on disconnected components that may be never used again.\n   */\n  abstract readonly whenComponent: OnEvent<[ComponentContext<T>]>;\n\n  /**\n   * Custom element definition.\n   */\n  get elementDef(): ElementDef {\n    return this.get(ElementDef);\n  }\n\n  /**\n   * Provides a value available in the context of each component of the defined component type.\n   *\n   * @typeparam Deps  A type of dependencies.\n   * @typeparam Src  The type of context value sources.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Component context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  abstract perComponent<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<ComponentContext<T>, any, Deps, Src, Seed>,\n  ): () => void;\n\n}\n","import { ContextKey, ContextKey__symbol, ContextRegistry, ContextValues, SingleContextKey } from 'context-values';\nimport { BootstrapContext } from '../bootstrap-context';\n\nconst BootstrapContextRegistry__key = (\n    /*#__PURE__*/ new SingleContextKey<BootstrapContextRegistry>('bootstrap-context-registry')\n);\n\n/**\n * @internal\n */\nexport class BootstrapContextRegistry extends ContextRegistry<BootstrapContext> {\n\n  static get [ContextKey__symbol](): ContextKey<BootstrapContextRegistry> {\n    return BootstrapContextRegistry__key;\n  }\n\n  readonly values: ContextValues;\n\n  static create(): BootstrapContextRegistry {\n    return new BootstrapContextRegistry();\n  }\n\n  private constructor() {\n    super();\n    this.provide({ a: BootstrapContextRegistry, is: this });\n    this.values = this.newValues();\n  }\n\n}\n","import { ContextKey, ContextKey__symbol, ContextRegistry, SingleContextKey } from 'context-values';\nimport { ComponentContext } from '../../component';\nimport { bootstrapDefault } from '../bootstrap-default';\n\nconst ComponentContextRegistry__key = (/*#__PURE__*/ new SingleContextKey<ComponentContextRegistry>(\n    'component-context-registry',\n    {\n      byDefault: bootstrapDefault(() => new ComponentContextRegistry()),\n    },\n));\n\n/**\n * @internal\n */\nexport class ComponentContextRegistry extends ContextRegistry<ComponentContext> {\n\n  static get [ContextKey__symbol](): ContextKey<ComponentContextRegistry> {\n    return ComponentContextRegistry__key;\n  }\n\n}\n","import { ContextKey, ContextKey__symbol, ContextRegistry, SingleContextKey } from 'context-values';\nimport { DefinitionContext } from '../../component/definition';\nimport { bootstrapDefault } from '../bootstrap-default';\n\nconst DefinitionContextRegistry__key = (/*#__PURE__*/ new SingleContextKey<DefinitionContextRegistry>(\n    'definition-context-registry',\n    {\n      byDefault: bootstrapDefault(context => new DefinitionContextRegistry(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport class DefinitionContextRegistry extends ContextRegistry<DefinitionContext> {\n\n  static get [ContextKey__symbol](): ContextKey<DefinitionContextRegistry> {\n    return DefinitionContextRegistry__key;\n  }\n\n}\n","import { nextArgs, nextSkip } from 'call-thru';\nimport { EventEmitter, onAny, OnEvent, onEventBy, trackValue } from 'fun-events';\nimport { superClassOf } from '../../common';\nimport { ComponentDef__symbol } from '../../component';\nimport { ComponentClass, DefinitionSetup } from '../../component/definition';\nimport { Unloader } from './unloader.impl';\n\n/**\n * @internal\n */\nexport function onPostDefSetup(\n    componentType: ComponentClass,\n    unloader: Unloader,\n): OnEvent<[DefinitionSetup]> {\n\n  const { on } = postDefSetup(componentType);\n\n  return onEventBy(receiver => {\n    on({\n      supply: receiver.supply.needs(unloader.supply),\n      receive(ctx, setup) {\n\n        const whenReady = setup.whenReady.tillOff(unloader.supply);\n        const whenComponent = setup.whenComponent.tillOff(unloader.supply);\n\n        receiver.receive(ctx, {\n          get componentType() {\n            return setup.componentType;\n          },\n          get whenReady() {\n            return whenReady;\n          },\n          get whenComponent() {\n            return whenComponent;\n          },\n          perDefinition(spec) {\n            return unloader.add(() => setup.perDefinition(spec));\n          },\n          perComponent(spec) {\n            return unloader.add(() => setup.perComponent(spec));\n          },\n        });\n      },\n    });\n  });\n}\n\n/**\n * @internal\n */\nexport interface PostDefSetup<T extends object = any> {\n  readonly on: OnEvent<[DefinitionSetup<T>]>;\n  send(setup: DefinitionSetup): void;\n  setup(setup: DefinitionSetup<T>): void;\n}\n\nconst PostDefSetup__symbol = (/*#__PURE__*/ Symbol('post-def-setup'));\n\n/**\n * @internal\n */\nexport function postDefSetup<T extends object>(componentType: ComponentClass<T>): PostDefSetup<T> {\n  // eslint-disable-next-line no-prototype-builtins\n  if (componentType.hasOwnProperty(PostDefSetup__symbol)) {\n    return (componentType as any)[PostDefSetup__symbol];\n  }\n\n  const tracker = trackValue<DefinitionSetup<T>>();\n  const emitter = new EventEmitter<[DefinitionSetup]>();\n  const onSetup: OnEvent<[DefinitionSetup<T>]> = tracker.read.thru(setup => setup ? nextArgs(setup) : nextSkip());\n  const on = onAny(onSetup, emitter);\n  const superType = superClassOf(componentType, type => ComponentDef__symbol in type);\n\n  if (superType) {\n\n    const superPostDefSetup = postDefSetup(superType);\n\n    on(setup => superPostDefSetup.send(setup));\n  }\n\n  const result: PostDefSetup<T> = {\n    on,\n    send(setup) {\n      emitter.send(setup);\n    },\n    setup(setup) {\n      tracker.it = setup;\n    },\n  };\n\n  Object.defineProperty(componentType, PostDefSetup__symbol, { value: result });\n\n  return result;\n}\n","import { AfterEvent, EventEmitter, OnEvent, onEventBy, trackValue } from 'fun-events';\nimport { ComponentContext } from '../../component';\n\nexport class WhenComponent<T extends object> {\n\n  readonly onCreated: OnEvent<[ComponentContext<T>]>;\n  readonly readNotifier: AfterEvent<[ComponentNotifier<T>]>;\n\n  constructor() {\n\n    const currentRev = trackValue(0);\n    const created = new EventEmitter<[ComponentContext<T>, number]>();\n\n    this.onCreated = onEventBy(receiver => {\n\n      const receiverRev = currentRev.it + 1;\n\n      created.on({\n        supply: receiver.supply,\n        receive: (eventContext, componentContext, notifiedRev) => {\n          if (notifiedRev < receiverRev) {\n            // Notify only receivers added after the last notification\n            receiver.receive(\n                {\n                  onRecurrent(recurrentReceiver) {\n                    eventContext.onRecurrent(recurrentContext => recurrentReceiver(recurrentContext));\n                  },\n                },\n                componentContext,\n            );\n          }\n        },\n      });\n\n      ++currentRev.it;\n    });\n    this.readNotifier = currentRev.read.keep.thru_(\n        rev => (context, notifiedRev) => {\n          created.send(context, notifiedRev);\n          return rev;\n        },\n    );\n  }\n\n}\n\nexport type ComponentNotifier<T extends object> = (\n    this: void,\n    context: ComponentContext<T>,\n    notifiedRev: number,\n) => number;\n","import { nextArgs, nextSkip, noop, valueProvider } from 'call-thru';\nimport { ContextRegistry, ContextValues, ContextValueSpec, SingleContextKey, SingleContextRef } from 'context-values';\nimport {\n  EventEmitter,\n  eventSupply,\n  EventSupply,\n  EventSupply__symbol, eventSupplyOf,\n  OnEvent,\n  trackValue,\n  ValueTracker,\n} from 'fun-events';\nimport { Class } from '../../common';\nimport {\n  ComponentContext as ComponentContext_,\n  ComponentContext__symbol,\n  ComponentDef,\n  ComponentEvent,\n  ComponentMount as ComponentMount_,\n} from '../../component';\nimport {\n  ComponentClass,\n  ComponentFactory as ComponentFactory_,\n  DefinitionContext as DefinitionContext_,\n  DefinitionSetup,\n  ElementDef,\n} from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { ComponentContextRegistry } from './component-context-registry.impl';\nimport { DefinitionContextRegistry } from './definition-context-registry.impl';\nimport { postDefSetup } from './post-def-setup.impl';\nimport { WhenComponent } from './when-component.impl';\n\n/**\n * @internal\n */\nexport interface ElementBuilder {\n  readonly definitions: EventEmitter<[DefinitionContext_]>;\n  readonly components: EventEmitter<[ComponentContext_]>;\n  buildElement<T extends object>(this: void, componentType: ComponentClass<T>): ComponentFactory_<T>;\n}\n\n/**\n * @internal\n */\nexport const ElementBuilder: SingleContextRef<ElementBuilder> = (/*#__PURE__*/ new SingleContextKey<ElementBuilder>(\n    'element-builder',\n    {\n      byDefault: bootstrapDefault(newElementBuilder),\n    },\n));\n\nconst enum ComponentStatus {\n  Building,\n  Ready,\n  Off,\n  On,\n}\n\nconst ComponentStatus__symbol = (/*#__PURE__*/ Symbol('component-status'));\n\nfunction newElementBuilder(bsContext: BootstrapContext): ElementBuilder {\n\n  const definitionContextRegistry$global = bsContext.get(DefinitionContextRegistry);\n  const componentContextRegistry$global = bsContext.get(ComponentContextRegistry);\n  const definitions = new EventEmitter<[DefinitionContext_]>();\n  const components = new EventEmitter<[ComponentContext_]>();\n\n  return {\n    definitions,\n    components,\n    buildElement<T extends object>(componentType: ComponentClass<T>) {\n\n      const def = ComponentDef.of(componentType);\n      const whenComponent = new WhenComponent<T>();\n      let componentContextRegistry$perType!: ComponentContextRegistry;\n      const ready = trackValue(false);\n      const whenReady: OnEvent<[]> = ready.read.thru(cls => cls ? nextArgs() : nextSkip());\n      // eslint-disable-next-line prefer-const\n      let definitionContext: DefinitionContext;\n\n      function createComponentContextRegistry(): ContextRegistry<ComponentContext_<T>> {\n        return componentContextRegistry$global.append(componentContextRegistry$perType);\n      }\n\n      class ComponentFactory extends ComponentFactory_ < T > {\n\n        get componentType(): ComponentClass<T> {\n          return definitionContext.componentType;\n        }\n\n        get elementType(): Class {\n          return definitionContext.elementType;\n        }\n\n        get elementDef(): ElementDef {\n          return definitionContext.elementDef;\n        }\n\n        mountTo(element: any): ComponentMount_<T> {\n          if (element[ComponentContext__symbol]) {\n            throw new Error(`Element ${element} already bound to component`);\n          }\n\n          const mount = createComponent({\n            definitionContext,\n            whenComponent,\n            registry: createComponentContextRegistry(),\n            element,\n            elementSuper(key) {\n              return element[key];\n            },\n            createMount(context: ComponentContext_<T>) {\n\n              class ComponentMount extends ComponentMount_<T> {\n\n                get context(): ComponentContext_<T> {\n                  return context;\n                }\n\n                get connected(): boolean {\n                  return elementStatus(element).it === ComponentStatus.On;\n                }\n\n                set connected(value: boolean) {\n                  elementStatus(element).it = value ? ComponentStatus.On : ComponentStatus.Off;\n                }\n\n                checkConnected(): boolean {\n\n                  const el: Element = element;\n                  const doc = el.ownerDocument;\n\n                  return this.connected = doc != null && doc.contains(el);\n                }\n\n              }\n\n              return new ComponentMount();\n            },\n          }).mount as ComponentMount_<T>;\n\n          mount.checkConnected();\n          componentCreated(mount.context);\n\n          return mount;\n        }\n\n      }\n\n      const componentFactory = new ComponentFactory();\n\n      class DefinitionContext extends DefinitionContext_<T> {\n\n        readonly get: ContextValues['get'];\n        readonly whenReady: OnEvent<[this]>;\n\n        get componentType(): ComponentClass<T> {\n          return componentType;\n        }\n\n        get whenComponent(): OnEvent<[ComponentContext_<T>]> {\n          return whenComponent.onCreated;\n        }\n\n        get elementType(): Class {\n          throw new Error('Custom element class is not constructed yet. Consider to use a `whenReady()` callback');\n        }\n\n        constructor() {\n          super();\n\n          const context = this;\n\n          this.whenReady = whenReady.thru_(valueProvider(this)).once as OnEvent<[this]>;\n\n          const definitionContextRegistry = new DefinitionContextRegistry(\n              definitionContextRegistry$global.seedIn(this),\n          );\n\n          definitionContextRegistry.provide({ a: DefinitionContext_, is: this });\n          definitionContextRegistry.provide({ a: ComponentFactory_, is: componentFactory });\n          this.get = definitionContextRegistry.newValues().get;\n          componentContextRegistry$perType = new ComponentContextRegistry(definitionContextRegistry.seedIn(this));\n\n          const definitionSetup: DefinitionSetup<T> = {\n            get componentType() {\n              return componentType;\n            },\n            get whenReady() {\n              return context.whenReady;\n            },\n            get whenComponent() {\n              return context.whenComponent;\n            },\n            perDefinition(spec) {\n              return definitionContextRegistry.provide(spec);\n            },\n            perComponent(spec) {\n              return componentContextRegistry$perType.provide(spec);\n            },\n          };\n\n          def.setup?.(definitionSetup);\n          postDefSetup(componentType).setup(definitionSetup);\n        }\n\n        perComponent<Deps extends any[], Src, Seed>(\n            spec: ContextValueSpec<ComponentContext_<T>, any, Deps, Src, Seed>,\n        ): () => void {\n          return componentContextRegistry$perType.provide(spec);\n        }\n\n      }\n\n      definitionContext = new DefinitionContext();\n\n      def.define?.(definitionContext);\n      definitions.send(definitionContext);\n\n      const elementType = createElementType(definitionContext, whenComponent, createComponentContextRegistry);\n\n      Object.defineProperty(definitionContext, 'elementType', {\n        configurable: true,\n        enumerable: true,\n        value: elementType,\n      });\n\n      ready.it = true;\n\n      return componentFactory;\n    },\n  };\n\n  function createElementType<T extends object>(\n      definitionContext: DefinitionContext_<T>,\n      whenComponent: WhenComponent<T>,\n      createRegistry: () => ContextRegistry<ComponentContext_<T>>,\n  ): Class {\n\n    const elementDef = definitionContext.get(ElementDef);\n\n    class Element extends elementDef.extend.type {\n\n      // Component context reference\n      [ComponentContext__symbol]: ComponentContext_<T>;\n\n      constructor() {\n        super();\n\n        const context = createComponent({\n          definitionContext,\n          whenComponent,\n          registry: createRegistry(),\n          element: this,\n          createMount: noop,\n          elementSuper: key => super[key],\n        });\n\n        componentCreated(context);\n      }\n\n      connectedCallback(): void {\n        elementStatus(this).it = ComponentStatus.On;\n      }\n\n      disconnectedCallback(): void {\n        elementStatus(this).it = ComponentStatus.Off;\n      }\n\n    }\n\n    return Element;\n  }\n\n  function createComponent<T extends object>(\n      {\n        definitionContext,\n        whenComponent,\n        registry,\n        element,\n        createMount,\n        elementSuper,\n      }: {\n        definitionContext: DefinitionContext_<T>;\n        whenComponent: WhenComponent<T>;\n        registry: ComponentContextRegistry;\n        element: any;\n        elementSuper(name: PropertyKey): any;\n        createMount(context: ComponentContext_<T>): ComponentMount_<T> | undefined;\n      },\n  ): ComponentContext_<T> {\n\n    const status = trackValue<ComponentStatus>(ComponentStatus.Building);\n    const destructionReason = trackValue<[any] | undefined>();\n\n    status.on(noop).whenOff(reason => destructionReason.it = [reason]);\n\n    const destroyed: OnEvent<[any]> = destructionReason.read.thru(reason => reason ? nextArgs(reason[0]) : nextSkip());\n    const whenDestroyed: OnEvent<[any]> = destroyed.once;\n\n    const whenOff: OnEvent<[]> = status.read.thru_(sts => sts === ComponentStatus.Off ? nextArgs() : nextSkip());\n    const whenOn: OnEvent<[EventSupply]> = status.read.thru_(\n        sts => {\n          if (sts !== ComponentStatus.On) {\n            return nextSkip();\n          }\n\n          const offSupply = eventSupply();\n\n          whenOff.once(() => offSupply.off());\n\n          return nextArgs(offSupply);\n        },\n    );\n\n    let mount: ComponentMount_<T> | undefined;\n    const values = registry.newValues();\n\n    class ComponentContext extends ComponentContext_<T> {\n\n      readonly get = values.get;\n      readonly elementSuper = elementSuper;\n      readonly whenReady: OnEvent<[this]>;\n\n      constructor() {\n        super();\n\n        const whenReady: OnEvent<[this]> = status.read.thru(sts => sts ? nextArgs(this) : nextSkip());\n\n        this.whenReady = whenReady.once;\n      }\n\n      get componentType(): ComponentClass<T> {\n        return definitionContext.componentType;\n      }\n\n      get element(): any {\n        return element;\n      }\n\n      get component(): T {\n        throw new Error('The component is not constructed yet. Consider to use a `whenReady()` callback');\n      }\n\n      get mount(): ComponentMount_<T> | undefined {\n        return mount || (mount = createMount(this));\n      }\n\n      get connected(): boolean {\n        return status.it === ComponentStatus.On;\n      }\n\n      get [EventSupply__symbol](): EventSupply {\n        return eventSupplyOf(status);\n      }\n\n      get whenOn(): OnEvent<[EventSupply]> {\n        return whenOn;\n      }\n\n      get whenOff(): OnEvent<[]> {\n        return whenOff;\n      }\n\n      get whenDestroyed(): OnEvent<[any]> {\n        return whenDestroyed;\n      }\n\n      destroy(reason?: any): void {\n        status.done(reason);\n      }\n\n    }\n\n    const context = new ComponentContext();\n    let lastRev = 0;\n\n    context.whenDestroyed(() => removeElement(context));\n    registry.provide({ a: ComponentContext_, is: context });\n\n    augmentElement();\n\n    whenComponent.readNotifier.once(notifier => lastRev = notifier(context, lastRev));\n    context.whenOn(supply => {\n      whenComponent.readNotifier({\n        supply,\n        receive(_, notifier) {\n          lastRev = notifier(context, lastRev);\n        },\n      });\n    });\n    components.send(context);\n\n    const component = newComponent(definitionContext.componentType, context);\n\n    Object.defineProperty(context, 'component', {\n      configurable: true,\n      enumerable: true,\n      value: component,\n    });\n\n    status.it = ComponentStatus.Ready;\n\n    return context;\n\n    function augmentElement(): void {\n      Object.defineProperty(element, ComponentContext__symbol, { value: context });\n      Object.defineProperty(element, ComponentStatus__symbol, { writable: true, value: status });\n    }\n  }\n\n}\n\n/**\n * Creates new component of the given type.\n *\n * It makes component context available under `[ComponentContext__symbol]` key in constructed component.\n * The component context is also available inside component constructor by temporarily assigning it to component\n * prototype.\n *\n * @typeparam T  A type of component.\n * @param type  Component class constructor.\n * @param context  Target component context.\n */\nfunction newComponent<T extends object>(type: ComponentClass<T>, context: ComponentContext_<T>): T {\n\n  const proto = type.prototype as any;\n  const prevContext = proto[ComponentContext__symbol];\n\n  proto[ComponentContext__symbol] = context;\n  try {\n\n    const component = new type(context);\n\n    Object.defineProperty(component, ComponentContext__symbol, { value: context });\n\n    return component;\n  } finally {\n    proto[ComponentContext__symbol] = prevContext;\n  }\n}\n\nfunction elementStatus(element: any): ValueTracker<ComponentStatus> {\n  return element[ComponentStatus__symbol];\n}\n\nfunction componentCreated(context: ComponentContext_): void {\n  context.whenOn.once(\n      () => context.dispatchEvent(new ComponentEvent('wesib:component', { bubbles: true })),\n  );\n}\n\nfunction removeElement(context: ComponentContext_): void {\n\n  const { element, mount } = context;\n\n  if (mount) {\n    mount.connected = false; // Disconnect mounted element\n  }\n\n  const parentNode: Element = element.parentElement;\n\n  if (parentNode) {\n    parentNode.removeChild(element);\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentContext } from './component-context';\n\n/**\n * A mount of the component to an element.\n *\n * This is constructed when a component is mounted to arbitrary element by [[ComponentFactory.mountTo]] method.\n *\n * Mounted components do not maintain their connection state automatically. It is a calling code responsibility to set\n * their connection state by updating [[ComponentMount.connected]] property. E.g. by calling a\n * [[ComponentMount.checkConnected]] method. An [[ElementObserver]] and [[AutoConnectSupport]] feature could be used to\n * do it automatically.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class ComponentMount<T extends object = any> {\n\n  /**\n   * Mounted component context.\n   */\n  abstract readonly context: ComponentContext<T>;\n\n  /**\n   * Component connection state.\n   *\n   * Updating this property triggers appropriate listeners registered in [[ComponentContext]].\n   *\n   * The initial state is set by [[checkConnected]] method.\n   */\n  abstract connected: boolean;\n\n  /**\n   * Mounted component.\n   */\n  get component(): T {\n    return this.context.component;\n  }\n\n  /**\n   * An element the component is mounted to.\n   */\n  get element(): any {\n    return this.context.element;\n  }\n\n  /**\n   * Checks whether the mounted component element is actually connected to its owning document.\n   *\n   * Updates the `connected` property and returns its value.\n   *\n   * @returns `true` if the component element is connected, or `false` otherwise.\n   */\n  abstract checkConnected(): boolean;\n\n}\n","import { itsEach, overArray } from 'a-iterable';\nimport { noop, valueProvider } from 'call-thru';\nimport { EventSupply, eventSupply } from 'fun-events';\n\n/**\n * @internal\n */\nexport interface Unloader {\n  readonly supply: EventSupply;\n  add(adder: () => () => void): () => void;\n}\n\nconst doNotAdd = valueProvider(noop);\n\n/**\n * @internal\n */\nexport function newUnloader(): Unloader {\n\n  const unloads: (() => void)[] = [];\n  let add = (adder: () => () => void): () => void => {\n\n    const unload = adder();\n\n    unloads.push(unload);\n\n    return unload;\n  };\n  const supply = eventSupply(() => {\n    add = doNotAdd;\n    itsEach(\n        overArray(unloads).reverse(),\n        unload => unload(),\n    );\n    unloads.length = 0;\n  });\n\n  return {\n    supply,\n    add(adder) {\n      return add(adder);\n    },\n  };\n}\n","import { ElementBuilder } from '../../boot/impl';\nimport { ComponentFactory__symbol } from '../../boot/impl/component-factory.symbol.impl';\nimport { ComponentClass, CustomElements } from '../../component/definition';\nimport { FeatureContext } from '../feature-context';\n\n/**\n * @internal\n */\nexport class ComponentRegistry {\n\n  private _definitionQueue: (() => void)[] = [];\n\n  constructor(private readonly _context: FeatureContext) {\n    _context.whenReady(() => {\n      this._definitionQueue.forEach(definition => definition());\n      delete this._definitionQueue;\n    });\n  }\n\n  get customElements(): CustomElements {\n    return this._context.get(CustomElements);\n  }\n\n  define<T extends object>(componentType: ComponentClass<T>): void {\n    this._definitionQueue.push(() => {\n\n      const elementBuilder = this._context.get(ElementBuilder);\n      const factory = elementBuilder.buildElement(componentType);\n\n      (componentType as any)[ComponentFactory__symbol] = factory;\n\n      this.customElements.define(componentType, factory.elementType);\n    });\n  }\n\n}\n","import { filterIt, mapIt } from 'a-iterable';\nimport { isPresent, nextArgs, NextCall, NextSkip, nextSkip } from 'call-thru';\nimport { ContextRegistry, ContextValueOpts, ContextValues, ContextValueSpec } from 'context-values';\nimport { ContextUpKey } from 'context-values/updatable';\nimport {\n  afterAll,\n  afterEach,\n  AfterEvent,\n  afterEventBy,\n  afterThe,\n  EventKeeper,\n  EventSupply,\n  nextAfterEvent,\n  OnEvent,\n  OnEventCallChain,\n  trackValue,\n} from 'fun-events';\nimport { BootstrapContext } from '../../boot';\nimport {\n  BootstrapContextRegistry,\n  ComponentContextRegistry,\n  DefinitionContextRegistry,\n  ElementBuilder,\n  newUnloader,\n  onPostDefSetup,\n} from '../../boot/impl';\nimport { ArraySet, Class } from '../../common';\nimport { ComponentContext } from '../../component';\nimport { ComponentClass, DefinitionContext, DefinitionSetup } from '../../component/definition';\nimport { FeatureContext } from '../feature-context';\nimport { ComponentRegistry } from './component-registry.impl';\nimport { FeatureClause, FeatureRequest } from './feature-request.impl';\n\nconst FeatureKey__symbol = (/*#__PURE__*/ Symbol('feature-key'));\n\n/**\n * @internal\n */\nexport class FeatureKey extends ContextUpKey<AfterEvent<[FeatureLoader?]>, FeatureClause> {\n\n  static of(feature: Class): FeatureKey {\n    // eslint-disable-next-line no-prototype-builtins\n    return feature.hasOwnProperty(FeatureKey__symbol)\n        ? (feature as any)[FeatureKey__symbol]\n        : ((feature as any)[FeatureKey__symbol] = new FeatureKey(feature));\n  }\n\n  get upKey(): this {\n    return this;\n  }\n\n  private constructor(feature: Class) {\n    super(`feature:${feature.name}`);\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          AfterEvent<[FeatureLoader?]>,\n          EventKeeper<FeatureClause[]> | FeatureClause,\n          AfterEvent<FeatureClause[]>>,\n  ): AfterEvent<[FeatureLoader?]> | null | undefined {\n    return loadFeature(\n        opts.context.get(BootstrapContext),\n        opts.seed.keep.thru(preferredFeatureClause),\n    );\n  }\n\n}\n\nfunction preferredFeatureClause(...clauses: FeatureClause[]): FeatureClause | undefined {\n\n  let required = false;\n  let preferred: FeatureClause | undefined;\n\n  for (const clause of clauses) {\n    switch (clause[1]) {\n      case 'is':\n        required = true;\n        if (!preferred) {\n          preferred = clause;\n        }\n        break;\n      case 'has':\n        preferred = clause;\n        break;\n      case 'needs':\n        required = true;\n    }\n  }\n\n  return required ? preferred : undefined;\n}\n\nfunction loadFeature(\n    bsContext: BootstrapContext,\n    from: AfterEvent<[FeatureClause?]>,\n): AfterEvent<[FeatureLoader?]> {\n  return afterEventBy<[FeatureLoader?]>(receiver => {\n\n    let origin: Class | undefined;\n    let source: AfterEvent<[FeatureLoader?]> = afterThe();\n    let stageId: Promise<FeatureStageId> = Promise.resolve('idle');\n\n    return afterAll({\n      clause: from,\n      deps: loadFeatureDeps(bsContext, from),\n    }).keep.thru_(({ clause: [clause], deps }): NextCall<OnEventCallChain, [FeatureLoader?]> => {\n      if (!clause) {\n        return nextArgs();\n      }\n\n      const [request, , target] = clause;\n\n      if (request.feature === origin) {\n        return nextAfterEvent(source); // Origin didn't change. Reuse the source.\n      }\n\n      origin = request.feature;\n\n      if (target !== origin) {\n        // Originated from replacement feature provider. Reuse its loader.\n        return nextAfterEvent(source = bsContext.get(FeatureKey.of(origin)).keep.thru_(\n            loader => {\n              loader!.to(stageId);\n              stageId = loader!.stage;\n              return loader;\n            },\n        ));\n      }\n\n      // Create feature's own loader\n      const ownLoader = new FeatureLoader(bsContext, request, deps).to(stageId);\n      const ownSource = afterThe(ownLoader);\n\n      return nextAfterEvent(source = afterEventBy<[FeatureLoader]>(\n          rcv => ownSource(rcv).whenOff(() => {\n            stageId = ownLoader.unload();\n          }),\n      ).share()); // Can be accessed again when reused\n    })(receiver);\n  }).keep.thru(\n      preventDuplicateLoader(),\n  );\n}\n\nfunction preventDuplicateLoader():\n    (\n        loader?: FeatureLoader,\n    ) => NextCall<OnEventCallChain, [FeatureLoader?]> | NextSkip {\n\n  let lastLoader: FeatureLoader | null | undefined = null; // Initially `null` to differ from `undefined`\n\n  return (loader?: FeatureLoader) => {\n    if (lastLoader === loader) {\n      return nextSkip();\n    }\n    lastLoader = loader;\n\n    if (!loader) {\n      return nextArgs<[FeatureLoader?]>();\n    }\n\n    return nextArgs<[FeatureLoader?]>(loader);\n  };\n}\n\nfunction loadFeatureDeps(\n    bsContext: BootstrapContext,\n    from: AfterEvent<[FeatureClause?]>,\n): AfterEvent<FeatureLoader[]> {\n  return from.keep.thru_(clause => {\n    if (!clause) {\n      return nextArgs();\n    }\n\n    const [{ def }] = clause;\n    const needs = new ArraySet(def.needs);\n\n    if (!needs.size) {\n      return nextArgs();\n    }\n\n    return nextAfterEvent(\n        afterEach(\n            ...mapIt(\n                needs,\n                dep => bsContext.get(FeatureKey.of(dep)),\n            ),\n        ).keep.thru_(presentFeatureDeps),\n    );\n  });\n}\n\nfunction presentFeatureDeps(...deps: [FeatureLoader?][]): NextCall<OnEventCallChain, FeatureLoader[]> {\n  return nextArgs<FeatureLoader[]>(\n      ...filterIt<FeatureLoader | undefined, FeatureLoader>(\n          mapIt(deps, dep => dep[0]),\n          isPresent,\n      ),\n  );\n}\n\n/**\n * @internal\n */\nexport class FeatureLoader {\n\n  readonly down: Promise<void>;\n  private _stage: Promise<FeatureStage>;\n  private _down!: () => void;\n  readonly state = trackValue(false);\n\n  constructor(\n      readonly bsContext: BootstrapContext,\n      readonly request: FeatureRequest,\n      readonly deps: FeatureLoader[],\n  ) {\n    this.down = new Promise(resolve => this._down = resolve);\n    this._stage = Promise.resolve(new SetupFeatureStage(this));\n  }\n\n  get stage(): Promise<FeatureStageId> {\n    return this._stage.then(stage => stage.after);\n  }\n\n  get ready(): boolean {\n    return this.state.it;\n  }\n\n  to(stageId: Promise<FeatureStageId>): this {\n\n    const lastStage = this._stage;\n\n    this._stage = stageId.then(id => lastStage.then(stage => stage[id]()));\n\n    return this;\n  }\n\n  async setup(): Promise<void> {\n    await (this._stage = this._stage.then(stage => stage.setup()));\n  }\n\n  async init(): Promise<void> {\n    await (this._stage = this._stage.then(stage => stage.init()));\n  }\n\n  async unload(): Promise<FeatureStageId> {\n\n    const prevStage = this._stage;\n\n    delete this._stage; // Unloaded feature should never be accessed again.\n\n    const stage = await prevStage;\n    const stageId = await stage.stop();\n\n    this._down();\n\n    return stageId;\n  }\n\n}\n\ntype FeatureStageId = 'idle' | 'setup' | 'init';\ntype FeatureStageStop = (this: void) => Promise<any>;\n\nabstract class FeatureStage {\n\n  abstract readonly after: FeatureStageId;\n\n  constructor(\n      readonly loader: FeatureLoader,\n      private readonly _stop: FeatureStageStop = () => Promise.resolve(),\n  ) {}\n\n  idle(): Promise<this> {\n    return Promise.resolve(this);\n  }\n\n  abstract setup(): Promise<FeatureStage>;\n\n  abstract init(): Promise<FeatureStage>;\n\n  stop(): Promise<FeatureStageId> {\n    return this._stop().then(() => this.after);\n  }\n\n  protected perDep(action: (dep: FeatureLoader) => Promise<void>): Promise<any> {\n\n    const { deps } = this.loader;\n\n    return Promise.all(deps.map(dep => action(dep)));\n  }\n\n}\n\nclass SetupFeatureStage extends FeatureStage {\n\n  get after(): 'idle' {\n    return 'idle';\n  }\n\n  async setup(): Promise<FeatureStage> {\n    await this.perDep(loader => loader.setup());\n\n    const { bsContext, request: { def } } = this.loader;\n    const [context, supply] = newFeatureContext(bsContext, this.loader);\n\n    def.setup?.(context);\n\n    return new InitFeatureStage(\n        this.loader,\n        context,\n        () => Promise.resolve(supply.off()),\n    );\n  }\n\n  init(): Promise<FeatureStage> {\n    return this.setup().then(stage => stage.init());\n  }\n\n}\n\nclass InitFeatureStage extends FeatureStage {\n\n  get after(): 'setup' {\n    return 'setup';\n  }\n\n  constructor(\n      state: FeatureLoader,\n      private readonly _context: FeatureContext,\n      stop: FeatureStageStop,\n  ) {\n    super(state, stop);\n  }\n\n  setup(): Promise<FeatureStage> {\n    return Promise.resolve(this);\n  }\n\n  async init(): Promise<FeatureStage> {\n    await this.perDep(loader => loader.init());\n\n    const { request: { def } } = this.loader;\n\n    def.init?.(this._context);\n\n    return new ActiveFeatureStage(this);\n  }\n\n}\n\nclass ActiveFeatureStage extends FeatureStage {\n\n  get after(): 'init' {\n    return 'init';\n  }\n\n  constructor(prev: InitFeatureStage) {\n    super(prev.loader, () => prev.stop());\n    prev.loader.state.it = true;\n  }\n\n  setup(): Promise<FeatureStage> {\n    return Promise.resolve(this);\n  }\n\n  init(): Promise<FeatureStage> {\n    return Promise.resolve(this);\n  }\n\n}\n\nfunction newFeatureContext(\n    bsContext: BootstrapContext,\n    loader: FeatureLoader,\n): [FeatureContext, EventSupply] {\n\n  const unloader = newUnloader();\n  let componentRegistry: ComponentRegistry;\n  const definitionContextRegistry = bsContext.get(DefinitionContextRegistry);\n  const componentContextRegistry = bsContext.get(ComponentContextRegistry);\n  const registry = new ContextRegistry<FeatureContext>(bsContext);\n  const elementBuilder = bsContext.get(ElementBuilder);\n  const onDefinition = elementBuilder.definitions.on.tillOff(unloader.supply);\n  const onComponent = elementBuilder.components.on.tillOff(unloader.supply);\n\n  class Context extends FeatureContext {\n\n    readonly get = registry.newValues().get;\n    readonly whenReady: OnEvent<[FeatureContext]>;\n\n    constructor() {\n      super();\n\n      const whenReady: OnEvent<[FeatureContext]> = afterAll({\n        st: loader.state,\n        bs: trackValue<BootstrapContext>().by(bsContext.whenReady),\n      }).thru(\n          ({ st: [ready], bs: [bs] }) => bs && ready ? nextArgs(this) : nextSkip(),\n      );\n\n      this.whenReady = whenReady.once;\n      registry.provide({ a: FeatureContext, is: this });\n      componentRegistry = new ComponentRegistry(this);\n    }\n\n    get feature(): Class {\n      return loader.request.feature;\n    }\n\n    get onDefinition(): OnEvent<[DefinitionContext]> {\n      return onDefinition;\n    }\n\n    get onComponent(): OnEvent<[ComponentContext]> {\n      return onComponent;\n    }\n\n    provide<Deps extends any[], Src, Seed>(\n        spec: ContextValueSpec<BootstrapContext, any, Deps, Src, Seed>,\n    ): () => void {\n      return unloader.add(() => bsContext.get(BootstrapContextRegistry).provide(spec));\n    }\n\n    perDefinition<Deps extends any[], Src, Seed>(\n        spec: ContextValueSpec<DefinitionContext, any, Deps, Src, Seed>,\n    ): () => void {\n      return unloader.add(() => definitionContextRegistry.provide(spec));\n    }\n\n    perComponent<Deps extends any[], Src, Seed>(\n        spec: ContextValueSpec<ComponentContext, any, Deps, Src, Seed>,\n    ): () => void {\n      return unloader.add(() => componentContextRegistry.provide(spec));\n    }\n\n    setupDefinition<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionSetup]> {\n      return onPostDefSetup(componentType, unloader);\n    }\n\n    define<T extends object>(componentType: ComponentClass<T>): void {\n      componentRegistry.define(componentType);\n    }\n\n  }\n\n  return [new Context(), unloader.supply];\n}\n","import { ArraySet, Class, mergeFunctions } from '../../common';\nimport { ComponentDef, ComponentDef__symbol } from '../../component';\nimport { FeatureDef } from '../feature-def';\nimport { FeatureNeedsError } from '../feature-needs-error';\nimport { FeatureKey } from './feature-loader.impl';\nimport { FeatureRequester } from './feature-requester.impl';\n\n/**\n * @internal\n */\nexport type FeatureClause = [FeatureRequest, 'is' | 'needs' | 'has', Class];\n\n/**\n * @internal\n */\nexport type FeatureNeedClause = [FeatureRequest, 'needs' | 'has', Class];\n\n/**\n * @internal\n */\nexport class FeatureRequest {\n\n  readonly def: FeatureDef.Options;\n  private _uses = 0;\n\n  constructor(\n      private readonly _requester: FeatureRequester,\n      readonly feature: Class,\n      private _revoke: () => void,\n  ) {\n    this.def = featureDef(feature);\n  }\n\n  request(clauses: readonly FeatureNeedClause[]): this {\n\n    const requester = this._requester;\n    const { registry } = requester;\n    const isClause: FeatureClause = [this, 'is', this.feature];\n\n    this._revokeBy(registry.provide({\n      a: FeatureKey.of(this.feature),\n      is: isClause,\n    }));\n\n    new ArraySet(this.def.has).forEach(feature => {\n\n      const clause: FeatureNeedClause = [this, 'has', feature];\n\n      this._revokeBy(registry.provide({ a: FeatureKey.of(feature), is: clause }));\n\n      // Request the provided feature _after_ provider\n      const request = requester.request(feature, [...clauses, clause]);\n\n      this._revokeBy(() => request.unuse());\n    });\n\n    new ArraySet(this.def.needs).forEach(feature => {\n\n      const clause: FeatureNeedClause = [this, 'needs', feature];\n\n      const request = requester.request(feature, [...clauses, clause]);\n\n      this._revokeBy(() => request.unuse());\n      this._revokeBy(registry.provide({ a: FeatureKey.of(feature), is: clause }));\n    });\n\n    this._uses = 1;\n\n    return this;\n  }\n\n  reuse(clauses: readonly FeatureNeedClause[]): this {\n    if (!this._uses) {\n      throw new FeatureNeedsError(clauses.map(([{ feature }, reason, need]) => [feature, reason, need]));\n    }\n\n    ++this._uses;\n\n    return this;\n  }\n\n  unuse(): void {\n    if (!--this._uses) {\n      this._revoke();\n    }\n  }\n\n  private _revokeBy(revoke: () => void): void {\n    this._revoke = mergeFunctions(revoke, this._revoke);\n  }\n\n}\n\nfunction featureDef(featureType: Class): FeatureDef.Options {\n\n  let def = FeatureDef.of(featureType);\n\n  if (ComponentDef__symbol in featureType) {\n    def = FeatureDef.merge(\n        def,\n        {\n          init(context) {\n            context.define(featureType);\n          },\n        },\n    );\n\n    const { feature } = ComponentDef.of(featureType);\n\n    if (feature) {\n      def = FeatureDef.merge(def, feature);\n    }\n\n  }\n\n  return def;\n}\n\n","import { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { BootstrapContext, bootstrapDefault } from '../../boot';\nimport { BootstrapContextRegistry } from '../../boot/impl';\nimport { Class } from '../../common';\nimport { FeatureNeedClause, FeatureRequest } from './feature-request.impl';\n\nconst FeatureRequester__key = (/*#__PURE__*/ new SingleContextKey<FeatureRequester>(\n    'feature-requester',\n    {\n      byDefault: bootstrapDefault(context => new FeatureRequester(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport class FeatureRequester {\n\n  static get [ContextKey__symbol](): ContextKey<FeatureRequester> {\n    return FeatureRequester__key;\n  }\n\n  readonly registry: BootstrapContextRegistry;\n  private readonly _map = new Map<Class, FeatureRequest>();\n\n  constructor(context: BootstrapContext) {\n    this.registry = context.get(BootstrapContextRegistry);\n  }\n\n  request(feature: Class, clauses: readonly FeatureNeedClause[] = []): FeatureRequest {\n\n    const existing = this._map.get(feature);\n\n    if (existing) {\n      return existing.reuse(clauses);\n    }\n\n    const request = new FeatureRequest(this, feature, () => this._map.delete(feature));\n\n    this._map.set(feature, request);\n\n    return request.request(clauses);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { nextArgs, nextSkip } from 'call-thru';\nimport { AfterEvent, afterEventBy, OnEvent, trackValue } from 'fun-events';\nimport { newNamespaceAliaser } from 'namespace-aliaser';\nimport { Class } from '../../common';\nimport { ComponentClass, ComponentFactory, CustomElements } from '../../component/definition';\nimport { FeatureDef, FeatureRef, FeatureStatus } from '../../feature';\nimport { FeatureKey, FeatureLoader, FeatureRequester } from '../../feature/loader';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { DefaultNamespaceAliaser } from '../globals';\nimport { BootstrapContextRegistry } from '../impl';\nimport { componentFactoryOf } from '../impl/component-factory.symbol.impl';\n\n/**\n * Bootstraps components.\n *\n * Both features and components can be passed as parameters to this function.\n *\n * @category Core\n * @param features  Features and components to enable.\n *\n * @returns Bootstrap context instance.\n */\nexport function bootstrapComponents(...features: Class[]): BootstrapContext {\n\n  const bootstrapContextRegistry = BootstrapContextRegistry.create();\n  const { bootstrapContext, complete } = initBootstrap(bootstrapContextRegistry);\n  const feature = features.length === 1 ? features[0] : bootstrapFeature(features);\n\n  bootstrapContext.get(FeatureRequester).request(feature);\n  bootstrapContext.get(FeatureKey.of(feature))(loader => {\n    loader!.init().then(complete);\n  });\n\n  return bootstrapContext;\n}\n\n/**\n * @internal\n */\nfunction bootstrapFeature(needs: Class[]): Class {\n  return FeatureDef.define(class BootstrapFeature {}, { needs });\n}\n\n/**\n * @internal\n */\nconst enum BootstrapStage {\n  Init,\n  Ready,\n}\n\n/**\n * @internal\n */\nfunction initBootstrap(\n    bootstrapContextRegistry: BootstrapContextRegistry,\n): {\n  bootstrapContext: BootstrapContext;\n  complete(): void;\n} {\n\n  const stage = trackValue<BootstrapStage>(BootstrapStage.Init);\n  const values = bootstrapContextRegistry.values;\n\n  class Context extends BootstrapContext {\n\n    readonly get = values.get;\n    readonly whenReady: OnEvent<[BootstrapContext]>;\n\n    constructor() {\n      super();\n\n      const whenReady: OnEvent<[BootstrapContext]> = stage.read.thru(\n          s => s ? nextArgs(this) : nextSkip(),\n      );\n\n      this.whenReady = whenReady.once;\n      bootstrapContextRegistry.provide({ a: DefaultNamespaceAliaser, by: newNamespaceAliaser });\n      bootstrapContextRegistry.provide({ a: BootstrapContext, is: this });\n    }\n\n    async whenDefined<C extends object>(componentType: ComponentClass<C>): Promise<ComponentFactory<C>> {\n      await new Promise(resolve => this.whenReady(resolve));\n      await this.get(CustomElements).whenDefined(componentType);\n      return componentFactoryOf(componentType);\n    }\n\n    load(feature: Class<any>): FeatureRef {\n\n      interface FeatureInfo {\n        status: FeatureStatus;\n        down?: Promise<void>;\n      }\n\n      const status = afterEventBy<[FeatureInfo]>(receiver => {\n\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const request = bootstrapContext.get(FeatureRequester).request(feature);\n        const info = trackValue<FeatureInfo>({\n          status: {\n            feature,\n            ready: false,\n          },\n        });\n\n        this.get(FeatureKey.of(feature))({\n          supply: receiver.supply,\n          receive(_ctx, ldr) {\n\n            // Present until `request` revoked\n            // But that happens only when supply is cut off.\n            const loader = ldr as FeatureLoader;\n\n            info.it = {\n              status: {\n                feature: loader.request.feature,\n                ready: loader.ready,\n              },\n              down: loader.down,\n            };\n            if (!loader.ready) {\n              loader.init().then(() => {\n                info.it = {\n                  status: {\n                    feature: loader.request.feature,\n                    ready: true,\n                  },\n                  down: loader.down,\n                };\n              });\n            }\n          },\n        }).whenOff(() => {\n          request.unuse(); // Apply this callback _after_ registration complete,\n                           // to prevent receiver call.\n        });\n\n        info.read(receiver);\n      }).share();\n\n      let whenDown: Promise<void>;\n      const supply = status(({ down }) => {\n        whenDown = down!;\n      });\n      const read: AfterEvent<[FeatureStatus]> = status.keep.thru(\n          info => info.status,\n      ).tillOff(supply);\n\n      class Ref extends FeatureRef {\n\n        get read(): AfterEvent<[FeatureStatus]> {\n          return read;\n        }\n\n        get down(): Promise<void> {\n          return whenDown;\n        }\n\n        dismiss(reason?: any): Promise<void> {\n          supply.off(reason);\n          return whenDown;\n        }\n\n      }\n\n      return new Ref();\n    }\n\n  }\n\n  const bootstrapContext = new Context();\n\n  return {\n    bootstrapContext,\n    complete(): void {\n      stage.it = BootstrapStage.Ready;\n    },\n  };\n}\n","/**\n * @packageDocumentation\n * @module wesib/wesib\n */\nimport { AfterEvent, AfterEvent__symbol, EventKeeper } from 'fun-events';\nimport { FeatureStatus } from './feature-status';\n\n/**\n * Dynamically loaded feature reference.\n *\n * It is returned from [[BootstrapContext.load]] and can be used to read feature load status and unload it.\n *\n * Implements an `EventKeeper` interface by sending a feature load status updates.\n *\n * @category Core\n */\nexport abstract class FeatureRef implements EventKeeper<[FeatureStatus]> {\n\n  /**\n   * An `AfterEvent` sender of feature load status updates.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[FeatureStatus]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[FeatureStatus]> {\n    return this.read;\n  }\n\n  /**\n   * A promise resolved when feature is unloaded.\n   *\n   * This happens after all feature references dismissed.\n   */\n  abstract readonly down: Promise<void>;\n\n  /**\n   * Dismisses feature reference.\n   *\n   * When all feature references dismissed, then unloads the feature. This removes everything set up by the\n   * feature via [[BootstrapSetup]] and [[DefinitionSetup]].\n   *\n   * @param reason  Arbitrary reason of feature reference dismiss. This will be reported by load status supplies\n   * as their cut off reason.\n   *\n   * @returns A promise resolved when feature is unloaded. This happens only after all feature references dismissed.\n   */\n  abstract dismiss(reason?: any): Promise<void>;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { MultiContextKey, MultiContextRef } from 'context-values';\n\n/**\n * Custom element attribute change callback signature.\n *\n * This function is called whenever a new attribute value assigned.\n *\n * @category Feature\n * @typeparam T  A type of component.\n */\nexport type AttributeChangedCallback<T extends object> =\n/**\n * @param component  Component instance.\n * @param newValue  New attribute value.\n * @param oldValue  Previous attribute value, or `null` if there were no value assigned.\n */\n    (this: void, component: T, newValue: string, oldValue: string | null) => void;\n\n/**\n * Custom element attribute descriptor.\n *\n * Descriptors are to be registered in component's definition context in order to make them available to component.\n * The {@link Attribute @Attribute}, {@link Attributes @Attributes}, and {@link AttributeChanged @AttributeChanged}\n * decorators are doing so.\n *\n * @category Feature\n */\nexport interface AttributeDescriptor<T extends object = any> {\n\n  /**\n   * Attribute name.\n   */\n  readonly name: string;\n\n  /**\n   * Attribute change callback that will be called each time attribute value changes.\n   */\n  readonly change: AttributeChangedCallback<T>;\n\n}\n\n/**\n * A key of component definition context value containing attribute descriptors.\n *\n * @category Feature\n */\nexport const AttributeDescriptor: MultiContextRef<AttributeDescriptor> = (\n    /*#__PURE__*/ new MultiContextKey<AttributeDescriptor>('attribute-descriptor')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing element an attributes.\n *\n * Thus, an attribute state path is always something like `[AttributePath__root, 'attribute-name']`.\n *\n * @category Feature\n */\nexport const AttributePath__root = (/*#__PURE__*/ Symbol('attribute'));\n\n/**\n * A path to the named attribute state.\n *\n * @category Feature\n */\nexport type AttributePath = readonly [keyof AttributePath__rootKeys, string];\n\n/**\n * Constructs a named attribute state path.\n *\n * @category Feature\n * @param name  Target attribute name.\n *\n * @return Attribute state path.\n */\nexport function attributePathTo(name: string): AttributePath {\n  return [AttributePath__root, name];\n}\n\n/**\n * @category Feature\n */\n// eslint-disable-next-line @typescript-eslint/class-name-casing\nexport interface AttributePath__rootKeys {\n  [AttributePath__root]: true;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { noop } from 'call-thru';\nimport { StatePath } from 'fun-events';\nimport { ComponentContext } from '../../component';\nimport { AttributeUpdateReceiver } from './attribute-def';\nimport { AttributeChangedCallback } from './attribute-descriptor';\nimport { attributePathTo } from './attribute-path';\n\n/**\n * @internal\n */\nexport function attributeStateUpdate<T extends object>(\n    name: string,\n    updateState: boolean | AttributeUpdateReceiver<T> | StatePath = true,\n): AttributeChangedCallback<T> {\n  if (updateState === false) {\n    return noop;\n  }\n  if (updateState === true || typeof updateState === 'function') {\n\n    const path = attributePathTo(name);\n    const update: AttributeUpdateReceiver<T> = updateState === true ? updateAttributeState : updateState;\n\n    return (component: T, newValue, oldValue) => update(component, path, newValue, oldValue);\n  }\n\n  return (component: T, newValue, oldValue) => updateAttributeState(component, updateState, newValue, oldValue);\n}\n\nfunction updateAttributeState<T extends object>(\n    component: T,\n    path: StatePath,\n    newValue: string,\n    oldValue: string | null,\n): void {\n  ComponentContext.of(component).updateState(path, newValue, oldValue);\n}\n","import { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { BootstrapWindow } from '../../boot/globals';\nimport { Class, mergeFunctions } from '../../common';\nimport { ComponentContext, ComponentMount } from '../../component';\nimport { DefinitionContext } from '../../component/definition';\nimport { AttributeChangedCallback, AttributeDescriptor } from './attribute-descriptor';\n\nconst AttributeRegistry__key = (/*#__PURE__*/ new SingleContextKey<AttributeRegistry>('attribute-registry'));\n\n/**\n * @internal\n */\nexport class AttributeRegistry<T extends object = any> {\n\n  static get [ContextKey__symbol](): ContextKey<AttributeRegistry> {\n    return AttributeRegistry__key;\n  }\n\n  private _attrs?: Map<string, AttributeChangedCallback<T>>;\n\n  constructor(private readonly _context: DefinitionContext) {\n  }\n\n  get attrs(): Map<string, AttributeChangedCallback<T>> {\n    if (this._attrs) {\n      return this._attrs;\n    }\n\n    const attrs = new Map<string, AttributeChangedCallback<T>>();\n\n    this._context.get(AttributeDescriptor).forEach(desc => {\n\n      const { name, change } = desc;\n\n      attrs.set(name, mergeFunctions(attrs.get(name), change));\n    });\n\n    return this._attrs = attrs;\n  }\n\n  define(elementType: Class): void {\n\n    const attrs = this.attrs;\n    const observedAttributes = Array.from(attrs.keys());\n\n    if (!observedAttributes.length) {\n      return; // No attributes defined\n    }\n\n    Object.defineProperty(elementType, 'observedAttributes', {\n      configurable: true,\n      enumerable: true,\n      value: observedAttributes,\n    });\n    Object.defineProperty(elementType.prototype, 'attributeChangedCallback', {\n      configurable: true,\n      enumerable: true,\n      value: function (name: string, oldValue: string | null, newValue: string) {\n        attrs.get(name)!(ComponentContext.of<T>(this).component, newValue, oldValue);\n      },\n    });\n  }\n\n  mount(mount: ComponentMount<T>): void {\n\n    const element = mount.element;\n    const attrs = this.attrs;\n    const attributeFilter = Array.from(attrs.keys());\n\n    if (!attributeFilter.length) {\n      return; // No attributes defined\n    }\n\n    const MutationObserver = this._context.get(BootstrapWindow).MutationObserver;\n    const observer = new MutationObserver(\n        records => records.forEach(\n            record => {\n\n              const attributeName = record.attributeName as string;\n\n              return attrs.get(attributeName)!(\n                  ComponentContext.of<T>(element).component,\n                  element.getAttribute(attributeName),\n                  record.oldValue,\n              );\n            },\n        ),\n    );\n\n    observer.observe(element, {\n      attributes: true,\n      attributeFilter,\n      attributeOldValue: true,\n    });\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { FeatureDef, FeatureDef__symbol } from '../feature-def';\nimport { AttributeRegistry } from './attribute-registry.impl';\n\n/**\n * @internal\n */\nconst AttributesSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.perDefinition({ as: AttributeRegistry });\n    setup.onDefinition(definitionContext => {\n      // Define element prototype attributes\n      definitionContext.whenReady(\n          ({ elementType }) => definitionContext.get(AttributeRegistry).define(elementType),\n      );\n    });\n    setup.onComponent(componentContext => {\n\n      const mount = componentContext.mount;\n\n      if (mount) {\n        // Mount element attributes\n        componentContext.get(AttributeRegistry).mount(mount);\n      }\n    });\n  },\n};\n\n/**\n * A feature adding attributes to custom elements.\n *\n * This feature is enabled automatically whenever an `@Attribute`, `@Attributes`, or `@AttributeChanged` decorator\n * applied to component.\n *\n * @category Feature\n */\nexport class AttributesSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return AttributesSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { StatePath } from 'fun-events';\nimport { Class } from '../../common';\nimport { isArray } from '../../common/types.impl';\nimport { Component, ComponentDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { AttributeUpdateReceiver } from './attribute-def';\nimport { AttributeDescriptor } from './attribute-descriptor';\nimport { attributeStateUpdate } from './attribute-state-update.impl';\nimport { AttributesSupport } from './attributes-support.feature';\n\n/**\n * Creates a component decorator declaring supported custom element's attributes.\n *\n * This decorator automatically enables [[AttributesSupport]] feature.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param items  Attributes definition options. Either an attribute definition item, or an array of such items.\n *\n * @return New component decorator.\n */\nexport function Attributes<T extends ComponentClass = Class>(\n    items: Attributes.Item<InstanceType<T>> | readonly Attributes.Item<InstanceType<T>>[],\n): ComponentDecorator<T> {\n  return Component({\n    feature: { needs: AttributesSupport },\n    setup(setup) {\n\n      const defineByItem = (item: Attributes.Item<InstanceType<T>>): void => {\n        if (typeof item === 'string') {\n          setup.perDefinition({\n            a: AttributeDescriptor,\n            is: {\n              name: item,\n              change: attributeStateUpdate(item),\n            },\n          });\n        } else {\n          Object.keys(item).forEach(name => {\n            setup.perDefinition({\n              a: AttributeDescriptor,\n              is: {\n                name,\n                change: attributeStateUpdate(name, item[name]),\n              },\n            });\n          });\n        }\n      };\n\n      if (isArray<Attributes.Item<InstanceType<T>>>(items)) {\n        items.forEach(defineByItem);\n      } else {\n        defineByItem(items);\n      }\n    },\n  });\n}\n\nexport namespace Attributes {\n\n  /**\n   * Attribute definition item.\n   *\n   * This is either an attribute name, or a per-attribute options map.\n   *\n   * @typeparam T  A type of component.\n   */\n  export type Item<T extends object> = Map<T> | string;\n\n  /**\n   * Per-attribute definition options.\n   *\n   * This is a map with attribute names as keys and their state update instructions as values.\n   *\n   * The state update instruction can be one of:\n   * - `false` to not update the component state,\n   * - `true` to update the component state with changed attribute key,\n   * - a state value key to update, or\n   * - an attribute update receiver function with custom state update logic.\n   *\n   * @typeparam T  A type of component.\n   */\n  export interface Map<T extends object> {\n    readonly [name: string]: boolean | StatePath | AttributeUpdateReceiver<T>;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { StateTracker } from 'fun-events';\n\n/**\n * @internal\n */\nconst ComponentState__key = (/*#__PURE__*/ new SingleContextKey<ComponentState>('component-state'));\n\n/**\n * Component state tracker.\n *\n * @category Feature\n */\nexport class ComponentState extends StateTracker {\n\n  static get [ContextKey__symbol](): ContextKey<ComponentState> {\n    return ComponentState__key;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentContext, StateUpdater } from '../../component';\nimport { FeatureDef, FeatureDef__symbol } from '../feature-def';\nimport { ComponentState } from './component-state';\n\n/**\n * @internal\n */\nconst StateSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.perComponent({\n      a: ComponentState,\n      by(context: ComponentContext) {\n\n        const state = new ComponentState();\n\n        context.whenDestroyed(reason => state.done(reason));\n\n        return state;\n      },\n    });\n    setup.perComponent({\n      a: StateUpdater,\n      by(state: ComponentState) {\n        return state.update;\n      },\n      with: [ComponentState],\n    });\n  },\n};\n\n/**\n * Component state support feature.\n *\n * When enabled, it registers the following component context values:\n *\n * - [[StateUpdater]] that allows to update the component state, and\n * - [[ComponentState]] that allows to track component state changes.\n *\n * Other features would use this to notify when the state changes. E.g. [[DomPropertiesSupport]]\n * and [[AttributesSupport]] features issue state updates when needed.\n *\n * @category Feature\n */\nexport class StateSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return StateSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { nextArgs } from 'call-thru';\nimport { EventSupply, eventSupply, EventSupply__symbol, OnEvent, StatePath, ValueTracker } from 'fun-events';\nimport { ComponentContext } from '../../component';\nimport { ComponentState } from '../state';\nimport { attributePathTo } from './attribute-path';\n\n/**\n * Creates a tracker of custom element's attribute value.\n *\n * Requires [[AttributesSupport]] feature to be enabled and attribute to be defined. E.g. with {@link Attribute\n * @Attribute}, {@link AttributeChanged @AttributeChanged}, or {@link Attributes @Attributes} decorator.\n *\n * @category Feature\n * @param context  Target component context.\n * @param name  Attribute name.\n * @param path  Custom attribute state path.\n *\n * @returns New attribute value tracker.\n */\nexport function trackAttribute(\n    context: ComponentContext,\n    name: string,\n    path: StatePath = attributePathTo(name),\n): ValueTracker<string | null> {\n\n  const { element }: { element: Element } = context;\n  const state = context.get(ComponentState).track(path);\n  const supply = eventSupply();\n  const on: OnEvent<[string | null, string | null]> = state.onUpdate.thru(\n      (_path, newValue, oldValue) => nextArgs(newValue, oldValue),\n  ).tillOff(supply);\n\n  class AttributeTracker extends ValueTracker<string | null> {\n\n    get on(): OnEvent<[string | null, string | null]> {\n      return on;\n    }\n\n    get [EventSupply__symbol](): EventSupply {\n      return supply;\n    }\n\n    get it(): string | null {\n      return element.getAttribute(name);\n    }\n\n    set it(value: string | null) {\n      if (!supply.isOff) {\n        if (value == null) {\n          element.removeAttribute(name);\n        } else {\n          element.setAttribute(name, value);\n        }\n      }\n    }\n\n  }\n\n  return new AttributeTracker();\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { MultiContextKey, MultiContextRef } from 'context-values';\n\n/**\n * Custom element property descriptor.\n *\n * Descriptors are to be registered in component's definition context in order to make them available to component.\n * The {@link DomProperty @DomProperty} decorator is doing so.\n *\n * @category Feature\n */\nexport interface DomPropertyDescriptor {\n\n  /**\n   * Custom element property key.\n   */\n  readonly key: PropertyKey;\n\n  /**\n   * Custom element property descriptor.\n   */\n  readonly descriptor: PropertyDescriptor;\n\n}\n\n/**\n * A key of component definition context value containing custom element property descriptors.\n *\n * @category Feature\n */\nexport const DomPropertyDescriptor: MultiContextRef<DomPropertyDescriptor> = (\n    /*#__PURE__*/ new MultiContextKey<DomPropertyDescriptor>('dom-property-descriptor')\n);\n","import { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { Class } from '../../common';\nimport { ComponentMount } from '../../component';\nimport { DefinitionContext } from '../../component/definition';\nimport { DomPropertyDescriptor } from './dom-property-descriptor';\n\nconst DomPropertyRegistry__key = (/*#__PURE__*/ new SingleContextKey<DomPropertyRegistry>('dom-property-registry'));\n\n/**\n * @internal\n */\nexport class DomPropertyRegistry {\n\n  static get [ContextKey__symbol](): ContextKey<DomPropertyRegistry> {\n    return DomPropertyRegistry__key;\n  }\n\n  private _props?: Map<PropertyKey, PropertyDescriptor>;\n\n  constructor(private readonly _context: DefinitionContext) {\n  }\n\n  get props(): Map<PropertyKey, PropertyDescriptor> {\n    if (this._props) {\n      return this._props;\n    }\n\n    return this._props = new Map<PropertyKey, PropertyDescriptor>(\n        this._context.get(DomPropertyDescriptor)\n            .map(({ key, descriptor }) => [key, descriptor]),\n    );\n  }\n\n\n  define<T extends object>(elementType: Class<T>): void {\n\n    const prototype = elementType.prototype;\n\n    this.props.forEach((desc, key) => {\n      Object.defineProperty(prototype, key, desc);\n    });\n  }\n\n  mount<T extends object>(mount: ComponentMount<T>): void {\n\n    const element = mount.element;\n\n    this.props.forEach((desc, key) => {\n      Object.defineProperty(element, key, desc);\n    });\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { FeatureDef, FeatureDef__symbol } from '../feature-def';\nimport { DomPropertyRegistry } from './dom-property-registry.impl';\n\n/**\n * @internal\n */\nconst DomPropertiesSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.perDefinition({ as: DomPropertyRegistry });\n    setup.onDefinition(definitionContext => {\n      // Define element prototype properties\n      definitionContext.whenReady(\n          ({ elementType }) => definitionContext.get(DomPropertyRegistry).define(elementType),\n      );\n    });\n    setup.onComponent(componentContext => {\n\n      const mount = componentContext.mount;\n\n      if (mount) {\n        // Mount element properties\n        componentContext.get(DomPropertyRegistry).mount(mount);\n      }\n    });\n  },\n};\n\n/**\n * A feature adding properties to custom elements.\n *\n * This feature is enabled automatically whenever a {@link DomProperty @DomProperty} decorator applied to component.\n *\n * @category Feature\n */\nexport class DomPropertiesSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return DomPropertiesSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing DOM properties.\n *\n * Thus a property state path is always something like `[DomPropertyPath__root, 'property-name']`.\n *\n * @category Feature\n */\nexport const DomPropertyPath__root = (/*#__PURE__*/ Symbol('dom-property'));\n\n/**\n * A path to the named DOM property state.\n *\n * @category Feature\n */\nexport type DomPropertyPath<K extends PropertyKey = PropertyKey> = readonly [keyof DomPropertyPath__rootKeys, K];\n\n/**\n * Constructs a named DOM property state path.\n *\n * @category Feature\n * @param key  Target property key.\n *\n * @return DOM property state path.\n */\nexport function domPropertyPathTo<K extends PropertyKey = PropertyKey>(key: K): DomPropertyPath<K> {\n  return [DomPropertyPath__root, key];\n}\n\n/**\n * @category Feature\n */\n// eslint-disable-next-line @typescript-eslint/class-name-casing\nexport interface DomPropertyPath__rootKeys {\n  [DomPropertyPath__root]: true;\n}\n","import { StatePath } from 'fun-events';\nimport { ComponentContext } from '../../component';\nimport { DomPropertyUpdateReceiver } from './dom-property-def';\nimport { DomPropertyPath, domPropertyPathTo } from './dom-property-path';\n\n/**\n * @internal\n */\nexport type DomPropertyUpdateCallback<T extends object> = <K extends keyof T>(\n    this: void,\n    component: T,\n    newValue: T[K],\n    oldValue: T[K],\n) => void;\n\n/**\n * @internal\n */\nexport function propertyStateUpdate<T extends object>(\n    propertyKey: PropertyKey,\n    updateState: true | DomPropertyUpdateReceiver<T> | StatePath = true,\n): DomPropertyUpdateCallback<T> {\n  if (updateState === true || typeof updateState === 'function') {\n\n    const path = domPropertyPathTo(propertyKey as keyof T);\n    const update = updateState === true ? updateDomPropertyState : updateState;\n\n    return (component, newValue, oldValue) => update(component, path, newValue, oldValue);\n  }\n  return (component, newValue, oldValue) => ComponentContext.of(component).updateState(updateState, newValue, oldValue);\n}\n\nfunction updateDomPropertyState<T extends object, K extends keyof T>(\n    component: T,\n    path: DomPropertyPath<K>,\n    newValue: T[K],\n    oldValue: T[K],\n): void {\n  ComponentContext.of(component).updateState(path, newValue, oldValue);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '../../common';\nimport { ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { DomPropertiesSupport } from './dom-properties-support.feature';\nimport { DomPropertyDef } from './dom-property-def';\nimport { DomPropertyDescriptor } from './dom-property-descriptor';\nimport { domPropertyDescriptor } from './dom-property-descriptor.impl';\nimport { propertyStateUpdate } from './property-state-update.impl';\n\n/**\n * Component property decorator that declares a property to add to custom element created for this component.\n *\n * The value of declared element's property will be read from and written to decorated one.\n *\n * This decorator can be applied both to plain properties and to property accessors.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Custom element property definition.\n *\n * @returns Component property decorator.\n */\nexport function DomProperty<V = any, T extends ComponentClass = Class>(\n    def: DomPropertyDef<T> = {},\n): ComponentPropertyDecorator<V, T> {\n  return ComponentProperty(descriptor => {\n\n    const { key, get } = descriptor;\n    let { set } = descriptor;\n    const domDescriptor = domPropertyDescriptor(descriptor, def);\n\n    if (def.updateState !== false) {\n\n      const updateState = propertyStateUpdate<InstanceType<T>>(key, def.updateState);\n      const setValue = set;\n\n      set = (component, newValue) => {\n\n        const oldValue = get(component);\n\n        setValue(component, newValue);\n        updateState(component, newValue, oldValue);\n      };\n    }\n\n    return {\n      componentDef: {\n        feature: {\n          needs: DomPropertiesSupport,\n        },\n        setup(setup) {\n          setup.perDefinition({ a: DomPropertyDescriptor, is: domDescriptor });\n        },\n      },\n      get,\n      set,\n    };\n  });\n}\n\n/**\n * Component method decorator that declares a method to add to custom element created for this component.\n *\n * This is just an alias of {@link DomProperty @DomProperty} decorator.\n *\n * @category Feature\n */\nexport { DomProperty as DomMethod };\n","import { PropertyAccessorDescriptor } from '../../common';\nimport { ComponentContext, ComponentProperty } from '../../component';\nimport { DomPropertyDef } from './dom-property-def';\nimport { DomPropertyDescriptor } from './dom-property-descriptor';\n\n/**\n * @internal\n */\nexport function domPropertyDescriptor<V>(\n    propertyDesc: ComponentProperty.Descriptor<V>,\n    {\n      propertyKey: key = propertyDesc.key,\n      configurable = propertyDesc.configurable,\n      enumerable = propertyDesc.enumerable,\n      writable = propertyDesc.writable,\n    }: DomPropertyDef,\n): DomPropertyDescriptor {\n\n  const componentPropertyKey = propertyDesc.key;\n  const descriptor: PropertyAccessorDescriptor<V> = {\n    configurable,\n    enumerable,\n    get: function (this: any) {\n      return (ComponentContext.of(this).component as any)[componentPropertyKey];\n    },\n    set: writable\n        ? function (this: any, value: any) {\n          (ComponentContext.of(this).component as any)[componentPropertyKey] = value;\n        }\n        : undefined,\n  };\n\n  return { key, descriptor };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { DefaultRenderScheduler } from '../../boot/globals';\nimport { ComponentContext } from '../../component';\nimport { ComponentState } from '../state';\nimport { RenderDef } from './render-def';\n\n/**\n * Component element render function interface.\n *\n * It has no arguments. It may return either nothing, or a function. In the latter case the returned function will be\n * called immediately to render the element. It may, in turn, return a render function, and so on.\n *\n * @category Feature\n */\nexport type ElementRender =\n/**\n * @returns Either delegated render, or nothing.\n */\n    (this: void) => void | ElementRender;\n\n/**\n * @category Feature\n */\nexport const ElementRender = {\n\n  /**\n   * Enables component element rendering.\n   *\n   * The `render` call will be scheduled by [[DefaultRenderScheduler]] once component state updated.\n   *\n   * @param context  Target component context.\n   * @param render  Element render function.\n   * @param def  Optional element render definition.\n   */\n  render(\n      this: void,\n      context: ComponentContext,\n      render: ElementRender,\n      def: RenderDef = {},\n  ): void {\n\n    const { offline, path = [] } = def;\n    const stateTracker = context.get(ComponentState).track(path);\n    const schedule = context.get(DefaultRenderScheduler)();\n\n    let rendered = false;\n    const stateSupply = stateTracker.onUpdate(() => {\n      if (offline || context.connected) {\n        scheduleRender();\n      } else {\n        rendered = false;\n      }\n    });\n\n    if (offline) {\n      scheduleRender();\n    } else {\n      context.whenOn(() => {\n        if (!rendered) {\n          scheduleRender();\n        }\n      }).whenOff(reason => {\n        stateSupply.off(reason);\n        rendered = true;\n      });\n    }\n\n    function scheduleRender(): void {\n      rendered = true;\n      schedule(renderElement);\n    }\n\n    function renderElement(): void {\n      for (;;) {\n\n        const newRender = render();\n\n        if (newRender === render || typeof newRender !== 'function') {\n          break;\n        }\n\n        render = newRender;\n      }\n    }\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { StateSupport } from '../state';\nimport { ElementRender } from './element-render';\nimport { RenderDef } from './render-def';\n\n/**\n * Component property decorator that declares a rendering method for the component.\n *\n * The decorated method call will be scheduled by [[DefaultRenderScheduler]] once component state updated.\n *\n * The decorated method should have no arguments. It may return either nothing, or a function. In the latter case the\n * returned function will be called immediately to render the element. It may, in turn, return a renderer function,\n * and so on.\n *\n * This decorator automatically enables [[StateSupport]] feature.\n *\n * Utilizes [[ElementRender.render]] function to define rendering.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Non-mandatory render definition.\n *\n * @returns Component method decorator.\n */\nexport function Render<T extends ComponentClass>(\n    def?: RenderDef,\n): ComponentPropertyDecorator<() => ElementRender | void, T> {\n  return ComponentProperty(({ get }) => ({\n    componentDef: {\n      feature: {\n        needs: StateSupport,\n      },\n      define(defContext) {\n        defContext.whenComponent(context => {\n          context.whenReady(() => {\n\n            const { component } = context;\n\n            ElementRender.render(context, get(component).bind(component), def);\n          });\n        });\n      },\n    },\n  }));\n}\n","import { NamespaceDef } from 'namespace-aliaser';\n\n/**\n * Default Wesib namespace definition.\n *\n * @category Core\n */\nexport const Wesib__NS: NamespaceDef = (/*#__PURE__*/ new NamespaceDef(\n    'https://wesib.github.io/ns',\n    'b',\n    'wesib',\n));\n","import { nextArg } from 'call-thru';\nimport { ContextValueOpts, ContextValues } from 'context-values';\nimport { ContextUpKey, ContextUpRef } from 'context-values/updatable';\nimport { AfterEvent, afterThe, EventKeeper, EventSender, nextAfterEvent, OnEvent, onSupplied } from 'fun-events';\n\n/**\n * @internal\n */\ntype FetchAgent<Res extends any[]> = (\n    this: void,\n    next: (this: void, request?: Request) => OnEvent<Res>,\n    request: Request,\n) => EventSender<Res>;\n\n/**\n * @internal\n */\ntype CombinedFetchAgent<Res extends any[]> = (\n    this: void,\n    next: (this: void, request: Request) => OnEvent<Res>,\n    request: Request,\n) => OnEvent<Res>;\n\n/**\n * @internal\n */\nexport class FetchAgentKey<Res extends any[]>\n    extends ContextUpKey<CombinedFetchAgent<Res>, FetchAgent<Res>>\n    implements ContextUpRef<CombinedFetchAgent<Res>, FetchAgent<Res>> {\n\n  readonly upKey: ContextUpKey.UpKey<CombinedFetchAgent<Res>, FetchAgent<Res>>;\n\n  constructor(name: string) {\n    super(name);\n    this.upKey = this.createUpKey(\n        opts => opts.seed.keep.thru(\n            (...agents) => {\n              if (agents.length) {\n                return nextArg(combineFetchAgents(agents));\n              }\n\n              const defaultProvider = (): AfterEvent<[CombinedFetchAgent<Res>]> => afterThe(defaultFetchAgent);\n\n              return nextAfterEvent(opts.byDefault(defaultProvider) || defaultProvider());\n            },\n        ),\n    );\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          CombinedFetchAgent<Res>,\n          EventKeeper<FetchAgent<Res>[]> | FetchAgent<Res>,\n          AfterEvent<FetchAgent<Res>[]>>,\n  ): CombinedFetchAgent<Res> {\n\n    let delegated!: CombinedFetchAgent<Res>;\n\n    opts.context.get(\n        this.upKey,\n        'or' in opts ? { or: opts.or != null ? afterThe(opts.or) : opts.or } : undefined,\n    )!(agent => delegated = agent);\n\n    return (next, request) => delegated(next, request);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultFetchAgent<Res extends any[]>(\n    next: (this: void, request: Request) => OnEvent<Res>,\n    request: Request,\n): OnEvent<Res> {\n  return next(request);\n}\n\n/**\n * @internal\n */\nexport function combineFetchAgents<Res extends any[]>(agents: FetchAgent<Res>[]): CombinedFetchAgent<Res> {\n  return (next, request) => {\n\n    const fetch: (agentIdx: number, agentRequest: Request) => OnEvent<Res> = (agentIdx, agentRequest) => {\n\n      const agent = agents[agentIdx];\n\n      if (!agent) {\n        return next(agentRequest);\n      }\n\n      return onSupplied(\n          agent(\n              (nextRequest = agentRequest) => fetch(agentIdx + 1, nextRequest),\n              agentRequest,\n          ),\n      );\n    };\n\n    return fetch(0, request);\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextUpRef } from 'context-values/updatable';\nimport { EventSender, OnEvent } from 'fun-events';\nimport { FetchAgentKey } from './fetch-agent-key.impl';\n\n/**\n * HTTP fetch agent signature.\n *\n * The agent can be used to alter [[HttpFetch]] processing. For that it should be registered in appropriate context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by [[HttpFetch]].\n */\nexport type HttpFetchAgent =\n/**\n * @param next  Either calls the next agent in chain, or actually fetches the data if this agent is the last one.\n * Accepts an optional `Request` parameter. The original request will be used instead when omitted.\n * @param request  HTTP request.\n *\n * @returns An `EventSender` of response object(s). It is returned either to preceding agent in chain, or as a result of\n * [[HttpFetch]] call.\n */\n    (\n        this: void,\n        next: (this: void, request?: Request) => OnEvent<[Response]>,\n        request: Request,\n    ) => EventSender<[Response]>;\n\nexport namespace HttpFetchAgent {\n\n  /**\n   * Combined HTTP fetch agent signature.\n   *\n   * This is what is available under [[HttpFetchAgent]] key.\n   */\n  export type Combined =\n  /**\n   * @param next  Either calls the next agent in chain, or actually fetches the data if this agent is the last one.\n   * Accepts `Request` parameter.\n   * @param request  HTTP request.\n   *\n   * @returns An `OnEvent` registrar of response object(s) receivers. It is returned as a result of [[HttpFetch]] call.\n   */\n      (\n          this: void,\n          next: (this: void, request: Request) => OnEvent<[Response]>,\n          request: Request,\n      ) => OnEvent<[Response]>;\n\n}\n\n/**\n * A key of context value containing an [[HttpFetchAgent]] instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the fetch.\n */\nexport const HttpFetchAgent: ContextUpRef<HttpFetchAgent.Combined, HttpFetchAgent> = (\n    /*#__PURE__*/ new FetchAgentKey<[Response]>('http-fetch-agent')\n);\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { EventEmitter, EventSupply, eventSupply, OnEvent, onEventBy } from 'fun-events';\nimport { DomEventDispatcher } from 'fun-events/dom';\nimport { HttpFetch } from './http-fetch';\nimport { HttpFetchAgent } from './http-fetch-agent';\n\nconst HttpFetchAborted = {};\n\n/**\n * @internal\n */\nexport function newHttpFetch(context: BootstrapContext): HttpFetch {\n\n  const window = context.get(BootstrapWindow);\n  const agent = context.get(HttpFetchAgent);\n\n  return (input, init) => agent(fetch, new Request(input, init));\n\n  function fetch(request: Request): OnEvent<[Response]> {\n    return onEventBy(receiver => {\n\n      const responseEmitter = new EventEmitter<[Response]>();\n      let supply: EventSupply;\n\n      if ('AbortController' in window) {\n\n        const abortController = new (window as any).AbortController();\n        const { signal } = abortController;\n\n        supply = eventSupply(reason => {\n          if (reason === HttpFetchAborted) {\n            abortController.abort();\n          }\n        });\n        receiver.supply.whenOff(() => supply.off(HttpFetchAborted)).needs(supply);\n        responseEmitter.on({\n          supply,\n          receive(ctx, response) {\n            receiver.receive(ctx, response);\n          },\n        });\n\n        const customSignal = request.signal;\n\n        if (customSignal) {\n          new DomEventDispatcher(customSignal).on('abort').once(() => abortController.abort());\n          if (customSignal.aborted) {\n            abortController.abort();\n          }\n        }\n\n        request = new Request(request, { signal });\n      } else {\n        supply = responseEmitter.on(receiver);\n      }\n\n      window.fetch(request)\n          .then(response => {\n            responseEmitter.send(response);\n            supply.off();\n          })\n          .catch(reason => supply.off(reason));\n    });\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { bootstrapDefault } from '@wesib/wesib';\nimport { FnContextKey, FnContextRef } from 'context-values/updatable';\nimport { OnEvent } from 'fun-events';\nimport { newHttpFetch } from './http-fetch.impl';\n\n/**\n * HTTP fetch function signature.\n *\n * This is a function that wraps browser's\n * [fetch()](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch) function and provides\n * additional functionality. E.g. request interception.\n *\n * This function returns an `OnEvent` sender instead of a `Promise`. This allows to report multiple responses.\n * E.g. when the resource refresh requested and delivered. The request is sent whenever a receiver is registered\n * in this sender. When the fetch completes the response supply is cut off, and callbacks registered with its\n * `whenOff()` method are notified. When fetch fails for whatever reason, this reason is passed to these callbacks.\n * The fetch can be aborted by cutting off the response supply. I.e. by calling its `off()` method.\n *\n * An instance of [[HttpFetch]] is available from bootstrap context.\n */\nexport type HttpFetch =\n/**\n * @param input  The resource to fetch. This can either an URL string, or a `Request` object.\n * @param init  Custom settings to apply to the request.\n *\n * @returns An `OnEvent` sender of responses.\n */\n    (this: void, input: RequestInfo, init?: RequestInit) => OnEvent<[Response]>;\n\n/**\n * A key of bootstrap context value containing an [[HttpFetch]] instance.\n */\nexport const HttpFetch: FnContextRef<Parameters<HttpFetch>, ReturnType<HttpFetch>> = (\n    /*#__PURE__*/ new FnContextKey<Parameters<HttpFetch>, ReturnType<HttpFetch>>(\n        'http-fetch',\n        {\n          byDefault: bootstrapDefault(newHttpFetch),\n        },\n    )\n);\n","import {\n  BootstrapContext,\n  BootstrapRoot,\n  ComponentContext,\n  ComponentContext__symbol,\n  ComponentEvent,\n} from '@wesib/wesib';\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { EventEmitter, OnEvent, trackValue, ValueTracker } from 'fun-events';\nimport { DomEventDispatcher } from 'fun-events/dom';\n\n/**\n * @internal\n */\nexport type HierarchyRoot = ValueTracker<ComponentContext | undefined>;\n\n/**\n * @internal\n */\nexport const HierarchyRoot = (/*#__PURE__*/ new SingleContextKey<HierarchyRoot>(\n    'hierarchy-root',\n    {\n      byDefault: bsContext => {\n\n        const root: Element = bsContext.get(BootstrapRoot);\n\n        new DomEventDispatcher(root).on<ComponentEvent>('wesib:component')(\n            ({ context }: ComponentEvent) => context.get(HierarchyUpdates).issue(),\n        );\n\n        return trackValue();\n      },\n    },\n));\n\nconst HierarchyUpdates__key = (/*#__PURE__*/ new SingleContextKey<HierarchyUpdates>(\n    'hierarchy-updates',\n    {\n      byDefault: context => new HierarchyUpdates(context.get(ComponentContext)),\n    },\n));\n\n/**\n * @internal\n */\nexport class HierarchyUpdates {\n\n  static get [ContextKey__symbol](): ContextKey<HierarchyUpdates> {\n    return HierarchyUpdates__key;\n  }\n\n  readonly on: OnEvent<[ComponentContext]>;\n  readonly send: (this: void) => void;\n  readonly issue: () => void;\n\n  constructor(context: ComponentContext) {\n\n    const updates = new EventEmitter<[ComponentContext]>();\n    const hierarchyRoot = context.get(BootstrapContext).get(HierarchyRoot);\n\n    this.on = updates.on;\n    this.send = () => updates.send(context);\n    this.issue = () => {\n\n      const parent = findParentContext(context);\n\n      if (parent) {\n        parent[0].get(HierarchyUpdates).send();\n      } else {\n        hierarchyRoot.it = context;\n      }\n    };\n  }\n\n}\n\n/**\n * @internal\n */\nexport function findParentContext(of: ComponentContext): [ComponentContext, boolean] | undefined {\n\n  const root = of.get(BootstrapContext).get(BootstrapRoot);\n  let element: Node = of.element;\n  let immediate = true;\n\n  if (element === root) {\n    return;\n  }\n  for (;;) {\n\n    const parent = element.parentNode;\n\n    if (!parent) {\n      return;\n    }\n\n    const ctx: ComponentContext = (parent as any)[ComponentContext__symbol];\n\n    if (ctx) {\n      return [ctx, immediate];\n    }\n    if (parent === root) {\n      return;\n    }\n\n    immediate = false;\n    element = parent;\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { BootstrapContext, ComponentContext } from '@wesib/wesib';\nimport { ContextKey, ContextKey__symbol, ContextValues, ContextValueSpec, SingleContextKey } from 'context-values';\nimport { AfterEvent, afterEventBy, EventKeeper, eventSupply, trackValue } from 'fun-events';\nimport { newHierarchyRegistry } from './hierarchy-registry.impl';\nimport { findParentContext, HierarchyRoot, HierarchyUpdates } from './hierarchy-updates.impl';\n\n/**\n * @internal\n */\nconst HierarchyContext__key = (/*#__PURE__*/ new SingleContextKey<HierarchyContext>(\n    'hierarchy-context',\n    {\n      byDefault: context => newHierarchyContext(context.get(ComponentContext)),\n    },\n));\n\n/**\n * Component's hierarchy context.\n *\n * Passes provided values to hierarchy contexts of nested components.\n *\n * Available as component context value.\n *\n * @typeparam T  A type of component.\n */\nexport abstract class HierarchyContext<T extends object = any> extends ContextValues {\n\n  /**\n   * A key of component context value containing its hierarchy context instance.\n   */\n  static get [ContextKey__symbol](): ContextKey<HierarchyContext> {\n    return HierarchyContext__key;\n  }\n\n  /**\n   * Component context.\n   */\n  abstract readonly context: ComponentContext<T>;\n\n  /**\n   * An `AfterEvent` keeper of enclosing component's hierarchy context.\n   *\n   * May send `undefined` when component is outside of hierarchy. E.g. when it is disconnected.\n   */\n  abstract readonly up: AfterEvent<[HierarchyContext?]>;\n\n  /**\n   * Provides hierarchy context value.\n   *\n   * The provided value will be available in context itself, as well as in all nested hierarchy contexts.\n   *\n   * Note that the provided value key has to `ContextUpKey`.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  abstract provide<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<HierarchyContext<T>, any, Deps, Src | EventKeeper<Src[]>, Seed>,\n  ): () => void;\n\n}\n\n/**\n * @internal\n */\nfunction newHierarchyContext<T extends object>(context: ComponentContext<T>): HierarchyContext<T> {\n\n  const hierarchyRoot = context.get(BootstrapContext).get(HierarchyRoot);\n  const up = afterEventBy<[HierarchyContext?]>(\n      receiver => {\n\n        const parentHierarchy = trackValue<HierarchyContext>();\n        const rootSupply = eventSupply().needs(receiver.supply);\n        const parentSupply = eventSupply().needs(receiver.supply);\n        const updateParent = (): void => {\n\n          const parent = findParentContext(context);\n\n          if (parent) {\n\n            const [parentCtx, immediate] = parent;\n\n            parentHierarchy.it = parentCtx.get(HierarchyContext);\n            rootSupply.off();\n            if (immediate) {\n              parentSupply.off();\n            }\n          } else {\n            parentHierarchy.it = undefined;\n          }\n        };\n\n        hierarchyRoot.read({\n          supply: rootSupply,\n          receive: () => context.connected && updateParent(),\n        });\n        parentHierarchy.read.consume(\n            newParent => newParent && newParent.context.get(HierarchyUpdates).on(updateParent),\n        ).needs(parentSupply);\n        parentHierarchy.read(receiver);\n        context.whenOn({\n          supply: receiver.supply,\n          receive: (_, onSupply) => {\n            updateParent();\n            onSupply.whenOff(\n                () => {\n                  Promise.resolve().then(\n                      () => context.connected || (parentHierarchy.it = undefined),\n                  );\n                },\n            );\n          },\n        });\n      },\n  ).share();\n  const registry = newHierarchyRegistry<T>(up);\n  const values = registry.newValues();\n\n  class HierarchyCtx extends HierarchyContext<T> {\n\n    readonly get = values.get;\n\n    get context(): ComponentContext<T> {\n      return context;\n    }\n\n    get up(): AfterEvent<[HierarchyContext?]> {\n      return up;\n    }\n\n    provide<Deps extends any[], Src, Seed>(\n        spec: ContextValueSpec<HierarchyContext<T>, any, Deps, Src | EventKeeper<Src[]>, Seed>,\n    ): () => void {\n      return registry.provide(spec);\n    }\n\n  }\n\n  return new HierarchyCtx();\n}\n","import { nextArgs } from 'call-thru';\nimport { ContextRegistry } from 'context-values';\nimport { AfterEvent, nextAfterEvent } from 'fun-events';\nimport { HierarchyContext } from './hierarchy-context';\n\n/**\n * @internal\n */\nexport function newHierarchyRegistry<T extends object>(\n    up: AfterEvent<[HierarchyContext?]>,\n): ContextRegistry<HierarchyContext<T>> {\n  return new ContextRegistry(\n      key => up.keep.thru(\n          upper => upper ? nextAfterEvent(upper.get(key as any)) : nextArgs(),\n      ) as any,\n  );\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ComponentClass, ComponentContext } from '@wesib/wesib';\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { ValueTracker } from 'fun-events';\nimport { ElementNodeList } from './element-node-list';\n\n/**\n * Arbitrary element node within component tree. Either bound to some component or not.\n */\nexport type ElementNode =\n    | RawElementNode\n    | ComponentNode;\n\n/**\n * Component tree node representing arbitrary element.\n *\n * This is a base interface of all element node implementations.\n */\nexport interface ComponentTreeNode {\n\n  /**\n   * The element itself.\n   */\n  readonly element: any;\n\n  /**\n   * A context of component bound to this element, if any.\n   */\n  readonly context?: ComponentContext<any>;\n\n  /**\n   * Parent element node, or `null` if element has no parent.\n   */\n  readonly parent: ElementNode | null;\n\n  /**\n   * Selects component nodes matching the given selector.\n   *\n   * @param selector  Simple CSS selector of nested components.\n   * @param mode  Component nodes pick mode.\n   *\n   * @returns Dynamically updatable list of matching component nodes.\n   */\n  select(\n      selector: string,\n      mode?: ComponentPickMode,\n  ): ElementNodeList<ComponentNode>;\n\n  /**\n   * Selects component nodes of the given type.\n   *\n   * @param componentType  Nested component type with custom element name.\n   * @param mode  Component nodes pick mode.\n   *\n   * @returns Dynamically updatable list of matching component nodes.\n   */\n  select<T extends object>(\n      componentType: ComponentClass<T>,\n      mode?: ComponentPickMode,\n  ): ElementNodeList<ComponentNode<T>>;\n\n  /**\n   * Selects element nodes matching the given selector.\n   *\n   * @param selector  Simple CSS selector of nested elements. E.g. CSS class selector.\n   * @param mode  A mode of node picking from component tree.\n   *\n   * @returns Dynamically updatable list of matching element nodes.\n   */\n  select(\n      selector: string,\n      mode: ElementPickMode,\n  ): ElementNodeList;\n\n  /**\n   * Tracks element attribute.\n   *\n   * @param name  Target attribute name.\n   *\n   * @returns Target attribute's value tracker.\n   */\n  attribute(name: string): ValueTracker<string | null, string>;\n\n  /**\n   * Tracks element element property.\n   *\n   * The changes are tracked with `StateTracker`. So it is expected that the target property notifies on its changes\n   * with state updater. E.g. when it is defined by `@DomProperty` decorator.\n   *\n   * @param key  Target property key.\n   *\n   * @returns Target property's value tracker.\n   */\n  property<V>(key: PropertyKey): ValueTracker<V>;\n\n}\n\n/**\n * Element node representing raw element not bound to any component.\n */\nexport interface RawElementNode extends ComponentTreeNode {\n\n  readonly context?: undefined;\n\n}\n\n/**\n * Element node representing an element bound to some component.\n */\nexport interface ComponentNode<T extends object = any> extends ComponentTreeNode {\n\n  readonly context: ComponentContext<T>;\n\n}\n\n/**\n * A key of component context value containing a component node instance.\n */\nexport const ComponentNode: SingleContextRef<ComponentNode> = (\n    /*#__PURE__*/ new SingleContextKey<ComponentNode>('component-node')\n);\n\n/**\n * A mode of node picking from component tree.\n */\nexport interface ElementPickMode {\n\n  /**\n   * Set to `true` to select arbitrary nodes. Otherwise - select only component nodes.\n   */\n  all?: boolean;\n\n  /**\n   * Set to `true` to select from entire subtree. Otherwise - select from element child nodes only.\n   */\n  deep?: boolean;\n\n}\n\n/**\n * A mode that picks component nodes from component tree.\n */\nexport interface ComponentPickMode extends ElementPickMode {\n\n  all?: false;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { AIterable, ArrayLikeIterable } from 'a-iterable';\nimport { AfterEvent, AfterEvent__symbol, EventKeeper, EventSender, OnEvent, OnEvent__symbol } from 'fun-events';\nimport { ElementNode } from './element-node';\n\n/**\n * Dynamically updatable list of selected element nodes.\n *\n * It is an iterable of nodes.\n *\n * Implements an `EventSender` interface by sending added and removed nodes arrays.\n *\n * Implements an `EventKeeper` interface by sending updated node list.\n */\nexport abstract class ElementNodeList<N extends ElementNode = ElementNode>\n    extends AIterable<N>\n    implements EventSender<[N[], N[]]>, EventKeeper<[ElementNodeList<N>]> {\n\n  /**\n   * An `OnEvent` sender of list changes. Sends arrays of added and removed nodes.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly onUpdate: OnEvent<[N[], N[]]>;\n\n  get [OnEvent__symbol](): OnEvent<[N[], N[]]> {\n    return this.onUpdate;\n  }\n\n  /**\n   * An `AfterEvent` keeper of current node list.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[ElementNodeList<N>]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[ElementNodeList<N>]> {\n    return this.read;\n  }\n\n  /**\n   * An `AfterEvent` keeper of node list changes.\n   *\n   * Sends an iterables of added and removed nodes. Sends current nodes immediately upon receiver registration.\n   */\n  abstract readonly track: AfterEvent<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]>;\n\n  /**\n   * An `AfterEvent` keeper of the first node in this list.\n   */\n  abstract readonly first: AfterEvent<[N?]>;\n\n}\n","import {\n  BootstrapContext,\n  ComponentClass,\n  DefaultNamespaceAliaser,\n  ElementObserver,\n  ElementObserverInit,\n  isElement,\n} from '@wesib/wesib';\nimport { AIterable, ArrayLikeIterable, filterIt, itsEach, itsFirst, itsIterator, mapIt, overArray } from 'a-iterable';\nimport { isPresent, nextArg, nextArgs } from 'call-thru';\nimport { AfterEvent, afterEventBy, afterSupplied, EventEmitter, eventSupply, OnEvent, onEventBy } from 'fun-events';\nimport { html__naming } from 'namespace-aliaser';\nimport { ElementNode, ElementPickMode } from './element-node';\nimport { ElementNodeList as ElementNodeList_ } from './element-node-list';\n\n/**\n * @internal\n */\nconst WATCH_DEEP: ElementObserverInit = { subtree: true };\n\n/**\n * @internal\n */\nexport function elementNodeList<N extends ElementNode>(\n    bsContext: BootstrapContext,\n    root: Element,\n    selectorOrType: string | ComponentClass<any>,\n    nodeOf: (node: Element, optional?: boolean) => N | undefined,\n    { deep, all }: ElementPickMode,\n): ElementNodeList_<N> {\n\n  const updates = new EventEmitter<[N[], N[]]>();\n  const init = deep ? WATCH_DEEP : undefined;\n  let cache = new Set<Element>();\n  let iterable: Iterable<N> | undefined;\n  let selector: string | undefined;\n\n  if (typeof selectorOrType === 'string') {\n    selector = selectorOrType;\n  } else {\n    bsContext.whenDefined(selectorOrType).then(({ elementDef: { name } }) => {\n      iterable = undefined;\n      if (name) {\n        selector = html__naming.name(name, bsContext.get(DefaultNamespaceAliaser));\n        if (updates.size) {\n\n          const selected = refresh();\n\n          if (selected.size) {\n\n            const added = Array.from(\n                filterIt<N | undefined, N>(\n                    mapIt(selected, node => nodeOf(node)),\n                    isPresent,\n                ),\n            );\n\n            if (added.length) {\n              updates.send(added, []);\n            }\n          }\n        }\n      }\n    });\n  }\n\n  const observer = bsContext.get(ElementObserver)(update);\n  let nodeList: ElementNodeList;\n\n  const onUpdate = onEventBy<[N[], N[]]>(receiver => {\n\n    const firstReceiver = !updates.size;\n    const supply = updates.on(receiver);\n\n    if (firstReceiver) {\n      refresh();\n      observer.observe(root, init);\n    }\n\n    return eventSupply(reason => {\n      supply.off(reason);\n      if (!updates.size) {\n        observer.disconnect();\n      }\n    }).needs(supply);\n  });\n  const read = afterEventBy<[ElementNodeList]>(onUpdate.thru(() => nodeList), () => [nodeList]);\n  const onTrackUpdate: OnEvent<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]> = onUpdate.thru(\n      (added, removed) => nextArgs(AIterable.of(added), AIterable.of(removed)),\n  );\n  const track = afterEventBy<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]>(receiver => {\n\n    const initialEmitter = new EventEmitter<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]>();\n\n    initialEmitter.on(receiver);\n    initialEmitter.send(nodeList, AIterable.of([]));\n\n    onTrackUpdate(receiver);\n  });\n  const first: AfterEvent<[N?]> = afterSupplied(read).keep.thru(\n      list => nextArg(itsFirst(list)),\n  );\n\n  if (!all) {\n    root.addEventListener('wesib:component', event => {\n\n      const element = event.target as Element;\n\n      if (cache.has(element)) {\n\n        const node = nodeOf(element) as N;\n\n        updates.send([node], []);\n      }\n    });\n  }\n\n  class ElementNodeList extends ElementNodeList_<N> {\n\n    get onUpdate(): OnEvent<[N[], N[]]> {\n      return onUpdate;\n    }\n\n    get read(): AfterEvent<[ElementNodeList]> {\n      return read;\n    }\n\n    get track(): AfterEvent<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]> {\n      return track;\n    }\n\n    get first(): AfterEvent<[N?]> {\n      return first;\n    }\n\n    [Symbol.iterator](): Iterator<N> {\n      return itsIterator(iterable || (iterable = filterIt<N | undefined, N>(\n          mapIt(\n              elements(),\n              element => nodeOf(element),\n          ),\n          isPresent,\n      )));\n    }\n\n  }\n\n  return nodeList = new ElementNodeList();\n\n  function elements(): Set<Element> {\n    return updates.size ? cache : refresh();\n  }\n\n  function refresh(): Set<Element> {\n    iterable = undefined;\n    return cache = select();\n  }\n\n  function select(): Set<Element> {\n\n    const sel = selector;\n\n    if (!sel) {\n      return new Set();\n    }\n    if (deep) {\n      return new Set(overArray(root.querySelectorAll(sel)));\n    }\n    return new Set(\n        filterIt(\n            overArray(root.children),\n            item => item.matches(sel),\n        ),\n    );\n  }\n\n  function update(mutations: MutationRecord[]): void {\n\n    const added: N[] = [];\n    const removed: N[] = [];\n\n    mutations.forEach(mutation => {\n      itsEach(\n          filterIt<N | undefined, N>(\n              mapIt(overArray(mutation.removedNodes), removeNode),\n              isPresent,\n          ),\n          node => removed.push(node),\n      );\n      itsEach(\n          filterIt<N | undefined, N>(\n              mapIt(overArray(mutation.addedNodes), addNode),\n              isPresent,\n          ),\n          node => added.push(node),\n      );\n    });\n    if (added.length || removed.length) {\n      updates.send(added, removed);\n    }\n  }\n\n  function addNode(node: Node): N | undefined {\n    if (!isElement(node)) {\n      return;\n    }\n    if (selector && node.matches(selector) && !cache.has(node)) {\n      cache.add(node);\n      return nodeOf(node);\n    }\n    return;\n  }\n\n  function removeNode(node: Node): N | undefined {\n    if (!isElement(node)) {\n      return;\n    }\n    if (!cache.delete(node)) {\n      return;\n    }\n    return nodeOf(node, true);\n  }\n\n}\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport {\n  EventEmitter,\n  eventReceiver,\n  EventReceiver,\n  eventSupply,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  noEventSupply,\n  OnEvent,\n  onEventBy,\n  ValueTracker,\n} from 'fun-events';\n\n/**\n * @internal\n */\nclass AttributesObserver {\n\n  private readonly _emitters = new Map<string, EventEmitter<[string, string | null]>>();\n  private _observer?: MutationObserver;\n\n  constructor(private readonly _bs: BootstrapContext, readonly element: Element) {\n  }\n\n  private get observer(): MutationObserver {\n    if (this._observer) {\n      return this._observer;\n    }\n\n    const Observer: typeof MutationObserver = (this._bs.get(BootstrapWindow) as any).MutationObserver;\n\n    return this._observer = new Observer(mutations => this._update(mutations));\n  }\n\n  observe(name: string, receiver: EventReceiver<[string, string | null]>): EventSupply {\n\n    const self = this;\n    const observer = this.observer;\n    const emitter = this._emitter(name);\n    const rcv = eventReceiver(receiver);\n    const supply = emitter.on({\n      supply: eventSupply(() => {\n        this._emitters.delete(name);\n        observer.disconnect();\n        if (this._emitters.size) {\n          reconnect();\n        } else {\n          this._observer = undefined;\n        }\n      }).needs(rcv.supply),\n      receive: (ctx, newValue, oldValue) => rcv.receive(ctx, newValue, oldValue),\n    });\n\n    observer.disconnect();\n    reconnect();\n\n    return supply;\n\n    function reconnect(): void {\n      self._update(observer.takeRecords());\n      observer.observe(self.element, {\n        attributes: true,\n        attributeOldValue: true,\n        attributeFilter: Array.from(self._emitters.keys()),\n      });\n    }\n  }\n\n  private _update(mutations: MutationRecord[]): void {\n    mutations.forEach(mutation => {\n\n      const attributeName = mutation.attributeName as string;\n      const emitter = this._emitters.get(attributeName);\n\n      if (emitter) {\n        emitter.send(this.element.getAttribute(attributeName) as string, mutation.oldValue);\n      }\n    });\n  }\n\n  private _emitter(name: string): EventEmitter<[string, string | null]> {\n\n    const emitter = new EventEmitter<[string, string | null]>();\n\n    this._emitters.set(name, emitter);\n\n    return emitter;\n  }\n\n}\n\n/**\n * @internal\n */\nclass AttributeTracker extends ValueTracker<string | null, string> {\n\n  private readonly _updates = new EventEmitter<[string, string | null]>();\n  readonly on: OnEvent<[string, string | null]>;\n\n  constructor(\n      private readonly _observer: AttributesObserver,\n      private readonly _name: string,\n  ) {\n    super();\n\n    let observeSupply = noEventSupply();\n\n    this.on = onEventBy(receiver => {\n      if (!this._updates.size) {\n        observeSupply = this._observer.observe(\n            _name,\n            (newValue, oldValue) => this._updates.send(newValue, oldValue),\n        );\n      }\n      receiver.supply.needs(observeSupply);\n      this._updates.on(receiver).whenOff(reason => {\n        if (!this._updates.size) {\n          observeSupply.off(reason);\n        }\n      });\n    });\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this._updates);\n  }\n\n  get it(): string | null {\n    return this._observer.element.getAttribute(this._name);\n  }\n\n  set it(value: string | null) {\n    this._observer.element.setAttribute(this._name, value as string);\n  }\n\n}\n\n/**\n * @internal\n */\nexport class NodeAttributes {\n\n  private readonly _attrs = new Map<string, AttributeTracker>();\n  private readonly _observer: AttributesObserver;\n\n  constructor(bs: BootstrapContext, element: any) {\n    this._observer = new AttributesObserver(bs, element);\n  }\n\n  get(name: string): ValueTracker<string | null, string> {\n\n    const existing = this._attrs.get(name);\n\n    if (existing) {\n      return existing;\n    }\n\n    const created = new AttributeTracker(this._observer, name);\n\n    this._attrs.set(name, created);\n\n    return created;\n  }\n\n}\n","import { ComponentContext, ComponentState, domPropertyPathTo } from '@wesib/wesib';\nimport {\n  EventEmitter,\n  EventSupply,\n  eventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  OnEvent,\n  ValueTracker,\n} from 'fun-events';\n\n/**\n * @internal\n */\nclass PropertyTracker<T> extends ValueTracker<T> {\n\n  private readonly _updates = new EventEmitter<[T, T]>();\n  private readonly _supply = eventSupply();\n\n  constructor(\n      private readonly _element: any,\n      private readonly _key: PropertyKey,\n  ) {\n    super();\n  }\n\n  get on(): OnEvent<[T, T]> {\n    return this._updates.on;\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return this._supply;\n  }\n\n  get it(): T {\n    return this._element[this._key];\n  }\n\n  set it(value: T) {\n    this._element[this._key] = value;\n  }\n\n  done(reason?: any): this {\n    this._supply.off(reason);\n    return this;\n  }\n\n  bind(context: ComponentContext): void {\n\n    const supply = eventSupplyOf(this);\n    const propertyState = context.get(ComponentState).track(domPropertyPathTo(this._key));\n\n    supply.needs(\n        propertyState.onUpdate({\n          supply: eventSupply().whenOff(reason => this._updates.done(reason)),\n          receive: (_ctx, _path, newValue: any, oldValue: any) => this._updates.send(newValue, oldValue),\n        }).needs(supply),\n    );\n  }\n\n}\n\n/**\n * @internal\n */\nexport class NodeProperties {\n\n  private readonly _props = new Map<PropertyKey, PropertyTracker<any>>();\n  private _context?: ComponentContext<any>;\n\n  constructor(private readonly _element: any) {\n  }\n\n  bind(context: ComponentContext): void {\n    this._context = context;\n    this._props.forEach(prop => prop.bind(context));\n  }\n\n  get<T>(key: PropertyKey): ValueTracker<T> {\n\n    const existing = this._props.get(key);\n\n    if (existing) {\n      return existing;\n    }\n\n    const created = new PropertyTracker<any>(this._element, key);\n\n    if (this._context) {\n      created.bind(this._context);\n    }\n    this._props.set(key, created);\n\n    return created;\n  }\n\n}\n","import {\n  BootstrapContext,\n  ComponentClass,\n  ComponentContext,\n  ComponentContext__symbol,\n  ComponentEvent,\n  ElementAdapter,\n} from '@wesib/wesib';\nimport { ValueTracker } from 'fun-events';\nimport { ComponentNode, ComponentTreeNode, ElementPickMode, ElementNode as ElementNode_ } from './element-node';\nimport { ElementNodeList } from './element-node-list';\nimport { elementNodeList } from './element-node-list.impl';\nimport { NodeAttributes } from './node-attributes.impl';\nimport { NodeProperties } from './node-properties.impl';\n\n/**\n * @internal\n */\nconst ElementNode__symbol = (/*#__PURE__*/ Symbol('element-node'));\n\n/**\n * @internal\n */\nclass ElementNode implements ComponentTreeNode {\n\n  private readonly _attrs: NodeAttributes;\n  private readonly _props: NodeProperties;\n\n  constructor(private readonly _bs: BootstrapContext, readonly element: Element) {\n    this._attrs = new NodeAttributes(_bs, element);\n    this._props = new NodeProperties(element);\n    (element as any)[ElementNode__symbol] = this;\n\n    const context = (element as any)[ComponentContext__symbol] as ComponentContext<any> | undefined;\n\n    if (context) {\n      this._bind(context);\n    } else {\n      element.addEventListener('wesib:component', event => this._bind((event as ComponentEvent).context));\n    }\n  }\n\n  get context(): ComponentContext<any> | undefined {\n    return (this.element as any)[ComponentContext__symbol];\n  }\n\n  get parent(): ElementNode_ | null {\n\n    const parent = this.element.parentNode;\n\n    return parent && elementNodeOf(this._bs, parent as Element);\n  }\n\n  select(selector: string | ComponentClass<any>, mode?: ElementPickMode): ElementNodeList<any> {\n    return selectNodes(this._bs, this.element, selector, mode);\n  }\n\n  attribute(name: string): ValueTracker<string | null, string> {\n    return this._attrs.get(name);\n  }\n\n  property<V>(key: PropertyKey): ValueTracker<V> {\n    return this._props.get(key);\n  }\n\n  private _bind(context: ComponentContext): void {\n    this._props.bind(context);\n  }\n\n}\n\n/**\n * @internal\n */\nexport function elementNodeOf(bsContext: BootstrapContext, element: Element, optional?: boolean): ElementNode_ {\n\n  const existing: ElementNode_ = (element as any)[ElementNode__symbol];\n\n  return (existing || optional) ? existing : new ElementNode(bsContext, element);\n}\n\n/**\n * @internal\n */\nfunction selectNodes(\n    bsContext: BootstrapContext,\n    root: Element,\n    selector: string | ComponentClass<any>,\n    mode: ElementPickMode = {},\n): ElementNodeList<any> {\n  if (mode.all) {\n    return elementNodeList<ElementNode_>(\n        bsContext,\n        root,\n        selector,\n        (element, optional) => elementNodeOf(bsContext, element, optional),\n        mode,\n    );\n  }\n\n  const adapter = bsContext.get(ElementAdapter);\n\n  return elementNodeList<ComponentNode>(\n      bsContext,\n      root,\n      selector,\n      (element, optional) => adapter(element) && elementNodeOf(bsContext, element, optional) as ComponentNode,\n      mode,\n  );\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { BootstrapContext, ComponentContext, FeatureDef, FeatureDef__symbol, StateSupport } from '@wesib/wesib';\nimport { ComponentNode } from './element-node';\nimport { elementNodeOf } from './element-node.impl';\n\n/**\n * @internal\n */\nconst ComponentTreeSupport__feature: FeatureDef = {\n  needs: StateSupport,\n  setup(setup) {\n    setup.perComponent({\n      a: ComponentNode,\n      by(context: ComponentContext) {\n        return elementNodeOf(context.get(BootstrapContext), context.element) as ComponentNode;\n      },\n    });\n  },\n};\n\n/**\n * Component tree support feature.\n *\n * Provides a [[ComponentNode]] instance for each component.\n */\nexport class ComponentTreeSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return ComponentTreeSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { AfterEvent, AfterEvent__symbol, EventKeeper, EventSender, OnEvent, OnEvent__symbol } from 'fun-events';\nimport { OnDomEvent } from 'fun-events/dom';\nimport { EnterPageEvent, LeavePageEvent, NavigationEvent, StayOnPageEvent } from './navigation.event';\nimport { Page } from './page';\nimport { PageParam } from './page-param';\n\n/**\n * @internal\n */\nconst Navigation__key = (/*#__PURE__*/ new SingleContextKey<Navigation>('navigation'));\n\n/**\n * Browser navigation service.\n *\n * Expected to be used as a [History] and [Location] APIs replacement.\n *\n * Fires additional navigation events the browser does not support natively.\n *\n * Implements an `EventSender` interface by sending {@link NavigationEvent navigation events} to registered receivers.\n *\n * Implements an `EventKeeper` interface by sending current {@link Page page} to registered receivers.\n *\n * Available as bootstrap context value when [[NavigationSupport]] feature is enabled.\n *\n * [History]: https://developer.mozilla.org/en-US/docs/Web/API/History\n * [Location]: https://developer.mozilla.org/en-US/docs/Web/API/Location\n */\nexport abstract class Navigation implements EventSender<[NavigationEvent]>, EventKeeper<[Page]> {\n\n  static get [ContextKey__symbol](): ContextKey<Navigation> {\n    return Navigation__key;\n  }\n\n  /**\n   * The number of element in navigation history.\n   */\n  abstract readonly length: number;\n\n  /**\n   * An `OnDomEvent` registrar of enter page event receivers.\n   */\n  abstract readonly onEnter: OnDomEvent<EnterPageEvent>;\n\n  /**\n   * An `OnDomEvent` registrar of leave page event receivers.\n   *\n   * These receivers may cancel navigation by calling `preventDefault()` method of received event.\n   */\n  abstract readonly onLeave: OnDomEvent<LeavePageEvent>;\n\n  /**\n   * An `OnDomEvent` registrar of stay on page event receivers.\n   *\n   * These receivers are informed when navigation has been cancelled by one of leave page event receivers,\n   * navigation failed due to e.g. invalid URL, or when another navigation request initiated before the page left.\n   */\n  abstract readonly onStay: OnDomEvent<StayOnPageEvent>;\n\n  /**\n   * An `OnEvent` registrar of navigation events receivers.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly on: OnEvent<[NavigationEvent]>;\n\n  get [OnEvent__symbol](): OnEvent<[NavigationEvent]> {\n    return this.on;\n  }\n\n  /**\n   * An `AfterEvent` registrar of current page receivers.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[Page]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[Page]> {\n    return this.read;\n  }\n\n  /**\n   * Goes to the previous page in navigation history.\n   *\n   * Calling this method is the same as calling `go(-1)`.\n   */\n  back(): void {\n    this.go(-1);\n  }\n\n  /**\n   * Goes to the next page in navigation history.\n   *\n   * Calling this method is the same as calling `go(1)`.\n   */\n  forward(): void {\n    this.go(1);\n  }\n\n  /**\n   * Loads a page from navigation history, identified by its relative location to the current page.\n   *\n   * For example `-1` navigates to previous page, while `1` navigates to the next one. If you specify an out-of-bounds\n   * value (for instance, specifying -1 when there are no previously-visited pages in navigation history), this method\n   * silently has no effect.\n   *\n   * @param delta  Relative location in navigation history to navigate to. The absent value or value of `0` reloads\n   * the current page.\n   */\n  abstract go(delta?: number): void;\n\n  /**\n   * Reloads current page.\n   *\n   * Calling this method is the same as calling `go()`.\n   */\n  reload(): void {\n    this.go();\n  }\n\n  /**\n   * Opens a page by navigating to the given `target`.\n   *\n   * Appends an entry to navigation history.\n   *\n   * @param target  Either navigation target or URL to navigate to.\n   * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually navigate.\n   * Then navigates to the `target`, unless the event cancelled.\n   * @fires NavigateEvent@wesib:navigate  On window object when navigation succeed.\n   *\n   * @returns A promise resolved to navigated page, or to `null` otherwise.\n   */\n  abstract open(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  /**\n   * Replaces current navigation history entry with the given `target`.\n   *\n   * @param target  Either navigation target or URL to replace current history entry with.\n   * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually update the history.\n   * Then navigates to the `target`, unless the event cancelled.\n   * @fires NavigateEvent@wesib:navigate  On window object when history updated.\n   *\n   * @returns A promise resolved to navigated page, or to `null` otherwise.\n   */\n  abstract replace(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  /**\n   * Replaces current page URL with the given one.\n   *\n   * Does not alter current page state, and does not trigger any events.\n   *\n   * @param url  An URL to replace the\n   *\n   * @returns Current page with updated URL.\n   */\n  abstract update(url: string | URL): Page;\n\n  /**\n   * Creates parameterized navigation instance and assigns a page parameter to apply to target page.\n   *\n   * @typeparam T  Parameter value type.\n   * @typeparam I  Parameter input type.\n   * @param ref  A reference to page navigation parameter to apply.\n   * @param input  Parameter input to use when constructing its value.\n   *\n   * @returns New parameterized navigation instance.\n   */\n  abstract with<T, I>(ref: PageParam.Ref<T, I>, input: I): Navigation.Parameterized;\n\n}\n\nexport namespace Navigation {\n\n  /**\n   * Parameterized navigation.\n   *\n   * Allows to assign target page parameters prior to navigating to it.\n   */\n  export interface Parameterized {\n\n    /**\n     * Applies parameter to navigation target page.\n     *\n     * @typeparam T  Parameter value type.\n     * @typeparam I  Parameter input type.\n     * @param ref  A reference to page navigation parameter to apply.\n     * @param input  Parameter input to use when constructing its value.\n     *\n     * @returns New parameterized navigation instance.\n     */\n    with<T, I>(ref: PageParam.Ref<T, I>, input: I): Parameterized;\n\n    /**\n     * Opens a page by navigating to the given `target` with provided page parameters.\n     *\n     * Appends an entry to navigation history.\n     *\n     * @param target  Either navigation target or URL to navigate to.\n     * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually navigate.\n     * Then navigates to the `target`, unless the event cancelled.\n     * @fires NavigateEvent@wesib:navigate  On window object when navigation succeed.\n     *\n     * @returns A promise resolved to navigated page, or to `null` otherwise.\n     */\n    open(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n    /**\n     * Replaces the most recent entry in navigation history with the given `target` and provided page parameters.\n     *\n     * @param target  Either navigation target or URL to replace the latest history entry with.\n     * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually update the history.\n     * Then navigates to the `target`, unless the event cancelled.\n     * @fires NavigateEvent@wesib:navigate  On window object when history updated.\n     *\n     * @returns A promise resolved to navigated page, or to `null` otherwise.\n     */\n    replace(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  }\n\n  /**\n   * Navigation target.\n   *\n   * This is passed to [[Navigation.open]] and [[Navigation.replace]] methods.\n   */\n  export interface Target {\n\n    /**\n     * An URL to update the browser location string to.\n     */\n    readonly url?: string | URL;\n\n    /**\n     * Opaque data to apply to session history. I.e. either push or replace.\n     */\n    readonly data?: any;\n\n    /**\n     * New window title.\n     */\n    readonly title?: string;\n\n  }\n\n  /**\n   * Navigation target with URL value.\n   */\n  export interface URLTarget extends Target {\n\n    readonly url: URL;\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { Page } from './page';\nimport { PageParamContext } from './page-param-context';\n\n/**\n * A key of {@link PageParam.Ref page parameter request} property containing requested page parameter.\n */\nexport const PageParam__symbol = (/*#__PURE__*/ Symbol('page-param'));\n\n/**\n * Page navigation parameter.\n *\n * Can applied before navigation happened (i.e. to [[LeavePageEvent]]). Then it will be available to the target page\n * both before and after navigation.\n *\n * @typeparam T  Parameter value type.\n * @typeparam I  Parameter input type.\n */\nexport abstract class PageParam<T, I> implements PageParam.Ref<T, I> {\n\n  get [PageParam__symbol](): this {\n    return this;\n  }\n\n  /**\n   * Creates page parameter handle.\n   *\n   * This method is called when {@link Page.put assigning new page parameter}.It is called at most once per request,\n   * unless this parameter is assigned already. A {@link PageParam.Handle.put} method will be called instead\n   * in the latter case.\n   *\n   * @param page  A page to assign navigation parameter to.\n   * @param input  Parameter input used to construct its initial value.\n   * @param context  Page parameter context.\n   *\n   * @returns New page parameter value handle.\n   */\n  abstract create(page: Page, input: I, context: PageParamContext): PageParam.Handle<T, I>;\n\n}\n\nexport namespace PageParam {\n\n  /**\n   * Page navigation parameter reference.\n   *\n   * @typeparam T  Parameter value type.\n   * @typaparam I  Parameter input type.\n   */\n  export interface Ref<T, I> {\n\n    /**\n     * Referred page navigation parameter instance.\n     */\n    readonly [PageParam__symbol]: PageParam<T, I>;\n\n  }\n\n  /**\n   * Page navigation parameter value handle.\n   *\n   * Holds and maintains parameter value.\n   *\n   * Created by {@link PageParam.create} method.\n   *\n   * @typeparam T  Parameter value type.\n   * @typaparam I  Parameter input type.\n   */\n  export interface Handle<T, I> {\n\n    /**\n     * Returns current parameter value.\n     *\n     * @returns Parameter value.\n     */\n    get(): T;\n\n    /**\n     * Puts page parameter value.\n     *\n     * This method is called when {@link Page.put re-assigning page parameter}. It is called when page parameter\n     * is assigned already and can be used to update it. The update logic is up to the implementation.\n     *\n     * @param input  Parameter input to use when updating its value.\n     */\n    put(input: I): void;\n\n    /**\n     * Transfers parameter to target page.\n     *\n     * This is called right before [[LeavePageEvent]] is fired for each parameter handle of current page.\n     *\n     * @param to  A page to transfer parameter to.\n     * @param when  When the transfer happens. Either `pre-open`, `pre-replace`, `open`, or `return`. The latter is used\n     * when return to page generated by another app version. E.g. from the page that has been reloaded.\n     *\n     * @returns New parameter handle instance for target page, or `undefined` if nothing to transfer.\n     */\n    transfer?(to: Page, when: 'pre-open' | 'pre-replace' | 'enter' | 'return'): Handle<T, I> | undefined;\n\n    /**\n     * This method is called when the page this parameter created for is entered.\n     *\n     * @param page  Entered page.\n     * @param when  When the page is entered. Either `init`, `open`, `replace`, `enter`, or `return`.\n     */\n    enter?(page: Page, when: 'init' | 'open' | 'replace' | 'enter' | 'return'): void;\n\n    /**\n     * This method is called when the page this parameter created for is left.\n     */\n    leave?(): void;\n\n    /**\n     * This method is called when page navigation aborted and target page won't be reached.\n     *\n     * The handle won't be accessed after this method call.\n     *\n     * @param at  The page the browser remains at.\n     */\n    stay?(at: Page): void;\n\n    /**\n     * This method is called when the page this parameter is created for is removed from navigation history.\n     *\n     * The handle won't be accessed after this method call.\n     */\n    forget?(): void;\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextValues } from 'context-values';\n\n/**\n * Page parameter context.\n *\n * Provides values available in bootstrap context.\n */\nexport abstract class PageParamContext extends ContextValues {\n}\n","import { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { itsEach } from 'a-iterable';\nimport { noop } from 'call-thru';\nimport { ContextKey, ContextKey__symbol, ContextRegistry, SingleContextKey } from 'context-values';\nimport { ValueTracker } from 'fun-events';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\nimport { PageParam, PageParam__symbol } from './page-param';\nimport { PageParamContext } from './page-param-context';\n\nconst NavHistory__key = (/*#__PURE__*/ new SingleContextKey<NavHistory>(\n    'nav-history',\n    {\n      byDefault: bootstrapDefault(ctx => new NavHistory(ctx)),\n    },\n));\n\n/**\n * @internal\n */\nexport const NAV_DATA_KEY = 'wesib:navigation:data' as const;\n\n/**\n * @internal\n */\nexport interface PartialNavData {\n  readonly uid?: string;\n  readonly id?: number;\n  readonly data: any;\n}\n\n/**\n * @internal\n */\nexport interface NavData extends PartialNavData {\n  readonly uid: string;\n  readonly id: number;\n}\n\n/**\n * @internal\n */\nexport interface NavDataEnvelope {\n  readonly [NAV_DATA_KEY]: NavData;\n}\n\nfunction extractNavData(state: any): PartialNavData {\n  return state == null || typeof state !== 'object' ? { data: state } : state[NAV_DATA_KEY];\n}\n\n/**\n * @internal\n */\nexport class NavHistory {\n\n  static get [ContextKey__symbol](): ContextKey<NavHistory> {\n    return NavHistory__key;\n  }\n\n  private readonly _document: Document;\n  private readonly _location: Location;\n  private readonly _history: History;\n  private readonly _entries = new Map<number, PageEntry>();\n  private readonly _uid: string;\n  private _lastId = 0;\n\n  constructor(private readonly _context: BootstrapContext) {\n    const window = _context.get(BootstrapWindow);\n\n    this._document = window.document;\n    this._location = window.location;\n    this._history = window.history;\n    this._uid = btoa(String(Math.random()));\n  }\n\n  init(): PageEntry {\n\n    const { data } = extractNavData(this._history.state);\n    const entry = this.newEntry({\n      url: new URL(this._location.href),\n      data,\n      title: this._document.title,\n    });\n\n    this._entries.set(entry.id, entry);\n    entry.schedule(() => {\n      entry.enter('init');\n      this._history.replaceState(this._historyState(entry), '');\n    });\n\n    return entry;\n  }\n\n  newEntry(target: Navigation.URLTarget): PageEntry {\n    return new PageEntry(this._context, ++this._lastId, target);\n  }\n\n  open(\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const { page: { title = '', url } } = toEntry;\n\n    this._history.pushState(\n        this._historyState(toEntry),\n        title,\n        url.href,\n    );\n\n    this._enter('open', toEntry, tracker);\n  }\n\n  private _enter(\n      when: 'open' | 'enter',\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const fromEntry = tracker.it;\n\n    this._entries.set(toEntry.id, toEntry);\n\n    try {\n      // Forget all entries starting from next one\n      for (let e = fromEntry.next; e; e = e.next) {\n        this._forget(e);\n      }\n    } finally {\n      toEntry.prev = fromEntry;\n      fromEntry.next = toEntry;\n      toEntry.schedule(() => {\n        try {\n          fromEntry.leave();\n        } finally {\n          toEntry.enter(when);\n        }\n      });\n      tracker.it = toEntry;\n    }\n  }\n\n  replace(\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const fromEntry = tracker.it;\n    const { page: { title = '', url } } = toEntry;\n\n    this._history.replaceState(\n        this._historyState(toEntry),\n        title,\n        url.href,\n    );\n\n    this._entries.set(toEntry.id, toEntry);\n\n    const prev = fromEntry.prev;\n\n    if (prev) {\n      toEntry.prev = prev;\n      prev.next = toEntry;\n    }\n\n    toEntry.schedule(() => {\n      try {\n        fromEntry.leave();\n      } finally {\n        try {\n          this._forget(fromEntry);\n        } finally {\n          toEntry.enter('replace');\n        }\n      }\n    });\n    tracker.it = toEntry;\n  }\n\n  popState(\n      popState: PopStateEvent,\n      tracker: ValueTracker<PageEntry>,\n  ): PageEntry | undefined {\n\n    const { state } = popState;\n\n    if (state == null) {\n      // Hash change\n      if (this._history.state == null) {\n        // Not a return\n        return this._changeHash(tracker);\n      }\n      return; // Already handled by `hashchange` handler\n    }\n\n    const fromEntry = tracker.it;\n    const { uid, data, id: pageId } = extractNavData(state);\n    let toEntry: PageEntry;\n\n    const existingEntry = uid === this._uid && pageId != null ? this._entries.get(pageId) : undefined;\n\n    if (existingEntry) {\n      toEntry = existingEntry;\n    } else {\n      // Returning to page existed in previous app version\n      toEntry = this.newEntry({\n        url: new URL(this._location.href),\n        data,\n        title: this._document.title,\n      });\n      fromEntry.transfer(toEntry, 'return');\n      this._entries.set(toEntry.id, toEntry);\n      this._history.replaceState(this._historyState(toEntry), '');\n    }\n\n    toEntry.schedule(() => {\n      try {\n        fromEntry.leave();\n      } finally {\n        toEntry.enter('return');\n      }\n    });\n\n    tracker.it = toEntry;\n\n    return toEntry;\n  }\n\n  public hashChange(tracker: ValueTracker<PageEntry>): PageEntry | void {\n    if (this._history.state == null) {\n      // Not a return\n      return this._changeHash(tracker);\n    }\n    // Otherwise, a `popstate` event is also triggered,\n    // and its handler would do the job (or already did).\n  }\n\n  public update(tracker: ValueTracker<PageEntry>, url: URL): PageEntry {\n\n    const oldEntry = tracker.it;\n    const newEntry = new PageEntry(this._context, ++this._lastId, { ...oldEntry.page, url }, oldEntry);\n\n    this._entries.set(newEntry.id, newEntry);\n    this._history.replaceState(this._historyState(newEntry), '', url.href);\n    this._entries.delete(oldEntry.id);\n\n    return tracker.it = newEntry;\n  }\n\n  private _changeHash(tracker: ValueTracker<PageEntry>): PageEntry {\n\n    const fromEntry = tracker.it;\n    const toEntry = this.newEntry({\n      url: new URL(this._location.href),\n      data: null,\n      title: this._document.title,\n    });\n\n    try {\n      fromEntry.transfer(toEntry, 'enter');\n    } finally {\n      this._history.replaceState(this._historyState(toEntry), '');\n      this._enter('enter', toEntry, tracker);\n    }\n\n    return toEntry;\n  }\n\n  private _forget(entry: PageEntry): void {\n    this._entries.delete(entry.id);\n    entry.forget();\n  }\n\n  private _historyState({ id, page: { data } }: PageEntry): NavDataEnvelope {\n    return {\n      [NAV_DATA_KEY]: {\n        uid: this._uid,\n        id,\n        data,\n      },\n    };\n  }\n\n}\n\nconst enum PageStatus {\n  New,\n  Visited,\n  Current,\n}\n\n/**\n * @internal\n */\nexport class PageEntry {\n\n  next?: PageEntry;\n  prev?: PageEntry;\n  private _status: PageStatus = PageStatus.New;\n  readonly page: Page;\n  private readonly _params: Map<PageParam<any, any>, PageParam.Handle<any, any>>;\n  private _update: () => void = noop;\n\n  constructor(\n      private readonly _context: BootstrapContext,\n      readonly id: number,\n      target: Navigation.URLTarget,\n      proto?: PageEntry,\n  ) {\n    this._params = proto ? proto._params : new Map<PageParam<any, any>, PageParam.Handle<any, any>>();\n\n    const entry = this;\n\n    this.page = {\n      url: target.url,\n      title: target.title,\n      data: target.data,\n      get visited() {\n        return !!entry._status;\n      },\n      get current() {\n        return entry._status === PageStatus.Current;\n      },\n      get(ref) {\n        return entry.get(ref);\n      },\n      put(ref, input) {\n        entry.put(ref, input);\n      },\n    };\n  }\n\n  get<T>(ref: PageParam.Ref<T, unknown>): T | undefined {\n\n    const handle: PageParam.Handle<T, unknown> | undefined = this._params.get(ref[PageParam__symbol]);\n\n    return handle && handle.get();\n  }\n\n  put<T, I>(ref: PageParam.Ref<T, I>, input: I): T {\n\n    const param = ref[PageParam__symbol];\n    const handle: PageParam.Handle<T, I> | undefined = this._params.get(param);\n\n    if (handle) {\n      handle.put(input);\n      return handle.get();\n    }\n\n    const registry = new ContextRegistry<ParamContext>(this._context);\n\n    class ParamContext extends PageParamContext {\n\n      readonly get: PageParamContext['get'] = registry.newValues().get;\n\n    }\n\n    const newHandle = param.create(this.page, input, new ParamContext());\n\n    this._params.set(param, newHandle);\n    if (this.page.current && newHandle.enter) {\n      newHandle.enter(this.page, 'init');\n    }\n\n    return newHandle.get();\n  }\n\n  transfer(to: PageEntry, when: 'pre-open' | 'pre-replace' | 'enter' | 'return'): void {\n    itsEach(this._params.entries(), ([param, handle]) => {\n      if (handle.transfer) {\n\n        const transferred = handle.transfer(to.page, when);\n\n        if (transferred) {\n          to._params.set(param, transferred);\n        }\n      }\n    });\n  }\n\n  stay(at: Page): void {\n    itsEach(this._params.values(), handle => handle.stay && handle.stay(at));\n  }\n\n  enter(when: 'init' | 'open' | 'replace' | 'enter' | 'return'): void {\n    this._status = PageStatus.Current;\n    itsEach(this._params.values(), handle => handle.enter && handle.enter(this.page, when));\n  }\n\n  leave(): void {\n    this._status = PageStatus.Visited;\n    itsEach(this._params.values(), handle => handle.leave && handle.leave());\n  }\n\n  forget(): void {\n    itsEach(this._params.values(), handle => handle.forget && handle.forget());\n    this._params.clear();\n  }\n\n  schedule(update: () => void): void {\n    this._update = update;\n  }\n\n  apply(): void {\n\n    const update = this._update;\n\n    this._update = noop;\n    update();\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { BootstrapWindow } from '@wesib/wesib';\nimport { nextArg } from 'call-thru';\nimport { ContextValueOpts, ContextValues } from 'context-values';\nimport { ContextUpKey, ContextUpRef } from 'context-values/updatable';\nimport { AfterEvent, afterThe, EventKeeper, nextAfterEvent } from 'fun-events';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\nimport Target = Navigation.Target;\n\n/**\n * Navigation agent signature.\n *\n * The agent is called by navigation methods when leaving current page and may alter navigation processing.\n * E.g. change navigation target. For that it should be registered in appropriate context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by navigation method.\n */\nexport type NavigationAgent =\n/**\n * @param next  Either calls the next agent in chain, or applies the final navigation target if this agent is the last\n * one. Not calling this function effectively prevents navigation.\n * Accepts an optional [[Navigation.Target]] parameter. The original target will be used instead when omitted.\n * @param when  When navigation occurred. Either `pre-open`, or `pre-replace`.\n * @param from  The page to leave.\n * @param to  Navigation target page.\n */\n    (\n        this: void,\n        next: (this: void, target?: Target) => void,\n        when: 'pre-open' | 'pre-replace',\n        from: Page,\n        to: Page,\n    ) => void;\n\n/**\n * @internal\n */\nclass NavigationAgentKey\n    extends ContextUpKey<NavigationAgent.Combined, NavigationAgent>\n    implements ContextUpRef<NavigationAgent.Combined, NavigationAgent> {\n\n  readonly upKey: ContextUpKey.UpKey<NavigationAgent.Combined, NavigationAgent>;\n\n  constructor(name: string) {\n    super(name);\n    this.upKey = this.createUpKey(\n        opts => {\n\n          const { document } = opts.context.get(BootstrapWindow);\n\n          return opts.seed.keep.thru(\n              (...agents) => {\n                if (agents.length) {\n                  return nextArg(combinedAgent);\n                }\n\n                const defaultProvider = (): AfterEvent<[NavigationAgent.Combined]> => afterThe(defaultNavigationAgent);\n\n                return nextAfterEvent(opts.byDefault(defaultProvider) || defaultProvider());\n\n                function combinedAgent(\n                    next: (this: void, target: Navigation.URLTarget) => void,\n                    when: 'pre-open' | 'pre-replace',\n                    from: Page,\n                    to: Page,\n                ): void {\n\n                  return navigate(0, to);\n\n                  function navigate(agentIdx: number, agentTo: Page): void {\n\n                    const agent = agents[agentIdx];\n\n                    if (!agent) {\n                      return next(agentTo);\n                    }\n\n                    agent(\n                        (\n                            {\n                              url: nextURL = agentTo.url,\n                              title: nextTitle = agentTo.title,\n                              data: nextData = agentTo.data,\n                            }: Navigation.Target = agentTo,\n                        ) => navigate(\n                            agentIdx + 1,\n                            {\n                              url: new URL(String(nextURL), document.baseURI),\n                              title: nextTitle,\n                              data: nextData,\n                              get visited() {\n                                return agentTo.visited;\n                              },\n                              get current() {\n                                return agentTo.current;\n                              },\n                              get(ref) {\n                                return agentTo.get(ref);\n                              },\n                              put(ref, input) {\n                                agentTo.put(ref, input);\n                              },\n                            },\n                        ),\n                        when,\n                        from,\n                        agentTo,\n                    );\n                  }\n                }\n              },\n          );\n        },\n    );\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          NavigationAgent.Combined,\n          EventKeeper<NavigationAgent[]> | NavigationAgent,\n          AfterEvent<NavigationAgent[]>>,\n  ): NavigationAgent.Combined {\n\n    let delegated: NavigationAgent.Combined;\n\n    opts.context.get(\n        this.upKey,\n        'or' in opts ? { or: opts.or != null ? afterThe(opts.or) : opts.or } : undefined,\n    )!(agent => delegated = agent);\n\n    return (next, when, from, to) => delegated(next, when, from, to);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultNavigationAgent(\n    next: (this: void, target: Navigation.URLTarget) => void,\n    _when: 'pre-open' | 'pre-replace',\n    _from: Page,\n    to: Page,\n): void {\n  next(to);\n}\n\nexport namespace NavigationAgent {\n\n  /**\n   * Combined navigation agent signature.\n   *\n   * This is what is available under [[NavigationAgent]] key.\n   */\n  export type Combined =\n  /**\n   * @param next  Either calls the next agent in chain, or applies the final navigation target if this agent is the last\n   * one. Not calling this function effectively prevents navigation.\n   * Accepts an optional [[Navigation.Target]] parameter. The original target will be used instead when omitted.\n   * @param when  When navigation occurred. Either `pre-open`, or `pre-replace`.\n   * @param from  The page to leave.\n   * @param to  Navigation target page.\n   */\n      (\n          this: void,\n          next: (this: void, target: Navigation.URLTarget) => void,\n          when: 'pre-open' | 'pre-replace',\n          from: Page,\n          to: Page,\n      ) => void;\n\n}\n\n/**\n * A key of context value containing an [[NavigationAgent]] instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the navigation.\n */\nexport const NavigationAgent: ContextUpRef<NavigationAgent.Combined, NavigationAgent> = (\n    /*#__PURE__*/ new NavigationAgentKey('navigation-agent')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { Navigation } from './navigation';\nimport { Page } from './page';\n\n/**\n * Navigation event.\n */\nexport type NavigationEvent = LeavePageEvent | EnterPageEvent | StayOnPageEvent;\n\n/**\n * Navigation event type.\n */\nexport const enum NavigationEventType {\n\n  /**\n   * {@link EnterPageEvent Enter page event} type.\n   */\n  EnterPage = 'wesib:enterPage',\n\n  /**\n   * {@link LeavePageEvent Leave page event} type.\n   */\n  LeavePage = 'wesib:leavePage',\n\n  /**\n   * {@link StayOnPageEvent Stay on page event} type.\n   */\n  StayOnPage = 'wesib:stayOnPage',\n\n}\n\n/**\n * An event fired when navigation target reached by entering destination page.\n *\n * @event EnterPageEvent#wesib:enterPage\n */\nexport class EnterPageEvent extends Event {\n\n  /**\n   * When navigation event occurred.\n   *\n   * Can be one of:\n   * - `open` when opening a new page,\n   * - `replace` when replacing navigation history entry,\n   * - `enter` when entering new page by user action (e.g. hashchange event),\n   * - `return` when navigated to previously visited entry in navigation history.\n   */\n  readonly when: 'open' | 'replace' | 'enter' | 'return';\n\n  /**\n   * Entered page.\n   */\n  readonly to: Page;\n\n  /**\n   * Constructs enter page event.\n   *\n   * @param type  Event type.\n   * @param init  Initialization options.\n   */\n  constructor(type: string, init: EnterPageEventInit) {\n    super(type, { ...init, cancelable: false });\n    this.when = init.when;\n    this.to = init.to;\n  }\n\n}\n\n/**\n * {@link EnterPageEvent Enter page event} initialization options.\n */\nexport interface EnterPageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * When navigation event occurred.\n   *\n   * Can be one of:\n   * - `open` when opening a new page,\n   * - `replace` when replacing navigation history entry,\n   * - `enter` when entering new page by user action (e.g. hashchange event),\n   * - `return` when navigated to previously visited entry in navigation history.\n   */\n  readonly when: 'open' | 'replace' | 'enter' | 'return';\n\n  /**\n   * Entered page.\n   */\n  readonly to: Page;\n\n}\n\n/**\n * An event fired right before leaving the page in order to navigate to another one.\n *\n * This event can be cancelled in order to prevent actual navigation or history update. The navigation is also\n * cancelled when another navigation initiated by one of the handlers of this event.\n *\n * @event LeavePageEvent#wesib:leavePage\n */\nexport class LeavePageEvent extends Event {\n\n  /**\n   * When navigation event occurred. Either `pre-open` when leaving a page to open a new one, or `pre-replace` when\n   * leaving a page to replace it with another history entry.\n   */\n  readonly when: 'pre-open' | 'pre-replace';\n\n  /**\n   * The page to leave.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target page.\n   */\n  readonly to: Page;\n\n  /**\n   * Constructs leave page event.\n   *\n   * @param type  Event type.\n   * @param init  Initialization options.\n   */\n  constructor(type: string, init: LeavePageEventInit) {\n    super(type, { ...init, cancelable: true });\n    this.when = init.when;\n    this.from = init.from;\n    this.to = init.to;\n  }\n\n}\n\n/**\n * {@link LeavePageEvent Leave page event} initialization options.\n */\nexport interface LeavePageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * When navigation event occurred. Either `pre-open` when leaving a page to open a new one, or `pre-replace` when\n   * leaving a page to replace it with another history entry.\n   */\n  readonly when: 'pre-open' | 'pre-replace';\n\n  /**\n   * The page to leave.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target page.\n   */\n  readonly to: Page;\n\n}\n\n/**\n * An event fired when navigation cancelled or failed.\n *\n * @event StayOnPageEvent#wesib:stayOnPage\n */\nexport class StayOnPageEvent extends Event {\n\n  /**\n   * When navigation event occurred. Always `stay`.\n   */\n  get when(): 'stay' {\n    return 'stay';\n  }\n\n  /**\n   * The page to stay at.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target.\n   */\n  readonly to: Navigation.URLTarget;\n\n  /**\n   * A reason of navigation failure. This is set when navigation failed due to some error.\n   */\n  readonly reason?: any;\n\n  /**\n   * Constructs stay on page event.\n   *\n   * @param type  Event type.\n   * @param init  Initialization options.\n   */\n  constructor(type: string, init: StayOnPageEventInit) {\n    super(type, { ...init, cancelable: true });\n    this.from = init.from;\n    this.to = init.to;\n    this.reason = init.reason;\n  }\n\n}\n\n/**\n * {@link StayOnPageEvent Stay on page event} initialization options.\n */\nexport interface StayOnPageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * The page to stay at.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target.\n   */\n  readonly to: Navigation.URLTarget;\n\n  /**\n   * A reason of navigation failure. This is set when navigation failed due to some error.\n   */\n  readonly reason?: any;\n\n}\n","import { BootstrapContext, BootstrapWindow, mergeFunctions } from '@wesib/wesib';\nimport { noop } from 'call-thru';\nimport { AfterEvent, onAny, OnEvent, trackValue } from 'fun-events';\nimport { DomEventDispatcher, OnDomEvent } from 'fun-events/dom';\nimport { NavHistory, PageEntry } from './nav-history.impl';\nimport { Navigation as Navigation_ } from './navigation';\nimport { NavigationAgent } from './navigation-agent';\nimport {\n  EnterPageEvent,\n  LeavePageEvent,\n  NavigationEvent,\n  NavigationEventType,\n  StayOnPageEvent,\n} from './navigation.event';\nimport { Page } from './page';\nimport { PageParam } from './page-param';\n\nexport function createNavigation(context: BootstrapContext): Navigation_ {\n\n  const window = context.get(BootstrapWindow);\n  const { document, history } = window;\n  const dispatcher = new DomEventDispatcher(window);\n  const navHistory = context.get(NavHistory);\n  const agent = context.get(NavigationAgent);\n  const onEnter = dispatcher.on<EnterPageEvent>(NavigationEventType.EnterPage);\n  const onLeave = dispatcher.on<LeavePageEvent>(NavigationEventType.LeavePage);\n  const onStay = dispatcher.on<StayOnPageEvent>(NavigationEventType.StayOnPage);\n  const onEvent = onAny<[NavigationEvent]>(onEnter, onLeave, onStay);\n  const nav = trackValue<PageEntry>(navHistory.init());\n\n  nav.read(nextEntry => nextEntry.apply()); // The very first page entry receiver applies scheduled updates to page\n\n  const readPage: AfterEvent<[Page]> = nav.read.keep.thru(entry => entry.page);\n  let next: Promise<any> = Promise.resolve();\n\n  dispatcher.on<PopStateEvent>('popstate')(popState => {\n\n    const entry = navHistory.popState(popState, nav);\n\n    if (entry) {\n      dispatcher.dispatch(new EnterPageEvent(\n          NavigationEventType.EnterPage,\n          {\n            when: popState.state != null ? 'return' : 'enter',\n            to: entry.page,\n          },\n      ));\n    }\n  });\n\n  dispatcher.on('hashchange')(() => {\n\n    const entry = navHistory.hashChange(nav);\n\n    if (entry) {\n      dispatcher.dispatch(new EnterPageEvent(\n          NavigationEventType.EnterPage,\n          {\n            when: 'enter',\n            to: entry.page,\n          },\n      ));\n    }\n  });\n\n  class Navigation extends Navigation_ {\n\n    get length(): number {\n      return history.length;\n    }\n\n    get onEnter(): OnDomEvent<EnterPageEvent> {\n      return onEnter;\n    }\n\n    get onLeave(): OnDomEvent<LeavePageEvent> {\n      return onLeave;\n    }\n\n    get onStay(): OnDomEvent<StayOnPageEvent> {\n      return onStay;\n    }\n\n    get on(): OnEvent<[NavigationEvent]> {\n      return onEvent;\n    }\n\n    get read(): AfterEvent<[Page]> {\n      return readPage;\n    }\n\n    go(delta?: number): void {\n      history.go(delta);\n    }\n\n    open(target: Navigation_.Target | string | URL): Promise<Page | null> {\n      return navigate('pre-open', 'open', target);\n    }\n\n    replace(target: Navigation_.Target | string | URL): Promise<Page | null> {\n      return navigate('pre-replace', 'replace', target);\n    }\n\n    update(url: string | URL): Page {\n      return navHistory.update(nav, toURL(url)).page;\n    }\n\n    with<T, I>(ref: PageParam.Ref<T, I>, input: I): Navigation_.Parameterized {\n      return withParam(page => page.put(ref, input));\n    }\n\n  }\n\n  return new Navigation();\n\n  function withParam(applyParams: (page: Page) => void): Navigation_.Parameterized {\n    return {\n      with<TT, II>(ref: PageParam.Ref<TT, II>, input: II): Navigation_.Parameterized {\n        return withParam(mergeFunctions(applyParams, page => page.put(ref, input)));\n      },\n      open(target: Navigation_.Target | string | URL) {\n        return navigate('pre-open', 'open', target, applyParams);\n      },\n      replace(target: Navigation_.Target | string | URL) {\n        return navigate('pre-replace', 'replace', target, applyParams);\n      },\n    };\n  }\n\n  function toURL(url: string | URL | undefined): URL {\n    if (typeof url === 'string') {\n      return new URL(url, document.baseURI);\n    }\n    return url || nav.it.page.url;\n  }\n\n  function urlTargetOf(target: Navigation_.Target | string | URL): Navigation_.URLTarget {\n    if (typeof target === 'string' || target instanceof URL) {\n      return { url: toURL(target) };\n    }\n    if (target.url instanceof URL) {\n      return target as Navigation_.URLTarget;\n    }\n    return { ...target, url: toURL(target.url) };\n  }\n\n  function navigate(\n      whenLeave: 'pre-open' | 'pre-replace',\n      when: 'open' | 'replace',\n      target: Navigation_.Target | string | URL,\n      applyParams: (page: Page) => void = noop,\n  ): Promise<Page | null> {\n\n    const urlTarget = urlTargetOf(target);\n    const promise = next = next.then(doNavigate, doNavigate);\n\n    return promise;\n\n    function doNavigate(): Page | null {\n\n      let toEntry: PageEntry | undefined = undefined;\n\n      try {\n\n        const prepared = prepare();\n\n        if (!prepared) {\n          return prepared; // Navigation cancelled\n        }\n\n        toEntry = prepared;\n\n        navHistory[when](toEntry, nav);\n\n        dispatcher.dispatch(new EnterPageEvent(\n            NavigationEventType.EnterPage,\n            {\n              when,\n              to: toEntry.page,\n            },\n        ));\n\n        return toEntry.page;\n      } catch (e) {\n        stay(toEntry, e);\n        throw e;\n      }\n    }\n\n    function prepare(): PageEntry | null {\n      if (next !== promise) {\n        return stay();\n      }\n\n      const fromEntry = nav.it;\n      const toEntry = navHistory.newEntry(urlTarget);\n\n      fromEntry.transfer(toEntry, whenLeave);\n\n      const leavePage = new LeavePageEvent(\n          NavigationEventType.LeavePage,\n          {\n            when: whenLeave,\n            from: fromEntry.page,\n            to: toEntry.page,\n          },\n      );\n\n      applyParams(toEntry.page);\n      if (!dispatcher.dispatch(leavePage) || next !== promise) {\n        return stay(toEntry);\n      }\n\n      let finalTarget: Navigation_.URLTarget | undefined;\n\n      agent(t => finalTarget = t, whenLeave, leavePage.from, leavePage.to);\n\n      if (!finalTarget) {\n        return stay(toEntry); // Some agent didn't call `next()`.\n      }\n\n      return toEntry;\n    }\n\n    function stay(toEntry?: PageEntry, reason?: any): null {\n      if (toEntry) {\n        toEntry.stay(nav.it.page);\n      }\n\n      dispatcher.dispatch(new StayOnPageEvent(\n          NavigationEventType.StayOnPage,\n          {\n            from: nav.it.page,\n            to: urlTarget,\n            reason,\n          },\n      ));\n\n      return null;\n    }\n\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { createNavigation } from './navigation.impl';\n\n/**\n * @internal\n */\nconst NavigationSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.provide({ a: Navigation, by: createNavigation });\n  },\n};\n\n/**\n * Browser navigation support feature.\n *\n * Makes [[Navigation]] available in bootstrap context.\n */\nexport class NavigationSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return NavigationSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport {\n  Class,\n  Component,\n  ComponentClass,\n  ComponentContext,\n  ComponentDecorator,\n  DefaultNamespaceAliaser,\n  DefaultRenderScheduler,\n  Wesib__NS,\n} from '@wesib/wesib';\nimport { nextArgs, noop } from 'call-thru';\nimport {\n  afterEach,\n  AfterEvent,\n  afterEventBy,\n  afterSupplied,\n  afterThe,\n  EventKeeper,\n  eventSupply,\n  EventSupply,\n  nextAfterEvent,\n} from 'fun-events';\nimport { css__naming, QualifiedName } from 'namespace-aliaser';\nimport { ComponentNode, ComponentTreeSupport, ElementNode, ElementPickMode } from '../tree';\nimport { Navigation } from './navigation';\nimport { NavigationSupport } from './navigation-support.feature';\nimport { Page } from './page';\n\n/**\n * @internal\n */\ninterface ActiveNavLink {\n  readonly node?: ElementNode;\n  supply(): EventSupply | undefined;\n}\n\n/**\n * @internal\n */\nconst inactiveNavLink: ActiveNavLink = {\n  supply: noop,\n};\n\n/**\n * Creates component decorator that marks at most one of navigation links inside decorated component active.\n *\n * Enables [[ComponentTreeSupport]], and [[NavigationSupport]] features.\n *\n * @typeparam T  A type of decorated component class.\n * @param def  Navigation link activation definition.\n *\n * @returns New component decorator.\n */\nexport function ActivateNavLink<T extends ComponentClass = Class>(\n    def: ActivateNavLinkDef<InstanceType<T>> = {},\n): ComponentDecorator<T> {\n\n  const { select = 'a', pick = { all: true, deep: true } } = def;\n\n  return Component({\n    feature: {\n      needs: [ComponentTreeSupport, NavigationSupport],\n    },\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const activate = activateNavLink(context, def);\n        const weigh = navLinkWeight(def);\n        const navigation = context.get(Navigation);\n        const componentNode = context.get(ComponentNode);\n\n        context.whenOn(connectSupply => {\n\n          let active: ActiveNavLink = inactiveNavLink;\n\n          navigation.read.consume(\n              page => componentNode.select(select, pick).read.keep.thru_(\n                  nodes => nextAfterEvent(afterEach(\n                      ...nodes.map(node => weigh({ node, context, page })),\n                  )),\n              ).consume(\n                  (...weights: NavLinkWeight[]) => {\n\n                    const selected = selectActiveNavLink(weights);\n\n                    if (!selected) {\n                      active = inactiveNavLink;\n                    } else if (selected !== active.node) {\n                      active = activate({ node: selected, context, page });\n                    }\n\n                    return active.supply();\n                  },\n              ),\n          ).needs(connectSupply);\n        });\n      });\n    },\n  });\n}\n\n/**\n * Navigation link activation definition.\n *\n * Defines a set of element nodes considered to be navigation links. Each matching node is {@link weigh weighed}\n * against {@link Navigation.read current page}, and the link with highest weight is marked [[active]].\n *\n * @typeparam T  A type of component.\n */\nexport interface ActivateNavLinkDef<T extends object = any> {\n\n  /**\n   * Navigation links CSS selector.\n   *\n   * `a` by default.\n   */\n  readonly select?: string;\n\n  /**\n   * A mode of navigation link node picking from component tree.\n   *\n   * By default picks any matching element from entire subtree.\n   */\n  readonly pick?: ElementPickMode;\n\n  /**\n   * Qualified name of CSS class to mark the active element with.\n   *\n   * The `active` class in Wesib namespace is used by default.\n   */\n  readonly active?: QualifiedName;\n\n  /**\n   * Weighs matching navigation link.\n   *\n   * This method will be called for each navigation link on each current page update.\n   *\n   * By default:\n   * 1. If the link path has neither hash, nor search parameters, then:\n   * 1.1. Checks whether page URL path starts with the link's one.\n   * 1.2. If so, then uses link path as weight.\n   * 2. If the link path has search parameters, but has no hash, then requires the page path to be the same as link's\n   *    one, and page search parameters include all of the link's ones. The number of link search parameters is used\n   *    as weight.\n   * 3. If the link path has a hash, then requires the page path and search parameters to be the same as link's ones,\n   *    and their hashes are treated as `path[?query]`. The weight is calculated by applying steps 1 and 2 to hashes.\n   *\n   * @param node  Navigation link node to weigh.\n   * @param page  Current navigation page.\n   * @param context  Decorated component context.\n   *\n   * @returns Either navigation link weight, or its keeper. Non-positive wights means the page URL doesn't match\n   * the link at all.\n   */\n  weigh?(\n      {\n        node,\n        page,\n        context,\n      }: {\n        node: ElementNode;\n        page: Page;\n        context: ComponentContext<T>;\n      },\n  ): number | EventKeeper<[number]>;\n\n  /**\n   * Changes navigation link activity state.\n   *\n   * This method is called each time the active link changed.\n   *\n   * @param active  Whether to make target link active (`true`), or inactive (`false`).\n   * @param node  Navigation link node to update activity state of.\n   * @param page  Current navigation page.\n   * @param context  Decorated component context.\n   */\n  activate?(\n      active: boolean,\n      {\n        node,\n        page,\n        context,\n      }: {\n        node: ElementNode;\n        page: Page;\n        context: ComponentContext<T>;\n      },\n  ): void;\n\n}\n\n/**\n * @internal\n */\ntype NavLinkWeight = [ElementNode, number];\n\n/**\n * @internal\n */\ninterface NavLinkOpts {\n  node: ElementNode;\n  page: Page;\n  context: ComponentContext;\n}\n\n/**\n * @internal\n */\nfunction selectActiveNavLink(weights: NavLinkWeight[]): ElementNode | undefined {\n\n  let maxWeight = 0;\n  let active: ElementNode | undefined;\n\n  weights.forEach(([node, weight]) => {\n    if (weight > maxWeight) {\n      maxWeight = weight;\n      active = node;\n    }\n  });\n\n  return active;\n}\n\n/**\n * @internal\n */\nfunction navLinkWeight(\n    def: ActivateNavLinkDef,\n): (opts: NavLinkOpts) => AfterEvent<NavLinkWeight> {\n  if (!def.weigh) {\n    return defaultNavLinkWeight;\n  }\n  return opts => {\n\n    const weight = def.weigh!(opts);\n\n    if (typeof weight === 'number') {\n      return afterThe(opts.node, weight);\n    }\n\n    let supplier: AfterEvent<NavLinkWeight> = afterSupplied(weight).keep.thru_(\n        weight => nextArgs(opts.node, weight),\n    );\n\n    return afterEventBy<NavLinkWeight>(receiver => {\n      supplier({\n        supply: eventSupply()\n            .needs(receiver.supply)\n            .whenOff(() => {\n              // Fall back to zero weight once the weight supply cut off\n              supplier = afterThe(opts.node, 0);\n              supplier(receiver);\n            }),\n        receive: receiver.receive.bind(receiver),\n      });\n    });\n  };\n}\n\n/**\n * @internal\n */\nfunction defaultNavLinkWeight(\n    {\n      node,\n      page,\n    }: NavLinkOpts,\n): AfterEvent<NavLinkWeight> {\n\n  const element: Element = node.element;\n  const href = element.getAttribute('href');\n\n  if (href == null) {\n    return afterThe(node, -1);\n  }\n\n  const linkURL = new URL(href, element.ownerDocument!.baseURI);\n\n  return afterThe(node, calcNavLinkWeight(linkURL, page.url));\n}\n\n/**\n * @internal\n */\nfunction calcNavLinkWeight(linkURL: URL, pageURL: URL): number {\n  if (linkURL.origin !== pageURL.origin) {\n    return -1;\n  }\n\n  const linkDir = navLinkPath2dir(linkURL);\n  const pageDir = navLinkPath2dir(pageURL);\n\n  if (linkURL.hash) {\n    if (linkDir !== pageDir) {\n      return -1;\n    }\n    // Require search parameters to be equal\n    if (navLinkSearchParamsWeight(linkURL, pageURL) < 0 || navLinkSearchParamsWeight(pageURL, linkURL) < 0) {\n      return -1;\n    }\n    return calcNavLinkWeight(navLinkHash2url(linkURL), navLinkHash2url(pageURL));\n  }\n\n  const searchParamWeight = navLinkSearchParamsWeight(linkURL, pageURL);\n\n  if (searchParamWeight) {\n    if (searchParamWeight < 0) {\n      return -1;\n    }\n    if (linkDir !== pageDir) {\n      return -1;\n    }\n    return searchParamWeight;\n  }\n\n  if (!pageDir.startsWith(linkDir)) {\n    return -1;\n  }\n\n  return linkURL.pathname.length;\n}\n\n/**\n * @internal\n */\nfunction navLinkPath2dir(url: URL): string {\n\n  const path = url.pathname;\n\n  return path.endsWith('/') ? path : path + '/';\n}\n\n/**\n * @internal\n */\nfunction navLinkHash2url(url: URL): URL {\n\n  let { hash } = url;\n\n  hash = hash.substring(1); // Remove leading `#` symbol\n  if (hash[0] !== '/') {\n    hash = '/' + hash;\n  }\n\n  return new URL(hash, url);\n}\n\n/**\n * @internal\n */\nfunction navLinkSearchParamsWeight(\n    { searchParams: linkParams }: URL,\n    { searchParams: pageParams }: URL,\n): number {\n\n  let weight = 0;\n\n  linkParams.forEach((_value, key) => {\n\n    const pageValues = new Set(pageParams.getAll(key));\n\n    if (weight >= 0) {\n      if (linkParams.getAll(key).every(linkValue => pageValues.has(linkValue))) {\n        weight += 1;\n      } else {\n        weight = -1;\n      }\n    }\n  });\n\n  return weight;\n}\n\n/**\n * @internal\n */\nconst NavLinkRenderSchedule__symbol = (/*#__PURE__*/ Symbol('nav-link-render-schedule'));\n\n/**\n * @internal\n */\nconst defaultActiveNavLinkClass: QualifiedName = ['active', Wesib__NS];\n\n/**\n * @internal\n */\nfunction activateNavLink(\n    context: ComponentContext,\n    def: ActivateNavLinkDef,\n): (opts: NavLinkOpts) => ActiveNavLink {\n\n  const scheduler = context.get(DefaultRenderScheduler);\n  const { active = defaultActiveNavLinkClass } = def;\n  const activeClass = css__naming.name(active, context.get(DefaultNamespaceAliaser));\n  const activate = def.activate ? def.activate.bind(def) : noop;\n  const assignClass = (active: boolean, { node }: { node: ElementNode }): void => {\n\n    const element: Element = node.element;\n    const { classList } = element;\n\n    if (active) {\n      classList.add(activeClass);\n    } else {\n      classList.remove(activeClass);\n    }\n  };\n\n  return opts => {\n\n    const { element } = opts.node;\n    const schedule = element[NavLinkRenderSchedule__symbol]\n        || (element[NavLinkRenderSchedule__symbol] = scheduler({ node: element }));\n    const makeActive = (active: boolean): void => {\n      schedule(() => assignClass(active, opts));\n      activate(active, opts);\n    };\n\n    makeActive(true);\n\n    let lastSupply: EventSupply | undefined;\n\n    return {\n      node: opts.node,\n      supply(): EventSupply {\n\n        const supply = lastSupply = eventSupply(() => {\n          if (lastSupply === supply) {\n            makeActive(false);\n          }\n        });\n\n        return supply;\n      },\n    };\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ArraySet, Class, Component, ComponentClass, ComponentContext, ComponentDecorator } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { NavigationSupport } from './navigation-support.feature';\nimport { Page } from './page';\n\n/**\n * Creates component decorator that handles events (e.g. clicks) on navigation links.\n *\n * Such events would lead to {@link @Navigation navigation actions} instead of default ones.\n *\n * Enables [[NavigationSupport]] feature.\n *\n * @typeparam T  A type of decorated component class.\n * @param def  Navigation links handler definition.\n *\n * @returns New component decorator.\n */\nexport function HandleNavLinks<T extends ComponentClass = Class>(\n    def: HandleNavLinksDef<InstanceType<T>> = {},\n): ComponentDecorator<T> {\n\n  const handle = def.handle ? def.handle.bind(def) : defaultHandleNavLinks(def);\n  const events = new ArraySet(def.event || 'click');\n\n  return Component({\n    feature: {\n      needs: NavigationSupport,\n    },\n    define(defContext) {\n      defContext.whenComponent(context => {\n        context.whenOn(connectSupply => {\n\n          const navigation = context.get(Navigation);\n\n          events.forEach(eventType => {\n            context.on(eventType)(\n                event => navigation.read.once(\n                    page => handle({\n                      event,\n                      page,\n                      context,\n                      navigation,\n                    }),\n                ),\n            ).needs(connectSupply);\n          });\n        });\n      });\n    },\n  });\n}\n\n/**\n * Navigation links handler definition.\n *\n * @typeparam T  A type of component.\n */\nexport interface HandleNavLinksDef<T extends object = any> {\n\n  /**\n   * Type or types of events to handle.\n   *\n   * `click` by default.\n   */\n  readonly event?: string | readonly string[];\n\n  /**\n   * Handles event by performing navigation action.\n   *\n   * Every {@link event} sent by one of elements inside decorated component is passed to this function. In response\n   * it may perform a navigation event.\n   *\n   * By default handles events on anchor tags. When such tag contains an `href` attribute containing same-origin URL\n   * it {@link Navigation.open opens} a page at this URL instead of default action. It also prevents navigation\n   * if URL didn't change.\n   *\n   * @param event  A click event to handle.\n   * @param page  Current navigation page.\n   * @param navigation  Navigation service to use.\n   * @param context  Component context.\n   */\n  handle?(\n      {\n        event,\n        page,\n        navigation,\n        context,\n      }: {\n        event: Event;\n        page: Page;\n        navigation: Navigation;\n        context: ComponentContext<T>;\n      },\n  ): void;\n\n  /**\n   * Extracts hyper-reference of clicked element.\n   *\n   * Extracts hyper-reference from `href` attribute of event target.\n   *\n   * @param event  A click event to handle.\n   *\n   * @returns Extracted hyper-reference, or nothing if it can not be extracted. Event will be ignored in this case.\n   */\n  href?(event: Event): string | undefined | null;\n\n}\n\n/**\n * @internal\n */\nfunction defaultNavLinkHref(event: Event): string | null {\n\n  const target = event.target as Element;\n\n  return target.getAttribute('href');\n}\n\n/**\n * @internal\n */\nfunction defaultHandleNavLinks(\n    { href = defaultNavLinkHref }: HandleNavLinksDef,\n): (\n    opts: {\n      event: Event;\n      page: Page;\n      navigation: Navigation;\n    },\n) => void {\n  return ({\n    event,\n    page,\n    navigation,\n  }) => {\n\n    const targetHref = href(event);\n\n    if (targetHref == null) {\n      return;\n    }\n\n    const target = event.target as Element;\n    const pageURL = page.url;\n    const url = new URL(targetHref, target.ownerDocument!.baseURI);\n\n    if (url.origin !== pageURL.origin) {\n      return; // External link\n    }\n\n    event.preventDefault();\n    if (pageURL.href !== url.href) {\n      navigation.open(targetHref);\n    }\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { isElement } from '@wesib/wesib';\nimport { itsEach, overArray } from 'a-iterable';\n\n/**\n * Imports DOM node from one document to another.\n *\n * @param from  The node to import.\n * @param to  The node to append imported node to.\n * @param importContent  A function that imports nodes nested in parent element. [[importNodeContent]] by default.\n *\n * @returns Imported node.\n */\nexport function importNode<N extends Node>(\n    from: N,\n    to: Node,\n    importContent?: (this: void, from: N, to: N) => void,\n): N;\n\n/**\n * Imports DOM node from one document to another and inserts it before the given node.\n *\n * @param from  The node to import.\n * @param to  The node to append imported node to.\n * @param before  The node to insert imported node before, or `null` to append it to the end of target one.\n * @param importContent  A function that imports nodes nested in parent element. [[importNodeContent]] by default.\n *\n * @returns Imported node.\n */\nexport function importNode<N extends Node>(\n    from: N,\n    to: Node,\n    before?: Node | null,\n    importContent?: (this: void, from: N, to: N) => void,\n): N;\n\nexport function importNode<N extends Node>(\n    from: N,\n    to: Node,\n    beforeOrImport?: Node | null | ((this: void, from: N, to: N) => void),\n    importContent: (this: void, from: N, to: N) => void = importNodeContent,\n): N {\n\n  let before: Node | null;\n\n  if (typeof beforeOrImport === 'function') {\n    importContent = beforeOrImport;\n    before = null;\n  } else {\n    before = beforeOrImport || null;\n  }\n\n  const doc = to.ownerDocument!;\n\n  if (isElement(from)) {\n\n    const elementClone = doc.createElement(from.tagName.toLowerCase()) as Node as (Element & N);\n\n    from.getAttributeNames().forEach(attr => elementClone.setAttribute(attr, from.getAttribute(attr)!));\n    importContent(from, elementClone);\n    to.insertBefore(elementClone, before);\n\n    return elementClone;\n  }\n\n  const nodeClone = doc.importNode(from, false);\n\n  to.insertBefore(nodeClone, before);\n\n  return nodeClone;\n}\n\n/**\n * Imports DOM node contents from one document to another.\n *\n * @param from  The node which contents to import.\n * @param to  The node to append imported nodes to.\n */\nexport function importNodeContent(from: Node, to: Node): void {\n  itsEach(\n      overArray(from.childNodes),\n      node => importNode(node, to),\n  );\n}\n","import { nextArgs, nextSkip } from 'call-thru';\nimport { eventSupply, EventSupply, OnEvent, onEventBy, trackValue } from 'fun-events';\nimport { Page } from '../page';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nexport function cachingPageLoader(loader: PageLoader): PageLoader {\n\n  let state: {\n    readonly url: string;\n    readonly on: OnEvent<[PageLoadResponse]>;\n    readonly sup: EventSupply;\n  } | undefined;\n\n  return page => {\n\n    const url = pageUrl(page);\n\n    if (state) {\n      if (state.url === url) {\n        return state.on;\n      }\n      state.sup.off();\n    }\n\n    let tracked: {\n      readonly on: OnEvent<[PageLoadResponse]>;\n      num: number;\n    } | undefined;\n    const supply = eventSupply().whenOff(() => {\n      state = undefined;\n      tracked = undefined;\n    });\n\n    const on = onEventBy<[PageLoadResponse]>(receiver => {\n      if (!tracked) {\n\n        const onLoad = loader(page);\n        const tracker = trackValue<PageLoadResponse>();\n        const trackSupply = onLoad(resp => {\n          tracker.it = resp;\n        }).whenOff(reason => {\n          // Error drops page cache, unlike successful page load.\n          if (reason != null) {\n            supply.off(reason);\n          }\n        });\n\n        supply.whenOff(reason => {\n          trackSupply.off(reason);\n          tracker.done(reason);\n        });\n\n        tracked = {\n          on: tracker.read.thru_(\n              response => response ? nextArgs(response) : nextSkip(),\n          ),\n          num: 0,\n        };\n      }\n\n      const requested = tracked;\n\n      ++requested.num;\n\n      return requested.on(receiver).needs(supply).whenOff(reason => {\n        if (!--requested.num) {\n          // Allow to request the same page again\n          Promise.resolve().then(() => {\n            if (!requested.num && requested === tracked) {\n              supply.off(reason);\n            }\n          });\n        }\n      });\n    });\n\n    state = { url, on, sup: supply };\n\n    return on;\n  };\n}\n\nfunction pageUrl(page: Page): string {\n  return new URL('', page.url).href;\n}\n","import { flatMapIt, itsEach, itsIterator } from 'a-iterable';\nimport { noop } from 'call-thru';\nimport {\n  EventEmitter,\n  eventReceiver,\n  EventReceiver,\n  eventSupply,\n  EventSupply,\n  noEventSupply,\n  OnEvent,\n  onEventBy,\n} from 'fun-events';\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { PageFragmentRequest, PageLoadRequest } from './page-load-request';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nexport interface PageLoadReq extends PageLoadRequest {\n\n  readonly receiver: EventReceiver.Generic<[PageLoadResponse]>;\n\n}\n\nclass PageLoadAbortError extends Error {}\n\nclass PageLoadRequestsParam extends PageParam<PageLoadRequests, PageLoadRequests> {\n\n  create(\n      _page: Page,\n      requests: PageLoadRequests,\n  ): PageParam.Handle<PageLoadRequests, PageLoadRequests> {\n    return {\n      get() {\n        return requests;\n      },\n      put: noop,\n    };\n  }\n\n}\n\n/**\n * @internal\n */\nexport const pageLoadRequestsParam: PageParam<PageLoadRequests, PageLoadRequests> = new PageLoadRequestsParam();\n\n/**\n * @internal\n */\nexport class PageLoadRequests implements Iterable<PageLoadReq> {\n\n  private readonly _map = new Map<EventSupply, PageLoadReq[]>();\n\n  constructor(\n      private readonly _navigation: Navigation,\n      private readonly _loader: PageLoader,\n  ) {}\n\n  get fragments(): readonly PageFragmentRequest[] {\n\n    const result: PageFragmentRequest[] = [];\n\n    for (const request of this) {\n      if (!request.fragment) {\n        return [];\n      }\n      result.push(request.fragment);\n    }\n\n    return result;\n  }\n\n  [Symbol.iterator](): Iterator<PageLoadReq> {\n    return itsIterator(flatMapIt(this._map.values()));\n  }\n\n  handle(): PageParam.Handle<void, PageLoadRequest> {\n\n    const self = this;\n    const pageSupply = eventSupply();\n    let loadSupply = noEventSupply();\n\n    return {\n      get() {/* void */},\n      put(request: PageLoadRequest): void {\n        self._add(request);\n      },\n      transfer(to: Page) {\n\n        const transferred = self._transfer();\n\n        to.put(pageLoadRequestsParam, transferred);\n\n        return transferred.handle();\n      },\n      enter(page: Page, when: 'init' | 'open' | 'replace' | 'return'): void {\n        if (when === 'init') {\n          // The page is loaded already. No need to fetch it.\n          return;\n        }\n\n        loadSupply = eventSupply().needs(pageSupply);\n\n        const onLoad = onEventBy<[PageLoadResponse]>(responseReceiver => {\n\n          const emitter = new EventEmitter<[PageLoadResponse]>();\n          const supply = emitter.on(responseReceiver);\n\n          self._loader(page)(response => emitter.send(response)).whenOff(error => {\n            if (error !== undefined && !(error instanceof PageLoadAbortError)) {\n              // Report current page load error as failed load response\n              emitter.send({\n                ok: false as const,\n                page,\n                error,\n              });\n            }\n          }).needs(loadSupply);\n\n          return supply;\n        }).share();\n\n        itsEach(\n            self,\n            ({ fragment, receiver }) => onFragment(onLoad, fragment)({\n              supply: eventSupply().needs(receiver.supply),\n              receive(context, response): void {\n                receiver.receive(context, response);\n              },\n            }),\n        );\n      },\n      leave(): void {\n        loadSupply.off(new PageLoadAbortError('page left'));\n      },\n      stay() {\n        pageSupply.off(new PageLoadAbortError('navigation cancelled'));\n      },\n      forget() {\n        pageSupply.off(new PageLoadAbortError('page forgotten'));\n      },\n    };\n\n  }\n\n  private _add(request: PageLoadRequest): void {\n\n    const req = { ...request, receiver: eventReceiver(request.receiver) };\n    const { supply } = req.receiver;\n    const list = this._map.get(supply);\n\n    if (list) {\n      list.push(req);\n    } else {\n      this._map.set(supply, [req]);\n      supply.whenOff(() => this._map.delete(supply));\n    }\n  }\n\n  private _transfer(): PageLoadRequests {\n\n    const transferred = new PageLoadRequests(this._navigation, this._loader);\n\n    for (const [supply, list] of this._map.entries()) {\n      transferred._map.set(supply, Array.from(list));\n    }\n\n    return transferred;\n  }\n\n}\n\nfunction onFragment(\n    onLoad: OnEvent<[PageLoadResponse]>,\n    fragment?: PageFragmentRequest,\n): OnEvent<[PageLoadResponse]> {\n  return fragment\n      ? onLoad.thru_(\n          response => response.ok\n              ? {\n                ...response,\n                fragment: (\n                    fragment.tag != null\n                    ? response.document.getElementsByTagName(fragment.tag)[0]\n                    : response.document.getElementById(fragment.id)\n                ) || undefined,\n              }\n              : response,\n      )\n      : onLoad;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextUpRef } from 'context-values/updatable';\nimport { EventSender, OnEvent } from 'fun-events';\nimport { FetchAgentKey } from '../../fetch/fetch-agent-key.impl';\nimport { PageLoadResponse } from './page-load-response';\n\n/**\n * Page load agent signature.\n *\n * The agent can be used to alter loaded page document processing. For that it should be registered in appropriate\n * context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by page loader.\n */\nexport type PageLoadAgent =\n/**\n * @param next  Either calls the next agent in chain, or actually loads page document if this agent is the last one.\n * Accepts an optional `Request` parameter. The original request will be used instead when omitted.\n * @param request  HTTP request.\n *\n * @returns An `EventSender` of page load response. It is returned either to preceding agent in chain, or as a loaded\n * document.\n */\n    (\n        this: void,\n        next: (this: void, request?: Request) => OnEvent<[PageLoadResponse]>,\n        request: Request,\n    ) => EventSender<[PageLoadResponse]>;\n\nexport namespace PageLoadAgent {\n\n  /**\n   * Combined page load agent signature.\n   *\n   * This is what is available under [[PageLoadAgent]] key.\n   */\n  export type Combined =\n  /**\n   * @param next  Either calls the next agent in chain, or actually loads page document if this agent is the last one.\n   * Accepts `Request` parameter.\n   * @param request  HTTP request.\n   *\n   * @returns An `OnEvent` registrar of loaded document.\n   */\n      (\n          this: void,\n          next: (this: void, request: Request) => OnEvent<[PageLoadResponse]>,\n          request: Request,\n      ) => OnEvent<[PageLoadResponse]>;\n\n}\n\n/**\n * A key of context value containing an [[PageLoadAgent]] instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the fetch.\n */\nexport const PageLoadAgent: ContextUpRef<PageLoadAgent.Combined, PageLoadAgent> = (\n    /*#__PURE__*/ new FetchAgentKey<[PageLoadResponse]>('page-load-agent')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { noop, valueProvider } from 'call-thru';\nimport { ContextUpRef, FnContextKey } from 'context-values/updatable';\n\n/**\n * A signature of page load URL modifier function.\n *\n * All such functions registered in bootstrap context are called in order of their registration with current page URL.\n * They are able to modify it, e.g. by applying additional URL search parameters. The modified URL is used then to load\n * the page.\n */\nexport type PageLoadURLModifier =\n/**\n * @param url  An URL of page to load.\n */\n    (this: void, url: URL) => void;\n\n/**\n * A key of bootstrap context value containing a page load URL modifier.\n *\n * Does not modify URL by default.\n */\nexport const PageLoadURLModifier: ContextUpRef<PageLoadURLModifier, PageLoadURLModifier> = (\n    /*#__PURE__*/ new FnContextKey('page-load-url', { byDefault: valueProvider(noop) })\n);\n","import { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { itsReduction } from 'a-iterable';\nimport { nextEach } from 'call-thru';\nimport { SingleContextKey } from 'context-values';\nimport { EventNotifier, onAsync, OnEvent, onEventBy } from 'fun-events';\nimport { hthvParse, hthvQuote } from 'http-header-value';\nimport { HttpFetch } from '../../fetch';\nimport { Page } from '../page';\nimport { PageLoadAgent } from './page-load-agent';\nimport { pageLoadRequestsParam } from './page-load-requests.impl';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\n\n/**\n * @internal\n */\nexport type PageLoader = (this: void, page: Page) => OnEvent<[PageLoadResponse]>;\n\n/**\n * @internal\n */\nexport const PageLoader = (/*#__PURE__*/ new SingleContextKey<PageLoader>(\n    'page-loader',\n    {\n      byDefault: bootstrapDefault(newPageLoader),\n    },\n));\n\nfunction newPageLoader(context: BootstrapContext): PageLoader {\n\n  const window = context.get(BootstrapWindow);\n  const httpFetch = context.get(HttpFetch);\n  const modifyURL = context.get(PageLoadURLModifier);\n  const agent = context.get(PageLoadAgent);\n  const parser: DOMParser = new (window as any).DOMParser();\n\n  return page => {\n\n    const url = new URL(page.url.href);\n\n    modifyURL(url);\n\n    const request = new Request(\n        url.href,\n        {\n          mode: 'same-origin',\n          credentials: 'same-origin',\n          headers: new Headers({ Accept: 'text/html' }),\n        },\n    );\n\n    return onEventBy(receiver => agent(fetch, request)(receiver));\n\n    function fetch(fetchRequest: Request): OnEvent<[PageLoadResponse]> {\n      requestPageFragments(page, fetchRequest);\n\n      return onEventBy<[PageLoadResponse]>(receiver => {\n\n        const dispatcher = new EventNotifier<[PageLoadResponse]>();\n\n        dispatcher.on(receiver);\n        dispatcher.send({ page });\n\n        onAsync(httpFetch(fetchRequest).thru_(\n            response => Promise.all([response, response.text()]),\n        )).thru_(\n            (...batch: [Response, string][]) => nextEach(batch),\n            ([response, text]): PageLoadResponse => {\n              if (!response.ok) {\n                return {\n                  ok: false as const,\n                  page,\n                  response,\n                  error: response.status,\n                };\n              }\n              try {\n                return {\n                  ok: true as const,\n                  page,\n                  response,\n                  document: parsePageDocument(parser, url, response, text),\n                };\n              } catch (error) {\n                return {\n                  ok: false as const,\n                  page,\n                  response,\n                  error,\n                };\n              }\n            },\n        )(receiver);\n      });\n    }\n  };\n}\n\nfunction requestPageFragments(page: Page, request: Request): void {\n\n  const fragments = page.get(pageLoadRequestsParam)?.fragments;\n\n  if (fragments && fragments.length) {\n    request.headers.set(\n        'Accept-Fragment',\n        itsReduction(\n            fragments,\n            (header, fragment) => (header ? header + ', ' : '') + (\n                fragment.tag != null\n                    ? 'tag=' + hthvQuote(fragment.tag)\n                    : 'id=' + hthvQuote(fragment.id)\n            ),\n            '',\n        ),\n    );\n  }\n}\n\nfunction parsePageDocument(parser: DOMParser, url: URL, response: Response, text: string): Document {\n\n  const doc = parser.parseFromString(\n      text,\n      hthvParse(response.headers.get('Content-Type') || 'text/html')[0].v as SupportedType,\n  );\n\n  if (doc.head) {\n\n    const base = doc.head.querySelector('base');\n\n    if (base) {\n      base.href = new URL(base.getAttribute('href')!, url).href;\n    } else {\n\n      const newBase = doc.createElement('base');\n\n      newBase.href = url.href;\n\n      doc.head.appendChild(newBase);\n    }\n  }\n\n  return doc;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { PageParamContext } from '../page-param-context';\nimport { cachingPageLoader } from './caching-page-loader.impl';\nimport { PageLoadRequest } from './page-load-request';\nimport { PageLoadRequests, pageLoadRequestsParam } from './page-load-requests.impl';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nclass PageLoadParam extends PageParam<void, PageLoadRequest> {\n\n  create(page: Page, request: PageLoadRequest, context: PageParamContext): PageParam.Handle<void, PageLoadRequest> {\n\n    const requests = new PageLoadRequests(context.get(Navigation), cachingPageLoader(context.get(PageLoader)));\n    const handle = requests.handle();\n\n    page.put(pageLoadRequestsParam, requests);\n    handle.put(request);\n\n    return handle;\n  }\n\n}\n\n/**\n * Page load parameter.\n *\n * Accepts a {@link PageLoadRequest page load request} as input.\n *\n * A page load is initiated whenever a page with new address is {@link Navigation.onEnter entered}.\n *\n * Page load won't be initiated if:\n * - page load parameter is not {@link Page.put} added,\n * - all added {@link PageLoadRequest.receiver response receiver}s supplies are cut off, or\n * - the entered page address is the the same one as previous one, except the hash,\n */\nexport const pageLoadParam: PageParam<void, PageLoadRequest> = (/*#__PURE__*/ new PageLoadParam());\n","import { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { AfterEvent, afterThe } from 'fun-events';\nimport { Navigation } from '../navigation';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\n\nconst PageCacheBuster__key = (/*#__PURE__*/ new SingleContextKey<PageCacheBuster>(\n    'page-cache-buster',\n    {\n      byDefault: bootstrapDefault(context => new PageCacheBuster(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport const appRevSearchParam = '__wesib_app_rev__';\n\n/**\n * @internal\n */\nexport class PageCacheBuster {\n\n  static get [ContextKey__symbol](): SingleContextKey<PageCacheBuster> {\n    return PageCacheBuster__key;\n  }\n\n  readonly urlModifier: AfterEvent<PageLoadURLModifier[]>;\n  readonly agent: AfterEvent<PageLoadAgent[]>;\n\n  constructor(context: BootstrapContext) {\n\n    const rev = appRev(context.get(BootstrapWindow).document);\n\n    if (!rev) {\n      this.urlModifier = afterThe();\n      this.agent = afterThe();\n    } else {\n\n      const navigation = context.get(Navigation);\n\n      this.urlModifier = afterThe(url => url.searchParams.set(appRevSearchParam, rev));\n      this.agent = afterThe(\n          (next, request) => next(new Request(request.url, request))\n              .thru_(\n                  response => {\n                    if (response.ok) {\n\n                      const newRev = appRev(response.document);\n\n                      if (newRev && newRev !== rev) {\n\n                        const url = new URL(response.page.url.href);\n\n                        url.searchParams.set(appRevSearchParam, newRev);\n                        navigation.update(url);\n                        navigation.reload();\n                      }\n                    }\n\n                    return response;\n                  },\n              ),\n      );\n    }\n  }\n\n}\n\nfunction appRev(doc: Document): string | null | undefined {\n  return doc.querySelector('meta[name=wesib-app-rev]')?.getAttribute('content');\n}\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { filterIt, itsEach, mapIt, overArray } from 'a-iterable';\nimport { importNode } from '../../util';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageScriptsAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().thru_(\n      response => {\n        if (response.ok) {\n\n          const allScripts = new Set<string>(mapIt(\n              externalScripts(doc, overArray(doc.scripts)),\n              ([src]) => src,\n          ));\n\n          itsEach(\n              filterIt(\n                  externalScripts(response.document, overArray(response.document.querySelectorAll('script'))),\n                  ([src]) => !allScripts.has(src),\n              ),\n              ([src, script]) => {\n                importNode(script, doc.head, (_from, to) => to.src = src);\n                allScripts.add(src);\n              },\n          );\n        }\n        return response;\n      },\n  );\n}\n\nfunction externalScripts(\n    doc: Document,\n    scripts: Iterable<HTMLScriptElement>,\n): Iterable<readonly [string, HTMLScriptElement]> {\n  return mapIt(\n      filterIt(\n          scripts,\n          script => !!script.src,\n      ),\n      script => [new URL(script.src, doc.baseURI).href, script] as const,\n  );\n}\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { itsEach, itsFirst, overArray } from 'a-iterable';\nimport { importNode } from '../../util';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageStyleAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().thru_(\n      response => {\n        if (!response.ok) {\n          return response;\n        }\n\n        const newStyles = response.document.querySelectorAll<HTMLLinkElement>('link[rel=stylesheet]');\n\n        if (!newStyles.length) {\n          return response;\n        }\n\n        let target: Node = doc.head;\n        let before: Node | null = null;\n        const oldStyles = doc.querySelectorAll<HTMLLinkElement>('link[rel=stylesheet]');\n        const oldStylesByHref = new Map<string, HTMLLinkElement>();\n        const firstOldStyle = oldStyles.item(0);\n\n        if (firstOldStyle) {\n          target = firstOldStyle.parentNode!;\n          before = firstOldStyle;\n          itsEach(\n              overArray(oldStyles),\n              link => oldStylesByHref.set(new URL(link.href, doc.baseURI).href, link),\n          );\n        }\n\n        itsEach(\n            overArray(newStyles),\n            newStyle => {\n\n              const href = new URL(newStyle.href, doc.baseURI).href;\n              const oldStyle = oldStylesByHref.get(href);\n\n              if (oldStyle) {\n                // Style already exists.\n                if (itsFirst(oldStylesByHref.keys()) === href) {\n                  // In proper position already.\n                  // Insert the remaining styles after it.\n                  target = oldStyle.parentNode!;\n                  before = oldStyle.nextSibling;\n                } else {\n                  // Move to proper position.\n                  target.insertBefore(oldStyle, before);\n                }\n                oldStylesByHref.delete(href);\n              } else {\n                // Import new style\n                importNode(newStyle, target, before, (_from, to) => to.href = href);\n              }\n            },\n        );\n\n        // Remove remaining old styles\n        itsEach(oldStylesByHref.values(), style => style.parentNode!.removeChild(style));\n\n        return response;\n      },\n  );\n}\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageTitleAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().thru_(response => {\n    if (response.ok) {\n\n      const title = response.document.getElementsByTagName('title').item(0);\n\n      if (title && title.textContent) {\n        doc.title = title.textContent;\n      }\n    }\n\n    return response;\n  });\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { NavigationSupport } from '../navigation-support.feature';\nimport { PageCacheBuster } from './page-cache-buster.impl';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\nimport { pageScriptsAgent } from './page-scripts-agent.impl';\nimport { pageStyleAgent } from './page-style-agent.impl';\nimport { pageTitleAgent } from './page-title-agent.impl';\n\n/**\n * @internal\n */\nconst PageLoadSupport__feature: FeatureDef = {\n  needs: NavigationSupport,\n  setup(setup) {\n    setup.provide({\n      a: PageLoadURLModifier,\n      by: (buster: PageCacheBuster) => buster.urlModifier,\n      with: [PageCacheBuster],\n    });\n    setup.provide({\n      a: PageLoadAgent,\n      by: (buster: PageCacheBuster) => buster.agent,\n      with: [PageCacheBuster],\n    });\n    setup.provide({ a: PageLoadAgent, by: pageScriptsAgent });\n    setup.provide({ a: PageLoadAgent, by: pageStyleAgent });\n    setup.provide({ a: PageLoadAgent, by: pageTitleAgent });\n  },\n};\n\n/**\n * Page load support feature.\n *\n * Enables default {@link PageLoadAgent page load agents}:\n * 1. Page cache busting agent.\n *    If `<meta name=\"wesib-app-rev\">` tag is present in initial page, then sends this tag's content with each page load\n *    request as `__wesib_app_rev__` search parameter. If the loaded page contains the same named meta tag with\n *    different content, then reloads the page.\n *    This serves both as cache busting technique, and as server-side application updates handler.\n * 2. Scripts agent.\n *    Includes external scripts from loaded page into main document.\n * 3. Style agent.\n *    Replaces external styles of main document styles with the ones from loaded page.\n *    Unless loaded page has no external styles.\n * 4. Title agent.\n *    Applies loaded page title to bootstrap window. If there is one.\n */\nexport class PageLoadSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return PageLoadSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport {\n  BootstrapWindow,\n  Class,\n  Component,\n  ComponentClass,\n  ComponentContext,\n  ComponentDecorator,\n  DefaultRenderScheduler,\n} from '@wesib/wesib';\nimport { noop } from 'call-thru';\nimport { importNodeContent } from '../../util';\nimport { Navigation } from '../navigation';\nimport { pageLoadParam } from './page-load-param';\nimport { PageFragmentRequest } from './page-load-request';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoadSupport } from './page-load-support.feature';\n\n/**\n * Creates component decorator that includes page contents into decorated component's element.\n *\n * The page is loaded and included whenever it is {@link Navigation.onEnter entered}.\n *\n * Utilizes [[pageLoadParam]] navigation parameter.\n *\n * Enables [[NavigationSupport]] and [[PageLoadSupport]] features.\n *\n * @typeparam T  A type of decorated component class.\n * @param def  Page inclusion definition.\n *\n * @returns New component decorator.\n */\nexport function IncludePage<T extends ComponentClass = Class>(\n    def: IncludePageDef<InstanceType<T>> = {},\n): ComponentDecorator<T> {\n\n  const onResponse = def.onResponse ? def.onResponse.bind(def) : noop;\n\n  return Component({\n    feature: {\n      needs: PageLoadSupport,\n    },\n    define(context) {\n      context.whenComponent(context => {\n\n        const document = context.get(BootstrapWindow).document;\n        const schedule = context.get(DefaultRenderScheduler)();\n        const navigation = context.get(Navigation);\n        const detectFragment = (): PageFragmentRequest => {\n\n          const { fragment } = def;\n\n          if (fragment) {\n            return fragment;\n          }\n\n          const { element: { id, tagName: tag } }: { element: Element } = context;\n\n          return id ? { id } : { tag };\n        };\n\n        context.whenOn(supply => {\n\n          const range = document.createRange();\n\n          range.selectNodeContents(context.contentRoot);\n\n          navigation.read.once(page => {\n            page.put(\n                pageLoadParam,\n                {\n                  fragment: detectFragment(),\n                  receiver: {\n                    supply,\n                    receive: (_ctx, response) => handleResponse(response),\n                  },\n                },\n            );\n          });\n\n          function handleResponse(response: PageLoadResponse): void {\n            if (response.ok) {\n              schedule(() => {\n                range.deleteContents();\n\n                const target = document.createDocumentFragment();\n                const { fragment } = response;\n\n                if (fragment) {\n                  importNodeContent(fragment, target);\n                  range.insertNode(target);\n                }\n\n                onResponse({ context, range, response });\n              });\n            } else {\n              schedule(() => onResponse({ context, range, response }));\n            }\n          }\n        });\n      });\n    },\n  });\n}\n\n/**\n * Page inclusion definition.\n *\n * Configures {@link IncludePage @LoadPage} decorator.\n *\n * @typeparam T  A type of component.\n */\nexport interface IncludePageDef<T extends object = any> {\n\n  /**\n   * Page fragment to include.\n   *\n   * By default uses custom element identifier if present, or element tag name otherwise.\n   */\n  fragment?: PageFragmentRequest;\n\n  /**\n   * Performs additional actions during page load.\n   *\n   * This method is called inside page contents render schedule for {@link PageLoadResponse.ok each stage} of page\n   * load. At the final stage it is called after loaded page contents included.\n   *\n   * This method can be used e.g. to indicate the page load progress.\n   *\n   * @param context  Decorated component context.\n   * @param response  Page load response.\n   * @param range  Document range the loaded page contents going to replace.\n   */\n  onResponse?(\n      {\n        context,\n        response,\n        range,\n      }: {\n        context: ComponentContext<T>;\n        response: PageLoadResponse;\n        range: Range;\n      },\n  ): void;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { DefaultNamespaceAliaser, DefaultRenderScheduler } from '@wesib/wesib';\nimport { ContextKey__symbol, ContextValueOpts, ContextValues } from 'context-values';\nimport { ContextUpKey, ContextUpRef } from 'context-values/updatable';\nimport { afterAll, AfterEvent, EventKeeper } from 'fun-events';\nimport { InConverter, InNamespaceAliaser, InRenderScheduler, intoConvertedBy } from 'input-aspects';\n\n/**\n * Default input aspects.\n *\n * This is an `AfterEvent` keeper of aspect converter meant to be applied to controls.\n *\n * As a bare minimum it assigns the following aspects to converted controls:\n * - `InRenderScheduler` set to `DefaultRenderScheduler`,\n * - `InNamespaceAliaser` set to `DefaultNamespaceAliaser.\n *\n * More input aspect converters may be registered in context. They may override the default ones.\n */\nexport type DefaultInAspects = AfterEvent<[InConverter.Aspect<any, any>]>;\n\n/**\n * @internal\n */\nclass DefaultInAspectsKey\n    extends ContextUpKey<AfterEvent<[InConverter.Aspect<any, any>]>, InConverter.Aspect<any, any>> {\n\n  get upKey(): this {\n    return this;\n  }\n\n  constructor() {\n    super('default-in-aspects');\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          AfterEvent<[InConverter.Aspect<any, any>]>,\n          EventKeeper<InConverter.Aspect<any, any>[]> | InConverter.Aspect<any, any>,\n          AfterEvent<InConverter.Aspect<any, any>[]>>,\n  ): AfterEvent<[InConverter.Aspect.Factory<any, any>]> {\n\n    const nsAlias = opts.context.get(DefaultNamespaceAliaser);\n\n    return afterAll({\n      scheduler: opts.context.get(DefaultRenderScheduler[ContextKey__symbol].upKey),\n      fns: opts.seed,\n    }).keep.thru(\n        ({\n            scheduler: [scheduler],\n            fns,\n        }) => intoConvertedBy(\n            ...fns,\n            InRenderScheduler.to(scheduler),\n            InNamespaceAliaser.to(nsAlias),\n        ),\n    );\n  }\n\n}\n\n/**\n * A key of bootstrap, definition, or component context containing default input aspects.\n */\nexport const DefaultInAspects: ContextUpRef<DefaultInAspects, InConverter.Aspect<any, any>> = (\n    /*#__PURE__*/ new DefaultInAspectsKey()\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { ComponentContext } from '@wesib/wesib';\nimport { SingleContextUpKey, SingleContextUpRef } from 'context-values/updatable';\nimport { eventSupply, EventSupply } from 'fun-events';\nimport { InControl } from 'input-aspects';\nimport { HierarchyContext } from '../hierarchy';\n\n/**\n * A user input originated from control.\n *\n * It is meant to be present in root {@link HierarchyContext hierarchy context}. Nested components may access it from\n * their hierarchy contexts to participate in user input.\n *\n * An [[inputFromControl]] function can be used to initiate user input.\n *\n * @typeparam Value  Input value type.\n */\nexport interface InputFromControl<Value = any> {\n\n  /**\n   * Root component context the input is initiated for.\n   */\n  readonly root: ComponentContext;\n\n  /**\n   * User input control.\n   */\n  readonly control: InControl<Value>;\n\n}\n\n/**\n * No user input originated from control.\n */\nexport interface NoInputFromControl {\n  control?: undefined;\n}\n\n/**\n * A key of hierarchy context value containing a user input originated from control. Potentially\n * {@link NoInputFromControl absent}.\n */\nexport const InputFromControl: SingleContextUpRef<InputFromControl | NoInputFromControl> = (\n    /*#__PURE__*/ new SingleContextUpKey<InputFromControl | NoInputFromControl>(\n        'input-from-control',\n        {\n          byDefault: () => ({}),\n        },\n    )\n);\n\n/**\n * Initiates user input from the given control for the given root component.\n *\n * Constructs an [[InputFromControl]] instance and makes it available in `root` component's hierarchy.\n *\n * @typeparam Value  Input value type.\n * @param root  Root component context to initiate user input for.\n * @param control  User input control.\n *\n * @returns User input supply. The user input would be stopped once this supply is cut off.\n */\nexport function inputFromControl<Value>(\n    root: ComponentContext,\n    control: InControl<Value>,\n): EventSupply {\n\n  const off = root.get(HierarchyContext).provide({\n    a: InputFromControl,\n    by: () => ({\n      root,\n      control,\n    }),\n  });\n\n  return eventSupply(off).needs(control);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { Class, Component, ComponentClass, ComponentContext, ComponentDecorator } from '@wesib/wesib';\nimport { nextArg, nextArgs, NextCall } from 'call-thru';\nimport { afterAll, EventKeeper, EventSupply, eventSupplyOf, nextAfterEvent, OnEventCallChain } from 'fun-events';\nimport { InControl, InConverter } from 'input-aspects';\nimport { HierarchyContext } from '../hierarchy';\nimport { DefaultInAspects } from './default-in-aspects';\nimport { inputFromControl, InputFromControl, NoInputFromControl } from './input-from-control';\n\n/**\n * Constructs component decorator that converts input control from {@link HierarchyContext.up enclosing component}\n * and uses it as an {@link InputFromControl origin of user input} in decorated component.\n *\n * @param convert  Input control converter definition.\n *\n * @returns New component decorator.\n */\nexport function ConvertInput<T extends ComponentClass = Class>(\n    convert: ConvertInputDef<InstanceType<T>>,\n): ComponentDecorator<T> {\n  return Component({\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const { up } = context.get(HierarchyContext);\n\n        afterAll({\n          parent: up.keep.thru_(\n              upper => upper ? nextAfterEvent(upper.get(InputFromControl)) : nextArg<NoInputFromControl>({}),\n          ),\n          aspects: context.get(DefaultInAspects),\n        }).keep.thru_(\n            ({\n              parent: [control],\n              aspects: [aspects],\n            }): NextCall<OnEventCallChain, [InControl<any>?, EventSupply?]> => {\n              if (control.control) {\n\n                const converted = convert({ control, context, aspects });\n\n                if (converted) {\n                  return converted instanceof InControl\n                      ? nextArgs(converted)\n                      : nextAfterEvent(converted);\n                }\n              }\n\n              return nextArgs();\n            },\n        ).consume(\n            (control?: InControl<any> | null, supply?: EventSupply) => {\n              if (!control) {\n                return;\n              }\n\n              const usageSupply = inputFromControl(context, control);\n\n              (supply || eventSupplyOf(control)).needs(usageSupply);\n\n              return usageSupply;\n            },\n        );\n      });\n    },\n  });\n}\n\n/**\n * Converter definition of enclosing component's user input control.\n *\n * The returned converted control keeper may send an event supply as a second parameter. This supply will be cut off\n * once the input from converted control is no longer needed. Otherwise the control's input supply will be cut off\n * instead, and control would become unusable after that.\n *\n * Configures {@link ConvertInput @ConvertInput} component decorator.\n */\nexport type ConvertInputDef<T extends object = any> =\n/**\n * @param control  Enclosing component's user input to convert.\n * @param context  Decorated component context.\n * @param aspects  Default input aspect converter. This is a value of [[DefaultInputAspect]].\n *\n * @returns Either input control, its keeper, or nothing.\n */\n    (\n        this: void,\n        {\n          control,\n          context,\n          aspects,\n        }: {\n          control: InputFromControl;\n          context: ComponentContext<T>;\n          aspects: InConverter.Aspect<any, any>;\n        },\n    ) => InControl<any> | EventKeeper<[InControl<any>?, EventSupply?]> | null | undefined;\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { ComponentContext } from '@wesib/wesib';\nimport { SingleContextUpKey, SingleContextUpRef } from 'context-values/updatable';\nimport { eventSupply, EventSupply } from 'fun-events';\nimport { InControl, InFormElement } from 'input-aspects';\nimport { HierarchyContext } from '../hierarchy';\nimport { InputFromControl } from './input-from-control';\n\n/**\n * A form control to fill by user input.\n *\n * An [[inputToForm]] function can be used to initiate filling the form.\n *\n * @typeparam Model  Form model type.\n * @typeparam Elt  A type of HTML form element.\n */\nexport interface InputToForm<Model = any, Elt extends HTMLElement = HTMLElement> extends InputFromControl<Model> {\n\n  /**\n   * Input form element control.\n   *\n   * Unlike input form control this one is not supposed to be submitted. But it contains a `<form>` element issuing a\n   * `submit` event.\n   */\n  readonly form: InFormElement<Elt>;\n\n}\n\n/**\n * No user input filling the form.\n */\nexport interface NoInputToForm {\n  control?: undefined;\n  form?: undefined;\n}\n\n/**\n * A key of hierarchy context value containing a form element to fill by user input. Potentially\n * {@link NoInputToForm absent}.\n */\nexport const InputToForm: SingleContextUpRef<InputToForm<any, any> | NoInputToForm> = (\n    /*#__PURE__*/ new SingleContextUpKey<InputToForm<any, any> | NoInputToForm>(\n        'input-to-form',\n        {\n          byDefault: () => ({}),\n        },\n    )\n);\n\n/**\n * Initiates filling the form by user input from.\n *\n * Constructs [[InputToForm]] and [[InputFromControl]] instances and makes them available in `root` component's\n * hierarchy.\n *\n * @typeparam Model  Form model type.\n * @typeparam Elt  A type of HTML form element.\n * @param root  Root component context to initiate user input for.\n * @param control  Input form control.\n * @param form  Form element control.\n *\n * @returns Form fill supply. The form filling would be stopped once this supply is cut off.\n */\nexport function inputToForm<Model, Elt extends HTMLElement>(\n    root: ComponentContext,\n    control: InControl<Model>,\n    form: InFormElement<Elt>,\n): EventSupply {\n\n  const hierarchy = root.get(HierarchyContext);\n  const off = hierarchy.provide({\n    a: InputToForm,\n    by: () => ({\n      root,\n      control,\n      form,\n    }),\n  });\n\n  hierarchy.provide({\n    a: InputFromControl,\n    via: InputToForm,\n  });\n\n  return eventSupply(off)\n      .needs(control)\n      .needs(form);\n}\n\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { Class, Component, ComponentClass, ComponentContext, ComponentDecorator } from '@wesib/wesib';\nimport { nextArgs, NextCall } from 'call-thru';\nimport { afterAll, EventKeeper, EventSupply, eventSupplyOf, nextAfterEvent, OnEventCallChain } from 'fun-events';\nimport { InControl, InConverter, InFormElement } from 'input-aspects';\nimport { ComponentNode, ComponentTreeSupport, ElementNode, ElementPickMode } from '../tree';\nimport { DefaultInAspects } from './default-in-aspects';\nimport { inputToForm } from './input-to-form';\n\n/**\n * Constructs component decorator that finds form element to {@link InputToForm fill by user input}.\n *\n * Enables [[ComponentTreeSupport]] feature.\n *\n * @typeparam T  A type of decorated component class.\n * @param def  Form element fill definition.\n *\n * @returns New component decorator.\n */\nexport function FillInputForm<T extends ComponentClass = Class>(\n    def: FillInputFormDef<InstanceType<T>>,\n): ComponentDecorator<T> {\n\n  const { select = 'form', pick = { deep: true, all: true } } = def;\n\n  return Component({\n    feature: {\n      needs: ComponentTreeSupport,\n    },\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const componentNode = context.get(ComponentNode);\n\n        context.whenOn(connectSupply => {\n          afterAll({\n            node: componentNode.select(select, pick).first,\n            aspects: context.get(DefaultInAspects),\n          }).keep.thru(({\n            node: [node],\n            aspects: [aspects],\n          }): NextCall<OnEventCallChain, [InControl<any>, InFormElement, EventSupply?] | []> => {\n            if (!node) {\n              return nextArgs();\n            }\n\n            const tuple = def.makeForm({ node, context, aspects });\n\n            if (!tuple) {\n              return nextArgs();\n            }\n\n            return Array.isArray(tuple) ? nextArgs(...tuple) : nextAfterEvent(tuple);\n          }).tillOff(connectSupply).consume(\n              (control?, form?, supply?) => {\n                if (!control) {\n                  return;\n                }\n\n                const fillSupply = inputToForm(context, control, form!);\n\n                if (supply) {\n                  supply.needs(fillSupply);\n                } else {\n                  eventSupplyOf(form!).needs(fillSupply);\n                  eventSupplyOf(control).needs(fillSupply);\n                }\n\n                return fillSupply;\n              },\n          );\n        });\n      });\n    },\n  });\n}\n\n/**\n * A definition of form element to {@link InputToForm fill by user input}.\n *\n * Configures {@link FillInputForm @FillInputForm} component decorator.\n *\n * @typeparam T  A type of component.\n */\nexport interface FillInputFormDef<T extends object = any> {\n\n  /**\n   * CSS selector of form element to fill.\n   *\n   * `form` by default.\n   */\n  readonly select?: string;\n\n  /**\n   * A mode of node picking from component tree.\n   *\n   * By default picks any matching element from entire subtree.\n   */\n  readonly pick?: ElementPickMode;\n\n  /**\n   * Constructs form control and form element control for element node found by {@link FillInputForm @FillInputForm}\n   * decorator.\n   *\n   * The returned control keeper may send an event supply as a third parameter. This supply will be cut off once\n   * the form filling is no longer needed. Otherwise the form's control supply will be cut off instead,\n   * and it would become unusable after that.\n   *\n   * @param node  Element node to construct form element control for.\n   * @param context  Component context the {@link FillInputForm @FillInputForm} decorator is applied to.\n   * @param aspects  Default input aspect converter. This is a value of [[DefaultInputAspect]].\n   *\n   * @returns Either form control and form element control tuple, their keeper, or nothing.\n   */\n  makeForm(\n      {\n        node,\n        context,\n        aspects,\n      }: {\n        node: ElementNode;\n        context: ComponentContext<T>;\n        aspects: InConverter.Aspect<any, any>;\n      },\n  ):\n      | [InControl<any>, InFormElement]\n      | EventKeeper<[InControl<any>, InFormElement, EventSupply?] | []>\n      | null\n      | undefined;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { ComponentClass, ComponentProperty, ComponentPropertyDecorator } from '@wesib/wesib';\nimport { eventSupplyOf } from 'fun-events';\nimport { DomEventDispatcher } from 'fun-events/dom';\nimport { HierarchyContext } from '../hierarchy';\nimport { InputToForm, NoInputToForm } from './input-to-form';\n\n/**\n * Creates a decorator for component method to call on input form submit.\n *\n * The decorated method accepts a {@link InputToForm filled input form} and submit event as parameters.\n *\n * @typeparam T  A type of decorated component class.\n * @typeparam M  Submitted value type.\n * @typeparam Elt  A type of HTML form element.\n * @param def  Submit handler definition.\n *\n * @returns New component property decorator.\n */\nexport function OnSubmit<T extends ComponentClass, Model = any, Elt extends HTMLElement = HTMLElement>(\n    def: OnSubmitDef = {},\n): ComponentPropertyDecorator<(form: InputToForm<Model, Elt>, event: Event) => void, T> {\n\n  const { cancel = true } = def;\n\n  return ComponentProperty(({ get }) => ({\n    componentDef: {\n      define(defContext) {\n        defContext.whenComponent(context => {\n          context.whenOn(supply => {\n\n            const hierarchy = context.get(HierarchyContext);\n            const { component } = context;\n\n            hierarchy.get(InputToForm).consume((inputToForm: InputToForm<Model, Elt> | NoInputToForm) => {\n              if (!inputToForm.control) {\n                return;\n              }\n\n              const submitDispatcher = new DomEventDispatcher(inputToForm.form.element);\n\n              eventSupplyOf(submitDispatcher).needs(supply);\n\n              const onSubmit = submitDispatcher.on('submit');\n\n              return (cancel ? onSubmit.instead : onSubmit)(\n                  event => get(component).call(component, inputToForm, event),\n              );\n            });\n          });\n        });\n      },\n    },\n  }));\n}\n\n/**\n * Form submit handler definition.\n *\n * Configures {@link OnSubmit @OnSubmit} component property decorator.\n */\nexport interface OnSubmitDef {\n\n  /**\n   * Whether to cancel default submit handler.\n   *\n   * `true` by default.\n   */\n  cancel?: boolean;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { Class, Component, ComponentClass, ComponentContext, ComponentDecorator } from '@wesib/wesib';\nimport { nextArg, valueProvider } from 'call-thru';\nimport { afterAll, afterThe, EventKeeper, nextAfterEvent } from 'fun-events';\nimport { InGroup } from 'input-aspects';\nimport { HierarchyContext } from '../hierarchy';\nimport { InputFromControl, NoInputFromControl } from './input-from-control';\n\n/**\n * Creates component decorator that adds {@link InputFromControl input control} of decorated component to input control\n * group of enclosing one under the given name.\n *\n * @typeparam T  A type of decorated component class.\n * @param name  A name to assign to component. This could be either a string, or a function returning name as a string\n * or as its keeper.\n *\n * @returns New component decorator.\n */\nexport function SetInputName<T extends ComponentClass = Class>(\n    name: string | ((this: void, context: ComponentContext<InstanceType<T>>) => string | EventKeeper<[string?]>),\n): ComponentDecorator<T> {\n\n  const getName: (context: ComponentContext<InstanceType<T>>) => EventKeeper<[string?]> = typeof name === 'string'\n      ? valueProvider(afterThe(name))\n      : context => {\n        const result = name(context);\n        return typeof result === 'string' ? afterThe(result) : result;\n      };\n\n  return Component({\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const hierarchy = context.get(HierarchyContext);\n\n        afterAll({\n          group: hierarchy.up.keep.thru_(\n              upper => upper ? nextAfterEvent(upper.get(InputFromControl)) : nextArg<NoInputFromControl>({}),\n              ({ control }) => control && control.aspect(InGroup),\n          ),\n          control: hierarchy.get(InputFromControl),\n          name: getName(context),\n        }).consume(\n            ({\n              group: [group],\n              control: [{ control }],\n              name: [name],\n            }) => {\n              if (name == null\n                  || !group\n                  || !control\n                  || group === control) {\n                return;\n              }\n              return group.controls.set(name, control);\n            },\n        );\n      });\n    },\n  });\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { Class, Component, ComponentClass, ComponentContext, ComponentDecorator } from '@wesib/wesib';\nimport { nextArgs, NextCall } from 'call-thru';\nimport { afterAll, EventKeeper, EventSupply, eventSupplyOf, nextAfterEvent, OnEventCallChain } from 'fun-events';\nimport { InControl, InConverter } from 'input-aspects';\nimport { ComponentNode, ComponentTreeSupport, ElementNode, ElementPickMode } from '../tree';\nimport { DefaultInAspects } from './default-in-aspects';\nimport { inputFromControl } from './input-from-control';\n\n/**\n * Constructs component decorator that finds input element and uses it as an {@link InputFromControl origin of user\n * input}.\n *\n * Enables [[ComponentTreeSupport]] feature.\n *\n * @typeparam T  A type of decorated component class.\n * @param def  Input element usage definition.\n *\n * @returns New component decorator.\n */\nexport function UseInputElement<T extends ComponentClass = Class>(\n    def: UseInputElementDef<InstanceType<T>>,\n): ComponentDecorator<T> {\n\n  const { select = 'input', pick = { deep: true, all: true } } = def;\n\n  return Component({\n    feature: {\n      needs: ComponentTreeSupport,\n    },\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const componentNode = context.get(ComponentNode);\n\n        context.whenOn(connectSupply => {\n          afterAll({\n            node: componentNode.select(select, pick).first,\n            aspects: context.get(DefaultInAspects),\n          }).keep.thru(({\n            node: [node],\n            aspects: [aspects],\n          }): NextCall<OnEventCallChain, [InControl<any>?, EventSupply?]> => {\n            if (!node) {\n              return nextArgs();\n            }\n\n            const control = def.makeControl({ node, context, aspects });\n\n            if (!control) {\n              return nextArgs();\n            }\n\n            return control instanceof InControl ? nextArgs(control) : nextAfterEvent(control);\n          }).tillOff(connectSupply).consume(\n              (control?: InControl<any>, supply?: EventSupply) => {\n                if (!control) {\n                  return;\n                }\n\n                const usageSupply = inputFromControl(context, control);\n\n                (supply || eventSupplyOf(control)).needs(usageSupply);\n\n                return usageSupply;\n              },\n          );\n        });\n      });\n    },\n  });\n}\n\n/**\n * A definition of element to use as an {@link InputFromControl origin of user input}.\n *\n * Configures {@link UseInputElement @UseInputElement} component decorator.\n *\n * @typeparam T  A type of component.\n */\nexport interface UseInputElementDef<T extends object = any> {\n\n  /**\n   * CSS selector of input element to use.\n   *\n   * `input` by default.\n   */\n  readonly select?: string;\n\n  /**\n   * A mode of node picking from component tree.\n   *\n   * By default picks any matching element from entire subtree.\n   */\n  readonly pick?: ElementPickMode;\n\n  /**\n   * Constructs input control for element node found by {@link UseInputElement @UseInputElement} decorator.\n   *\n   * The returned control keeper may send an event supply as a second parameter. This supply will be cut off once\n   * the input from control is no longer needed. Otherwise the control's input supply will be cut off instead,\n   * and control would become unusable after that.\n   *\n   * @param node  Element node to construct input control for.\n   * @param context  Component context the {@link UseInputElement @UseInputElement} decorator is applied to.\n   * @param aspects  Default input aspect converter. This is a value of [[DefaultInputAspect]].\n   *\n   * @returns Either input control, its keeper, or nothing.\n   */\n  makeControl(\n      {\n        node,\n        context,\n        aspects,\n      }: {\n        node: ElementNode;\n        context: ComponentContext<T>;\n        aspects: InConverter.Aspect<any, any>;\n      },\n  ):\n      | InControl<any>\n      | EventKeeper<[InControl<any>?, EventSupply?]>\n      | null\n      | undefined;\n\n}\n"],"names":["BootstrapContext__key","SingleContextKey","BootstrapContext","ContextValues","ContextKey__symbol","bootstrapDefault","provide","context","key","bootstrapContext","get","ComponentFactory__key","ComponentFactory","[object Object]","element","mount","this","mountTo","connected","BootstrapWindow","byDefault","window","BootstrapRoot","ctx","document","body","DefaultNamespaceAliaser","DefaultRenderScheduler","FnContextKey","options","newRenderSchedule","isArray","value","Array","ArraySet","AIterable","super","items","Set","size","Symbol","iterator","next","forEach","item","add","superClassOf","type","satisfying","prototype","Object","getPrototypeOf","superType","constructor","decoratePropertyAccessor","target","propertyKey","desc","updateDescriptor","isField","updatedDesc","undefined","writable","isPropertyAccessorDescriptor","value__symbol","initial","accessorDesc","set","newValue","toPropertyAccessorDescriptor","fieldKey","String","configurable","enumerable","fieldAccessorDescriptor","defineProperty","mergeFunctions","first","second","merge","_f","s","args","apply","isElement","node","nodeType","Node","ELEMENT_NODE","MetaAccessor","symbol","hasOwnProperty","ownDef","own","superDef","of","sources","prevMeta","updates","mapIt","source","meta","newMeta","flatMapIt","PromiseResolver","promise","Promise","resolve","reject","_resolve","_reject","error","FeatureDef__symbol","FeatureMeta","defs","itsReduction","prev","def","needs","has","setup","init","featureMeta","noFeatureDef","FeatureDef","featureType","for","all","define","Feature","FeatureContext__key","FeatureContext","componentType","whenDefined","feature","load","FeatureNeedsError","Error","reduce","reason","need","name","ComponentDef__symbol","ComponentMeta","isQualifiedName","componentMeta","noComponentDef","ComponentDef","Component","decorator","ComponentContext__key","ComponentEventDispatcher__key","values","dispatcher","DomEventDispatcher","eventSupplyOf","dispatch","event","on","ContentRoot","StateUpdater","valueProvider","noop","ComponentContext__symbol","ComponentContext","updateComponentState","bind","TypeError","contentRoot","oldValue","ComponentEvent","Event","AnonymousComponentProperty__symbol","ComponentProperty","decorateWith","readable","component","componentDef","By","provider","result","proto","descriptor","getValue","setValue","call","updated","With","access","As","ElementAdapterKey","ContextUpKey","upKey","createUpKey","opts","seed","keep","thru","adapters","combined","adapter","defaultElementAdapter","defaultProvider","afterThe","nextAfterEvent","delegated","or","ElementAdapter","ElementObserver","bsContext","DefaultElementObserver","MutationObserver","callback","mutations","mutation","itsEach","overArray","removedNodes","mountOf","checkConnected","filterIt","addedNodes","observe","childList","ComponentFactory__symbol","componentFactoryOf","factory","CustomElements__key","customElements","nsAlias","CustomElements","componentTypeOrName","elementType","html__naming","extend","elementDef","extends","componentResolver","ComponentResolver__symbol","DefinitionContext__key","ElementDef","elementExtend","HTMLElement","DefinitionContext","BootstrapContextRegistry__key","BootstrapContextRegistry","ContextRegistry","a","is","newValues","ComponentContextRegistry__key","ComponentContextRegistry","DefinitionContextRegistry__key","DefinitionContextRegistry","PostDefSetup__symbol","postDefSetup","tracker","trackValue","emitter","EventEmitter","onSetup","read","nextArgs","nextSkip","onAny","superPostDefSetup","send","it","WhenComponent","currentRev","created","onCreated","onEventBy","receiver","receiverRev","supply","receive","eventContext","componentContext","notifiedRev","recurrentReceiver","onRecurrent","recurrentContext","readNotifier","thru_","rev","ElementBuilder","definitionContextRegistry$global","componentContextRegistry$global","definitions","components","whenComponent","componentContextRegistry$perType","ready","whenReady","cls","definitionContext","createComponentContextRegistry","append","componentFactory","ComponentFactory_","createComponent","registry","elementSuper","createMount","elementStatus","el","doc","ownerDocument","contains","componentCreated","DefinitionContext_","once","definitionContextRegistry","seedIn","definitionSetup","perDefinition","spec","perComponent","createRegistry","Element","createElementType","status","destructionReason","whenOff","whenDestroyed","sts","whenOn","offSupply","eventSupply","off","ComponentContext_","EventSupply__symbol","done","lastRev","parentNode","parentElement","removeChild","removeElement","ComponentStatus__symbol","notifier","_","prevContext","newComponent","dispatchEvent","bubbles","doNotAdd","ComponentRegistry","_context","_definitionQueue","definition","push","buildElement","FeatureKey__symbol","FeatureKey","from","preferredFeatureClause","afterEventBy","origin","stageId","afterAll","clause","deps","loadFeatureDeps","request","loader","to","stage","ownLoader","FeatureLoader","ownSource","rcv","unload","share","lastLoader","preventDuplicateLoader","clauses","preferred","required","afterEach","dep","presentFeatureDeps","isPresent","down","_down","_stage","SetupFeatureStage","then","after","state","lastStage","id","prevStage","stop","FeatureStage","_stop","action","map","perDep","unloader","unloads","adder","reverse","length","newUnloader","componentRegistry","componentContextRegistry","elementBuilder","onDefinition","tillOff","onComponent","st","bs","by","onPostDefSetup","newFeatureContext","InitFeatureStage","ActiveFeatureStage","FeatureRequest","_requester","_revoke","featureDef","requester","isClause","_revokeBy","unuse","_uses","revoke","FeatureRequester__key","FeatureRequester","Map","existing","_map","reuse","delete","bootstrapComponents","features","bootstrapContextRegistry","create","complete","newNamespaceAliaser","info","_ctx","ldr","whenDown","AfterEvent__symbol","initBootstrap","AttributeDescriptor","MultiContextKey","AttributePath__root","attributePathTo","attributeStateUpdate","updateState","path","update","updateAttributeState","AttributeRegistry__key","AttributeRegistry","attrs","_attrs","change","observedAttributes","keys","attributeFilter","records","record","attributeName","getAttribute","attributes","attributeOldValue","AttributesSupport__feature","as","AttributesSupport","Attributes","defineByItem","ComponentState__key","ComponentState","StateTracker","StateSupport__feature","with","StateSupport","trackAttribute","track","onUpdate","_path","ValueTracker","isOff","removeAttribute","setAttribute","DomPropertyDescriptor","DomPropertyRegistry__key","DomPropertyRegistry","props","_props","DomPropertiesSupport__feature","DomPropertiesSupport","DomPropertyPath__root","domPropertyPathTo","updateDomPropertyState","DomProperty","domDescriptor","propertyDesc","componentPropertyKey","domPropertyDescriptor","propertyStateUpdate","ElementRender","render","offline","stateTracker","schedule","rendered","stateSupply","scheduleRender","renderElement","newRender","Render","defContext","Wesib__NS","NamespaceDef","FetchAgentKey","agents","nextArg","fetch","agentIdx","agentRequest","agent","onSupplied","nextRequest","combineFetchAgents","defaultFetchAgent","HttpFetchAgent","HttpFetchAborted","HttpFetch","input","Request","responseEmitter","abortController","AbortController","signal","abort","response","customSignal","aborted","catch","HierarchyRoot","root","HierarchyUpdates","issue","HierarchyUpdates__key","hierarchyRoot","parent","findParentContext","immediate","HierarchyContext__key","up","parentHierarchy","rootSupply","parentSupply","updateParent","parentCtx","HierarchyContext","consume","newParent","onSupply","upper","newHierarchyRegistry","newHierarchyContext","ComponentNode","ElementNodeList","OnEvent__symbol","WATCH_DEEP","subtree","elementNodeList","selectorOrType","nodeOf","deep","iterable","selector","cache","selected","refresh","added","observer","removed","removeNode","addNode","nodeList","firstReceiver","disconnect","onTrackUpdate","initialEmitter","afterSupplied","list","itsFirst","addEventListener","ElementNodeList_","itsIterator","sel","querySelectorAll","children","matches","select","AttributesObserver","_bs","_observer","Observer","_update","self","_emitter","eventReceiver","_emitters","reconnect","takeRecords","AttributeTracker","_name","observeSupply","noEventSupply","_updates","NodeAttributes","PropertyTracker","_element","_key","_supply","propertyState","NodeProperties","prop","ElementNode__symbol","ElementNode","_bind","elementNodeOf","mode","optional","selectNodes","ComponentTreeSupport__feature","ComponentTreeSupport","Navigation__key","Navigation","go","PageParam__symbol","PageParam","PageParamContext","NavHistory__key","NavHistory","extractNavData","data","_document","_location","location","_history","history","_uid","btoa","Math","random","entry","newEntry","url","URL","href","title","_entries","enter","replaceState","_historyState","PageEntry","_lastId","toEntry","page","pushState","_enter","when","fromEntry","e","_forget","leave","popState","_changeHash","uid","pageId","existingEntry","transfer","oldEntry","forget","wesib:navigation:data","_params","visited","_status","current","ref","put","handle","param","newHandle","entries","transferred","at","stay","clear","NavigationAgentKey","navigate","agentTo","nextURL","nextTitle","nextData","baseURI","defaultNavigationAgent","_when","_from","NavigationAgent","EnterPageEvent","cancelable","LeavePageEvent","StayOnPageEvent","createNavigation","navHistory","onEnter","onLeave","onStay","onEvent","nav","nextEntry","readPage","hashChange","Navigation_","delta","toURL","withParam","applyParams","open","replace","whenLeave","urlTarget","urlTargetOf","doNavigate","prepared","leavePage","finalTarget","t","prepare","NavigationSupport__feature","NavigationSupport","inactiveNavLink","ActivateNavLink","pick","activate","scheduler","active","defaultActiveNavLinkClass","activeClass","css__naming","NavLinkRenderSchedule__symbol","makeActive","classList","remove","assignClass","lastSupply","activateNavLink","weigh","defaultNavLinkWeight","weight","supplier","navLinkWeight","navigation","componentNode","connectSupply","nodes","weights","maxWeight","selectActiveNavLink","linkURL","calcNavLinkWeight","pageURL","linkDir","navLinkPath2dir","pageDir","hash","navLinkSearchParamsWeight","navLinkHash2url","searchParamWeight","startsWith","pathname","endsWith","substring","searchParams","linkParams","pageParams","_value","pageValues","getAll","every","linkValue","HandleNavLinks","defaultNavLinkHref","targetHref","preventDefault","defaultHandleNavLinks","events","eventType","importNode","beforeOrImport","importContent","importNodeContent","before","elementClone","createElement","tagName","toLowerCase","getAttributeNames","attr","insertBefore","nodeClone","childNodes","cachingPageLoader","pageUrl","sup","tracked","onLoad","trackSupply","resp","num","requested","PageLoadAbortError","pageLoadRequestsParam","_page","requests","PageLoadRequests","_navigation","_loader","fragments","fragment","pageSupply","loadSupply","_add","_transfer","responseReceiver","ok","tag","getElementsByTagName","getElementById","onFragment","req","PageLoadAgent","PageLoadURLModifier","PageLoader","httpFetch","modifyURL","parser","DOMParser","credentials","headers","Headers","Accept","fetchRequest","header","hthvQuote","requestPageFragments","EventNotifier","onAsync","text","batch","nextEach","parsePageDocument","parseFromString","hthvParse","v","head","base","querySelector","newBase","appendChild","PageLoadParam","pageLoadParam","PageCacheBuster__key","PageCacheBuster","appRev","urlModifier","newRev","reload","pageScriptsAgent","allScripts","externalScripts","scripts","src","script","pageStyleAgent","newStyles","oldStyles","oldStylesByHref","firstOldStyle","link","newStyle","oldStyle","nextSibling","style","pageTitleAgent","textContent","PageLoadSupport__feature","buster","PageLoadSupport","IncludePage","onResponse","detectFragment","range","createRange","selectNodeContents","deleteContents","createDocumentFragment","insertNode","handleResponse","DefaultInAspectsKey","fns","intoConvertedBy","InRenderScheduler","InNamespaceAliaser","DefaultInAspects","InputFromControl","SingleContextUpKey","inputFromControl","control","ConvertInput","convert","aspects","converted","InControl","usageSupply","InputToForm","FillInputForm","tuple","makeForm","form","fillSupply","hierarchy","via","inputToForm","OnSubmit","cancel","submitDispatcher","onSubmit","instead","SetInputName","getName","group","aspect","InGroup","controls","UseInputElement","makeControl"],"mappings":"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"}