{"version":3,"file":"input.3b36e4cd.js","sources":["../../../src/core/input/bootstrap-css-error.ts","../../../src/core/input/api-errors.component.ts","../../../src/core/input/in-error.component.ts","../../../src/core/input/conduit-input-support.feature.ts","../../../src/core/input/fill-conduit-form.decorator.ts","../../../src/core/input/handle-conduit-submit-button.decorator.ts","../../../src/core/input/use-conduit-input.decorator.ts"],"sourcesContent":["import { InCssClasses, inCssError, InStatus, InValidation } from '@frontmeans/input-aspects';\nimport { afterAll, afterThe, digAfter } from '@proc7ts/fun-events';\n\nexport function bootstrapCssError(\n    {\n      mark = 'is-invalid',\n      when,\n    }: {\n      mark?: InCssClasses.Spec | InCssClasses.Spec[];\n      when?: string | string[];\n    } = {},\n): InCssClasses.Source {\n  return control => {\n\n    const cssClasses = control.aspect(InCssClasses);\n\n    return afterAll({\n      status: control.aspect(InStatus),\n      validity: control.aspect(InValidation),\n    }).do(\n        digAfter(({\n          status: [{ touched, hasFocus }],\n          validity: [validity],\n        }) => {\n\n          const incomplete = validity.has('incomplete') || validity.has('missing');\n\n          return touched && !(hasFocus && incomplete)\n              ? cssClasses.specs(inCssError({ mark, when }))\n              : afterThe();\n        }),\n    );\n  };\n}\n","import { InValidation } from '@frontmeans/input-aspects';\nimport { AfterEvent, afterThe, digAfter_, mapAfter_ } from '@proc7ts/fun-events';\nimport { HierarchyContext } from '@wesib/generic';\nimport { InputFromControl } from '@wesib/generic/input';\nimport { Component, ComponentContext, ElementRenderer, Render, StateProperty } from '@wesib/wesib';\nimport { ApiErrorGenerator } from '../../reusable';\nimport { ApiResponse } from '../api';\nimport { Conduit__NS } from '../conduit.ns';\n\nconst noApiErrors: ApiResponse.Errors = {};\n\n@Component(['api-errors', Conduit__NS])\nexport class ApiErrorsComponent {\n\n  @StateProperty()\n  errors: ApiResponse.Errors = noApiErrors;\n\n  constructor(private readonly _context: ComponentContext) {\n    _context.get(HierarchyContext)\n        .get(InputFromControl)\n        .do(\n            digAfter_(({ control }): AfterEvent<[ApiResponse.Errors]> => {\n              if (!control) {\n                return afterThe(noApiErrors);\n              }\n              return control.aspect(InValidation).read.do(\n                  mapAfter_(validity => validity.messages('api').reduce(\n                      (prev, message) => ({\n                        ...prev,\n                        ...message.api,\n                      }),\n                      noApiErrors,\n                  )),\n              );\n            }),\n        )(\n            errors => this.errors = errors,\n        );\n  }\n\n  @Render()\n  render(): ElementRenderer {\n\n    const { contentRoot } = this._context;\n    let list: Element | undefined;\n\n    return () => {\n      if (list) {\n        list.remove();\n        list = undefined;\n      }\n      list = this._context.get(ApiErrorGenerator)(this.errors);\n      if (list) {\n        contentRoot.append(list);\n      }\n    };\n  }\n\n}\n","import { InCssClasses, inCssInfo, InStyledElement } from '@frontmeans/input-aspects';\nimport { AfterEvent, mapAfter, mapAfter_ } from '@proc7ts/fun-events';\nimport { ConvertInput } from '@wesib/generic/input';\nimport { Attributes, Component, trackAttribute } from '@wesib/wesib';\nimport { Conduit__NS } from '../conduit.ns';\nimport { bootstrapCssError } from './bootstrap-css-error';\n\n@Component(\n    ['in-error', Conduit__NS],\n    Attributes('code'),\n    ConvertInput(\n        ({ control: { control }, aspects, context }) => {\n\n          const codes: AfterEvent<[string[]]> = trackAttribute(context, 'code')\n              .read.do(\n                  mapAfter_(code => code ? code.trim().split(/\\s+/) : []),\n              );\n\n          return codes.do(\n              mapAfter(when => control.convert(\n                  InStyledElement.to(context.element),\n                  aspects,\n              ).setup(\n                  InCssClasses,\n                  cssClasses => {\n                    cssClasses.add(inCssInfo());\n                    cssClasses.add(bootstrapCssError({ when }));\n                  },\n              )),\n          );\n        },\n    ),\n)\nexport class InErrorComponent {}\n","import { Feature } from '@wesib/wesib';\nimport { ApiErrorsComponent } from './api-errors.component';\nimport { InErrorComponent } from './in-error.component';\n\n@Feature({\n  needs: [\n    ApiErrorsComponent,\n    InErrorComponent,\n  ],\n})\nexport class ConduitInputSupport {\n}\n","import {\n  InCssClasses,\n  inCssInfo,\n  inFormElement,\n  inGroup,\n  InGroup,\n  InMode,\n  inModeByValidity,\n} from '@frontmeans/input-aspects';\nimport { Class } from '@proc7ts/primitives';\nimport { FillInputForm, FillInputFormDef } from '@wesib/generic/input';\nimport { Component, ComponentClass, ComponentDecorator } from '@wesib/wesib';\nimport { HandleConduitSubmitButton, HandleConduitSubmitButtonDef } from './handle-conduit-submit-button.decorator';\n\nexport function FillConduitForm<TModel extends object = any, T extends ComponentClass = Class>(\n    {\n        emptyModel = {} as TModel,\n        form = {\n          makeForm({ node, aspects }) {\n\n            const group: InGroup<TModel> = inGroup<TModel>(emptyModel)\n                .setup(InCssClasses, classes => classes.add(inCssInfo()))\n                .setup(InMode, mode => mode.derive(inModeByValidity()));\n            const form = inFormElement(node.element, { form: group, aspects })\n                .setup(InCssClasses, classes => classes.add(group.aspect(InCssClasses)));\n\n            return [group, form];\n          },\n        },\n        button,\n    }: FillConduitFormDef<TModel> = {},\n): ComponentDecorator<T> {\n  return Component(\n      FillInputForm(form),\n      HandleConduitSubmitButton(button),\n  );\n}\n\nexport interface FillConduitFormDef<TModel extends object> {\n  readonly emptyModel?: TModel;\n  readonly form?: FillInputFormDef;\n  readonly button?: HandleConduitSubmitButtonDef;\n}\n","import { inSubmitButton } from '@frontmeans/input-aspects';\nimport { afterAll, consumeEvents, supplyAfter } from '@proc7ts/fun-events';\nimport { Class } from '@proc7ts/primitives';\nimport { ComponentNode, ElementPickMode, HierarchyContext } from '@wesib/generic';\nimport { DefaultInAspects, InputToForm } from '@wesib/generic/input';\nimport { Component, ComponentClass, ComponentDecorator } from '@wesib/wesib';\n\nexport function HandleConduitSubmitButton<T extends ComponentClass = Class>(\n    {\n      select = 'button',\n      pick = { deep: true, all: true },\n    }: HandleConduitSubmitButtonDef = {},\n): ComponentDecorator<T> {\n  return Component({\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const componentNode = context.get(ComponentNode);\n        const hierarchy = context.get(HierarchyContext);\n\n        context.whenConnected(() => {\n          afterAll({\n            form: hierarchy.get(InputToForm),\n            button: componentNode.select(select, pick).first,\n            aspects: context.get(DefaultInAspects),\n          }).do(\n              supplyAfter(context),\n              consumeEvents(({\n                form: [{ control: form }],\n                button: [button],\n                aspects: [aspects],\n              }) => form && button && inSubmitButton(button.element, { form, aspects })),\n          );\n        });\n      });\n    },\n  });\n}\n\nexport interface HandleConduitSubmitButtonDef {\n  readonly select?: string;\n  readonly pick?: ElementPickMode;\n}\n","import { InControl, InCssClasses, inCssInfo, InMode } from '@frontmeans/input-aspects';\nimport { afterSupplied, afterThe, digAfter_, translateAfter_ } from '@proc7ts/fun-events';\nimport { Class } from '@proc7ts/primitives';\nimport { HierarchyContext } from '@wesib/generic';\nimport { InputToForm, UseInputElement, UseInputElementDef } from '@wesib/generic/input';\nimport { ComponentClass, ComponentDecorator } from '@wesib/wesib';\nimport { bootstrapCssError } from './bootstrap-css-error';\n\nexport function UseConduitInput<T extends ComponentClass = Class>(\n    def: UseInputElementDef<InstanceType<T>>,\n): ComponentDecorator<T> {\n  return UseInputElement({\n    ...def,\n    makeControl(opts) {\n      return opts.context.get(HierarchyContext).get(InputToForm).do(\n          digAfter_(({ form }) => {\n\n            const ctrl = def.makeControl(opts);\n\n            if (!ctrl) {\n              return afterThe();\n            }\n            if (ctrl instanceof InControl) {\n              return afterThe(augmentControl(ctrl));\n            }\n\n            return afterSupplied(ctrl).do(\n                translateAfter_((send, control, supply): void => {\n                  if (!control) {\n                    return send();\n                  }\n\n                  augmentControl(control);\n\n                  return supply ? send(control, supply) : send(control);\n                }),\n            );\n\n            function augmentControl(control: InControl<any>): InControl<any> {\n              if (form) {\n                control.aspect(InMode).derive(form.aspect(InMode));\n              }\n\n              const classes = control.aspect(InCssClasses);\n\n              classes.add(inCssInfo());\n              classes.add(bootstrapCssError());\n\n              return control;\n            }\n          }),\n      );\n    },\n  });\n}\n"],"names":["bootstrapCssError","mark","when","control","cssClasses","aspect","InCssClasses","afterAll","status","InStatus","validity","InValidation","do","digAfter","touched","hasFocus","incomplete","has","afterThe","specs","inCssError","noApiErrors","ApiErrorsComponent","[object Object]","_context","this","get","HierarchyContext","InputFromControl","digAfter_","read","mapAfter_","messages","reduce","prev","message","api","errors","contentRoot","list","remove","undefined","ApiErrorGenerator","append","__decorate","StateProperty","Render","Component","Conduit__NS","InErrorComponent","Attributes","ConvertInput","aspects","context","trackAttribute","code","trim","split","mapAfter","convert","InStyledElement","to","element","setup","add","inCssInfo","ConduitInputSupport","FillConduitForm","emptyModel","form","node","group","inGroup","classes","InMode","mode","derive","inModeByValidity","inFormElement","button","FillInputForm","select","pick","deep","all","defContext","whenComponent","componentNode","ComponentNode","hierarchy","whenConnected","InputToForm","first","DefaultInAspects","supplyAfter","consumeEvents","inSubmitButton","HandleConduitSubmitButton","UseConduitInput","def","UseInputElement","makeControl","opts","ctrl","InControl","augmentControl","afterSupplied","translateAfter_","send","supply","Feature","needs"],"mappings":"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"}