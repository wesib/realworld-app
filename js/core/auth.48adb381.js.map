{"version":3,"file":"auth.48adb381.js","sources":["../../../src/core/auth/auth-service.key.impl.ts","../../../src/core/auth/auth-service.ts","../../../src/core/auth/authentication.ts","../../../src/core/auth/auth-service.impl.ts","../../../src/core/auth/auth-support.feature.ts"],"sourcesContent":["import { SingleContextKey } from '@proc7ts/context-values';\nimport { AuthService } from './auth-service';\n\nexport const AuthService__key = (\n    /*#__PURE__*/ new SingleContextKey<AuthService>('auth-service')\n);\n","import { ContextKey, ContextKey__symbol } from '@proc7ts/context-values';\nimport { AfterEvent, EventReceiver, EventSupply, OnEvent } from '@proc7ts/fun-events';\nimport { ApiResponse } from '../api';\nimport { AuthService__key } from './auth-service.key.impl';\nimport { Authentication, AuthToken, AuthUser, NotAuthenticated } from './authentication';\n\nexport interface LoginRequest {\n  readonly email: string;\n  readonly password: string;\n}\n\nexport interface RegisterRequest {\n  readonly username: string;\n  readonly email: string;\n  readonly password: string;\n}\n\nexport interface UpdateSettingsRequest {\n  readonly email: string;\n  readonly username: string;\n  readonly password?: string;\n  readonly bio?: string;\n  readonly image?: string;\n}\n\nexport abstract class AuthService {\n\n  static get [ContextKey__symbol](): ContextKey<AuthService> {\n    return AuthService__key;\n  }\n\n  abstract token(): AfterEvent<[AuthToken | NotAuthenticated]>;\n  abstract token(receiver: EventReceiver<[AuthToken | NotAuthenticated]>): EventSupply;\n\n  abstract authentication(): AfterEvent<[Authentication]>;\n  abstract authentication(receiver: EventReceiver<[Authentication]>): EventSupply;\n\n  abstract user(): AfterEvent<[AuthUser | NotAuthenticated]>;\n  abstract user(receiver: EventReceiver<[AuthUser | NotAuthenticated]>): EventSupply;\n\n  abstract requireUser(): AfterEvent<[AuthUser | NotAuthenticated]>;\n  abstract requireUser(receiver: EventReceiver<[AuthUser | NotAuthenticated]>): EventSupply;\n\n  abstract login(request: LoginRequest): OnEvent<[ApiResponse<AuthUser>]>;\n\n  abstract register(request: RegisterRequest): OnEvent<[ApiResponse<AuthUser>]>;\n\n  abstract loadUser(): OnEvent<[ApiResponse<AuthUser>]>;\n\n  abstract updateSettings(request: UpdateSettingsRequest): OnEvent<[ApiResponse<AuthUser>]>;\n\n  abstract logout(): void;\n\n}\n","import { ApiResponse } from '../api';\n\nexport interface AuthToken {\n  readonly token: string;\n  readonly email?: undefined;\n  readonly username?: undefined;\n  readonly failure?: undefined;\n}\n\nexport interface NotAuthenticated {\n  readonly token?: undefined;\n  readonly email?: undefined;\n  readonly username?: undefined;\n  readonly failure?: ApiResponse.Failure;\n}\n\nexport const notAuthenticated: NotAuthenticated = {};\n\nexport type Authentication =\n    | NotAuthenticated\n    | AuthToken\n    | AuthUser;\n\nexport interface AuthUser {\n  readonly email: string;\n  readonly token: string;\n  readonly username: string;\n  readonly bio?: string;\n  readonly image?: string;\n  readonly failure?: undefined;\n}\n","import { nextArg, nextSkip } from '@proc7ts/call-thru';\nimport {\n  AfterEvent,\n  afterSent,\n  EventReceiver,\n  EventSupply,\n  nextAfterEvent,\n  OnEvent,\n  trackValue,\n  trackValueBy,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { DomEventDispatcher } from '@proc7ts/fun-events/dom';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { ApiFetch, ApiRequest, ApiResponse, notAuthenticatedError } from '../api';\nimport { AuthService, LoginRequest, RegisterRequest, UpdateSettingsRequest } from './auth-service';\nimport { Authentication, AuthToken, AuthUser, notAuthenticated, NotAuthenticated } from './authentication';\n\nconst authTokenKey = 'wesib-conduit:auth';\n\nexport class AuthService$ extends AuthService {\n\n  private readonly _auth: ValueTracker<Authentication>;\n  private readonly _token = trackValue<AuthToken | NotAuthenticated>(notAuthenticated);\n\n  constructor(private readonly _context: BootstrapContext) {\n    super();\n\n    const window = _context.get(BootstrapWindow);\n    const storage = window.localStorage;\n\n    this._auth = trackValue<Authentication>(toAuthentication(storage.getItem(authTokenKey)));\n    this._token.by(this.authentication().thru_(\n        ({ token }) => this._token.it.token !== token ? { token } : nextSkip,\n    ));\n\n    this._auth.on(storeAuthToken);\n    new DomEventDispatcher(window).on<StorageEvent>('storage').to(({ key, newValue }) => {\n      if (key === authTokenKey) {\n\n        const token = newValue || undefined;\n\n        if (this._auth.it.token !== token) {\n          this._auth.it = toAuthentication(token);\n        }\n      }\n    });\n\n    function storeAuthToken({ token }: Authentication): void {\n      if (token) {\n        storage.setItem(authTokenKey, token);\n      } else {\n        storage.removeItem(authTokenKey);\n      }\n    }\n  }\n\n  token(): AfterEvent<[AuthToken | NotAuthenticated]>;\n  token(receiver: EventReceiver<[AuthToken | NotAuthenticated]>): EventSupply;\n  token(\n      receiver?: EventReceiver<[AuthToken | NotAuthenticated]>,\n  ): AfterEvent<[AuthToken | NotAuthenticated]> | EventSupply {\n    return (this.token = this._token.read().F)(receiver);\n  }\n\n  authentication(): AfterEvent<[Authentication]>;\n  authentication(receiver: EventReceiver<[Authentication]>): EventSupply;\n  authentication(receiver?: EventReceiver<[Authentication]>): AfterEvent<[Authentication]> | EventSupply {\n    return (this.authentication = this._auth.read().F)(receiver);\n  }\n\n  user(): AfterEvent<[AuthUser | NotAuthenticated]>;\n  user(receiver: EventReceiver<[AuthUser | NotAuthenticated]>): EventSupply;\n  user(\n      receiver?: EventReceiver<[AuthUser | NotAuthenticated]>,\n  ): AfterEvent<[AuthUser | NotAuthenticated]> | EventSupply {\n    return (this.user = this.requireUser().keepThru(\n        user => user.username ? user : notAuthenticated,\n    ).F)(receiver);\n  }\n\n  requireUser(): AfterEvent<[AuthUser | NotAuthenticated]>;\n  requireUser(receiver: EventReceiver<[AuthUser | NotAuthenticated]>): EventSupply;\n  requireUser(\n      receiver?: EventReceiver<[AuthUser | NotAuthenticated]>,\n  ): AfterEvent<[AuthUser | NotAuthenticated]> | EventSupply {\n\n    let userRequest: [AuthToken | AuthUser, ValueTracker<AuthUser | NotAuthenticated>] | undefined;\n\n    return (this.requireUser = this.authentication().keepThru(\n        auth => {\n          if (!auth.token) {\n            // No token. Can not authenticate.\n            return nextArg<NotAuthenticated>({\n              failure: {\n                ok: false,\n                errors: notAuthenticatedError(),\n              },\n            });\n          }\n          if (auth.email) {\n            // User authenticated.\n\n            const tracker = trackValue(auth);\n\n            userRequest = [auth, tracker];\n\n            return nextAfterEvent(tracker);\n          }\n          if (userRequest) {\n            // Some user is loading.\n\n            const [requestToken, responseTracker] = userRequest;\n\n            if (requestToken.token === auth.token) {\n              // The right user is loading.\n              return nextAfterEvent(responseTracker);\n            }\n            // Stop loading the wrong user.\n            responseTracker.byNone();\n          }\n\n          // Request user settings.\n          const tracker = trackValueBy<AuthUser | NotAuthenticated>(\n              afterSent<[AuthUser | NotAuthenticated]>(\n                  this.loadUser().thru_(\n                      response => response.ok ? response.body : { failure: response },\n                  ),\n                  () => [notAuthenticated],\n              ),\n          );\n\n          userRequest = [auth, tracker];\n\n          return nextAfterEvent(tracker);\n        },\n    ).F)(receiver);\n  }\n\n  login(request: LoginRequest): OnEvent<[ApiResponse<AuthUser>]> {\n    return this._request('users/login', request);\n  }\n\n  register(request: RegisterRequest): OnEvent<[ApiResponse<AuthUser>]> {\n    return this._request('users', request);\n  }\n\n  loadUser(): OnEvent<[ApiResponse<AuthUser>]> {\n\n    const apiFetch: ApiFetch = this._context.get(ApiFetch);\n    const apiRequest: ApiRequest<AuthUser> = {\n      path: 'user',\n      init: {\n        method: 'GET',\n        headers: {\n          Accept: 'application/json',\n        },\n      },\n      respondAs: 'user',\n      auth: true,\n    };\n\n    return apiFetch(apiRequest).thru_(\n        response => {\n          if (response.ok) {\n            this._setUserSettings(response.body);\n          }\n          return response;\n        },\n    );\n  }\n\n  updateSettings(request: UpdateSettingsRequest): OnEvent<[ApiResponse<AuthUser>]> {\n\n    const apiFetch: ApiFetch = this._context.get(ApiFetch);\n    const apiRequest: ApiRequest<AuthUser> = {\n      path: 'user',\n      init: {\n        method: 'PUT',\n        body: JSON.stringify({ user: request }),\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n      },\n      respondAs: 'user',\n      auth: true,\n    };\n\n    return apiFetch(apiRequest).thru_(\n        response => {\n          if (response.ok) {\n            this._setUserSettings(response.body);\n          }\n          return response;\n        },\n    );\n  }\n\n  logout(): void {\n    this._auth.it = notAuthenticated;\n  }\n\n  private _setUserSettings(user: AuthUser): void {\n    this._auth.it = {\n      ...user,\n      token: this._token.it.token || user.token, // Do not update token here, as this would cause multiple user reloads\n    };\n  }\n\n  private _request(\n      path: string,\n      request: object,\n  ): OnEvent<[ApiResponse<AuthUser>]> {\n\n    const apiFetch: ApiFetch = this._context.get(ApiFetch);\n    const apiRequest: ApiRequest<AuthUser> = {\n      path,\n      init: {\n        method: 'POST',\n        body: JSON.stringify({ user: request }),\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n      },\n      respondAs: 'user',\n      auth: false,\n    };\n\n    return apiFetch(apiRequest).thru_(\n        response => {\n          this._auth.it = response.ok ? response.body : { failure: response };\n          return response;\n        },\n    );\n  }\n\n}\n\nfunction toAuthentication(token: string | null | undefined): Authentication {\n  return token ? { token } : notAuthenticated;\n}\n","import { Feature } from '@wesib/wesib';\nimport { AuthService } from './auth-service';\nimport { AuthService$ } from './auth-service.impl';\n\n@Feature({\n  setup(setup) {\n    setup.provide({ a: AuthService, as: AuthService$ });\n  },\n})\nexport class AuthSupport {\n}\n"],"names":["AuthService__key","SingleContextKey","AuthService","ContextKey__symbol","notAuthenticated","AuthService$","[object Object]","_context","super","this","trackValue","window","get","BootstrapWindow","storage","localStorage","_auth","toAuthentication","getItem","_token","by","authentication","thru_","token","it","nextSkip","on","setItem","removeItem","DomEventDispatcher","to","key","newValue","undefined","receiver","read","F","user","requireUser","keepThru","username","userRequest","auth","nextArg","failure","ok","errors","notAuthenticatedError","email","tracker","nextAfterEvent","requestToken","responseTracker","byNone","trackValueBy","afterSent","loadUser","response","body","request","_request","ApiFetch","apiFetch","path","init","method","headers","Accept","respondAs","_setUserSettings","JSON","stringify","Content-Type","AuthSupport","Feature","setup","provide","a","as"],"mappings":"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"}