{"version":3,"file":"forms.76ba4659.js","sources":["../../../src/core/forms/bs4-css-error.ts","../../../src/core/forms/field-error.component.ts","../../../src/core/forms/submit-errors.component.ts","../../../src/core/forms/conduit-forms-support.feature.ts","../../../src/core/forms/submit-button.ts","../../../src/core/forms/form-bs4-css.preset.ts"],"sourcesContent":["import { InCssClasses, inCssError, InStatus, InValidation } from '@frontmeans/input-aspects';\nimport { afterAll, afterThe, digAfter } from '@proc7ts/fun-events';\n\nexport function bs4CssError(\n    {\n      mark = 'is-invalid',\n      when,\n    }: {\n      mark?: InCssClasses.Spec | InCssClasses.Spec[];\n      when?: string | string[];\n    } = {},\n): InCssClasses.Source {\n  return control => {\n\n    const cssClasses = control.aspect(InCssClasses);\n\n    return afterAll({\n      status: control.aspect(InStatus),\n      validity: control.aspect(InValidation),\n    }).do(\n        digAfter(({\n          status: [{ touched, hasFocus }],\n          validity: [validity],\n        }) => {\n\n          const incomplete = validity.has('incomplete') || validity.has('missing');\n\n          return touched && !(hasFocus && incomplete)\n              ? cssClasses.specs(inCssError({ mark, when }))\n              : afterThe();\n        }),\n    );\n  };\n}\n","import { InCssClasses, inCssInfo, InStyledElement } from '@frontmeans/input-aspects';\nimport { AfterEvent, mapAfter_, trackValue, translateAfter_ } from '@proc7ts/fun-events';\nimport { adjacentToField, Field, FieldShare, SharedField } from '@wesib/generic/forms';\nimport { Attribute, Component, ComponentContext } from '@wesib/wesib';\nimport { Conduit__NS } from '../conduit.ns';\nimport { bs4CssError } from './bs4-css-error';\n\nclass FieldErrorShare extends FieldShare {\n\n  constructor() {\n    super('field-error');\n  }\n\n}\n\n@Component(\n    ['field-error', Conduit__NS],\n)\nexport class FieldErrorComponent {\n\n  private readonly _code = trackValue<string | null>();\n\n  @SharedField({\n    share: {\n      share: FieldErrorShare,\n      local: true,\n    },\n    name: '',\n  })\n  readonly indicator: Field<void>;\n\n  constructor(context: ComponentContext) {\n\n    const when: AfterEvent<string[]> = this._code.read\n        .do(\n            translateAfter_((send, code) => code ? send(...code.trim().split(/\\s+/)) : send()),\n        );\n\n    this.indicator = adjacentToField<void>(builder => when.do(\n        mapAfter_((...when) => ({\n          control: builder.adjusted.control\n              .convert<void>(InStyledElement.to(context.element))\n              .setup(InCssClasses, css => css.add(inCssInfo()))\n              .setup(InCssClasses, css => css.add(bs4CssError({ when }))),\n        })),\n    ));\n  }\n\n  @Attribute({ updateState: false })\n  get code(): string | null | undefined {\n    return this._code.it;\n  }\n\n  set code(code: string | null | undefined) {\n    this._code.it = code;\n  }\n\n}\n","import { InValidation } from '@frontmeans/input-aspects';\nimport { AfterEvent, afterThe, digAfter_, EventKeeper, mapAfter_ } from '@proc7ts/fun-events';\nimport { Share__symbol } from '@wesib/generic';\nimport { Form, FormShare } from '@wesib/generic/forms';\nimport { Component, ComponentContext, ElementRenderer, Render, StateProperty } from '@wesib/wesib';\nimport { ApiErrorGenerator } from '../../reusable';\nimport { ApiResponse } from '../api';\nimport { Conduit__NS } from '../conduit.ns';\n\nconst noApiErrors: ApiResponse.Errors = {};\n\n@Component(['submit-errors', Conduit__NS])\nexport class SubmitErrorsComponent {\n\n  @StateProperty()\n  errors: ApiResponse.Errors = noApiErrors;\n\n  constructor(private readonly _context: ComponentContext) {\n    FormShare[Share__symbol]\n        .valueFor(_context, { local: 'too' })\n        .do(\n            digAfter_((form?, _sharer?): EventKeeper<[Form.Controls<any>?]> => form || afterThe()),\n            digAfter_((controls?: Form.Controls<any>): AfterEvent<[ApiResponse.Errors]> => controls\n                ? controls.control.aspect(InValidation).read.do(\n                    mapAfter_(validity => validity.messages('api').reduce(\n                        (prev, message) => ({\n                          ...prev,\n                          ...message.api,\n                        }),\n                        noApiErrors,\n                    )),\n                )\n                : afterThe(noApiErrors)),\n        )(\n            errors => this.errors = errors,\n        );\n  }\n\n  @Render()\n  render(): ElementRenderer {\n\n    const { contentRoot } = this._context;\n    let list: Element | undefined;\n\n    return () => {\n      if (list) {\n        list.remove();\n        list = undefined;\n      }\n      list = this._context.get(ApiErrorGenerator)(this.errors);\n      if (list) {\n        contentRoot.append(list);\n      }\n    };\n  }\n\n}\n","import { FormModePreset } from '@wesib/generic/forms';\nimport { Feature } from '@wesib/wesib';\nimport { FieldErrorComponent } from './field-error.component';\nimport { FormBs4CssPreset } from './form-bs4-css.preset';\nimport { SubmitErrorsComponent } from './submit-errors.component';\n\n@Feature({\n  needs: [\n    FieldErrorComponent,\n    FormBs4CssPreset,\n    FormModePreset,\n    SubmitErrorsComponent,\n  ],\n})\nexport class ConduitFormsSupport {\n}\n","import { InRole, inSubmitButton } from '@frontmeans/input-aspects';\nimport { AfterEvent, afterValue, mapAfter } from '@proc7ts/fun-events';\nimport { ShareLocator } from '@wesib/generic';\nimport { adjacentToForm, Field, Form } from '@wesib/generic/forms';\n\nexport function submitButton<TSharer extends object>(\n    element: HTMLElement | AfterEvent<[HTMLElement?]>,\n    adjacentTo?: ShareLocator.Mandatory<Form<unknown>>,\n): Field<void, TSharer> {\n  return adjacentToForm(\n      builder => afterValue(element).do(\n          mapAfter(button => button && {\n            control: builder.control.build(\n                opts => button\n                    && inSubmitButton(\n                        button,\n                        {\n                          ...opts,\n                          form: builder.adjusted.control,\n                        },\n                    ).setup(InRole, role => role.add('submit-button')),\n            ),\n          }),\n      ),\n      adjacentTo,\n  );\n}\n","import { InCssClasses, InRole } from '@frontmeans/input-aspects';\nimport { Field, FormCssPreset } from '@wesib/generic/forms';\nimport { bs4CssError } from './bs4-css-error';\n\nexport class FormBs4CssPreset extends FormCssPreset {\n\n  constructor() {\n    super({ error: false });\n  }\n\n  setupField<TValue, TSharer extends object>(builder: Field.Builder<TValue, TSharer>): void {\n    super.setupField(builder);\n    builder.control.setup(\n        InRole,\n        role => role.when('default', control => control.aspect(InCssClasses).add(bs4CssError())),\n    );\n  }\n\n}\n"],"names":["bs4CssError","mark","when","control","cssClasses","aspect","InCssClasses","afterAll","status","InStatus","validity","InValidation","do","digAfter","touched","hasFocus","incomplete","has","afterThe","specs","inCssError","FieldErrorComponent","[object Object]","context","this","trackValue","_code","read","translateAfter_","send","code","trim","split","indicator","adjacentToField","builder","mapAfter_","adjusted","convert","InStyledElement","to","element","setup","css","add","inCssInfo","it","__decorate","SharedField","share","FieldShare","super","local","name","Attribute","updateState","Component","Conduit__NS","noApiErrors","SubmitErrorsComponent","_context","FormShare","Share__symbol","valueFor","digAfter_","form","_sharer","controls","messages","reduce","prev","message","api","errors","contentRoot","list","remove","undefined","get","ApiErrorGenerator","append","StateProperty","Render","ConduitFormsSupport","submitButton","adjacentTo","adjacentToForm","afterValue","mapAfter","button","build","opts","inSubmitButton","InRole","role","Feature","needs","FormCssPreset","error","setupField","FormModePreset"],"mappings":"uiBAGgBA,GACZC,KACEA,EAAO,aAAYC,KACnBA,GAIE,IAEN,OAAOC,IAEL,MAAMC,EAAaD,EAAQE,OAAOC,GAElC,OAAOC,EAAS,CACdC,OAAQL,EAAQE,OAAOI,GACvBC,SAAUP,EAAQE,OAAOM,KACxBC,GACCC,GAAS,EACPL,SAAWM,QAAAA,EAASC,SAAAA,IACpBL,UAAWA,OAGX,MAAMM,EAAaN,EAASO,IAAI,eAAiBP,EAASO,IAAI,WAE9D,OAAOH,GAAaC,GAAYC,EAE1BE,IADAd,EAAWe,MAAMC,EAAW,CAAEnB,KAAAA,EAAMC,KAAAA,UCVpD,IAAamB,EAAb,MAaEC,YAAYC,GAXKC,WAAQC,IAavB,MAAMvB,EAA6BsB,KAAKE,MAAMC,KACzCf,GACGgB,GAAgB,CAACC,EAAMC,IAASA,EAAOD,KAAQC,EAAKC,OAAOC,MAAM,QAAUH,OAGnFL,KAAKS,UAAYC,GAAsBC,GAAWjC,EAAKU,GACnDwB,GAAU,IAAIlC,MACZC,QAASgC,EAAQE,SAASlC,QACrBmC,QAAcC,EAAgBC,GAAGjB,EAAQkB,UACzCC,MAAMpC,GAAcqC,GAAOA,EAAIC,IAAIC,OACnCH,MAAMpC,GAAcqC,GAAOA,EAAIC,IAAI5C,EAAY,CAAEE,KAAAA,cAM9D4B,WACE,OAAON,KAAKE,MAAMoB,GAGpBhB,SAASA,GACPN,KAAKE,MAAMoB,GAAKhB,IAzBlBiB,GAPCC,EAAY,CACXC,MAAO,CACLA,MAjBN,cAA8BC,EAE5B5B,cACE6B,MAAM,iBAeJC,OAAO,GAETC,KAAM,sCAsBRN,GADCO,EAAU,CAAEC,aAAa,8BA9BflC,KAHZmC,EACG,CAAC,cAAeC,KAEPpC,GCTb,MAAMqC,EAAkC,GAGxC,IAAaC,EAAb,MAKErC,YAA6BsC,GAAApC,cAAAoC,EAF7BpC,YAA6BkC,EAG3BG,EAAUC,GACLC,SAASH,EAAU,CAAER,MAAO,QAC5BxC,GACGoD,GAAU,CAACC,EAAOC,IAAiDD,GAAQ/C,MAC3E8C,GAAWG,GAAoEA,EACzEA,EAAShE,QAAQE,OAAOM,GAAcgB,KAAKf,GACzCwB,GAAU1B,GAAYA,EAAS0D,SAAS,OAAOC,QAC3C,CAACC,EAAMC,SACFD,KACAC,EAAQC,OAEbd,MAGNxC,EAASwC,KAdvBG,EAgBQY,GAAUjD,KAAKiD,OAASA,IAKlCnD,SAEE,MAAMoD,YAAEA,GAAgBlD,KAAKoC,SAC7B,IAAIe,EAEJ,MAAO,KACDA,IACFA,EAAKC,SACLD,OAAOE,GAETF,EAAOnD,KAAKoC,SAASkB,IAAIC,EAAlBvD,CAAqCA,KAAKiD,QAC7CE,GACFD,EAAYM,OAAOL,MApCzB5B,GADCkC,kCAyBDlC,GADCmC,gCA1BUvB,KADZH,EAAU,CAAC,gBAAiBC,KAChBE,OCEAwB,EAAb,iBCTgBC,EACZ3C,EACA4C,GAEF,OAAOC,GACHnD,GAAWoD,EAAW9C,GAAS7B,GAC3B4E,GAASC,GAAUA,GAAU,CAC3BtF,QAASgC,EAAQhC,QAAQuF,OACrBC,GAAQF,GACDG,EACCH,EACA,IACKE,EACH1B,KAAM9B,EAAQE,SAASlC,UAE3BuC,MAAMmD,GAAQC,GAAQA,EAAKlD,IAAI,0BAI/CyC,GDVOF,KARZY,EAAQ,CACPC,MAAO,CACL3E,gBEJkC4E,EAEpC3E,cACE6B,MAAM,CAAE+C,OAAO,IAGjB5E,WAA2Ca,GACzCgB,MAAMgD,WAAWhE,GACjBA,EAAQhC,QAAQuC,MACZmD,GACAC,GAAQA,EAAK5F,KAAK,WAAWC,GAAWA,EAAQE,OAAOC,GAAcsC,IAAI5C,WFJ7EoG,EACAzC,MAGSwB"}