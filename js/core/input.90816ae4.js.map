{"version":3,"file":"input.90816ae4.js","sources":["../../../src/reusable/api-error-generator.ts","../../../src/reusable/multi-input.component.ts","../../../src/core/input/bootstrap-css-error.ts","../../../src/core/input/api-errors.component.ts","../../../src/core/input/in-error.component.ts","../../../src/core/input/conduit-input-support.feature.ts","../../../src/core/input/fill-conduit-form.decorator.ts","../../../src/core/input/handle-conduit-submit-button.decorator.ts","../../../src/core/input/use-conduit-input.decorator.ts"],"sourcesContent":["import { overEntries } from '@proc7ts/a-iterable';\nimport { FnContextKey, FnContextRef } from '@proc7ts/context-values/updatable';\nimport { bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { ApiResponse } from '../core/api';\n\nexport type ApiErrorGenerator = (this: void, errors: ApiResponse.Errors) => Element | undefined;\n\nexport const ApiErrorGenerator: FnContextRef<[ApiResponse.Errors], Element | undefined> = (\n    /*#__PURE__*/ new FnContextKey<[ApiResponse.Errors], Element | undefined>(\n        'api-error-generator',\n        {\n          byDefault: bootstrapDefault(context => {\n\n            const document = context.get(BootstrapWindow).document;\n\n            return errors => {\n\n              let list: Element | undefined;\n\n              for (const [key, messages] of overEntries(errors)) {\n                if (!list) {\n                  list = document.createElement('ul');\n                  list.classList.add('error-messages');\n                }\n\n                const ul = list;\n\n                messages.forEach(message => {\n\n                  const li = document.createElement('li');\n\n                  li.innerText = `${key} ${message}`;\n                  ul.appendChild(li);\n                });\n              }\n\n              return list;\n            };\n          }),\n        },\n    )\n);\n","import { overArray } from '@proc7ts/a-iterable';\nimport { DeltaSet } from '@proc7ts/delta-set';\nimport { AbstractInElement, InElement } from '@proc7ts/input-aspects';\nimport { InConverter } from '@proc7ts/input-aspects/d.ts/converter';\nimport {\n  AttachShadow,\n  AttributeChanged,\n  BootstrapWindow,\n  Component,\n  ComponentContext,\n  DomProperty,\n  domPropertyPathTo,\n  ElementRenderer,\n  Render,\n} from '@wesib/wesib';\nimport { Conduit__NS } from '../core';\n\nexport class MultiInputEvent extends CustomEvent<readonly string[]> {\n}\n\nconst trailingSpace = /\\s$/;\n\n/**\n * Tags input based on [multi-input](https://github.com/samdutton/multi-input) component by Sam Dutton.\n *\n * Does not allow duplicates. Does not limit a list of allowed values. Expects values to be space-separated.\n *\n * Raises [[MultiInputEvent]] on list update.\n */\n@Component(['multi-input', Conduit__NS])\n@AttachShadow()\nexport class MultiInputComponent {\n\n  private readonly _values = new DeltaSet<string>();\n  private _input?: HTMLInputElement;\n  private _datalist?: HTMLDataListElement;\n\n  constructor(private readonly _context: ComponentContext) {\n  }\n\n  get input(): HTMLInputElement {\n    // Initialize it lazily as it may be dynamically created.\n    if (this._input) {\n      return this._input;\n    }\n\n    const { element }: { element: Element } = this._context;\n\n    this._input = element.querySelector('input')!;\n    this._input.onblur = this._input.onchange = this._handleBlur.bind(this);\n    this._input.oninput = this._handleInput.bind(this);\n    this._input.onkeydown = this._handleKeydown.bind(this);\n\n    return this._input;\n  }\n\n  get datalist(): HTMLDataListElement {\n    // Initialize it lazily as it may be dynamically created.\n    if (this._datalist) {\n      return this._datalist;\n    }\n\n    const { element }: { element: Element } = this._context;\n\n    this._datalist = element.querySelector('datalist')!;\n\n    return this._datalist;\n  }\n\n  get values(): readonly string[] {\n    return Array.from(this._values);\n  }\n\n  @DomProperty()\n  set values(values: readonly string[]) {\n    this._values.clear();\n    this._values.delta(values || []);\n  }\n\n  get readonly(): boolean {\n    return this.input.disabled || this.input.readOnly;\n  }\n\n  @AttributeChanged('disabled')\n  setDisabled(value: string | null): void {\n    if (value != null) {\n      this.input.setAttribute('disabled', value);\n    } else {\n      this.input.removeAttribute('disabled');\n    }\n  }\n\n  @AttributeChanged('readonly')\n  setReadonly(value: string | null): void {\n    if (value != null) {\n      this.input.setAttribute('readonly', value);\n    } else {\n      this.input.removeAttribute('readonly');\n    }\n  }\n\n  @Render()\n  render(): ElementRenderer {\n\n    const { contentRoot, element }: { contentRoot: Node & InnerHTML; element: Element } = this._context;\n    const { document } = this._context.get(BootstrapWindow);\n\n    contentRoot.innerHTML = `<style>\n:host {\n  border: var(--multi-input-border, 1px solid #ddd);\n  display: block;\n  overflow: hidden;\n  padding: 5px;\n}\n/* NB use of pointer-events to only allow events from the × icon */\n::slotted(div.item) {\n  background-color: var(--multi-input-item-bg-color, #dedede);\n  border: var(--multi-input-item-border, 1px solid #ccc);\n  border-radius: 2px;\n  color: #222;\n  display: inline-block;\n  font-size: var(--multi-input-item-font-size, 14px);\n  margin: 5px;\n  padding: 2px 25px 2px 5px;\n  pointer-events: none;\n  position: relative;\n  top: -1px;\n}\n/* NB pointer-events: none above */\n::slotted(div.item:hover) {\n  background-color: #eee;\n  color: black;\n}\n::slotted(input) {\n  border: none;\n  font-size: var(--multi-input-input-font-size, 14px);\n  outline: none;\n  padding: 10px 10px 10px 5px;\n}\n</style>\n<slot></slot>`;\n\n    element.insertBefore(document.createComment('[ITEMS['), this.input);\n\n    const end = element.insertBefore(document.createComment(']ITEMS]'), this.input);\n    const valueOption = (value: string): HTMLOptionElement | undefined => {\n\n      const match = value + ' ';\n\n      for (const option of overArray(this.datalist.options)) {\n        if (option.value === match) {\n          return option;\n        }\n      }\n\n      return;\n    };\n    const valueItem = (value: string): Element | undefined => {\n      for (const item of overArray(element.querySelectorAll('.item'))) {\n        if (item.textContent === value) {\n          return item;\n        }\n      }\n      return;\n    };\n\n    return () => {\n      this._values.redelta({\n        add: value => {\n          if (!valueItem(value)) {\n\n            const item = document.createElement('div');\n\n            item.className = 'item';\n            item.textContent = value;\n            item.onclick = () => {\n              if (!this.readonly) {\n                this._delete(value);\n              }\n            };\n\n            element.insertBefore(item, end);\n          }\n\n          // Remove value from datalist options.\n          // Value is added back if an item is deleted (see _delete()).\n          valueOption(value)?.remove();\n        },\n        delete: value => {\n          // Remove item\n          valueItem(value)?.remove();\n\n          // Add datalist option unless there is one already\n          if (!valueOption(value)) {\n\n            const option = document.createElement('option');\n\n            // Append space to force adding value when option selected.\n            option.value = value + ' ';\n            this.datalist.appendChild(option);\n          }\n        },\n      }).undelta();\n    };\n  }\n\n  // Called by _handleKeydown() when the value of the input is an allowed value.\n  private _add(value: string, force = false): void {\n    if (!force && !trailingSpace.test(value)) {\n      return;\n    }\n    value = value.trim();\n    if (!value) {\n      return;\n    }\n\n    this._values.add(value);\n    this.input.value = '';\n    this._sendEvent();\n  }\n\n  // Called when the × icon is tapped/clicked or\n  // by _handleKeydown() when Backspace is entered.\n  private _delete(value: string): void {\n    this._values.delete(value);\n    this._sendEvent();\n  }\n\n  // Avoid stray text remaining in the input element that's not in a div.item.\n  private _handleBlur(): void {\n\n    const { value } = this.input;\n\n    this.input.value = '';\n    this._add(value, true);\n  }\n\n  // Called when input text changes,\n  // either by entering text or selecting a datalist option.\n  private _handleInput(): void {\n    // Add a div.item\n    this._add(this.input.value);\n  }\n\n  // Called when text is entered or keys pressed in the input element.\n  private _handleKeydown(event: KeyboardEvent): void {\n\n    const value = this.input.value;\n\n    // On Backspace, delete the div.item to the left of the input\n    if (!value && event.key === 'Backspace') {\n\n      const { values } = this;\n\n      if (values.length) {\n        this._delete(values[values.length - 1]);\n      }\n\n      return;\n    }\n\n    this._add(this.input.value);\n  }\n\n  private _sendEvent(): void {\n    this._context.updateState(domPropertyPathTo('values'), this.values, this.values);\n    this._context.dispatchEvent(new MultiInputEvent('conduit:input', { bubbles: true, detail: this.values }));\n  }\n\n}\n\nexport namespace MultiInputComponent {\n\n  export interface Element extends HTMLElement {\n    values: readonly string[];\n  }\n\n  export type Control = InElement<readonly string[], Element>;\n\n}\n\nclass MultiInputControl extends AbstractInElement<readonly string[], MultiInputComponent.Element> {\n\n  constructor(\n      element: MultiInputComponent.Element,\n      {\n        aspects,\n      }: {\n        readonly aspects?: InConverter.Aspect<readonly string[]> | readonly InConverter.Aspect<readonly string[]>[];\n      } = {},\n  ) {\n    super(\n        element,\n        {\n          aspects,\n          get: () => element.values,\n          set: values => element.values = values,\n        },\n    );\n  }\n\n  protected listenForInput(\n      update: (input: InElement.Input<readonly string[]>) => void,\n  ): void {\n    this.events.on<MultiInputEvent>('conduit:input').to(event => {\n      update({ event, value: event.detail });\n    });\n  }\n\n}\n\nexport function inMultiInput(\n    element: MultiInputComponent.Element,\n    {\n      aspects,\n    }: {\n      readonly aspects?: InConverter.Aspect<readonly string[]> | readonly InConverter.Aspect<readonly string[]>[];\n    } = {},\n): MultiInputComponent.Control {\n  return new MultiInputControl(element, { aspects });\n}\n","import { nextArgs } from '@proc7ts/call-thru';\nimport { afterAll, nextAfterEvent } from '@proc7ts/fun-events';\nimport { InCssClasses, inCssError, InStatus, InValidation } from '@proc7ts/input-aspects';\n\nexport function bootstrapCssError(\n    {\n      mark = 'is-invalid',\n      when,\n    }: {\n      mark?: InCssClasses.Spec | InCssClasses.Spec[];\n      when?: string | string[];\n    } = {},\n): InCssClasses.Source {\n  return control => {\n\n    const cssClasses = control.aspect(InCssClasses);\n\n    return afterAll({\n      status: control.aspect(InStatus),\n      validity: control.aspect(InValidation),\n    }).keepThru(\n        ({\n          status: [{ touched, hasFocus }],\n          validity: [validity],\n        }) => {\n\n          const incomplete = validity.has('incomplete') || validity.has('missing');\n\n          return touched && !(hasFocus && incomplete)\n              ? nextAfterEvent(cssClasses.specs(inCssError({ mark, when })))\n              : nextArgs();\n        },\n    );\n  };\n}\n","import { nextArgs, NextCall } from '@proc7ts/call-thru';\nimport { nextAfterEvent, OnEventCallChain } from '@proc7ts/fun-events';\nimport { InValidation } from '@proc7ts/input-aspects';\nimport { HierarchyContext } from '@wesib/generic';\nimport { InputFromControl } from '@wesib/generic/input';\nimport { Component, ComponentContext, ElementRenderer, Render, StateProperty } from '@wesib/wesib';\nimport { ApiErrorGenerator } from '../../reusable';\nimport { ApiResponse } from '../api';\nimport { Conduit__NS } from '../conduit.ns';\n\nconst noApiErrors: ApiResponse.Errors = {};\n\n@Component(['api-errors', Conduit__NS])\nexport class ApiErrorsComponent {\n\n  @StateProperty()\n  errors: ApiResponse.Errors = noApiErrors;\n\n  constructor(private readonly _context: ComponentContext) {\n    _context.get(HierarchyContext)\n        .get(InputFromControl)\n        .thru_(\n            ({ control }): NextCall<OnEventCallChain, [ApiResponse.Errors]> => {\n              if (!control) {\n                return nextArgs(noApiErrors);\n              }\n              return nextAfterEvent(\n                  control.aspect(InValidation).read().keepThru_(\n                      validity => validity.messages('api').reduce(\n                          (prev, message) => ({\n                            ...prev,\n                            ...message.api,\n                          }),\n                          noApiErrors,\n                      ),\n                  ),\n              );\n            },\n        )\n        .to(errors => this.errors = errors);\n  }\n\n  @Render()\n  render(): ElementRenderer {\n\n    const { contentRoot } = this._context;\n    let list: Element | undefined;\n\n    return () => {\n      if (list) {\n        list.remove();\n        list = undefined;\n      }\n      list = this._context.get(ApiErrorGenerator)(this.errors);\n      if (list) {\n        contentRoot.append(list);\n      }\n    };\n  }\n\n}\n","import { AfterEvent } from '@proc7ts/fun-events';\nimport { InCssClasses, inCssInfo, InStyledElement } from '@proc7ts/input-aspects';\nimport { ConvertInput } from '@wesib/generic/input';\nimport { Attributes, Component, trackAttribute } from '@wesib/wesib';\nimport { Conduit__NS } from '../conduit.ns';\nimport { bootstrapCssError } from './bootstrap-css-error';\n\n@Component(\n    ['in-error', Conduit__NS],\n    Attributes('code'),\n    ConvertInput(\n        ({ control: { control }, aspects, context }) => {\n\n          const codes: AfterEvent<[string[]]> = trackAttribute(context, 'code')\n              .read().keepThru_(\n                  code => code ? code.trim().split(/\\s+/) : [],\n              );\n\n          return codes.keepThru(\n              when => control.convert(\n                  InStyledElement.to(context.element),\n                  aspects,\n              ).setup(\n                  InCssClasses,\n                  cssClasses => {\n                    cssClasses.add(inCssInfo());\n                    cssClasses.add(bootstrapCssError({ when }));\n                  },\n              ),\n          );\n        },\n    ),\n)\nexport class InErrorComponent {}\n","import { Feature } from '@wesib/wesib';\nimport { ApiErrorsComponent } from './api-errors.component';\nimport { InErrorComponent } from './in-error.component';\n\n@Feature({\n  needs: [\n    ApiErrorsComponent,\n    InErrorComponent,\n  ],\n})\nexport class ConduitInputSupport {\n}\n","import {\n  InCssClasses,\n  inCssInfo,\n  inFormElement,\n  inGroup,\n  InGroup,\n  InMode,\n  inModeByValidity,\n} from '@proc7ts/input-aspects';\nimport { FillInputForm, FillInputFormDef } from '@wesib/generic/input';\nimport { Class, Component, ComponentClass, ComponentDecorator } from '@wesib/wesib';\nimport { HandleConduitSubmitButton, HandleConduitSubmitButtonDef } from './handle-conduit-submit-button.decorator';\n\nexport function FillConduitForm<Model extends object = any, T extends ComponentClass = Class>(\n    {\n        emptyModel = {} as Model,\n        form = {\n          makeForm({ node, aspects }) {\n\n            const group: InGroup<Model> = inGroup<Model>(emptyModel)\n                .setup(InCssClasses, classes => classes.add(inCssInfo()))\n                .setup(InMode, mode => mode.derive(inModeByValidity()));\n            const form = inFormElement(node.element, { form: group, aspects })\n                .setup(InCssClasses, classes => classes.add(group.aspect(InCssClasses)));\n\n            return [group, form];\n          },\n        },\n        button,\n    }: FillConduitFormDef<Model> = {},\n): ComponentDecorator<T> {\n  return Component(\n      FillInputForm(form),\n      HandleConduitSubmitButton(button),\n  );\n}\n\nexport interface FillConduitFormDef<Model extends object> {\n  readonly emptyModel?: Model;\n  readonly form?: FillInputFormDef;\n  readonly button?: HandleConduitSubmitButtonDef;\n}\n","import { afterAll } from '@proc7ts/fun-events';\nimport { inSubmitButton } from '@proc7ts/input-aspects';\nimport { ComponentNode, ComponentTreeSupport, ElementPickMode, HierarchyContext } from '@wesib/generic';\nimport { DefaultInAspects, InputToForm } from '@wesib/generic/input';\nimport { Class, Component, ComponentClass, ComponentDecorator } from '@wesib/wesib';\n\nexport function HandleConduitSubmitButton<T extends ComponentClass = Class>(\n    {\n      select = 'button',\n      pick = { deep: true, all: true },\n    }: HandleConduitSubmitButtonDef = {},\n): ComponentDecorator<T> {\n  return Component({\n    feature: {\n      needs: ComponentTreeSupport,\n    },\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const componentNode = context.get(ComponentNode);\n        const hierarchy = context.get(HierarchyContext);\n\n        context.whenConnected(() => {\n          afterAll({\n            form: hierarchy.get(InputToForm),\n            button: componentNode.select(select, pick).first(),\n            aspects: context.get(DefaultInAspects),\n          }).tillOff(context).consume(\n              ({\n                form: [{ control: form }],\n                button: [button],\n                aspects: [aspects],\n              }) => form && button && inSubmitButton(button.element, { form, aspects }),\n          );\n        });\n      });\n    },\n  });\n}\n\nexport interface HandleConduitSubmitButtonDef {\n  readonly select?: string;\n  readonly pick?: ElementPickMode;\n}\n","import { nextArgs, NextCall } from '@proc7ts/call-thru';\nimport { afterSupplied, EventSupply, nextAfterEvent, OnEventCallChain } from '@proc7ts/fun-events';\nimport { InControl, InCssClasses, inCssInfo, InMode } from '@proc7ts/input-aspects';\nimport { HierarchyContext } from '@wesib/generic';\nimport { InputToForm, UseInputElement, UseInputElementDef } from '@wesib/generic/input';\nimport { Class, ComponentClass, ComponentDecorator } from '@wesib/wesib';\nimport { bootstrapCssError } from './bootstrap-css-error';\n\nexport function UseConduitInput<T extends ComponentClass = Class>(\n    def: UseInputElementDef<InstanceType<T>>,\n): ComponentDecorator<T> {\n  return UseInputElement({\n    ...def,\n    makeControl(opts) {\n      return opts.context.get(HierarchyContext).get(InputToForm).keepThru_(\n          ({ form }) => {\n\n            const ctrl = def.makeControl(opts);\n\n            if (!ctrl) {\n              return nextArgs();\n            }\n            if (ctrl instanceof InControl) {\n              return augmentControl(ctrl);\n            }\n\n            return nextAfterEvent(afterSupplied(ctrl).keepThru_(\n                (control, supply): NextCall<OnEventCallChain, [InControl<any>?, EventSupply?]> => {\n                  if (!control) {\n                    return nextArgs();\n                  }\n\n                  augmentControl(control);\n\n                  return supply ? nextArgs(control, supply) : nextArgs(control);\n                },\n            ));\n\n            function augmentControl(control: InControl<any>): InControl<any> {\n              if (form) {\n                control.aspect(InMode).derive(form.aspect(InMode));\n              }\n\n              const classes = control.aspect(InCssClasses);\n\n              classes.add(inCssInfo());\n              classes.add(bootstrapCssError());\n\n              return control;\n            }\n          },\n      );\n    },\n  });\n}\n"],"names":["ApiErrorGenerator","FnContextKey","byDefault","bootstrapDefault","context","document","get","BootstrapWindow","errors","list","key","messages","overEntries","createElement","classList","add","ul","forEach","message","li","innerText","appendChild","MultiInputEvent","CustomEvent","trailingSpace","MultiInputComponent","[object Object]","_context","this","DeltaSet","input","_input","element","querySelector","onblur","onchange","_handleBlur","bind","oninput","_handleInput","onkeydown","_handleKeydown","datalist","_datalist","values","Array","from","_values","clear","delta","readonly","disabled","readOnly","value","setAttribute","removeAttribute","contentRoot","innerHTML","insertBefore","createComment","end","valueOption","match","option","overArray","options","valueItem","item","querySelectorAll","textContent","redelta","className","onclick","_delete","remove","delete","undelta","force","test","trim","_sendEvent","_add","event","length","updateState","domPropertyPathTo","dispatchEvent","bubbles","detail","__decorate","DomProperty","AttributeChanged","Render","Component","Conduit__NS","AttachShadow","MultiInputControl","AbstractInElement","aspects","super","set","update","events","on","to","inMultiInput","bootstrapCssError","mark","when","control","cssClasses","aspect","InCssClasses","afterAll","status","InStatus","validity","InValidation","keepThru","touched","hasFocus","incomplete","has","nextArgs","nextAfterEvent","specs","inCssError","noApiErrors","ApiErrorsComponent","HierarchyContext","InputFromControl","thru_","read","keepThru_","reduce","prev","api","undefined","append","StateProperty","InErrorComponent","Attributes","ConvertInput","trackAttribute","code","split","convert","InStyledElement","setup","inCssInfo","ConduitInputSupport","FillConduitForm","emptyModel","form","node","group","inGroup","classes","InMode","mode","derive","inModeByValidity","inFormElement","button","FillInputForm","select","pick","deep","all","feature","needs","ComponentTreeSupport","defContext","whenComponent","componentNode","ComponentNode","hierarchy","whenConnected","InputToForm","first","DefaultInAspects","tillOff","consume","inSubmitButton","HandleConduitSubmitButton","UseConduitInput","def","UseInputElement","makeControl","opts","ctrl","InControl","augmentControl","afterSupplied","supply","Feature"],"mappings":"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"}