{"version":3,"file":"input.5459c5de.js","sources":["../../../src/core/input/api-error-generator.ts","../../../src/core/input/bootstrap-css-error.ts","../../../src/core/input/api-errors.component.ts","../../../src/core/input/in-error.component.ts","../../../src/core/input/conduit-input-support.feature.ts","../../../src/core/input/fill-conduit-form.decorator.ts","../../../src/core/input/handle-conduit-submit-button.decorator.ts","../../../src/core/input/use-conduit-input.decorator.ts"],"sourcesContent":["import { bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { AIterable, overEntries } from 'a-iterable';\nimport { FnContextKey, FnContextRef } from 'context-values/updatable';\nimport { ApiResponse } from '../api';\n\nexport type ApiErrorGenerator = (this: void, errors: ApiResponse.Errors) => Element | undefined;\n\nexport const ApiErrorGenerator: FnContextRef<[ApiResponse.Errors], Element | undefined> = (\n    /*#__PURE__*/ new FnContextKey<[ApiResponse.Errors], Element | undefined>(\n        'api-error-generator',\n        {\n          byDefault: bootstrapDefault(context => {\n\n            const document = context.get(BootstrapWindow).document;\n\n            return errors => {\n\n              let list: Element | undefined;\n\n              AIterable.from(overEntries(errors)).forEach(\n                  ([key, messages]) => {\n                    if (!list) {\n                      list = document.createElement('ul');\n                      list.classList.add('error-messages');\n                    }\n\n                    const ul = list;\n\n                    messages.forEach(message => {\n\n                      const li = document.createElement('li');\n\n                      li.innerText = `${key} ${message}`;\n                      ul.appendChild(li);\n                    });\n                  },\n              );\n\n              return list;\n            };\n          }),\n        },\n    )\n);\n","import { nextArgs } from 'call-thru';\nimport { afterAll, nextAfterEvent } from 'fun-events';\nimport { InCssClasses, inCssError, InStatus, InValidation } from 'input-aspects';\n\nexport function bootstrapCssError(\n    {\n      mark = 'is-invalid',\n      when,\n    }: {\n      mark?: InCssClasses.Spec | InCssClasses.Spec[];\n      when?: string | string[];\n    } = {},\n): InCssClasses.Source {\n  return control => {\n\n    const cssClasses = control.aspect(InCssClasses);\n\n    return afterAll({\n      status: control.aspect(InStatus),\n      validity: control.aspect(InValidation),\n    }).keep.thru(\n        ({\n          status: [{ touched, hasFocus }],\n          validity: [validity],\n        }) => {\n\n          const incomplete = validity.has('incomplete') || validity.has('missing');\n\n          return touched && !(hasFocus && incomplete)\n              ? nextAfterEvent(cssClasses.specs(inCssError({ mark, when })))\n              : nextArgs();\n        },\n    );\n  };\n}\n","import { HierarchyContext } from '@wesib/generic';\nimport { InputToForm } from '@wesib/generic/input';\nimport { Component, ComponentContext, ElementRenderer, Render, StateProperty } from '@wesib/wesib';\nimport { nextArgs, NextCall } from 'call-thru';\nimport { nextAfterEvent, OnEventCallChain } from 'fun-events';\nimport { InValidation } from 'input-aspects';\nimport { ApiResponse } from '../api';\nimport { Conduit__NS } from '../conduit.ns';\nimport { ApiErrorGenerator } from './api-error-generator';\n\nconst noApiErrors: ApiResponse.Errors = {};\n\n@Component(['api-errors', Conduit__NS])\nexport class ApiErrorsComponent {\n\n  @StateProperty()\n  errors: ApiResponse.Errors = noApiErrors;\n\n  constructor(private readonly _context: ComponentContext) {\n    _context.get(HierarchyContext)\n        .get(InputToForm)\n        .thru_(\n            ({ control }): NextCall<OnEventCallChain, [ApiResponse.Errors]> => {\n              if (!control) {\n                return nextArgs(noApiErrors);\n              }\n              return nextAfterEvent(\n                  control.aspect(InValidation).read.keep.thru_(\n                      validity => validity.messages('api').reduce(\n                          (prev, message) => ({\n                            ...prev,\n                            ...message.api,\n                          }),\n                          noApiErrors,\n                      ),\n                  ),\n              );\n            },\n        )(errors => this.errors = errors);\n  }\n\n  @Render()\n  render(): ElementRenderer {\n\n    const { contentRoot } = this._context;\n    let list: Element | undefined;\n\n    return () => {\n      if (list) {\n        list.remove();\n        list = undefined;\n      }\n      list = this._context.get(ApiErrorGenerator)(this.errors);\n      if (list) {\n        contentRoot.append(list);\n      }\n    };\n  }\n\n}\n","import { ConvertInput } from '@wesib/generic/input';\nimport { Attributes, Component, trackAttribute } from '@wesib/wesib';\nimport { AfterEvent } from 'fun-events';\nimport { InCssClasses, inCssInfo, InStyledElement } from 'input-aspects';\nimport { Conduit__NS } from '../conduit.ns';\nimport { bootstrapCssError } from './bootstrap-css-error';\n\n@Component(\n    ['in-error', Conduit__NS],\n    Attributes('code'),\n    ConvertInput(\n        ({ control: { control }, aspects, context }) => {\n\n          const codes: AfterEvent<[string[]]> = trackAttribute(context, 'code')\n              .read.keep.thru_(\n                  code => code ? code.trim().split(/\\s+/) : [],\n              );\n\n          return codes.keep.thru(\n              when => control.convert(\n                  InStyledElement.to(context.element),\n                  aspects,\n              ).setup(\n                  InCssClasses,\n                  cssClasses => {\n                    cssClasses.add(inCssInfo());\n                    cssClasses.add(bootstrapCssError({ when }));\n                  },\n              ),\n          );\n        },\n    ),\n)\nexport class InErrorComponent {}\n","import { Feature } from '@wesib/wesib';\nimport { ApiErrorsComponent } from './api-errors.component';\nimport { InErrorComponent } from './in-error.component';\n\n@Feature({\n  needs: [\n    ApiErrorsComponent,\n    InErrorComponent,\n  ],\n})\nexport class ConduitInputSupport {\n}\n","import { FillInputForm, FillInputFormDef } from '@wesib/generic/input';\nimport { Class, Component, ComponentClass, ComponentDecorator } from '@wesib/wesib';\nimport { InCssClasses, inCssInfo, inFormElement, inGroup, InGroup, InMode, inModeByValidity } from 'input-aspects';\nimport { HandleConduitSubmitButton, HandleConduitSubmitButtonDef } from './handle-conduit-submit-button.decorator';\n\nexport function FillConduitForm<Model extends object = any, T extends ComponentClass = Class>(\n    {\n        emptyModel = {} as Model,\n        form = {\n          makeForm({ node, aspects }) {\n\n            const group: InGroup<Model> = inGroup<Model>(emptyModel)\n                .setup(InCssClasses, classes => classes.add(inCssInfo()))\n                .setup(InMode, mode => mode.derive(inModeByValidity()));\n            const form = inFormElement(node.element, { form: group, aspects })\n                .setup(InCssClasses, classes => classes.add(group.aspect(InCssClasses)));\n\n            return [group, form];\n          },\n        },\n        button,\n    }: FillConduitFormDef<Model> = {},\n): ComponentDecorator<T> {\n  return Component(\n      FillInputForm(form),\n      HandleConduitSubmitButton(button),\n  );\n}\n\nexport interface FillConduitFormDef<Model extends object> {\n  readonly emptyModel?: Model;\n  readonly form?: FillInputFormDef;\n  readonly button?: HandleConduitSubmitButtonDef;\n}\n","import { ComponentNode, ComponentTreeSupport, ElementPickMode, HierarchyContext } from '@wesib/generic';\nimport { DefaultInAspects, InputToForm } from '@wesib/generic/input';\nimport { Class, Component, ComponentClass, ComponentDecorator } from '@wesib/wesib';\nimport { afterAll } from 'fun-events';\nimport { inSubmitButton } from 'input-aspects';\n\nexport function HandleConduitSubmitButton<T extends ComponentClass = Class>(\n    {\n      select = 'button',\n      pick = { deep: true, all: true },\n    }: HandleConduitSubmitButtonDef = {},\n): ComponentDecorator<T> {\n  return Component({\n    feature: {\n      needs: ComponentTreeSupport,\n    },\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const componentNode = context.get(ComponentNode);\n        const hierarchy = context.get(HierarchyContext);\n\n        context.whenOn(supply => {\n          afterAll({\n            form: hierarchy.get(InputToForm),\n            button: componentNode.select(select, pick).first,\n            aspects: context.get(DefaultInAspects),\n          }).tillOff(supply).consume(\n              ({\n                form: [{ control: form }],\n                button: [button],\n                aspects: [aspects],\n              }) => form && button && inSubmitButton(button.element, { form, aspects }),\n          );\n        });\n      });\n    },\n  });\n}\n\nexport interface HandleConduitSubmitButtonDef {\n  readonly select?: string;\n  readonly pick?: ElementPickMode;\n}\n","import { HierarchyContext } from '@wesib/generic';\nimport { InputToForm, UseInputElement, UseInputElementDef } from '@wesib/generic/input';\nimport { Class, ComponentClass, ComponentDecorator } from '@wesib/wesib';\nimport { nextArgs, NextCall } from 'call-thru';\nimport { afterSupplied, EventSupply, nextAfterEvent, OnEventCallChain } from 'fun-events';\nimport { InControl, InCssClasses, inCssInfo, InMode } from 'input-aspects';\nimport { bootstrapCssError } from './bootstrap-css-error';\n\nexport function UseConduitInput<T extends ComponentClass = Class>(\n    def: UseInputElementDef<InstanceType<T>>,\n): ComponentDecorator<T> {\n  return UseInputElement({\n    ...def,\n    makeControl(opts) {\n      return opts.context.get(HierarchyContext).get(InputToForm).keep.thru_(\n          ({ form }) => {\n\n            const ctrl = def.makeControl(opts);\n\n            if (!ctrl) {\n              return nextArgs();\n            }\n            if (ctrl instanceof InControl) {\n              return augmentControl(ctrl);\n            }\n\n            return nextAfterEvent(afterSupplied(ctrl).keep.thru_(\n                (control, supply): NextCall<OnEventCallChain, [InControl<any>?, EventSupply?]> => {\n                  if (!control) {\n                    return nextArgs();\n                  }\n\n                  augmentControl(control);\n\n                  return supply ? nextArgs(control, supply) : nextArgs(control);\n                },\n            ));\n\n            function augmentControl(control: InControl<any>): InControl<any> {\n              if (form) {\n                control.aspect(InMode).derive(form.aspect(InMode));\n              }\n\n              const classes = control.aspect(InCssClasses);\n\n              classes.add(inCssInfo());\n              classes.add(bootstrapCssError());\n\n              return control;\n            }\n          },\n      );\n    },\n  });\n}\n"],"names":["ApiErrorGenerator","FnContextKey","byDefault","bootstrapDefault","context","document","get","BootstrapWindow","errors","list","AIterable","from","overEntries","forEach","key","messages","createElement","classList","add","ul","message","li","innerText","appendChild","bootstrapCssError","mark","when","control","cssClasses","aspect","InCssClasses","afterAll","status","InStatus","validity","InValidation","keep","thru","touched","hasFocus","incomplete","has","nextArgs","nextAfterEvent","specs","inCssError","noApiErrors","ApiErrorsComponent","[object Object]","_context","this","HierarchyContext","InputToForm","thru_","read","reduce","prev","api","contentRoot","remove","undefined","append","__decorate","StateProperty","Render","Component","Conduit__NS","InErrorComponent","Attributes","ConvertInput","aspects","trackAttribute","code","trim","split","convert","InStyledElement","to","element","setup","inCssInfo","ConduitInputSupport","FillConduitForm","emptyModel","form","node","group","inGroup","classes","InMode","mode","derive","inModeByValidity","inFormElement","button","FillInputForm","select","pick","deep","all","feature","needs","ComponentTreeSupport","defContext","whenComponent","componentNode","ComponentNode","hierarchy","whenOn","supply","first","DefaultInAspects","tillOff","consume","inSubmitButton","HandleConduitSubmitButton","UseConduitInput","def","UseInputElement","makeControl","opts","ctrl","InControl","augmentControl","afterSupplied","Feature"],"mappings":"mnBAOaA,MACSC,EACd,sBACA,CACEC,UAAWC,EAAiBC,IAE1B,MAAMC,EAAWD,EAAQE,IAAIC,GAAiBF,SAE9C,OAAOG,IAEL,IAAIC,EAqBJ,OAnBAC,EAAUC,KAAKC,EAAYJ,IAASK,QAChC,EAAEC,EAAKC,MACAN,IACHA,EAAOJ,EAASW,cAAc,MAC9BP,EAAKQ,UAAUC,IAAI,mBAGrB,MAAMC,EAAKV,EAEXM,EAASF,QAAQO,IAEf,MAAMC,EAAKhB,EAASW,cAAc,MAElCK,EAAGC,UAAY,GAAGR,KAAOM,IACzBD,EAAGI,YAAYF,OAKhBZ,gBClCLe,GACZC,KACEA,EAAO,aAAYC,KACnBA,GAIE,IAEN,OAAOC,IAEL,MAAMC,EAAaD,EAAQE,OAAOC,GAElC,OAAOC,EAAS,CACdC,OAAQL,EAAQE,OAAOI,GACvBC,SAAUP,EAAQE,OAAOM,KACxBC,KAAKC,KACJ,EACEL,SAAWM,QAAAA,EAASC,SAAAA,IACpBL,UAAWA,OAGX,MAAMM,EAAaN,EAASO,IAAI,eAAiBP,EAASO,IAAI,WAE9D,OAAOH,GAAaC,GAAYC,EAE1BE,IADAC,EAAef,EAAWgB,MAAMC,EAAW,CAAEpB,KAAAA,EAAMC,KAAAA,SAKlE,MCxBKoB,EAAkC,GAGxC,IAAaC,EAAb,MAKEC,YAA6BC,GAAAC,cAAAD,EAF7BC,YAA6BJ,EAG3BG,EAAS3C,IAAI6C,GACR7C,IAAI8C,GACJC,MACG,EAAG1B,QAAAA,KACIA,EAGEgB,EACHhB,EAAQE,OAAOM,GAAcmB,KAAKlB,KAAKiB,MACnCnB,GAAYA,EAASnB,SAAS,OAAOwC,OACjC,CAACC,EAAMpC,mCACFoC,GACApC,EAAQqC,KAEbX,KATHJ,EAASI,GAL5BG,CAmBMzC,GAAU0C,KAAK1C,OAASA,GAIhCwC,SAEE,MAAMU,YAAEA,GAAgBR,KAAKD,SAC7B,IAAIxC,EAEJ,MAAO,KACDA,IACFA,EAAKkD,SACLlD,OAAOmD,GAETnD,EAAOyC,KAAKD,SAAS3C,IAAIN,EAAlBkD,CAAqCA,KAAK1C,QAC7CC,GACFiD,EAAYG,OAAOpD,MAtCzBqD,GADCC,kCA2BDD,GADCE,gCA5BUjB,KADZkB,EAAU,CAAC,aAAcC,KACbnB,GCoBb,IAAaoB,EAAb,QAAaA,KA1BZF,EACG,CAAC,WAAYC,GACbE,EAAW,QACXC,EACI,EAAG1C,SAAWA,QAAAA,GAAW2C,QAAAA,EAASlE,QAAAA,KAEMmE,EAAenE,EAAS,QACzDkD,KAAKlB,KAAKiB,MACPmB,GAAQA,EAAOA,EAAKC,OAAOC,MAAM,OAAS,IAGrCtC,KAAKC,KACdX,GAAQC,EAAQgD,QACZC,EAAgBC,GAAGzE,EAAQ0E,SAC3BR,GACFS,MACEjD,EACAF,IACEA,EAAWV,IAAI8D,KACfpD,EAAWV,IAAIM,EAAkB,CAAEE,KAAAA,WAO1CyC,OCvBAc,EAAb,iBCLgBC,GACZC,WACIA,EAAa,GAAWC,KACxBA,EAAO,CACLpC,UAASqC,KAAEA,EAAIf,QAAEA,IAEf,MAAMgB,EAAwBC,EAAeJ,GACxCJ,MAAMjD,EAAc0D,GAAWA,EAAQtE,IAAI8D,MAC3CD,MAAMU,EAAQC,GAAQA,EAAKC,OAAOC,MACjCR,EAAOS,EAAcR,EAAKP,QAAS,CAAEM,KAAME,EAAOhB,QAAAA,IACnDS,MAAMjD,EAAc0D,GAAWA,EAAQtE,IAAIoE,EAAMzD,OAAOC,KAE7D,MAAO,CAACwD,EAAOF,KAElBU,OACDA,GAC2B,IAEjC,OAAO7B,EACH8B,EAAcX,aCjBhBY,OACEA,EAAS,SAAQC,KACjBA,EAAO,CAAEC,MAAM,EAAMC,KAAK,IACM,IAEpC,OAAOlC,EAAU,CACfmC,QAAS,CACPC,MAAOC,GAETtD,OAAOuD,GACLA,EAAWC,cAAcpG,IAEvB,MAAMqG,EAAgBrG,EAAQE,IAAIoG,GAC5BC,EAAYvG,EAAQE,IAAI6C,GAE9B/C,EAAQwG,OAAOC,IACb9E,EAAS,CACPqD,KAAMuB,EAAUrG,IAAI8C,GACpB0C,OAAQW,EAAcT,OAAOA,EAAQC,GAAMa,MAC3CxC,QAASlE,EAAQE,IAAIyG,KACpBC,QAAQH,GAAQI,QACf,EACE7B,OAASzD,QAASyD,IAClBU,QAASA,GACTxB,SAAUA,MACNc,GAAQU,GAAUoB,EAAepB,EAAOhB,QAAS,CAAEM,KAAAA,EAAMd,QAAAA,YDPvE6C,CAA0BrB,IAE/B,SEnBesB,EACZC,GAEF,OAAOC,iCACFD,IACHE,YAAYC,GACHA,EAAKpH,QAAQE,IAAI6C,GAAkB7C,IAAI8C,GAAahB,KAAKiB,MAC5D,EAAG+B,KAAAA,MAED,MAAMqC,EAAOJ,EAAIE,YAAYC,GAE7B,OAAKC,EAGDA,aAAgBC,EACXC,EAAeF,GAGjB9E,EAAeiF,EAAcH,GAAMrF,KAAKiB,MAC3C,CAAC1B,EAASkF,IACHlF,GAILgG,EAAehG,GAERkF,EAASnE,EAASf,EAASkF,GAAUnE,EAASf,IAL5Ce,MATNA,IAkBT,SAASiF,EAAehG,GAClByD,GACFzD,EAAQE,OAAO4D,GAAQE,OAAOP,EAAKvD,OAAO4D,IAG5C,MAAMD,EAAU7D,EAAQE,OAAOC,GAK/B,OAHA0D,EAAQtE,IAAI8D,KACZQ,EAAQtE,IAAIM,KAELG,QHtCRsD,KANZ4C,EAAQ,CACPxB,MAAO,CACLtD,EACAoB,MAGSc"}