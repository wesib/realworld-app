{"version":3,"file":"input.d03b332c.js","sources":["../../../src/core/input/bootstrap-css-error.ts","../../../src/core/input/api-errors.component.ts","../../../src/core/input/in-error.component.ts","../../../src/core/input/conduit-input-support.feature.ts","../../../src/core/input/fill-conduit-form.decorator.ts","../../../src/core/input/handle-conduit-submit-button.decorator.ts","../../../src/core/input/use-conduit-input.decorator.ts"],"sourcesContent":["import { nextArgs } from '@proc7ts/call-thru';\nimport { afterAll, nextAfterEvent } from '@proc7ts/fun-events';\nimport { InCssClasses, inCssError, InStatus, InValidation } from '@proc7ts/input-aspects';\n\nexport function bootstrapCssError(\n    {\n      mark = 'is-invalid',\n      when,\n    }: {\n      mark?: InCssClasses.Spec | InCssClasses.Spec[];\n      when?: string | string[];\n    } = {},\n): InCssClasses.Source {\n  return control => {\n\n    const cssClasses = control.aspect(InCssClasses);\n\n    return afterAll({\n      status: control.aspect(InStatus),\n      validity: control.aspect(InValidation),\n    }).keepThru(\n        ({\n          status: [{ touched, hasFocus }],\n          validity: [validity],\n        }) => {\n\n          const incomplete = validity.has('incomplete') || validity.has('missing');\n\n          return touched && !(hasFocus && incomplete)\n              ? nextAfterEvent(cssClasses.specs(inCssError({ mark, when })))\n              : nextArgs();\n        },\n    );\n  };\n}\n","import { nextArgs, NextCall } from '@proc7ts/call-thru';\nimport { nextAfterEvent, OnEventCallChain } from '@proc7ts/fun-events';\nimport { InValidation } from '@proc7ts/input-aspects';\nimport { HierarchyContext } from '@wesib/generic';\nimport { InputFromControl } from '@wesib/generic/input';\nimport { Component, ComponentContext, ElementRenderer, Render, StateProperty } from '@wesib/wesib';\nimport { ApiErrorGenerator } from '../../reusable';\nimport { ApiResponse } from '../api';\nimport { Conduit__NS } from '../conduit.ns';\n\nconst noApiErrors: ApiResponse.Errors = {};\n\n@Component(['api-errors', Conduit__NS])\nexport class ApiErrorsComponent {\n\n  @StateProperty()\n  errors: ApiResponse.Errors = noApiErrors;\n\n  constructor(private readonly _context: ComponentContext) {\n    _context.get(HierarchyContext)\n        .get(InputFromControl)\n        .thru_(\n            ({ control }): NextCall<OnEventCallChain, [ApiResponse.Errors]> => {\n              if (!control) {\n                return nextArgs(noApiErrors);\n              }\n              return nextAfterEvent(\n                  control.aspect(InValidation).read().keepThru_(\n                      validity => validity.messages('api').reduce(\n                          (prev, message) => ({\n                            ...prev,\n                            ...message.api,\n                          }),\n                          noApiErrors,\n                      ),\n                  ),\n              );\n            },\n        )\n        .to(errors => this.errors = errors);\n  }\n\n  @Render()\n  render(): ElementRenderer {\n\n    const { contentRoot } = this._context;\n    let list: Element | undefined;\n\n    return () => {\n      if (list) {\n        list.remove();\n        list = undefined;\n      }\n      list = this._context.get(ApiErrorGenerator)(this.errors);\n      if (list) {\n        contentRoot.append(list);\n      }\n    };\n  }\n\n}\n","import { AfterEvent } from '@proc7ts/fun-events';\nimport { InCssClasses, inCssInfo, InStyledElement } from '@proc7ts/input-aspects';\nimport { ConvertInput } from '@wesib/generic/input';\nimport { Attributes, Component, trackAttribute } from '@wesib/wesib';\nimport { Conduit__NS } from '../conduit.ns';\nimport { bootstrapCssError } from './bootstrap-css-error';\n\n@Component(\n    ['in-error', Conduit__NS],\n    Attributes('code'),\n    ConvertInput(\n        ({ control: { control }, aspects, context }) => {\n\n          const codes: AfterEvent<[string[]]> = trackAttribute(context, 'code')\n              .read().keepThru_(\n                  code => code ? code.trim().split(/\\s+/) : [],\n              );\n\n          return codes.keepThru(\n              when => control.convert(\n                  InStyledElement.to(context.element),\n                  aspects,\n              ).setup(\n                  InCssClasses,\n                  cssClasses => {\n                    cssClasses.add(inCssInfo());\n                    cssClasses.add(bootstrapCssError({ when }));\n                  },\n              ),\n          );\n        },\n    ),\n)\nexport class InErrorComponent {}\n","import { Feature } from '@wesib/wesib';\nimport { ApiErrorsComponent } from './api-errors.component';\nimport { InErrorComponent } from './in-error.component';\n\n@Feature({\n  needs: [\n    ApiErrorsComponent,\n    InErrorComponent,\n  ],\n})\nexport class ConduitInputSupport {\n}\n","import {\n  InCssClasses,\n  inCssInfo,\n  inFormElement,\n  inGroup,\n  InGroup,\n  InMode,\n  inModeByValidity,\n} from '@proc7ts/input-aspects';\nimport { Class } from '@proc7ts/primitives';\nimport { FillInputForm, FillInputFormDef } from '@wesib/generic/input';\nimport { Component, ComponentClass, ComponentDecorator } from '@wesib/wesib';\nimport { HandleConduitSubmitButton, HandleConduitSubmitButtonDef } from './handle-conduit-submit-button.decorator';\n\nexport function FillConduitForm<Model extends object = any, T extends ComponentClass = Class>(\n    {\n        emptyModel = {} as Model,\n        form = {\n          makeForm({ node, aspects }) {\n\n            const group: InGroup<Model> = inGroup<Model>(emptyModel)\n                .setup(InCssClasses, classes => classes.add(inCssInfo()))\n                .setup(InMode, mode => mode.derive(inModeByValidity()));\n            const form = inFormElement(node.element, { form: group, aspects })\n                .setup(InCssClasses, classes => classes.add(group.aspect(InCssClasses)));\n\n            return [group, form];\n          },\n        },\n        button,\n    }: FillConduitFormDef<Model> = {},\n): ComponentDecorator<T> {\n  return Component(\n      FillInputForm(form),\n      HandleConduitSubmitButton(button),\n  );\n}\n\nexport interface FillConduitFormDef<Model extends object> {\n  readonly emptyModel?: Model;\n  readonly form?: FillInputFormDef;\n  readonly button?: HandleConduitSubmitButtonDef;\n}\n","import { afterAll } from '@proc7ts/fun-events';\nimport { inSubmitButton } from '@proc7ts/input-aspects';\nimport { Class } from '@proc7ts/primitives';\nimport { ComponentNode, ElementPickMode, HierarchyContext } from '@wesib/generic';\nimport { DefaultInAspects, InputToForm } from '@wesib/generic/input';\nimport { Component, ComponentClass, ComponentDecorator } from '@wesib/wesib';\n\nexport function HandleConduitSubmitButton<T extends ComponentClass = Class>(\n    {\n      select = 'button',\n      pick = { deep: true, all: true },\n    }: HandleConduitSubmitButtonDef = {},\n): ComponentDecorator<T> {\n  return Component({\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const componentNode = context.get(ComponentNode);\n        const hierarchy = context.get(HierarchyContext);\n\n        context.whenConnected(() => {\n          afterAll({\n            form: hierarchy.get(InputToForm),\n            button: componentNode.select(select, pick).first(),\n            aspects: context.get(DefaultInAspects),\n          }).tillOff(context).consume(\n              ({\n                form: [{ control: form }],\n                button: [button],\n                aspects: [aspects],\n              }) => form && button && inSubmitButton(button.element, { form, aspects }),\n          );\n        });\n      });\n    },\n  });\n}\n\nexport interface HandleConduitSubmitButtonDef {\n  readonly select?: string;\n  readonly pick?: ElementPickMode;\n}\n","import { nextArgs, NextCall } from '@proc7ts/call-thru';\nimport { afterSupplied, EventSupply, nextAfterEvent, OnEventCallChain } from '@proc7ts/fun-events';\nimport { InControl, InCssClasses, inCssInfo, InMode } from '@proc7ts/input-aspects';\nimport { Class } from '@proc7ts/primitives';\nimport { HierarchyContext } from '@wesib/generic';\nimport { InputToForm, UseInputElement, UseInputElementDef } from '@wesib/generic/input';\nimport { ComponentClass, ComponentDecorator } from '@wesib/wesib';\nimport { bootstrapCssError } from './bootstrap-css-error';\n\nexport function UseConduitInput<T extends ComponentClass = Class>(\n    def: UseInputElementDef<InstanceType<T>>,\n): ComponentDecorator<T> {\n  return UseInputElement({\n    ...def,\n    makeControl(opts) {\n      return opts.context.get(HierarchyContext).get(InputToForm).keepThru_(\n          ({ form }) => {\n\n            const ctrl = def.makeControl(opts);\n\n            if (!ctrl) {\n              return nextArgs();\n            }\n            if (ctrl instanceof InControl) {\n              return augmentControl(ctrl);\n            }\n\n            return nextAfterEvent(afterSupplied(ctrl).keepThru_(\n                (control, supply): NextCall<OnEventCallChain, [InControl<any>?, EventSupply?]> => {\n                  if (!control) {\n                    return nextArgs();\n                  }\n\n                  augmentControl(control);\n\n                  return supply ? nextArgs(control, supply) : nextArgs(control);\n                },\n            ));\n\n            function augmentControl(control: InControl<any>): InControl<any> {\n              if (form) {\n                control.aspect(InMode).derive(form.aspect(InMode));\n              }\n\n              const classes = control.aspect(InCssClasses);\n\n              classes.add(inCssInfo());\n              classes.add(bootstrapCssError());\n\n              return control;\n            }\n          },\n      );\n    },\n  });\n}\n"],"names":["bootstrapCssError","mark","when","control","cssClasses","aspect","InCssClasses","afterAll","status","InStatus","validity","InValidation","keepThru","touched","hasFocus","incomplete","has","nextArgs","nextAfterEvent","specs","inCssError","noApiErrors","ApiErrorsComponent","[object Object]","_context","this","get","HierarchyContext","InputFromControl","thru_","read","keepThru_","messages","reduce","prev","message","api","to","errors","contentRoot","list","remove","undefined","ApiErrorGenerator","append","__decorate","StateProperty","Render","Component","Conduit__NS","InErrorComponent","Attributes","ConvertInput","aspects","context","trackAttribute","code","trim","split","convert","InStyledElement","element","setup","add","inCssInfo","ConduitInputSupport","Feature","needs","FillConduitForm","emptyModel","form","node","group","inGroup","classes","InMode","mode","derive","inModeByValidity","inFormElement","button","FillInputForm","select","pick","deep","all","defContext","whenComponent","componentNode","ComponentNode","hierarchy","whenConnected","InputToForm","first","DefaultInAspects","tillOff","consume","inSubmitButton","HandleConduitSubmitButton","UseConduitInput","def","UseInputElement","makeControl","opts","ctrl","InControl","augmentControl","afterSupplied","supply"],"mappings":"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"}