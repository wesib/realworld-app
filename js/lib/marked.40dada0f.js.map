{"version":3,"file":"marked.40dada0f.js","sources":["../../../../../node_modules/marked/lib/marked.esm.js"],"sourcesContent":["/**\n * marked - a markdown parser\n * Copyright (c) 2011-2020, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar defaults = createCommonjsModule(function (module) {\nfunction getDefaults() {\n  return {\n    baseUrl: null,\n    breaks: false,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nfunction changeDefaults(newDefaults) {\n  module.exports.defaults = newDefaults;\n}\n\nmodule.exports = {\n  defaults: getDefaults(),\n  getDefaults,\n  changeDefaults\n};\n});\nvar defaults_1 = defaults.defaults;\nvar defaults_2 = defaults.getDefaults;\nvar defaults_3 = defaults.changeDefaults;\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = /[&<>\"']/g;\nconst escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nconst escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n  regex = regex.source || regex;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction merge(obj) {\n  let i = 1,\n    target,\n    key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n// Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n// /c*$/ is vulnerable to REDOS.\n// invert: Remove suffix of non-c chars instead. Default falsey.\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.substr(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\nvar helpers = {\n  escape,\n  unescape,\n  edit,\n  cleanUrl,\n  resolveUrl,\n  noopTest,\n  merge,\n  splitCells,\n  rtrim,\n  findClosingBracket,\n  checkSanitizeDeprecation\n};\n\nconst { defaults: defaults$1 } = defaults;\nconst {\n  rtrim: rtrim$1,\n  splitCells: splitCells$1,\n  escape: escape$1,\n  findClosingBracket: findClosingBracket$1\n} = helpers;\n\nfunction outputLink(cap, link, raw) {\n  const href = link.href;\n  const title = link.title ? escape$1(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    return {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text\n    };\n  } else {\n    return {\n      type: 'image',\n      raw,\n      href,\n      title,\n      text: escape$1(text)\n    };\n  }\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nvar Tokenizer_1 = class Tokenizer {\n  constructor(options) {\n    this.options = options || defaults$1;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap) {\n      if (cap[0].length > 1) {\n        return {\n          type: 'space',\n          raw: cap[0]\n        };\n      }\n      return { raw: '\\n' };\n    }\n  }\n\n  code(src, tokens) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const lastToken = tokens[tokens.length - 1];\n      // An indented code block cannot interrupt a paragraph.\n      if (lastToken && lastToken.type === 'paragraph') {\n        return {\n          raw: cap[0],\n          text: cap[0].trimRight()\n        };\n      }\n\n      const text = cap[0].replace(/^ {4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim$1(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim() : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text: cap[2]\n      };\n    }\n  }\n\n  nptable(src) {\n    const cap = this.rules.block.nptable.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells$1(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : [],\n        raw: cap[0]\n      };\n\n      if (item.header.length === item.align.length) {\n        let l = item.align.length;\n        let i;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.cells.length;\n        for (i = 0; i < l; i++) {\n          item.cells[i] = splitCells$1(item.cells[i], item.header.length);\n        }\n\n        return item;\n      }\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *> ?/gm, '');\n\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  list(src) {\n    const cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw = cap[0];\n      const bull = cap[2];\n      const isordered = bull.length > 1;\n      const isparen = bull[bull.length - 1] === ')';\n\n      const list = {\n        type: 'list',\n        raw,\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n\n      // Get each top-level item.\n      const itemMatch = cap[0].match(this.rules.block.item);\n\n      let next = false,\n        item,\n        space,\n        b,\n        addBack,\n        loose,\n        istask,\n        ischecked;\n\n      const l = itemMatch.length;\n      for (let i = 0; i < l; i++) {\n        item = itemMatch[i];\n        raw = item;\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+[.)]) */, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (i !== l - 1) {\n          b = this.rules.block.bullet.exec(itemMatch[i + 1])[0];\n          if (isordered ? b.length === 1 || (!isparen && b[b.length - 1] === ')')\n            : (b.length > 1 || (this.options.smartLists && b !== bull))) {\n            addBack = itemMatch.slice(i + 1).join('\\n');\n            list.raw = list.raw.substring(0, list.raw.length - addBack.length);\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        if (loose) {\n          list.loose = true;\n        }\n\n        // Check for task list items\n        istask = /^\\[[ xX]\\] /.test(item);\n        ischecked = undefined;\n        if (istask) {\n          ischecked = item[1] !== ' ';\n          item = item.replace(/^\\[[ xX]\\] +/, '');\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: istask,\n          checked: ischecked,\n          loose: loose,\n          text: item\n        });\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      return {\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape$1(cap[0])) : cap[0]\n      };\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      return {\n        tag,\n        raw: cap[0],\n        href: cap[2],\n        title: cap[3]\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells$1(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.cells.length;\n        for (i = 0; i < l; i++) {\n          item.cells[i] = splitCells$1(\n            item.cells[i].replace(/^ *\\| *| *\\| *$/g, ''),\n            item.header.length);\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1]\n      };\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      };\n    }\n  }\n\n  text(src, tokens) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      const lastToken = tokens[tokens.length - 1];\n      if (lastToken && lastToken.type === 'text') {\n        return {\n          raw: cap[0],\n          text: cap[0]\n        };\n      }\n\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0]\n      };\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape$1(cap[1])\n      };\n    }\n  }\n\n  tag(src, inLink, inRawBlock) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!inLink && /^<a /i.test(cap[0])) {\n        inLink = true;\n      } else if (inLink && /^<\\/a>/i.test(cap[0])) {\n        inLink = false;\n      }\n      if (!inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        inRawBlock = true;\n      } else if (inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink,\n        inRawBlock,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape$1(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const lastParenIndex = findClosingBracket$1(cap[2], '()');\n      if (lastParenIndex > -1) {\n        const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n        const linkLen = start + cap[1].length + lastParenIndex;\n        cap[2] = cap[2].substring(0, lastParenIndex);\n        cap[0] = cap[0].substring(0, linkLen).trim();\n        cap[3] = '';\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        } else {\n          title = '';\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n      href = href.trim().replace(/^<([\\s\\S]*)>$/, '$1');\n      const token = outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0]);\n      return token;\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n        || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link || !link.href) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      const token = outputLink(cap, link, cap[0]);\n      return token;\n    }\n  }\n\n  strong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.strong.start.exec(src);\n\n    if (match && (!match[1] || (match[1] && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar))))) {\n      maskedSrc = maskedSrc.slice(-1 * src.length);\n      const endReg = match[0] === '**' ? this.rules.inline.strong.endAst : this.rules.inline.strong.endUnd;\n\n      endReg.lastIndex = 0;\n\n      let cap;\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        cap = this.rules.inline.strong.middle.exec(maskedSrc.slice(0, match.index + 3));\n        if (cap) {\n          return {\n            type: 'strong',\n            raw: src.slice(0, cap[0].length),\n            text: src.slice(2, cap[0].length - 2)\n          };\n        }\n      }\n    }\n  }\n\n  em(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.em.start.exec(src);\n\n    if (match && (!match[1] || (match[1] && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar))))) {\n      maskedSrc = maskedSrc.slice(-1 * src.length);\n      const endReg = match[0] === '*' ? this.rules.inline.em.endAst : this.rules.inline.em.endUnd;\n\n      endReg.lastIndex = 0;\n\n      let cap;\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        cap = this.rules.inline.em.middle.exec(maskedSrc.slice(0, match.index + 2));\n        if (cap) {\n          return {\n            type: 'em',\n            raw: src.slice(0, cap[0].length),\n            text: src.slice(1, cap[0].length - 1)\n          };\n        }\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = text.startsWith(' ') && text.endsWith(' ');\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape$1(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[1]\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape$1(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape$1(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape$1(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape$1(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src, inRawBlock, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape$1(cap[0])) : cap[0];\n      } else {\n        text = escape$1(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n};\n\nconst {\n  noopTest: noopTest$1,\n  edit: edit$1,\n  merge: merge$1\n} = helpers;\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?:\\n+|$)|$)/,\n  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6}) +([^\\n]*?)(?: +#+)? *(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3})(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?\\\\?>\\\\n*' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?>\\\\n*' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\\\\n*' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (6)\n    + '|<(?!script|pre|style)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) open tag\n    + '|</(?!script|pre|style)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,\n  nptable: noopTest$1,\n  table: noopTest$1,\n  lheading: /^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit$1(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.item = /^( *)(bull) ?[^\\n]*(?:\\n(?!\\1bull ?)[^\\n]*)*/;\nblock.item = edit$1(block.item, 'gm')\n  .replace(/bull/g, block.bullet)\n  .getRegex();\n\nblock.list = edit$1(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?-->/;\nblock.html = edit$1(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit$1(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit$1(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge$1({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge$1({}, block.normal, {\n  nptable: '^ *([^|\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' *([-:]+ *\\\\|[-| :]*)' // Align\n    + '(?:\\\\n((?:(?!\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)', // Cells\n  table: '^ *\\\\|(.+)\\\\n' // Header\n    + ' *\\\\|?( *[-:]+[-| :]*)' // Align\n    + '(?:\\\\n *((?:(?!\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n});\n\nblock.gfm.nptable = edit$1(block.gfm.nptable)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.table = edit$1(block.gfm.table)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge$1({}, block.normal, {\n  html: edit$1(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *(?:#+ *)?(?:\\n+|$)/,\n  fences: noopTest$1, // fences not supported\n  paragraph: edit$1(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n});\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest$1,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(?!\\s*\\])((?:\\\\[\\[\\]]?|[^\\[\\]\\\\])+)\\]/,\n  nolink: /^!?\\[(?!\\s*\\])((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  strong: {\n    start: /^(?:(\\*\\*(?=[*punctuation]))|\\*\\*)(?![\\s])|__/, // (1) returns if starts w/ punctuation\n    middle: /^\\*\\*(?:(?:(?!overlapSkip)(?:[^*]|\\\\\\*)|overlapSkip)|\\*(?:(?!overlapSkip)(?:[^*]|\\\\\\*)|overlapSkip)*?\\*)+?\\*\\*$|^__(?![\\s])((?:(?:(?!overlapSkip)(?:[^_]|\\\\_)|overlapSkip)|_(?:(?!overlapSkip)(?:[^_]|\\\\_)|overlapSkip)*?_)+?)__$/,\n    endAst: /[^punctuation\\s]\\*\\*(?!\\*)|[punctuation]\\*\\*(?!\\*)(?:(?=[punctuation\\s]|$))/, // last char can't be punct, or final * must also be followed by punct (or endline)\n    endUnd: /[^\\s]__(?!_)(?:(?=[punctuation\\s])|$)/ // last char can't be a space, and final _ must preceed punct or \\s (or endline)\n  },\n  em: {\n    start: /^(?:(\\*(?=[punctuation]))|\\*)(?![*\\s])|_/, // (1) returns if starts w/ punctuation\n    middle: /^\\*(?:(?:(?!overlapSkip)(?:[^*]|\\\\\\*)|overlapSkip)|\\*(?:(?!overlapSkip)(?:[^*]|\\\\\\*)|overlapSkip)*?\\*)+?\\*$|^_(?![_\\s])(?:(?:(?!overlapSkip)(?:[^_]|\\\\_)|overlapSkip)|_(?:(?!overlapSkip)(?:[^_]|\\\\_)|overlapSkip)*?_)+?_$/,\n    endAst: /[^punctuation\\s]\\*(?!\\*)|[punctuation]\\*(?!\\*)(?:(?=[punctuation\\s]|$))/, // last char can't be punct, or final * must also be followed by punct (or endline)\n    endUnd: /[^\\s]_(?!_)(?:(?=[punctuation\\s])|$)/ // last char can't be a space, and final _ must preceed punct or \\s (or endline)\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest$1,\n  text: /^(`+|[^`])(?:[\\s\\S]*?(?:(?=[\\\\<!\\[`*]|\\b_|$)|[^ ](?= {2,}\\n))|(?= {2,}\\n))/,\n  punctuation: /^([\\s*punctuation])/\n};\n\n// list of punctuation marks from common mark spec\n// without * and _ to workaround cases with double emphasis\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit$1(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline._blockSkip = '\\\\[[^\\\\]]*?\\\\]\\\\([^\\\\)]*?\\\\)|`[^`]*?`|<[^>]*?>';\ninline._overlapSkip = '__[^_]*?__|\\\\*\\\\*\\\\[^\\\\*\\\\]*?\\\\*\\\\*';\n\ninline.em.start = edit$1(inline.em.start)\n  .replace(/punctuation/g, inline._punctuation)\n  .getRegex();\n\ninline.em.middle = edit$1(inline.em.middle)\n  .replace(/punctuation/g, inline._punctuation)\n  .replace(/overlapSkip/g, inline._overlapSkip)\n  .getRegex();\n\ninline.em.endAst = edit$1(inline.em.endAst, 'g')\n  .replace(/punctuation/g, inline._punctuation)\n  .getRegex();\n\ninline.em.endUnd = edit$1(inline.em.endUnd, 'g')\n  .replace(/punctuation/g, inline._punctuation)\n  .getRegex();\n\ninline.strong.start = edit$1(inline.strong.start)\n  .replace(/punctuation/g, inline._punctuation)\n  .getRegex();\n\ninline.strong.middle = edit$1(inline.strong.middle)\n  .replace(/punctuation/g, inline._punctuation)\n  .replace(/blockSkip/g, inline._blockSkip)\n  .getRegex();\n\ninline.strong.endAst = edit$1(inline.strong.endAst, 'g')\n  .replace(/punctuation/g, inline._punctuation)\n  .getRegex();\n\ninline.strong.endUnd = edit$1(inline.strong.endUnd, 'g')\n  .replace(/punctuation/g, inline._punctuation)\n  .getRegex();\n\ninline.blockSkip = edit$1(inline._blockSkip, 'g')\n  .getRegex();\n\ninline.overlapSkip = edit$1(inline._overlapSkip, 'g')\n  .getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit$1(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit$1(inline.tag)\n  .replace('comment', block._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\[<>]?|[^\\s<>\\\\])*>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit$1(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit$1(inline.reflink)\n  .replace('label', inline._label)\n  .getRegex();\n\ninline.reflinkSearch = edit$1(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge$1({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge$1({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit$1(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit$1(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge$1({}, inline.normal, {\n  escape: edit$1(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^~+(?=\\S)([\\s\\S]*?\\S)~+/,\n  text: /^(`+|[^`])(?:[\\s\\S]*?(?:(?=[\\\\<!\\[`*~]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@))|(?= {2,}\\n|[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@))/\n});\n\ninline.gfm.url = edit$1(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge$1({}, inline.gfm, {\n  br: edit$1(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit$1(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n});\n\nvar rules = {\n  block,\n  inline\n};\n\nconst { defaults: defaults$2 } = defaults;\nconst { block: block$1, inline: inline$1 } = rules;\n\n/**\n * smartypants text replacement\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nvar Lexer_1 = class Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults$2;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer_1();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n\n    const rules = {\n      block: block$1.normal,\n      inline: inline$1.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block$1.pedantic;\n      rules.inline = inline$1.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block$1.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline$1.breaks;\n      } else {\n        rules.inline = inline$1.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block: block$1,\n      inline: inline$1\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n')\n      .replace(/\\t/g, '    ');\n\n    this.blockTokens(src, this.tokens, true);\n\n    this.inline(this.tokens);\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = [], top = true) {\n    src = src.replace(/^ +$/gm, '');\n    let token, i, l, lastToken;\n\n    while (src) {\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.type) {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src, tokens)) {\n        src = src.substring(token.raw.length);\n        if (token.type) {\n          tokens.push(token);\n        } else {\n          lastToken = tokens[tokens.length - 1];\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // table no leading pipe (gfm)\n      if (token = this.tokenizer.nptable(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        token.tokens = this.blockTokens(token.text, [], top);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        l = token.items.length;\n        for (i = 0; i < l; i++) {\n          token.items[i].tokens = this.blockTokens(token.items[i].text, [], false);\n        }\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (top && (token = this.tokenizer.def(src))) {\n        src = src.substring(token.raw.length);\n        if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      if (top && (token = this.tokenizer.paragraph(src))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src, tokens)) {\n        src = src.substring(token.raw.length);\n        if (token.type) {\n          tokens.push(token);\n        } else {\n          lastToken = tokens[tokens.length - 1];\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n\n  inline(tokens) {\n    let i,\n      j,\n      k,\n      l2,\n      row,\n      token;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n      switch (token.type) {\n        case 'paragraph':\n        case 'text':\n        case 'heading': {\n          token.tokens = [];\n          this.inlineTokens(token.text, token.tokens);\n          break;\n        }\n        case 'table': {\n          token.tokens = {\n            header: [],\n            cells: []\n          };\n\n          // header\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            token.tokens.header[j] = [];\n            this.inlineTokens(token.header[j], token.tokens.header[j]);\n          }\n\n          // cells\n          l2 = token.cells.length;\n          for (j = 0; j < l2; j++) {\n            row = token.cells[j];\n            token.tokens.cells[j] = [];\n            for (k = 0; k < row.length; k++) {\n              token.tokens.cells[j][k] = [];\n              this.inlineTokens(row[k], token.tokens.cells[j][k]);\n            }\n          }\n\n          break;\n        }\n        case 'blockquote': {\n          this.inline(token.tokens);\n          break;\n        }\n        case 'list': {\n          l2 = token.items.length;\n          for (j = 0; j < l2; j++) {\n            this.inline(token.items[j].tokens);\n          }\n          break;\n        }\n      }\n    }\n\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = [], inLink = false, inRawBlock = false, prevChar = '') {\n    let token;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    while (src) {\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src, inLink, inRawBlock)) {\n        src = src.substring(token.raw.length);\n        inLink = token.inLink;\n        inRawBlock = token.inRawBlock;\n        tokens.push(token);\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        if (token.type === 'link') {\n          token.tokens = this.inlineTokens(token.text, [], true, inRawBlock);\n        }\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        if (token.type === 'link') {\n          token.tokens = this.inlineTokens(token.text, [], true, inRawBlock);\n        }\n        tokens.push(token);\n        continue;\n      }\n\n      // strong\n      if (token = this.tokenizer.strong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);\n        tokens.push(token);\n        continue;\n      }\n\n      // em\n      if (token = this.tokenizer.em(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.inlineText(src, inRawBlock, smartypants)) {\n        src = src.substring(token.raw.length);\n        prevChar = token.raw.slice(-1);\n        tokens.push(token);\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n};\n\nconst { defaults: defaults$3 } = defaults;\nconst {\n  cleanUrl: cleanUrl$1,\n  escape: escape$2\n} = helpers;\n\n/**\n * Renderer\n */\nvar Renderer_1 = class Renderer {\n  constructor(options) {\n    this.options = options || defaults$3;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape$2(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape$2(lang, true)\n      + '\">'\n      + (escaped ? code : escape$2(code, true))\n      + '</code></pre>\\n';\n  }\n\n  blockquote(quote) {\n    return '<blockquote>\\n' + quote + '</blockquote>\\n';\n  }\n\n  html(html) {\n    return html;\n  }\n\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      return '<h'\n        + level\n        + ' id=\"'\n        + this.options.headerPrefix\n        + slugger.slug(raw)\n        + '\">'\n        + text\n        + '</h'\n        + level\n        + '>\\n';\n    }\n    // ignore IDs\n    return '<h' + level + '>' + text + '</h' + level + '>\\n';\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  listitem(text) {\n    return '<li>' + text + '</li>\\n';\n  }\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  paragraph(text) {\n    return '<p>' + text + '</p>\\n';\n  }\n\n  table(header, body) {\n    if (body) body = '<tbody>' + body + '</tbody>';\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  tablerow(content) {\n    return '<tr>\\n' + content + '</tr>\\n';\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? '<' + type + ' align=\"' + flags.align + '\">'\n      : '<' + type + '>';\n    return tag + content + '</' + type + '>\\n';\n  }\n\n  // span level renderer\n  strong(text) {\n    return '<strong>' + text + '</strong>';\n  }\n\n  em(text) {\n    return '<em>' + text + '</em>';\n  }\n\n  codespan(text) {\n    return '<code>' + text + '</code>';\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  del(text) {\n    return '<del>' + text + '</del>';\n  }\n\n  link(href, title, text) {\n    href = cleanUrl$1(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + escape$2(href) + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  image(href, title, text) {\n    href = cleanUrl$1(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n};\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nvar TextRenderer_1 = class TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n};\n\n/**\n * Slugger generates header id\n */\nvar Slugger_1 = class Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  /**\n   * Convert string to unique id\n   */\n  slug(value) {\n    let slug = value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n\n    if (this.seen.hasOwnProperty(slug)) {\n      const originalSlug = slug;\n      do {\n        this.seen[originalSlug]++;\n        slug = originalSlug + '-' + this.seen[originalSlug];\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    this.seen[slug] = 0;\n\n    return slug;\n  }\n};\n\nconst { defaults: defaults$4 } = defaults;\nconst {\n  unescape: unescape$1\n} = helpers;\n\n/**\n * Parsing & Compiling\n */\nvar Parser_1 = class Parser {\n  constructor(options) {\n    this.options = options || defaults$4;\n    this.options.renderer = this.options.renderer || new Renderer_1();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer_1();\n    this.slugger = new Slugger_1();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape$1(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.tokens.header[j]),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.cells.length;\n          for (j = 0; j < l2; j++) {\n            row = token.tokens.cells[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k]),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'text') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          // TODO parse inline content if parameter markdown=1\n          out += this.renderer.html(token.text);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n};\n\nconst {\n  merge: merge$2,\n  checkSanitizeDeprecation: checkSanitizeDeprecation$1,\n  escape: escape$3\n} = helpers;\nconst {\n  getDefaults,\n  changeDefaults,\n  defaults: defaults$5\n} = defaults;\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n\n  opt = merge$2({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation$1(opt);\n\n  if (callback) {\n    const highlight = opt.highlight;\n    let tokens;\n\n    try {\n      tokens = Lexer_1.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    const done = function(err) {\n      let out;\n\n      if (!err) {\n        try {\n          out = Parser_1.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!tokens.length) return done();\n\n    let pending = 0;\n    marked.walkTokens(tokens, function(token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(() => {\n          highlight(token.text, token.lang, function(err, code) {\n            if (err) {\n              return done(err);\n            }\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n\n            pending--;\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n\n    if (pending === 0) {\n      done();\n    }\n\n    return;\n  }\n\n  try {\n    const tokens = Lexer_1.lex(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser_1.parse(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape$3(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge$2(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\n\nmarked.defaults = defaults$5;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(extension) {\n  const opts = merge$2({}, extension);\n  if (extension.renderer) {\n    const renderer = marked.defaults.renderer || new Renderer_1();\n    for (const prop in extension.renderer) {\n      const prevRenderer = renderer[prop];\n      renderer[prop] = (...args) => {\n        let ret = extension.renderer[prop].apply(renderer, args);\n        if (ret === false) {\n          ret = prevRenderer.apply(renderer, args);\n        }\n        return ret;\n      };\n    }\n    opts.renderer = renderer;\n  }\n  if (extension.tokenizer) {\n    const tokenizer = marked.defaults.tokenizer || new Tokenizer_1();\n    for (const prop in extension.tokenizer) {\n      const prevTokenizer = tokenizer[prop];\n      tokenizer[prop] = (...args) => {\n        let ret = extension.tokenizer[prop].apply(tokenizer, args);\n        if (ret === false) {\n          ret = prevTokenizer.apply(tokenizer, args);\n        }\n        return ret;\n      };\n    }\n    opts.tokenizer = tokenizer;\n  }\n  if (extension.walkTokens) {\n    const walkTokens = marked.defaults.walkTokens;\n    opts.walkTokens = (token) => {\n      extension.walkTokens(token);\n      if (walkTokens) {\n        walkTokens(token);\n      }\n    };\n  }\n  marked.setOptions(opts);\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens, callback) {\n  for (const token of tokens) {\n    callback(token);\n    switch (token.type) {\n      case 'table': {\n        for (const cell of token.tokens.header) {\n          marked.walkTokens(cell, callback);\n        }\n        for (const row of token.tokens.cells) {\n          for (const cell of row) {\n            marked.walkTokens(cell, callback);\n          }\n        }\n        break;\n      }\n      case 'list': {\n        marked.walkTokens(token.items, callback);\n        break;\n      }\n      default: {\n        if (token.tokens) {\n          marked.walkTokens(token.tokens, callback);\n        }\n      }\n    }\n  }\n};\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser_1;\nmarked.parser = Parser_1.parse;\n\nmarked.Renderer = Renderer_1;\nmarked.TextRenderer = TextRenderer_1;\n\nmarked.Lexer = Lexer_1;\nmarked.lexer = Lexer_1.lex;\n\nmarked.Tokenizer = Tokenizer_1;\n\nmarked.Slugger = Slugger_1;\n\nmarked.parse = marked;\n\nvar marked_1 = marked;\n\nexport default marked_1;\n"],"names":["module","defaults","getDefaults","baseUrl","breaks","gfm","headerIds","headerPrefix","highlight","langPrefix","mangle","pedantic","renderer","sanitize","sanitizer","silent","smartLists","smartypants","tokenizer","walkTokens","xhtml","exports","changeDefaults","newDefaults","fn","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","&","<",">","\"","'","getEscapeReplacement","ch","unescapeTest","unescape","html","replace","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","nonWordAndColonTest","originIndependentUrl","baseUrls","justDomain","protocol","domain","resolveUrl","base","href","test","rtrim","relativeBase","indexOf","str","c","invert","l","length","suffLen","currChar","substr","helpers","escape","encode","edit","regex","opt","source","obj","name","val","getRegex","RegExp","cleanUrl","prot","decodeURIComponent","e","encodeURI","noopTest","exec","merge","target","key","i","arguments","Object","prototype","hasOwnProperty","call","splitCells","tableRow","count","cells","match","offset","escaped","curr","split","splice","push","trim","findClosingBracket","b","level","checkSanitizeDeprecation","console","warn","defaults$1","rtrim$1","splitCells$1","escape$1","findClosingBracket$1","outputLink","cap","link","raw","title","text","type","Tokenizer_1","[object Object]","options","this","src","rules","block","newline","tokens","code","lastToken","trimRight","codeBlockStyle","fences","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","slice","join","indentCodeCompensation","lang","heading","depth","nptable","item","header","align","hr","blockquote","list","bull","isordered","isparen","ordered","start","loose","items","itemMatch","space","addBack","istask","ischecked","next","bullet","undefined","task","checked","pre","def","tag","table","lheading","paragraph","inline","inLink","inRawBlock","lastParenIndex","linkLen","_escapes","links","reflink","nolink","maskedSrc","prevChar","strong","punctuation","endReg","endAst","endUnd","lastIndex","middle","index","em","hasNonSpaceChars","hasSpaceCharsOnBothEnds","startsWith","endsWith","br","del","autolink","url","prevCapZero","_backpedal","noopTest$1","edit$1","merge$1","_paragraph","_label","_title","_tag","_comment","normal","reflinkSearch","_punctuation","_blockSkip","_overlapSkip","blockSkip","overlapSkip","_scheme","_email","_attribute","_href","_extended_email","defaults$2","block$1","inline$1","out","charCodeAt","Math","random","toString","Lexer_1","Lexer","create","lex","blockTokens","top","token","errMsg","error","Error","j","k","l2","row","inlineTokens","keys","includes","lastIndexOf","repeat","codespan","inlineText","defaults$3","cleanUrl$1","escape$2","Renderer_1","infostring","quote","slugger","slug","body","content","flags","TextRenderer_1","Slugger_1","seen","value","originalSlug","defaults$4","unescape$1","Parser_1","Parser","textRenderer","parse","l3","cell","itemBody","checkbox","parseInline","tablecell","tablerow","unshift","listitem","image","merge$2","checkSanitizeDeprecation$1","escape$3","defaults$5","marked","callback","done","err","pending","setTimeout","message","setOptions","use","extension","opts","prop","prevRenderer","args","ret","apply","prevTokenizer","parser","Renderer","TextRenderer","lexer","Tokenizer","Slugger","marked_1"],"mappings":"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"}