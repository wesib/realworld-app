{"version":3,"file":"dom-events.1d1a7091.js","sources":["../../../../../frontmeans/dom-events/src/on-dom-event.ts","../../../../../frontmeans/dom-events/src/dom-event-dispatcher.ts","../../../../../frontmeans/dom-events/src/processors/handle-dom-events.ts","../../../../../frontmeans/dom-events/src/processors/stop-dom-events.ts"],"sourcesContent":["import { eventReceiver, EventReceiver, OnEvent, OnEvent__symbol, onEventBy } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport type { Supply } from '@proc7ts/supply';\n\n/**\n * DOM event listener.\n *\n * DOM events are never recurrent.\n *\n * May be constructed using {@link onDomEventBy} function.\n *\n * @typeParam TEvent - Supported DOM event type.\n */\nexport type DomEventListener<TEvent extends Event> = EventReceiver<[TEvent]>;\n\n/**\n * Signature of {@link EventSender} implementation able to register DOM event listeners.\n *\n * @typeParam TEvent - Supported DOM event type.\n */\nexport interface OnDomEvent<TEvent extends Event> extends OnEvent<[TEvent]> {\n\n  /**\n   * Starts sending DOM events to the given `listener`.\n   *\n   * @param listener - Target listener of DOM events.\n   * @param opts - DOM event listener options to pass to `EventTarget.addEventListener()`.\n   *\n   * @returns A supply of DOM events from this sender to the given `listener`.\n   */\n  (listener: DomEventListener<TEvent>, opts?: AddEventListenerOptions | boolean): Supply;\n\n}\n\n/**\n * @internal\n * @hidden\n */\nconst OnDomEvent$sample = (/*#__PURE__*/ onEventBy<any>(noop));\n\n/**\n * Converts a plain DOM event listener registration function to {@link OnDomEvent} sender.\n *\n * @typeParam TEvent - Supported DOM event type.\n * @param register - A generic DOM event listener registration function.\n *\n * @returns An {@link OnDomEvent} sender registering event listeners with the given `register` function.\n */\nexport function onDomEventBy<TEvent extends Event>(\n    register: (\n        this: void,\n        listener: EventReceiver.Generic<[TEvent]>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => void,\n): OnDomEvent<TEvent> {\n\n  const onDomEvent = ((listener: DomEventListener<TEvent>, opts?: AddEventListenerOptions | boolean): Supply => {\n\n    const receiver = eventReceiver(listener);\n    const { supply } = receiver;\n\n    if (!supply.isOff) {\n      register(receiver, opts);\n    }\n\n    return supply;\n  }) as OnDomEvent<TEvent>;\n\n  onDomEvent[OnEvent__symbol] = OnDomEvent$sample[OnEvent__symbol];\n  onDomEvent.do = OnDomEvent$sample.do;\n  onDomEvent.then = OnDomEvent$sample.then;\n\n  return onDomEvent;\n}\n","import type { EventReceiver } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { Supply, SupplyPeer } from '@proc7ts/supply';\nimport { OnDomEvent, onDomEventBy } from './on-dom-event';\n\n/**\n * @internal\n * @hidden\n */\nconst OnDomEvent$context: EventReceiver.Context<any> = {\n  onRecurrent: noop,\n};\n\n/**\n * DOM event dispatcher can be used to register event listeners of particular event types and dispatch events.\n */\nexport class DomEventDispatcher implements SupplyPeer {\n\n  readonly supply: Supply = new Supply();\n\n  /**\n   * @internal\n   */\n  private readonly _target: EventTarget;\n\n  /**\n   * Constructs DOM event dispatcher for the given event target.\n   *\n   * @param target - Event target to construct event dispatcher for.\n   */\n  constructor(target: EventTarget) {\n    this._target = target;\n  }\n\n  /**\n   * Returns a sender of DOM events of the given `type`.\n   *\n   * The returned DOM event sender calls an `EventTarget.addEventListener()` to register listeners.\n   * But, in contrast, it allows to register the same listener many times.\n   *\n   * The {@link Supply event supply} returned upon event listener registration unregisters it with\n   * `EventTarget.removeEventListener()` once {@link Supply.off cut off}.\n   *\n   * @typeParam TEvent - Supported DOM event type.\n   * @param type - DOM event type name.\n   *\n   * @returns {@link OnDomEvent} sender of DOM events of the given `type`.\n   */\n  on<TEvent extends Event>(type: string): OnDomEvent<TEvent> {\n    return onDomEventBy<TEvent>((listener, opts) => {\n\n      const { supply } = listener;\n\n      supply.needs(this);\n\n      if (!supply.isOff) {\n\n        // Create unique DOM listener instance\n        const domListener: EventListener = event => listener.receive(OnDomEvent$context, event as TEvent);\n\n        this._target.addEventListener(type, domListener, opts);\n        listener.supply.whenOff(() => this._target.removeEventListener(type, domListener));\n      }\n    });\n  }\n\n  /**\n   * Dispatches the given DOM event to event target.\n   *\n   * Calls `EventTarget.dispatchEvent()` method.\n   *\n   * @param event - An event to dispatch.\n   *\n   * @returns `true` if either event's `cancelable` attribute value is `false` or its `preventDefault()` method was not\n   * invoked, or `false` otherwise. Also returns `false` when {@link supply} is cut off.\n   */\n  dispatch(event: Event): boolean {\n    return !this.supply.isOff && this._target.dispatchEvent(event);\n  }\n\n}\n","import { eventReceiver } from '@proc7ts/fun-events';\nimport { DomEventListener, OnDomEvent, onDomEventBy } from '../on-dom-event';\n\n/**\n * Creates a DOM events processor that enables or disables default DOM event handlers.\n *\n * @typeParam TEvent - DOM event type.\n * @param enable - Whether to enable default handlers. `true` to enable (default value, corresponds to specifying\n * `{ passive: true }` as a second argument to `EventTarget.addEventListener()`), or `false` to disable\n * (causes listeners to invoke an `Event.preventDefault()` method prior to event handling).\n *\n * @returns {@link OnDomEvent} mapper function.\n */\nexport function handleDomEvents<TEvent extends Event>(\n    enable = true,\n): (this: void, supplier: OnDomEvent<TEvent>) => OnDomEvent<TEvent> {\n  return enable ? listenDomEventsPassively : preventDefaultDomEventHandler;\n}\n\n/**\n * @internal\n * @hidden\n */\nfunction listenDomEventsPassively<TEvent extends Event>(supplier: OnDomEvent<TEvent>): OnDomEvent<TEvent> {\n  return onDomEventBy((\n      listener: DomEventListener<TEvent>,\n      opts?: AddEventListenerOptions | boolean,\n  ) => {\n    if (opts == null) {\n      return supplier(listener, { passive: true });\n    }\n    if (typeof opts === 'boolean') {\n      return supplier(listener, { capture: opts, passive: true });\n    }\n    if (opts.passive == null) {\n      return supplier(listener, { ...opts, passive: true });\n    }\n\n    return supplier(listener, opts);\n  });\n}\n\n/**\n * @internal\n * @hidden\n */\nfunction preventDefaultDomEventHandler<TEvent extends Event>(supplier: OnDomEvent<TEvent>): OnDomEvent<TEvent> {\n  return onDomEventBy((\n      listener: DomEventListener<TEvent>,\n      opts?: AddEventListenerOptions | boolean,\n  ) => {\n\n    const receiver = eventReceiver(listener);\n\n    return supplier(\n        {\n          supply: receiver.supply,\n          receive(context, event) {\n            event.preventDefault();\n            receiver.receive(context, event);\n          },\n        },\n        opts,\n    );\n  });\n}\n","import { eventReceiver } from '@proc7ts/fun-events';\nimport { DomEventListener, OnDomEvent, onDomEventBy } from '../on-dom-event';\n\n/**\n * Creates an {@link OnDomEvent} sender preventing further propagation of events in the capturing and bubbling phases.\n *\n * Causes listeners to invoke an [Event.stopPropagation()] method prior to event handing.\n *\n * [Event.stopPropagation()]: https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation\n *\n * @typeParam TEvent - DOM event type.\n * @param supplier - DOM events sender.\n *\n * @returns DOM events sender.\n */\nexport function stopDomEvents<TEvent extends Event>(\n    supplier: OnDomEvent<TEvent>,\n): OnDomEvent<TEvent> {\n  return onDomEventBy((\n      listener: DomEventListener<TEvent>,\n      opts?: AddEventListenerOptions | boolean,\n  ) => {\n\n    const receiver = eventReceiver(listener);\n\n    return supplier(\n        {\n          supply: receiver.supply,\n          receive(context, event) {\n            event.stopPropagation();\n            receiver.receive(context, event);\n          },\n        },\n        opts,\n    );\n  });\n}\n"],"names":["OnDomEvent$sample","onEventBy","noop","onDomEventBy","register","onDomEvent","listener","opts","receiver","eventReceiver","supply","isOff","OnEvent__symbol","do","then","OnDomEvent$context","onRecurrent","DomEventDispatcher","[object Object]","target","this","Supply","_target","type","needs","domListener","event","receive","addEventListener","whenOff","removeEventListener","dispatchEvent","handleDomEvents","enable","listenDomEventsPassively","preventDefaultDomEventHandler","supplier","passive","capture","context","preventDefault","stopDomEvents","stopPropagation"],"mappings":"4KAsCA,MAAMA,EAAmCC,EAAeC,YAUxCC,EACZC,GAOF,MAAMC,GAAeC,EAAoCC,KAEvD,MAAMC,EAAWC,EAAcH,IACzBI,OAAEA,GAAWF,EAMnB,OAJKE,EAAOC,OACVP,EAASI,EAAUD,GAGdG,GAOT,OAJAL,EAAWO,GAAmBZ,EAAkBY,GAChDP,EAAWQ,GAAKb,EAAkBa,GAClCR,EAAWS,KAAOd,EAAkBc,KAE7BT,EC/DT,MAAMU,EAAiD,CACrDC,YAAad,SAMFe,EAcXC,YAAYC,GAZHC,YAAiB,IAAIC,EAa5BD,KAAKE,QAAUH,EAiBjBD,GAAyBK,GACvB,OAAOpB,GAAqB,CAACG,EAAUC,KAErC,MAAMG,OAAEA,GAAWJ,EAInB,GAFAI,EAAOc,MAAMJ,OAERV,EAAOC,MAAO,CAGjB,MAAMc,EAA6BC,GAASpB,EAASqB,QAAQZ,EAAoBW,GAEjFN,KAAKE,QAAQM,iBAAiBL,EAAME,EAAalB,GACjDD,EAASI,OAAOmB,SAAQ,IAAMT,KAAKE,QAAQQ,oBAAoBP,EAAME,SAe3EP,SAASQ,GACP,OAAQN,KAAKV,OAAOC,OAASS,KAAKE,QAAQS,cAAcL,aChE5CM,EACZC,GAAS,GAEX,OAAOA,EAASC,EAA2BC,EAO7C,SAASD,EAA+CE,GACtD,OAAOjC,GAAa,CAChBG,EACAC,IAEU,MAARA,EACK6B,EAAS9B,EAAU,CAAE+B,SAAS,IAEnB,kBAAT9B,EACF6B,EAAS9B,EAAU,CAAEgC,QAAS/B,EAAM8B,SAAS,IAElC,MAAhB9B,EAAK8B,QACAD,EAAS9B,EAAU,IAAKC,EAAM8B,SAAS,IAGzCD,EAAS9B,EAAUC,KAQ9B,SAAS4B,EAAoDC,GAC3D,OAAOjC,GAAa,CAChBG,EACAC,KAGF,MAAMC,EAAWC,EAAcH,GAE/B,OAAO8B,EACH,CACE1B,OAAQF,EAASE,OACjBQ,QAAQqB,EAASb,GACfA,EAAMc,iBACNhC,EAASmB,QAAQY,EAASb,KAG9BnB,eC/CQkC,EACZL,GAEF,OAAOjC,GAAa,CAChBG,EACAC,KAGF,MAAMC,EAAWC,EAAcH,GAE/B,OAAO8B,EACH,CACE1B,OAAQF,EAASE,OACjBQ,QAAQqB,EAASb,GACfA,EAAMgB,kBACNlC,EAASmB,QAAQY,EAASb,KAG9BnB"}