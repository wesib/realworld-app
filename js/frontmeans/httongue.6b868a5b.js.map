{"version":3,"file":"httongue.6b868a5b.js","sources":["../../../../../frontmeans/httongue/src/escape-xml.impl.ts","../../../../../frontmeans/httongue/src/escape-xml.ts","../../../../../frontmeans/httongue/src/hyphenate.impl.ts","../../../../../frontmeans/httongue/src/hyphenate.ts"],"sourcesContent":["/**\n * @internal\n */\nconst xmlPredef: Readonly<Record<string, string>> = {\n  '\"': '&#34;',\n  '&': '&amp;',\n  '\\'': '&#39;',\n  '<': '&lt;',\n  '>': '&gt;',\n};\n\n/**\n * @internal\n */\nexport function replaceXMLPredef(char: string): string {\n  return xmlPredef[char];\n}\n","import { replaceXMLPredef } from './escape-xml.impl';\n\n/**\n * Replaces XML-unsafe characters with corresponding [predefined XML entities](https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Predefined_entities_in_XML).\n *\n * Uses the shortest possible entities representation. I.e. `&#34;` instead of `&quot;`, and `&#39;' instead of\n * `&apos;`.\n *\n * @param text - A text to escape.\n *\n * @returns XML-safe text.\n */\nexport function escapeXML(text: string): string {\n  return text.replace(/[&<>'\"]/g, replaceXMLPredef);\n}\n\n/**\n * An alias of {@link escapeXML}.\n */\nexport { escapeXML as escapeHTML };\n","/**\n * @internal\n */\nexport const uppercasePattern = /[A-Z]+/g;\n\n/**\n * @internal\n */\nexport function toHyphenLower(letters: string, offset: number, str: string): string {\n\n  const lowerCase = letters.toLowerCase();\n\n  if ((lowerCase.length > 1) && (offset + lowerCase.length < str.length)) {\n    // More than one subsequent upper-case letters, unless at the end of the string.\n    return `-${lowerCase.slice(0, -1)}-${lowerCase.slice(-1)}`;\n  }\n\n  return '-' + lowerCase;\n}\n\n/**\n * @internal\n */\nexport const hyphenateCSSName$cache = (/*#__PURE__*/ new Map<string, string>());\n","import { hyphenateCSSName$cache, toHyphenLower, uppercasePattern } from './hyphenate.impl';\n\n/**\n * Hyphenates a camel-cased name.\n *\n * Applicable to CSS property names.\n *\n * Converts:\n *\n * - `backgroundColor` to `background-color`.\n *\n *    Uppercase letters converted to lower case and prepended by hyphen,\n *\n * - `MozTransition` to `-moz-transition`.\n *\n *   The very first uppercase letter is prepended by hyphen too.\n *\n * - `MSTransition` to `-ms-transition`.\n *\n *   Subsequent upper-case letters converted to lower case. The first and the last ones prepended by hyphen.\n *\n * - `someURL` to `some-url`\n *\n *   Subsequent upper-case letters in the very end of the string converted to lower case and prepended by hyphen.\n *\n * - `color` to `color`.\n *\n *   All lower-case names remain as is.\n *\n * - `padding-left` to `padding-left`\n *\n *   Hyphens remain in place.\n *\n * @param name - Camel-cased name to hyphenate.\n *\n * @returns Hyphenated name.\n */\nexport function hyphenateName(name: string): string {\n  return name.replace(uppercasePattern, toHyphenLower);\n}\n\n/**\n * De-capitalizes a camel-cased name and hyphenates it.\n *\n * Calls {@link hyphenateName}, then removes the leading hyphen.\n *\n * Thus, e.g. `MozTransition` would be converted to `moz-transition` rather to `-moz-transition`.\n *\n * @param name - Camel-cased name to hyphenate.\n *\n * @returns Hyphenated name.\n */\nexport function hyphenateDecapName(name: string): string {\n\n  const hyphenated = hyphenateName(name);\n\n  return hyphenated.startsWith('-') ? hyphenated.substr(1) : hyphenated;\n}\n\n/**\n * Hyphenates a camel-cased CSS property key.\n *\n * Applicable to the names of `HTMLElement.style` properties, including vendor-specific ones.\n *\n * Calls {@link hyphenateName}, then replaces `ms-` prefix with `-ms-` one. Other vendor-specific prefixes are\n * capitalized, so the hyphen prefix is added already.\n *\n * Caches hyphenated names for the sake of speed.\n *\n * @param name - Camel-cased CSS property name to hyphenate.\n *\n * @returns Hyphenated CSS property name.\n */\nexport function hyphenateCSSName(name: string): string {\n\n  const found = hyphenateCSSName$cache.get(name);\n\n  if (found) {\n    return found;\n  }\n\n  let hyphenated = hyphenateName(name);\n\n  if (hyphenated.startsWith('ms-')) {\n    hyphenated = '-' + hyphenated;\n  }\n\n  hyphenateCSSName$cache.set(name, hyphenated);\n\n  return hyphenated;\n}\n"],"names":["xmlPredef","\"","&","'","<",">","replaceXMLPredef","char","escapeXML","text","replace","uppercasePattern","toHyphenLower","letters","offset","str","lowerCase","toLowerCase","length","slice","hyphenateDecapName","name","hyphenated","hyphenateName","startsWith","substr"],"mappings":"AAGA,MAAMA,EAA8C,CAClDC,IAAK,QACLC,IAAK,QACLC,IAAM,QACNC,IAAK,OACLC,IAAK,iBAMSC,EAAiBC,GAC/B,OAAOP,EAAUO,YCHHC,EAAUC,GACxB,OAAOA,EAAKC,QAAQ,WAAYJ,GCV3B,MAAMK,EAAmB,mBAKhBC,EAAcC,EAAiBC,EAAgBC,GAE7D,MAAMC,EAAYH,EAAQI,cAE1B,OAAKD,EAAUE,OAAS,GAAOJ,EAASE,EAAUE,OAASH,EAAIG,OAEtD,IAAIF,EAAUG,MAAM,GAAI,MAAMH,EAAUG,OAAO,KAGjD,IAAMH,WCmCCI,EAAmBC,GAEjC,MAAMC,WAjBsBD,GAC5B,OAAOA,EAAKX,QAAQC,EAAkBC,GAgBnBW,CAAcF,GAEjC,OAAOC,EAAWE,WAAW,KAAOF,EAAWG,OAAO,GAAKH"}